!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CSS	c,class	/classes/
!_TAG_KIND_DESCRIPTION!CSS	i,id	/identities/
!_TAG_KIND_DESCRIPTION!CSS	s,selector	/selectors/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!ReStructuredText	C,citation	/citations/
!_TAG_KIND_DESCRIPTION!ReStructuredText	H,title	/titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	S,subsection	/subsections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	T,target	/targets/
!_TAG_KIND_DESCRIPTION!ReStructuredText	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!ReStructuredText	d,substdef	/substitute definitions/
!_TAG_KIND_DESCRIPTION!ReStructuredText	h,subtitle	/sub titles/
!_TAG_KIND_DESCRIPTION!ReStructuredText	s,section	/sections/
!_TAG_KIND_DESCRIPTION!ReStructuredText	t,subsubsection	/subsubsections/
!_TAG_KIND_DESCRIPTION!SVG	d,def	/ids in defs tags/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!CSS	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!ReStructuredText	0.0	/current.age/
!_TAG_PARSER_VERSION!SVG	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/dmitriy/Projects/Upstream/pybind11/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
"'SomeClass' declared with greater visibility than the type of its field 'SomeClass::member' [-Wattributes]"	docs/faq.rst	/^"'SomeClass' declared with greater visibility than the type of its field 'SomeClass::member' [-W/;"	c	title:Frequently asked questions
"ImportError: dynamic module does not define init function"	docs/faq.rst	/^"ImportError: dynamic module does not define init function"$/;"	c	title:Frequently asked questions
"Symbol not found: ``__Py_ZeroStruct`` / ``_PyInstanceMethod_Type``"	docs/faq.rst	/^"Symbol not found: ``__Py_ZeroStruct`` \/ ``_PyInstanceMethod_Type``"$/;"	c	title:Frequently asked questions
"SystemError: dynamic module not initialized properly"	docs/faq.rst	/^"SystemError: dynamic module not initialized properly"$/;"	c	title:Frequently asked questions
"recursive template instantiation exceeded maximum depth of 256"	docs/faq.rst	/^"recursive template instantiation exceeded maximum depth of 256"$/;"	c	title:Frequently asked questions
#	docs/advanced/cast/overview.rst	/^.. [#] ``std::filesystem::path`` is converted to ``pathlib.Path`` and$/;"	C	subtitle:List of all builtin conversions
#cpp14	docs/classes.rst	/^.. [#cpp14] A compiler which supports the ``-std=c++14`` flag.$/;"	C	chapter:Overloaded methods
#f1	docs/basics.rst	/^.. [#f1] In practice, implementation and binding code will generally be located$/;"	C	chapter:Creating bindings for a simple function
#f1	docs/benchmark.rst	/^.. [#f1] http:\/\/graylab.jhu.edu\/RosettaCon2016\/PyRosetta-4.pdf$/;"	C	title:Benchmark
#f1	docs/classes.rst	/^.. [#f1] Stateless closures are those with an empty pair of brackets ``[]`` as the capture objec/;"	C	chapter:Binding lambda functions
#f2	docs/advanced/pycpp/numpy.rst	/^.. [#f2] http:\/\/docs.python.org\/3\/c-api\/buffer.html$/;"	C	chapter:Buffer protocol
#f3	docs/advanced/classes.rst	/^.. [#f3] http:\/\/docs.python.org\/3\/library\/pickle.html#pickling-class-instances$/;"	C	chapter:Pickling support
#f4	docs/advanced/classes.rst	/^.. [#f4] https:\/\/llvm.org\/docs\/HowToSetUpLLVMStyleRTTI.html$/;"	C	chapter:Custom automatic downcasters
#f4	docs/advanced/misc.rst	/^.. [#f4] http:\/\/www.sphinx-doc.org$/;"	C	chapter:Generating documentation using Sphinx
#f5	docs/advanced/classes.rst	/^.. [#f5] https:\/\/docs.python.org\/3\/library\/copy.html$/;"	C	chapter:Deepcopy support
#f5	docs/advanced/misc.rst	/^.. [#f5] http:\/\/github.com\/pybind\/python_example$/;"	C	chapter:Generating documentation using Sphinx
#f6	docs/advanced/misc.rst	/^.. [#f6] https:\/\/docs.python.org\/3\/extending\/extending.html#using-capsules$/;"	C	chapter:Partitioning code over multiple extension modules
.highlight .go	docs/_static/css/custom.css	/^.highlight .go {$/;"	c
0	.github/matchers/pylint.json	/^        {$/;"	o	array:problemMatcher.0.pattern
0	.github/matchers/pylint.json	/^        {$/;"	o	array:problemMatcher.1.pattern
0	.github/matchers/pylint.json	/^    {$/;"	o	array:problemMatcher
1	.github/matchers/pylint.json	/^    {$/;"	o	array:problemMatcher
1. Building from the source directory	.github/CONTRIBUTING.md	/^#### 1. Building from the source directory$/;"	t	subsection:Development of pybind11""Explanation of the SDist/wheel building design
1.0 (October 15, 2015)	docs/changelog.rst	/^1.0 (October 15, 2015)$/;"	c	title:Changelog
1.1 (December 7, 2015)	docs/changelog.rst	/^1.1 (December 7, 2015)$/;"	c	title:Changelog
1.2 (February 7, 2016)	docs/changelog.rst	/^1.2 (February 7, 2016)$/;"	c	title:Changelog
1.3 (March 8, 2016)	docs/changelog.rst	/^1.3 (March 8, 2016)$/;"	c	title:Changelog
1.4 (April 7, 2016)	docs/changelog.rst	/^1.4 (April 7, 2016)$/;"	c	title:Changelog
1.5 (April 21, 2016)	docs/changelog.rst	/^1.5 (April 21, 2016)$/;"	c	title:Changelog
1.6 (April 30, 2016)	docs/changelog.rst	/^1.6 (April 30, 2016)$/;"	c	title:Changelog
1.7 (April 30, 2016)	docs/changelog.rst	/^1.7 (April 30, 2016)$/;"	c	title:Changelog
1.8.0 (June 14, 2016)	docs/changelog.rst	/^1.8.0 (June 14, 2016)$/;"	c	title:Changelog
1.8.1 (July 12, 2016)	docs/changelog.rst	/^1.8.1 (July 12, 2016)$/;"	c	title:Changelog
2. Building from SDist	.github/CONTRIBUTING.md	/^### 2. Building from SDist$/;"	S	section:Development of pybind11
A	tests/test_builtin_casters.py	/^    class A:$/;"	c	function:test_bool_caster	file:	inherits:	access:private
A	tests/test_embed/external_module.cpp	/^        explicit A(int value) : v{value} {};$/;"	f	class:PYBIND11_MODULE::A	file:	access:public	signature:(int value)
A	tests/test_embed/external_module.cpp	/^    class A {$/;"	c	function:PYBIND11_MODULE	file:
A	tests/test_modules.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:(const A &)
A	tests/test_modules.cpp	/^        explicit A(int v) : v(v) { print_created(this, v); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:(int v)
A	tests/test_modules.cpp	/^    class A {$/;"	c	function:TEST_SUBMODULE	file:
A	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	e	enum:E1	file:	access:public
A	tests/test_numpy_dtypes.cpp	/^struct A {};$/;"	s	file:
A	tests/test_pytypes.py	/^    class A:$/;"	c	function:test_str	file:	inherits:	access:private
A	tests/test_smart_ptr.cpp	/^        A() { print_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:()
A	tests/test_smart_ptr.cpp	/^        A(A &&) noexcept { print_move_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:(A &&)
A	tests/test_smart_ptr.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:(const A &)
A	tests/test_smart_ptr.cpp	/^    struct A {$/;"	s	struct:__anond975f9d30111::SharedPtrRef	file:	access:public
A	tests/test_smart_ptr.cpp	/^    using A = SharedPtrRef::A;$/;"	t	function:TEST_SUBMODULE	typeref:typename:SharedPtrRef::A	file:
A	tests/test_virtual_functions.cpp	/^        A() = default;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:()
A	tests/test_virtual_functions.cpp	/^        A(const A &) = delete;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:(const A &)
A	tests/test_virtual_functions.cpp	/^        struct A {$/;"	s	class:TEST_SUBMODULE::OverrideTest	file:	access:public
A	tests/test_virtual_functions.cpp	/^    struct A {$/;"	s	function:TEST_SUBMODULE	file:
A2	tests/test_virtual_functions.cpp	/^        A2() = default;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:()
A2	tests/test_virtual_functions.cpp	/^        A2(const A2 &) = delete;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:(const A2 &)
A2	tests/test_virtual_functions.cpp	/^    struct A2 {$/;"	s	function:TEST_SUBMODULE	file:
ADD_FUNCTION	tests/cross_module_gil_utils.cpp	/^#define ADD_FUNCTION(/;"	d	file:	signature:(Name,...)
ALLSPHINXOPTS	docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALL_BASIC_TESTS	tests/test_gil_scoped.py	/^ALL_BASIC_TESTS = ($/;"	v	access:public
ALL_BASIC_TESTS_PLUS_INTENTIONAL_DEADLOCK	tests/test_gil_scoped.py	/^ALL_BASIC_TESTS_PLUS_INTENTIONAL_DEADLOCK = ALL_BASIC_TESTS + (_intentional_deadlock,)$/;"	v	access:public
API_PyArrayDescr_Type	include/pybind11/numpy.h	/^        API_PyArrayDescr_Type = 3,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_CopyInto	include/pybind11/numpy.h	/^        API_PyArray_CopyInto = 82,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_DescrConverter	include/pybind11/numpy.h	/^        API_PyArray_DescrConverter = 174,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_DescrFromScalar	include/pybind11/numpy.h	/^        API_PyArray_DescrFromScalar = 57,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_DescrFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrFromType = 45,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_DescrNewFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrNewFromType = 96,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_EquivTypes	include/pybind11/numpy.h	/^        API_PyArray_EquivTypes = 182,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_FromAny	include/pybind11/numpy.h	/^        API_PyArray_FromAny = 69,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_GetArrayParamsFromObject	include/pybind11/numpy.h	/^        API_PyArray_GetArrayParamsFromObject = 278,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_GetNDArrayCFeatureVersion	include/pybind11/numpy.h	/^        API_PyArray_GetNDArrayCFeatureVersion = 211,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_NewCopy	include/pybind11/numpy.h	/^        API_PyArray_NewCopy = 85,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_NewFromDescr	include/pybind11/numpy.h	/^        API_PyArray_NewFromDescr = 94,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_Newshape	include/pybind11/numpy.h	/^        API_PyArray_Newshape = 135,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_Resize	include/pybind11/numpy.h	/^        API_PyArray_Resize = 80,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_SetBaseObject	include/pybind11/numpy.h	/^        API_PyArray_SetBaseObject = 282$/;"	e	enum:npy_api::functions	access:public
API_PyArray_Squeeze	include/pybind11/numpy.h	/^        API_PyArray_Squeeze = 136,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_Type	include/pybind11/numpy.h	/^        API_PyArray_Type = 2,$/;"	e	enum:npy_api::functions	access:public
API_PyArray_View	include/pybind11/numpy.h	/^        API_PyArray_View = 137,$/;"	e	enum:npy_api::functions	access:public
API_PyVoidArrType_Type	include/pybind11/numpy.h	/^        API_PyVoidArrType_Type = 39,$/;"	e	enum:npy_api::functions	access:public
AR	tests/test_virtual_functions.py	/^    class AR(m.A_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.A_Repeat	access:private
AT	tests/test_virtual_functions.py	/^    class AT(m.A_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.A_Tpl	access:private
A_METHODS	tests/test_virtual_functions.cpp	/^#define A_METHODS /;"	d	file:
A_Repeat	tests/test_virtual_functions.cpp	/^    A_Repeat() = default;$/;"	p	class:A_Repeat	typeref:typename:A_METHODS	file:	access:private	signature:()
A_Repeat	tests/test_virtual_functions.cpp	/^    A_Repeat(const A_Repeat &) = delete;$/;"	p	class:A_Repeat	file:	access:private	signature:(const A_Repeat &)
A_Repeat	tests/test_virtual_functions.cpp	/^class A_Repeat {$/;"	c	file:
A_Repeat::A_Repeat	tests/test_virtual_functions.cpp	/^    A_Repeat() = default;$/;"	p	class:A_Repeat	typeref:typename:A_METHODS	file:	access:private	signature:()
A_Repeat::A_Repeat	tests/test_virtual_functions.cpp	/^    A_Repeat(const A_Repeat &) = delete;$/;"	p	class:A_Repeat	file:	access:private	signature:(const A_Repeat &)
A_Repeat::~A_Repeat	tests/test_virtual_functions.cpp	/^    virtual ~A_Repeat() = default;$/;"	p	class:A_Repeat	file:	access:private	signature:()
A_Tpl	tests/test_virtual_functions.cpp	/^    A_Tpl() = default;$/;"	p	class:A_Tpl	file:	access:private	signature:()
A_Tpl	tests/test_virtual_functions.cpp	/^    A_Tpl(const A_Tpl &) = delete;$/;"	p	class:A_Tpl	file:	access:private	signature:(const A_Tpl &)
A_Tpl	tests/test_virtual_functions.cpp	/^class A_Tpl {$/;"	c	file:
A_Tpl::A_Tpl	tests/test_virtual_functions.cpp	/^    A_Tpl() = default;$/;"	p	class:A_Tpl	file:	access:private	signature:()
A_Tpl::A_Tpl	tests/test_virtual_functions.cpp	/^    A_Tpl(const A_Tpl &) = delete;$/;"	p	class:A_Tpl	file:	access:private	signature:(const A_Tpl &)
A_Tpl::~A_Tpl	tests/test_virtual_functions.cpp	/^    virtual ~A_Tpl() = default;$/;"	p	class:A_Tpl	file:	access:private	signature:()
A_ref	tests/test_virtual_functions.cpp	/^        A &A_ref() override { PYBIND11_OVERRIDE(A &, OverrideTest, A_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A &	file:	access:public	signature:()
A_ref	tests/test_virtual_functions.cpp	/^        virtual A &A_ref() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A &	file:	access:public	signature:()
A_value	tests/test_virtual_functions.cpp	/^        A A_value() override { PYBIND11_OVERRIDE(A, OverrideTest, A_value); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A	file:	access:public	signature:()
A_value	tests/test_virtual_functions.cpp	/^        virtual A A_value() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:	access:public	signature:()
About	README.rst	/^About$/;"	c
AbstractBase	tests/test_callbacks.cpp	/^    class AbstractBase {$/;"	c	function:TEST_SUBMODULE	file:
Accepting \\*args and \\*\\*kwargs	docs/advanced/functions.rst	/^Accepting \\*args and \\*\\*kwargs$/;"	c	title:Functions
Accessing Python libraries from C++	docs/advanced/pycpp/object.rst	/^Accessing Python libraries from C++$/;"	c	title:Python types
Accessing the type object	docs/advanced/classes.rst	/^Accessing the type object$/;"	c	title:Classes
Adapted	tests/test_methods_and_attributes.cpp	/^    using Adapted$/;"	t	function:TEST_SUBMODULE	file:
Adder	tests/test_virtual_functions.cpp	/^struct Adder : AdderBase {$/;"	s	file:	inherits:AdderBase
Adder	tests/test_virtual_functions.py	/^    class Adder(m.Adder):$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:m.Adder	access:private
Adder::operator ()	tests/test_virtual_functions.cpp	/^    operator()(const Data &first, const Data &second, const DataVisitor &visitor) const override/;"	f	struct:Adder	typeref:typename:void	file:	access:public	signature:(const Data & first,const Data & second,const DataVisitor & visitor) const
AdderBase	tests/test_virtual_functions.cpp	/^    AdderBase() = default;$/;"	p	struct:AdderBase	file:	access:public	signature:()
AdderBase	tests/test_virtual_functions.cpp	/^    AdderBase(const AdderBase &) = delete;$/;"	p	struct:AdderBase	file:	access:public	signature:(const AdderBase &)
AdderBase	tests/test_virtual_functions.cpp	/^struct AdderBase {$/;"	s	file:
AdderBase::AdderBase	tests/test_virtual_functions.cpp	/^    AdderBase() = default;$/;"	p	struct:AdderBase	file:	access:public	signature:()
AdderBase::AdderBase	tests/test_virtual_functions.cpp	/^    AdderBase(const AdderBase &) = delete;$/;"	p	struct:AdderBase	file:	access:public	signature:(const AdderBase &)
AdderBase::Data	tests/test_virtual_functions.cpp	/^    struct Data {};$/;"	s	struct:AdderBase	file:	access:public
AdderBase::DataVisitor	tests/test_virtual_functions.cpp	/^    using DataVisitor = std::function<void(const Data &)>;$/;"	t	struct:AdderBase	file:	access:public
AdderBase::operator ()	tests/test_virtual_functions.cpp	/^    operator()(const Data &first, const Data &second, const DataVisitor &visitor) const$/;"	p	struct:AdderBase	typeref:typename:void	file:	access:public	signature:(const Data & first,const Data & second,const DataVisitor & visitor) const
AdderBase::~AdderBase	tests/test_virtual_functions.cpp	/^    virtual ~AdderBase() = default;$/;"	p	struct:AdderBase	file:	access:public	signature:()
Adding embedded modules	docs/advanced/embedding.rst	/^Adding embedded modules$/;"	c	title:Embedding the interpreter
Additional call policies	docs/advanced/functions.rst	/^Additional call policies$/;"	c	title:Functions
Advanced: NOPYTHON mode	docs/compiling.rst	/^Advanced: NOPYTHON mode$/;"	s	chapter:Building with CMake
Advanced: interface library targets	docs/compiling.rst	/^Advanced: interface library targets$/;"	s	chapter:Building with CMake
Alias	include/pybind11/detail/init.h	/^using Alias = typename Class::type_alias;$/;"	t	typeref:typename:Class::type_alias
AliasedHasOpNewDelSize	tests/test_class.cpp	/^        AliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:()
AliasedHasOpNewDelSize	tests/test_class.cpp	/^        AliasedHasOpNewDelSize(const AliasedHasOpNewDelSize &) = delete;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:(const AliasedHasOpNewDelSize &)
AliasedHasOpNewDelSize	tests/test_class.cpp	/^    struct AliasedHasOpNewDelSize {$/;"	s	function:TEST_SUBMODULE	file:
Aligned	tests/test_class.cpp	/^    struct alignas(1024) Aligned {$/;"	s	function:TEST_SUBMODULE	file:
Allow/Prohibiting None arguments	docs/advanced/functions.rst	/^Allow\/Prohibiting None arguments$/;"	c	title:Functions
An overview of clocks in C++11	docs/advanced/cast/chrono.rst	/^An overview of clocks in C++11$/;"	c	title:Chrono
Animal	tests/test_tagbased_polymorphic.cpp	/^    Animal(const std::string &_name, Kind _kind) : kind(_kind), name(_name) {}$/;"	f	struct:Animal	file:	access:protected	signature:(const std::string & _name,Kind _kind)
Animal	tests/test_tagbased_polymorphic.cpp	/^struct Animal {$/;"	s	file:
Animal::Animal	tests/test_tagbased_polymorphic.cpp	/^    Animal(const std::string &_name, Kind _kind) : kind(_kind), name(_name) {}$/;"	f	struct:Animal	file:	access:protected	signature:(const std::string & _name,Kind _kind)
Animal::Cat	tests/test_tagbased_polymorphic.cpp	/^        Cat = 200,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::Chihuahua	tests/test_tagbased_polymorphic.cpp	/^        Chihuahua,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::Dog	tests/test_tagbased_polymorphic.cpp	/^        Dog = 100,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::Kind	tests/test_tagbased_polymorphic.cpp	/^    enum class Kind {$/;"	g	struct:Animal	file:	access:public
Animal::Labrador	tests/test_tagbased_polymorphic.cpp	/^        Labrador,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::LastCat	tests/test_tagbased_polymorphic.cpp	/^        LastCat = 299$/;"	e	enum:Animal::Kind	file:	access:public
Animal::LastDog	tests/test_tagbased_polymorphic.cpp	/^        LastDog = 199,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::Panther	tests/test_tagbased_polymorphic.cpp	/^        Panther,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::Unknown	tests/test_tagbased_polymorphic.cpp	/^        Unknown = 0,$/;"	e	enum:Animal::Kind	file:	access:public
Animal::kind	tests/test_tagbased_polymorphic.cpp	/^    const Kind kind;$/;"	m	struct:Animal	typeref:typename:const Kind	file:	access:public
Animal::name	tests/test_tagbased_polymorphic.cpp	/^    const std::string name;$/;"	m	struct:Animal	typeref:typename:const std::string	file:	access:public
Animal::name_of_kind	tests/test_tagbased_polymorphic.cpp	/^    static std::string name_of_kind(Kind kind);$/;"	p	struct:Animal	typeref:typename:std::string	file:	access:public	signature:(Kind kind)
Animal::name_of_kind	tests/test_tagbased_polymorphic.cpp	/^std::string Animal::name_of_kind(Kind kind) {$/;"	f	class:Animal	typeref:typename:std::string	signature:(Kind kind)
Animal::type_of_kind	tests/test_tagbased_polymorphic.cpp	/^    static const std::type_info *type_of_kind(Kind kind);$/;"	p	struct:Animal	typeref:typename:const std::type_info *	file:	access:public	signature:(Kind kind)
Animal::type_of_kind	tests/test_tagbased_polymorphic.cpp	/^const std::type_info *Animal::type_of_kind(Kind kind) {$/;"	f	class:Animal	typeref:typename:const std::type_info *	signature:(Kind kind)
Animal::~Animal	tests/test_tagbased_polymorphic.cpp	/^    virtual ~Animal() = default;$/;"	p	struct:Animal	file:	access:public	signature:()
ArgAlwaysConverts	tests/test_custom_type_casters.cpp	/^class ArgAlwaysConverts {};$/;"	c	file:
ArgInspector	tests/test_custom_type_casters.cpp	/^    class ArgInspector {$/;"	c	function:TEST_SUBMODULE	file:
ArgInspector1	tests/test_custom_type_casters.cpp	/^class ArgInspector1 {$/;"	c	file:
ArgInspector1::arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 1)";$/;"	m	class:ArgInspector1	typeref:typename:std::string	file:	access:public
ArgInspector2	tests/test_custom_type_casters.cpp	/^class ArgInspector2 {$/;"	c	file:
ArgInspector2::arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 2)";$/;"	m	class:ArgInspector2	typeref:typename:std::string	file:	access:public
Array	include/pybind11/eigen/matrix.h	/^    using Array$/;"	t	struct:type_caster	access:private
ArrayClass	tests/test_numpy_array.cpp	/^        ArrayClass() { py::print("ArrayClass()"); }$/;"	f	struct:TEST_SUBMODULE::ArrayClass	file:	access:public	signature:()
ArrayClass	tests/test_numpy_array.cpp	/^    struct ArrayClass {$/;"	s	function:TEST_SUBMODULE	file:
ArrayStruct	tests/test_numpy_dtypes.cpp	/^struct ArrayStruct {$/;"	s	file:
ArrayStruct::a	tests/test_numpy_dtypes.cpp	/^    char a[3][4];$/;"	m	struct:ArrayStruct	typeref:typename:char[3][4]	file:	access:public
ArrayStruct::b	tests/test_numpy_dtypes.cpp	/^    int32_t b[2];$/;"	m	struct:ArrayStruct	typeref:typename:int32_t[2]	file:	access:public
ArrayStruct::c	tests/test_numpy_dtypes.cpp	/^    std::array<uint8_t, 3> c;$/;"	m	struct:ArrayStruct	typeref:typename:std::array<uint8_t,3>	file:	access:public
ArrayStruct::d	tests/test_numpy_dtypes.cpp	/^    std::array<float, 2> d[4];$/;"	m	struct:ArrayStruct	typeref:typename:std::array<float,2>[4]	file:	access:public
Arrays	docs/advanced/pycpp/numpy.rst	/^Arrays$/;"	c	title:NumPy
Assigning py::none() to wrappers	docs/advanced/pycpp/object.rst	/^Assigning py::none() to wrappers$/;"	s	chapter:Gotchas
AutoWIG	docs/compiling.rst	/^.. [AutoWIG] https:\/\/github.com\/StatisKit\/AutoWIG$/;"	C	chapter:Generating binding code automatically
Automatic conversion	docs/advanced/cast/stl.rst	/^Automatic conversion$/;"	c	title:STL containers
Available wrappers	docs/advanced/pycpp/object.rst	/^Available wrappers$/;"	c	title:Python types
Avoiding C++ types in docstrings	docs/advanced/misc.rst	/^Avoiding C++ types in docstrings$/;"	c	title:Miscellaneous
B	tests/test_builtin_casters.py	/^    class B:$/;"	c	function:test_bool_caster	file:	inherits:	access:private
B	tests/test_modules.cpp	/^        B() { print_default_created(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:()
B	tests/test_modules.cpp	/^        B(const B &) { print_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:(const B &)
B	tests/test_modules.cpp	/^    class B {$/;"	c	function:TEST_SUBMODULE	file:
B	tests/test_multiple_inheritance.cpp	/^        B() = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:()
B	tests/test_multiple_inheritance.cpp	/^        B(const B &) = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:(const B &)
B	tests/test_multiple_inheritance.cpp	/^    struct B {$/;"	s	function:TEST_SUBMODULE	file:
B	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	e	enum:E1	file:	access:public
B	tests/test_numpy_dtypes.cpp	/^struct B {};$/;"	s	file:
B	tests/test_smart_ptr.cpp	/^        B() { print_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:()
B	tests/test_smart_ptr.cpp	/^        B(B &&) noexcept : std::enable_shared_from_this<B>() { print_move_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:(B &&)
B	tests/test_smart_ptr.cpp	/^        B(const B &) : std::enable_shared_from_this<B>() { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:(const B &)
B	tests/test_smart_ptr.cpp	/^    struct B : std::enable_shared_from_this<B> {$/;"	s	struct:__anond975f9d30111::SharedFromThisRef	file:	inherits:std::enable_shared_from_this<B>	access:public
B	tests/test_smart_ptr.cpp	/^    using B = SharedFromThisRef::B;$/;"	t	function:TEST_SUBMODULE	typeref:typename:SharedFromThisRef::B	file:
B	tests/test_virtual_functions.py	/^    class B(m.A):$/;"	c	function:test_alias_delay_initialization1	file:	inherits:m.A	access:private
B1	tests/test_multiple_inheritance.py	/^    class B1:$/;"	c	function:test_multiple_inheritance_python	file:	inherits:	access:private
B2	tests/test_multiple_inheritance.py	/^    class B2(B1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B1	access:private
B2	tests/test_virtual_functions.py	/^    class B2(m.A2):$/;"	c	function:test_alias_delay_initialization2	file:	inherits:m.A2	access:private
B3	tests/test_multiple_inheritance.py	/^    class B3:$/;"	c	function:test_multiple_inheritance_python	file:	inherits:	access:private
B4	tests/test_multiple_inheritance.py	/^    class B4(B3, B2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B3, B2	access:private
BT	tests/test_virtual_functions.py	/^    class BT(m.B_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.B_Tpl	access:private
BUILDDIR	docs/Makefile	/^BUILDDIR      = .build$/;"	m
B_METHODS	tests/test_virtual_functions.cpp	/^#define B_METHODS /;"	d	file:
B_Repeat	tests/test_virtual_functions.cpp	/^class B_Repeat : public A_Repeat {$/;"	c	file:	inherits:A_Repeat
B_Tpl	tests/test_virtual_functions.cpp	/^class B_Tpl : public A_Tpl {$/;"	c	file:	inherits:A_Tpl
BadLen	tests/test_sequences_and_iterators.py	/^    class BadLen(RuntimeError):$/;"	c	function:test_sequence_length	file:	inherits:RuntimeError	access:private
Base	include/pybind11/operators.h	/^        using Base = typename Class::type;$/;"	t	function:op_::execute	typeref:typename:Class::type
Base	include/pybind11/operators.h	/^        using Base = typename Class::type;$/;"	t	function:op_::execute_cast	typeref:typename:Class::type
Base	include/pybind11/pybind11.h	/^    using Base = class_<Type>;$/;"	t	class:enum_	typeref:typename:class_<Type>	access:public
Base	tests/test_virtual_functions.cpp	/^    Base() = default;$/;"	p	struct:Base	file:	access:public	signature:()
Base	tests/test_virtual_functions.cpp	/^    Base(const Base &) = delete;$/;"	p	struct:Base	file:	access:public	signature:(const Base &)
Base	tests/test_virtual_functions.cpp	/^struct Base {$/;"	s	file:
Base1	tests/test_multiple_inheritance.cpp	/^        explicit Base1(int i) : i(i) {}$/;"	f	struct:TEST_SUBMODULE::Base1	file:	access:public	signature:(int i)
Base1	tests/test_multiple_inheritance.cpp	/^    struct Base1 {$/;"	s	function:TEST_SUBMODULE	file:
Base1	tests/test_multiple_inheritance.py	/^    class Base1:$/;"	c	function:test_multiple_inheritance_mix1	file:	inherits:	access:private
Base12	tests/test_multiple_inheritance.cpp	/^        Base12(int i, int j) : Base1(i), Base2(j) {}$/;"	f	struct:TEST_SUBMODULE::Base12	file:	access:public	signature:(int i,int j)
Base12	tests/test_multiple_inheritance.cpp	/^    struct Base12 : Base1, Base2 {$/;"	s	function:TEST_SUBMODULE	file:	inherits:Base1,Base2
Base12a	tests/test_multiple_inheritance.cpp	/^    Base12a(int i, int j) : Base1a(i), Base2a(j) {}$/;"	f	struct:__anon9ca8d76c0111::Base12a	file:	access:public	signature:(int i,int j)
Base12a	tests/test_multiple_inheritance.cpp	/^struct Base12a : Base1a, Base2a {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:Base1a,Base2a
Base1a	tests/test_multiple_inheritance.cpp	/^    explicit Base1a(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::Base1a	file:	access:public	signature:(int i)
Base1a	tests/test_multiple_inheritance.cpp	/^struct Base1a {$/;"	s	namespace:__anon9ca8d76c0111	file:
Base2	tests/test_multiple_inheritance.cpp	/^        explicit Base2(int i) : i(i) {}$/;"	f	struct:TEST_SUBMODULE::Base2	file:	access:public	signature:(int i)
Base2	tests/test_multiple_inheritance.cpp	/^    struct Base2 {$/;"	s	function:TEST_SUBMODULE	file:
Base2	tests/test_multiple_inheritance.py	/^    class Base2:$/;"	c	function:test_multiple_inheritance_mix2	file:	inherits:	access:private
Base2a	tests/test_multiple_inheritance.cpp	/^    explicit Base2a(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::Base2a	file:	access:public	signature:(int i)
Base2a	tests/test_multiple_inheritance.cpp	/^struct Base2a {$/;"	s	namespace:__anon9ca8d76c0111	file:
Base::Base	tests/test_virtual_functions.cpp	/^    Base() = default;$/;"	p	struct:Base	file:	access:public	signature:()
Base::Base	tests/test_virtual_functions.cpp	/^    Base(const Base &) = delete;$/;"	p	struct:Base	file:	access:public	signature:(const Base &)
Base::dispatch	tests/test_virtual_functions.cpp	/^    virtual std::string dispatch() const = 0;$/;"	p	struct:Base	typeref:typename:std::string	file:	access:public	signature:() const
Base::~Base	tests/test_virtual_functions.cpp	/^    virtual ~Base() = default;$/;"	p	struct:Base	file:	access:public	signature:()
BaseClass	tests/test_class.cpp	/^        BaseClass() = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:()
BaseClass	tests/test_class.cpp	/^        BaseClass(BaseClass &&) = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:(BaseClass &&)
BaseClass	tests/test_class.cpp	/^        BaseClass(const BaseClass &) = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:(const BaseClass &)
BaseClass	tests/test_class.cpp	/^    struct BaseClass {$/;"	s	function:TEST_SUBMODULE	file:
BaseN	tests/test_multiple_inheritance.cpp	/^    explicit BaseN(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::BaseN	file:	access:public	signature:(int i)
BaseN	tests/test_multiple_inheritance.cpp	/^struct BaseN {$/;"	s	namespace:__anon9ca8d76c0111	file:
BaseWithNested	tests/test_class.cpp	/^    struct BaseWithNested {$/;"	s	function:TEST_SUBMODULE	file:
Benchmark	docs/benchmark.rst	/^Benchmark$/;"	H
Binding STL containers	docs/advanced/cast/stl.rst	/^Binding STL containers$/;"	c	title:STL containers
Binding classes with template parameters	docs/advanced/classes.rst	/^Binding classes with template parameters$/;"	c	title:Classes
Binding final classes	docs/advanced/classes.rst	/^Binding final classes$/;"	c	title:Classes
Binding functions with template parameters	docs/advanced/functions.rst	/^Binding functions with template parameters$/;"	c	title:Functions
Binding lambda functions	docs/classes.rst	/^Binding lambda functions$/;"	c	title:Object-oriented code
Binding protected member functions	docs/advanced/classes.rst	/^Binding protected member functions$/;"	c	title:Classes
Binding sequence data types, iterators, the slicing protocol, etc.	docs/advanced/misc.rst	/^Binding sequence data types, iterators, the slicing protocol, etc.$/;"	c	title:Miscellaneous
BogusImplicitConversion	tests/test_class.cpp	/^        BogusImplicitConversion(const BogusImplicitConversion &) = default;$/;"	p	struct:TEST_SUBMODULE::BogusImplicitConversion	file:	access:public	signature:(const BogusImplicitConversion &)
BogusImplicitConversion	tests/test_class.cpp	/^    struct BogusImplicitConversion {$/;"	s	function:TEST_SUBMODULE	file:
Brace initialization	docs/advanced/classes.rst	/^Brace initialization$/;"	s	chapter:Custom constructors
BraceInitialization	tests/test_class.cpp	/^    struct BraceInitialization {$/;"	s	function:TEST_SUBMODULE	file:
Breaking changes in ``py::class_``	docs/upgrade.rst	/^Breaking changes in ``py::class_``$/;"	s	chapter:v2.0
Breaks1	tests/test_class.cpp	/^        Breaks1;$/;"	t	file:
Breaks2	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-2>, BreaksTramp<-2>, BreaksTramp<-2>> Breaks2;$/;"	t	typeref:typename:py::class_<BreaksBase<-2>,BreaksTramp<-2>,BreaksTramp<-2>>	file:
Breaks3	tests/test_class.cpp	/^        Breaks3;$/;"	t	file:
Breaks4	tests/test_class.cpp	/^    Breaks4;$/;"	t	file:
Breaks5	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-5>, BreaksTramp<-4>> Breaks5;$/;"	t	typeref:typename:py::class_<BreaksBase<-5>,BreaksTramp<-4>>	file:
Breaks8	tests/test_class.cpp	/^typedef py::class_<BreaksBase<-8>, BreaksBase<-6>, BreaksBase<-7>> Breaks8;$/;"	t	typeref:typename:py::class_<BreaksBase<-8>,BreaksBase<-6>,BreaksBase<-7>>	file:
BreaksBase	tests/test_class.cpp	/^    BreaksBase() = default;$/;"	p	class:BreaksBase	file:	access:public	signature:()
BreaksBase	tests/test_class.cpp	/^    BreaksBase(const BreaksBase &) = delete;$/;"	p	class:BreaksBase	file:	access:public	signature:(const BreaksBase &)
BreaksBase	tests/test_class.cpp	/^class BreaksBase {$/;"	c	file:
BreaksBase	tests/test_class.cpp	/^struct BreaksBase<-8> : BreaksBase<-6>, BreaksBase<-7> {};$/;"	s	file:	inherits:BreaksBase<-6>,BreaksBase<-7>
BreaksBase::BreaksBase	tests/test_class.cpp	/^    BreaksBase() = default;$/;"	p	class:BreaksBase	file:	access:public	signature:()
BreaksBase::BreaksBase	tests/test_class.cpp	/^    BreaksBase(const BreaksBase &) = delete;$/;"	p	class:BreaksBase	file:	access:public	signature:(const BreaksBase &)
BreaksBase::~BreaksBase	tests/test_class.cpp	/^    virtual ~BreaksBase() = default;$/;"	p	class:BreaksBase	file:	access:public	signature:()
BreaksTramp	tests/test_class.cpp	/^class BreaksTramp : public BreaksBase<N> {};$/;"	c	file:	inherits:BreaksBase<N>
BrokenTF1	tests/test_factory_constructors.py	/^    class BrokenTF1(m.TestFactory1):$/;"	c	function:test_invalid_self	file:	inherits:m.TestFactory1	access:private
BrokenTF6	tests/test_factory_constructors.py	/^    class BrokenTF6(m.TestFactory6):$/;"	c	function:test_invalid_self	file:	inherits:m.TestFactory6	access:private
Buffer	tests/test_buffers.cpp	/^    struct Buffer {$/;"	s	function:TEST_SUBMODULE	file:
Buffer protocol	docs/advanced/pycpp/numpy.rst	/^Buffer protocol$/;"	c	title:NumPy
BufferReadOnly	tests/test_buffers.cpp	/^        explicit BufferReadOnly(uint8_t value) : value(value) {}$/;"	f	struct:TEST_SUBMODULE::BufferReadOnly	file:	access:public	signature:(uint8_t value)
BufferReadOnly	tests/test_buffers.cpp	/^    struct BufferReadOnly {$/;"	s	function:TEST_SUBMODULE	file:
BufferReadOnlySelect	tests/test_buffers.cpp	/^    struct BufferReadOnlySelect {$/;"	s	function:TEST_SUBMODULE	file:
Build recipes	.github/CONTRIBUTING.md	/^### Build recipes$/;"	S	section:Development of pybind11
Build status	README.rst	/^.. |Build status| image:: https:\/\/ci.appveyor.com\/api\/projects\/status\/riaj54pn4h08xy40?svg/;"	d	section:License
Build systems	docs/compiling.rst	/^Build systems$/;"	H
Building manually	docs/compiling.rst	/^Building manually$/;"	c	title:Build systems
Building with Bazel	docs/compiling.rst	/^Building with Bazel$/;"	c	title:Build systems
Building with CMake	docs/compiling.rst	/^Building with CMake$/;"	c	title:Build systems
Building with cppimport	docs/compiling.rst	/^Building with cppimport$/;"	c	title:Build systems
Building with setuptools	docs/compiling.rst	/^Building with setuptools$/;"	c	title:Build systems
Built-in C++ to Python exception translation	docs/advanced/exceptions.rst	/^Built-in C++ to Python exception translation$/;"	c	title:Exceptions
C	tests/test_class.py	/^    class C(m.ProtectedB):$/;"	c	function:test_bind_protected_functions	file:	inherits:m.ProtectedB	access:private
C	tests/test_constants_and_functions.cpp	/^struct C {$/;"	s	namespace:test_exc_sp	file:
C	tests/test_pytypes.py	/^    class C:$/;"	c	function:test_weakref_err	file:	inherits:	access:private
C	tests/test_smart_ptr.cpp	/^    C() { print_created(this); }$/;"	f	struct:__anond975f9d30111::C	file:	access:public	signature:()
C	tests/test_smart_ptr.cpp	/^struct C {$/;"	s	namespace:__anond975f9d30111	file:
C++17 library containers	docs/advanced/cast/stl.rst	/^C++17 library containers$/;"	c	title:STL containers
C++17 string views	docs/advanced/cast/strings.rst	/^C++17 string views$/;"	c	title:Strings, bytes and Unicode conversions
C0	tests/test_multiple_inheritance.cpp	/^    struct C0 : public virtual B {$/;"	s	function:TEST_SUBMODULE	file:	inherits:B
C1	tests/test_multiple_inheritance.cpp	/^    struct C1 : public virtual B {$/;"	s	function:TEST_SUBMODULE	file:	inherits:B
C1	tests/test_operator_overloading.cpp	/^class C1 {};$/;"	c	file:
C2	tests/test_operator_overloading.cpp	/^class C2 {};$/;"	c	file:
CATCH_CONFIG_RUNNER	tests/test_embed/catch.cpp	/^#define CATCH_CONFIG_RUNNER$/;"	d	file:
CATCH_FOUND	tools/FindCatch.cmake	/^    set(CATCH_FOUND FALSE)$/;"	v
CATCH_FOUND	tools/FindCatch.cmake	/^set(CATCH_FOUND TRUE)$/;"	v
CATCH_INCLUDE_DIR	tools/FindCatch.cmake	/^  set(CATCH_INCLUDE_DIR$/;"	v	function:_download_catch
CATCH_VERSION	tools/FindCatch.cmake	/^    set(CATCH_VERSION$/;"	v	function:_get_catch_version
CArrayHolder	tests/test_sequences_and_iterators.cpp	/^        CArrayHolder(double x, double y, double z) {$/;"	f	class:TEST_SUBMODULE::CArrayHolder	file:	access:public	signature:(double x,double y,double z)
CArrayHolder	tests/test_sequences_and_iterators.cpp	/^    class CArrayHolder {$/;"	c	function:TEST_SUBMODULE	file:
CCR	tests/test_virtual_functions.py	/^    class CCR(CR):$/;"	c	function:test_inherited_virtuals	file:	inherits:CR	access:private
CCT	tests/test_virtual_functions.py	/^    class CCT(CT):$/;"	c	function:test_inherited_virtuals	file:	inherits:CT	access:private
CCompilerMethod	pybind11/setup_helpers.py	/^CCompilerMethod = Callable[$/;"	v	access:public
CHECK_ALIAS	tests/test_class.cpp	/^#define CHECK_ALIAS(/;"	d	file:	signature:(N)
CHECK_BASE	tests/test_class.cpp	/^#define CHECK_BASE(/;"	d	file:	signature:(N)
CHECK_BROKEN	tests/test_class.cpp	/^#define CHECK_BROKEN(/;"	d	file:	signature:(N)
CHECK_HOLDER	tests/test_class.cpp	/^#define CHECK_HOLDER(/;"	d	file:	signature:(N,TYPE)
CHECK_NOALIAS	tests/test_class.cpp	/^#define CHECK_NOALIAS(/;"	d	file:	signature:(N)
CI	README.rst	/^.. |CI| image:: https:\/\/github.com\/pybind\/pybind11\/workflows\/CI\/badge.svg$/;"	d	section:License
CMAKE_BUILD_TYPE	tests/CMakeLists.txt	/^  set(CMAKE_BUILD_TYPE$/;"	v
CMAKE_CUDA_STANDARD	tests/CMakeLists.txt	/^    set(CMAKE_CUDA_STANDARD ${CMAKE_CXX_STANDARD})$/;"	v
CMAKE_CUDA_STANDARD_REQUIRED	tests/CMakeLists.txt	/^  set(CMAKE_CUDA_STANDARD_REQUIRED ON)$/;"	v
CMAKE_CXX_EXTENSIONS	CMakeLists.txt	/^    set(CMAKE_CXX_EXTENSIONS OFF)$/;"	v
CMAKE_CXX_STANDARD	tools/pybind11Common.cmake	/^      set(CMAKE_CXX_STANDARD$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^    set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_REQUIRED_LIBRARIES	tools/pybind11Common.cmake	/^  set(CMAKE_REQUIRED_LIBRARIES ${linkerflags})$/;"	v	function:_pybind11_return_if_cxx_and_linker_flags_work
CMAKE_SIZEOF_VOID_P	CMakeLists.txt	/^    set(CMAKE_SIZEOF_VOID_P ${_PYBIND11_CMAKE_SIZEOF_VOID_P})$/;"	v
CMake doesn't detect the right Python version	docs/faq.rst	/^CMake doesn't detect the right Python version$/;"	c	title:Frequently asked questions
CMake helpers	docs/cmake/index.rst	/^CMake helpers$/;"	H
CMake support:	docs/upgrade.rst	/^CMake support:$/;"	s	chapter:v2.6
COMMON_FILE	setup.py	/^COMMON_FILE = Path("include\/pybind11\/detail\/common.h")$/;"	v	access:public
CONST_NAME_TESTS	tests/test_const_name.cpp	/^#define CONST_NAME_TESTS(/;"	d	file:	signature:(TEST_FUNC,IUT)
CONST_NAME_TESTS	tests/test_const_name.cpp	/^CONST_NAME_TESTS(const_name_tests, py::detail::const_name)$/;"	f	signature:(const_name_tests,py::detail::const_name)
CPP_NAME_FORMAT_NP_DTYPE_TABLE	tests/test_buffers.py	/^CPP_NAME_FORMAT_NP_DTYPE_TABLE = [$/;"	v	access:public
CPP_NAME_FORMAT_TABLE	tests/test_buffers.py	/^CPP_NAME_FORMAT_TABLE = [$/;"	v	access:public
CPP_NAME_NP_DTYPE_TABLE	tests/test_buffers.py	/^CPP_NAME_NP_DTYPE_TABLE = [$/;"	v	access:public
CPYTHON	tests/env.py	/^CPYTHON = platform.python_implementation() == "CPython"$/;"	v	access:public
CPython's extension docs	docs/upgrade.rst	/^.. _CPython's extension docs: https:\/\/docs.python.org\/3\/extending\/extending.html#providing-/;"	T	section:Stricter enforcement of hidden symbol visibility for pybind11 modules
CR	tests/test_virtual_functions.py	/^    class CR(m.C_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.C_Repeat	access:private
CROSS_MODULE	tests/test_gil_scoped.cpp	/^#define CROSS_MODULE(/;"	d	file:	signature:(Function)
CT	tests/test_virtual_functions.py	/^    class CT(m.C_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.C_Tpl	access:private
C_METHODS	tests/test_virtual_functions.cpp	/^#define C_METHODS /;"	d	file:
C_Repeat	tests/test_virtual_functions.cpp	/^class C_Repeat : public B_Repeat {$/;"	c	file:	inherits:B_Repeat
C_Tpl	tests/test_virtual_functions.cpp	/^class C_Tpl : public B_Tpl {$/;"	c	file:	inherits:B_Tpl
Call guard	docs/advanced/functions.rst	/^Call guard$/;"	s	chapter:Additional call policies
Callbacks and passing anonymous functions	docs/advanced/cast/functional.rst	/^Callbacks and passing anonymous functions$/;"	h	title:Functional
Calling Python functions	docs/advanced/pycpp/object.rst	/^Calling Python functions$/;"	c	title:Python types
Calling Python methods	docs/advanced/pycpp/object.rst	/^Calling Python methods$/;"	c	title:Python types
Capture	tests/conftest.py	/^class Capture:$/;"	c	inherits:	access:public
Capture.__contains__	tests/conftest.py	/^    def __contains__(self, item):$/;"	m	class:Capture	access:public	signature:(self, item)
Capture.__enter__	tests/conftest.py	/^    def __enter__(self):$/;"	m	class:Capture	access:public	signature:(self)
Capture.__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Capture	access:public	signature:(self, other)
Capture.__exit__	tests/conftest.py	/^    def __exit__(self, *args):$/;"	m	class:Capture	access:public	signature:(self, *args)
Capture.__init__	tests/conftest.py	/^    def __init__(self, capfd):$/;"	m	class:Capture	access:public	signature:(self, capfd)
Capture.__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Capture	access:public	signature:(self)
Capture.stderr	tests/conftest.py	/^    def stderr(self):$/;"	m	class:Capture	access:public	signature:(self)
Capture.unordered	tests/conftest.py	/^    def unordered(self):$/;"	m	class:Capture	access:public	signature:(self)
Capturing standard output from ostream	docs/advanced/pycpp/utilities.rst	/^Capturing standard output from ostream$/;"	c	title:Utilities
Casting back and forth	docs/advanced/pycpp/object.rst	/^Casting back and forth$/;"	c	title:Python types
Cat	tests/test_local_bindings.cpp	/^        explicit Cat(std::string name) : Pet(std::move(name)) {}$/;"	f	class:TEST_SUBMODULE::Cat	file:	access:public	signature:(std::string name)
Cat	tests/test_local_bindings.cpp	/^    class Cat : public pets::Pet {$/;"	c	function:TEST_SUBMODULE	file:	inherits:pets::Pet
Cat	tests/test_tagbased_polymorphic.cpp	/^        Cat = 200,$/;"	e	enum:Animal::Kind	file:	access:public
Cat	tests/test_tagbased_polymorphic.cpp	/^    explicit Cat(const std::string &_name, Kind _kind = Kind::Cat) : Animal(_name, _kind) {}$/;"	f	struct:Cat	file:	access:public	signature:(const std::string & _name,Kind _kind=Kind::Cat)
Cat	tests/test_tagbased_polymorphic.cpp	/^struct Cat : Animal {$/;"	s	file:	inherits:Animal
Cat::Cat	tests/test_tagbased_polymorphic.cpp	/^    explicit Cat(const std::string &_name, Kind _kind = Kind::Cat) : Animal(_name, _kind) {}$/;"	f	struct:Cat	file:	access:public	signature:(const std::string & _name,Kind _kind=Kind::Cat)
Cat::purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrowr"; }$/;"	f	struct:Cat	typeref:typename:std::string	file:	access:public	signature:() const
Ccache	docs/compiling.rst	/^.. [Ccache] https:\/\/ccache.dev$/;"	C	chapter:Building with setuptools
Chaining exceptions ('raise from')	docs/advanced/exceptions.rst	/^Chaining exceptions ('raise from')$/;"	c	title:Exceptions
Changelog	docs/changelog.rst	/^Changelog$/;"	H
CharT	include/pybind11/cast.h	/^    using CharT = typename StringType::value_type;$/;"	t	struct:string_caster	typeref:typename:StringType::value_type	access:public
Character literals	docs/advanced/cast/strings.rst	/^Character literals$/;"	c	title:Strings, bytes and Unicode conversions
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^        Chihuahua,$/;"	e	enum:Animal::Kind	file:	access:public
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^    explicit Chihuahua(const std::string &_name) : Dog(_name, Kind::Chihuahua) {$/;"	f	struct:Chihuahua	file:	access:public	signature:(const std::string & _name)
Chihuahua	tests/test_tagbased_polymorphic.cpp	/^struct Chihuahua : Dog {$/;"	s	file:	inherits:Dog
Chihuahua::Chihuahua	tests/test_tagbased_polymorphic.cpp	/^    explicit Chihuahua(const std::string &_name) : Dog(_name, Kind::Chihuahua) {$/;"	f	struct:Chihuahua	file:	access:public	signature:(const std::string & _name)
Chihuahua::bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return Dog::bark() + " and runs in circles"; }$/;"	f	struct:Chihuahua	typeref:typename:std::string	file:	access:public	signature:() const
Child	tests/test_call_policies.cpp	/^        Child() { py::print("Allocating child."); }$/;"	f	class:TEST_SUBMODULE::Child	file:	access:public	signature:()
Child	tests/test_call_policies.cpp	/^        Child(Child &&) = default;$/;"	p	class:TEST_SUBMODULE::Child	file:	access:public	signature:(Child &&)
Child	tests/test_call_policies.cpp	/^        Child(const Child &) = default;$/;"	p	class:TEST_SUBMODULE::Child	file:	access:public	signature:(const Child &)
Child	tests/test_call_policies.cpp	/^    class Child {$/;"	c	function:TEST_SUBMODULE	file:
Chimera	tests/test_class.cpp	/^        Chimera() : Pet("Kimmy", "chimera") {}$/;"	f	class:TEST_SUBMODULE::Chimera	file:	access:private	signature:()
Chimera	tests/test_class.cpp	/^    class Chimera : public Pet {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Pet
Chrono	docs/advanced/cast/chrono.rst	/^Chrono$/;"	H
Clang-Format	.github/CONTRIBUTING.md	/^### Clang-Format$/;"	S	section:Development of pybind11
Clang-Tidy	.github/CONTRIBUTING.md	/^### Clang-Tidy$/;"	S	section:Development of pybind11
ClassScope	tests/test_class.py	/^    class ClassScope:$/;"	c	function:test_register_duplicate_class	file:	inherits:	access:private
ClassWithSTLVecProperty	tests/test_opaque_types.cpp	/^    class ClassWithSTLVecProperty {$/;"	c	function:TEST_SUBMODULE	file:
ClassWithUnscopedEnum	tests/test_enum.cpp	/^    class ClassWithUnscopedEnum {$/;"	c	function:TEST_SUBMODULE	file:
Class_	include/pybind11/stl_bind.h	/^    using Class_ = class_<Map, holder_type>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:class_<Map,holder_type>
Class_	include/pybind11/stl_bind.h	/^    using Class_ = class_<Vector, holder_type>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:class_<Vector,holder_type>
Classes	docs/advanced/classes.rst	/^Classes$/;"	H
Classic ``setup_requires``	docs/compiling.rst	/^Classic ``setup_requires``$/;"	s	chapter:Building with setuptools
Combining virtual functions and inheritance	docs/advanced/classes.rst	/^Combining virtual functions and inheritance$/;"	c	title:Classes
Common Sources Of Global Interpreter Lock Errors	docs/advanced/misc.rst	/^Common Sources Of Global Interpreter Lock Errors$/;"	c	title:Miscellaneous
Common member functions	docs/reference.rst	/^Common member functions$/;"	s	chapter:Convenience classes for arbitrary Python types
Comparable	tests/test_operator_overloading.cpp	/^    struct Comparable {$/;"	s	function:TEST_SUBMODULE	file:
CompareStruct	tests/test_numpy_dtypes.cpp	/^    struct CompareStruct {$/;"	s	function:TEST_SUBMODULE	file:
Compilation time	docs/benchmark.rst	/^Compilation time$/;"	c	title:Benchmark
Compiling the test cases	docs/basics.rst	/^Compiling the test cases$/;"	c	title:First steps
ComplexStruct	tests/test_numpy_dtypes.cpp	/^struct ComplexStruct {$/;"	s	file:
ComplexStruct::cdbl	tests/test_numpy_dtypes.cpp	/^    std::complex<double> cdbl;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<double>	file:	access:public
ComplexStruct::cflt	tests/test_numpy_dtypes.cpp	/^    std::complex<float> cflt;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<float>	file:	access:public
Conda-forge	README.rst	/^.. |Conda-forge| image:: https:\/\/img.shields.io\/conda\/vn\/conda-forge\/pybind11.svg$/;"	d	section:License
Config file	docs/compiling.rst	/^.. _Config file: https:\/\/github.com\/pybind\/pybind11\/blob\/master\/tools\/pybind11Config.cma/;"	T	section:find_package vs. add_subdirectory
Configuration options	.github/CONTRIBUTING.md	/^### Configuration options$/;"	S	section:Development of pybind11
Configuration variables	docs/compiling.rst	/^Configuration variables$/;"	s	chapter:Building with CMake
ConstBase	include/pybind11/numpy.h	/^    using ConstBase = unchecked_reference<T, Dims>;$/;"	t	class:unchecked_mutable_reference	typeref:typename:unchecked_reference<T,Dims>	access:private
ConstBuffer	tests/test_buffers.cpp	/^        ConstBuffer() : value(new int32_t{0}) {}$/;"	f	class:TEST_SUBMODULE::ConstBuffer	file:	access:public	signature:()
ConstBuffer	tests/test_buffers.cpp	/^    class ConstBuffer {$/;"	c	function:TEST_SUBMODULE	file:
ConstRefCasted	tests/test_builtin_casters.cpp	/^struct ConstRefCasted {$/;"	s	file:
ConstRefCasted::tag	tests/test_builtin_casters.cpp	/^    int tag;$/;"	m	struct:ConstRefCasted	typeref:typename:int	file:	access:public
Constructor	include/pybind11/detail/type_caster_base.h	/^    using Constructor = void *(*) (const void *);$/;"	t	class:type_caster_base	access:protected
ConstructorStats	tests/constructor_stats.h	/^class ConstructorStats {$/;"	c
ConstructorStats::_instances	tests/constructor_stats.h	/^    std::unordered_map<void *, int> _instances; \/\/ Need a map rather than set because members /;"	m	class:ConstructorStats	typeref:typename:std::unordered_map<void *,int>	access:protected
ConstructorStats::_values	tests/constructor_stats.h	/^    std::list<std::string> _values;             \/\/ Used to track values$/;"	m	class:ConstructorStats	typeref:typename:std::list<std::string>	access:protected
ConstructorStats::alive	tests/constructor_stats.h	/^    int alive() {$/;"	f	class:ConstructorStats	typeref:typename:int	access:public	signature:()
ConstructorStats::copy_assignments	tests/constructor_stats.h	/^    int copy_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
ConstructorStats::copy_constructions	tests/constructor_stats.h	/^    int copy_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
ConstructorStats::copy_created	tests/constructor_stats.h	/^    void copy_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
ConstructorStats::created	tests/constructor_stats.h	/^    void created(void *inst) { ++_instances[inst]; }$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
ConstructorStats::default_constructions	tests/constructor_stats.h	/^    int default_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
ConstructorStats::default_created	tests/constructor_stats.h	/^    void default_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
ConstructorStats::destroyed	tests/constructor_stats.h	/^    void destroyed(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
ConstructorStats::gc	tests/constructor_stats.h	/^    static void gc() {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:()
ConstructorStats::get	tests/constructor_stats.h	/^    static ConstructorStats &get() {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:()
ConstructorStats::get	tests/constructor_stats.h	/^    static ConstructorStats &get(py::object class_) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:(py::object class_)
ConstructorStats::get	tests/constructor_stats.h	/^    static ConstructorStats &get(std::type_index type) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:(std::type_index type)
ConstructorStats::move_assignments	tests/constructor_stats.h	/^    int move_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
ConstructorStats::move_constructions	tests/constructor_stats.h	/^    int move_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
ConstructorStats::move_created	tests/constructor_stats.h	/^    void move_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
ConstructorStats::value	tests/constructor_stats.h	/^    void value() {} \/\/ Recursion terminator$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:()
ConstructorStats::value	tests/constructor_stats.h	/^    void value(const T &v, Tmore &&...args) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(const T & v,Tmore &&...args)
ConstructorStats::values	tests/constructor_stats.h	/^    py::list values() {$/;"	f	class:ConstructorStats	typeref:typename:py::list	access:public	signature:()
Contributing	README.rst	/^Contributing$/;"	s	chapter:About
Convenience classes for arbitrary Python types	docs/reference.rst	/^Convenience classes for arbitrary Python types$/;"	c	title:Reference
Convenience classes for specific Python types	docs/reference.rst	/^Convenience classes for specific Python types$/;"	c	title:Reference
Convenience functions converting to Python types	docs/reference.rst	/^Convenience functions converting to Python types$/;"	c	title:Reference
ConvertibleFromUserType	tests/test_class.cpp	/^        explicit ConvertibleFromUserType(UserType u) : i(u.value()) {}$/;"	f	struct:TEST_SUBMODULE::ConvertibleFromUserType	file:	access:public	signature:(UserType u)
ConvertibleFromUserType	tests/test_class.cpp	/^    struct ConvertibleFromUserType {$/;"	s	function:TEST_SUBMODULE	file:
Copy manually	docs/compiling.rst	/^Copy manually$/;"	s	chapter:Building with setuptools
CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt() { print_default_created(this); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:()
CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt	file:	access:public	signature:(const CopyOnlyInt & c)
CopyOnlyInt	tests/test_copy_move.cpp	/^    explicit CopyOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:(int v)
CopyOnlyInt	tests/test_copy_move.cpp	/^class CopyOnlyInt {$/;"	c	file:
CopyOnlyInt::CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt() { print_default_created(this); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:()
CopyOnlyInt::CopyOnlyInt	tests/test_copy_move.cpp	/^    CopyOnlyInt(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt	file:	access:public	signature:(const CopyOnlyInt & c)
CopyOnlyInt::CopyOnlyInt	tests/test_copy_move.cpp	/^    explicit CopyOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:(int v)
CopyOnlyInt::operator =	tests/test_copy_move.cpp	/^    CopyOnlyInt &operator=(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt	typeref:typename:CopyOnlyInt &	file:	access:public	signature:(const CopyOnlyInt & c)
CopyOnlyInt::value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:CopyOnlyInt	typeref:typename:int	file:	access:public
CopyOnlyInt::~CopyOnlyInt	tests/test_copy_move.cpp	/^    ~CopyOnlyInt() { print_destroyed(this); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:()
Core features	README.rst	/^Core features$/;"	c
Cpp	include/pybind11/detail/init.h	/^using Cpp = typename Class::type;$/;"	t	typeref:typename:Class::type
CppBoundMethodTest	tests/test_callbacks.cpp	/^    struct CppBoundMethodTest {};$/;"	s	function:TEST_SUBMODULE	file:
CppCallable	tests/test_callbacks.cpp	/^        CppCallable() { track_default_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:()
CppCallable	tests/test_callbacks.cpp	/^        CppCallable(CppCallable &&) noexcept { track_move_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:(CppCallable &&)
CppCallable	tests/test_callbacks.cpp	/^        CppCallable(const CppCallable &) { track_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:(const CppCallable &)
CppCallable	tests/test_callbacks.cpp	/^    class CppCallable {$/;"	c	function:TEST_SUBMODULE	file:
CppDerivedDynamicClass	tests/test_methods_and_attributes.cpp	/^    class CppDerivedDynamicClass : public DynamicClass {};$/;"	c	function:TEST_SUBMODULE	file:	inherits:DynamicClass
Create	tests/test_vector_unique_ptr_member.cpp	/^    static std::unique_ptr<VectorOwner> Create(std::size_t num_elems) {$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:std::unique_ptr<VectorOwner>	file:	access:public	signature:(std::size_t num_elems)
Creating bindings for a custom type	docs/classes.rst	/^Creating bindings for a custom type$/;"	c	title:Object-oriented code
Creating bindings for a simple function	docs/basics.rst	/^Creating bindings for a simple function$/;"	c	title:First steps
Custom automatic downcasters	docs/advanced/classes.rst	/^Custom automatic downcasters$/;"	c	title:Classes
Custom constructors	docs/advanced/classes.rst	/^Custom constructors$/;"	c	title:Classes
Custom smart pointers	docs/advanced/smart_ptrs.rst	/^Custom smart pointers$/;"	c	title:Smart pointers
Custom type casters	docs/advanced/cast/custom.rst	/^Custom type casters$/;"	H
Custom type setup	docs/advanced/classes.rst	/^Custom type setup$/;"	c	title:Classes
CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoGIL() : gstate(PyGILState_Ensure()) {}$/;"	f	struct:__anonf105cff20111::CustomAutoGIL	file:	access:public	signature:()
CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoGIL {$/;"	s	namespace:__anonf105cff20111	file:
CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoNoGIL() : save(PyEval_SaveThread()) {}$/;"	f	struct:__anonf105cff20111::CustomAutoNoGIL	file:	access:public	signature:()
CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoNoGIL {$/;"	s	namespace:__anonf105cff20111	file:
CustomContains	tests/test_pytypes.py	/^class CustomContains:$/;"	c	inherits:	access:public
CustomContains.__contains__	tests/test_pytypes.py	/^    def __contains__(self, m):$/;"	m	class:CustomContains	access:public	signature:(self, m)
CustomContains.d	tests/test_pytypes.py	/^    d = {"key": None}$/;"	v	class:CustomContains	access:public
CustomExample	tests/test_eigen_tensor.inl	/^    CustomExample() : member(get_tensor<Options>()), view_member(member) {}$/;"	f	struct:CustomExample	file:	access:public	signature:()
CustomExample	tests/test_eigen_tensor.inl	/^struct CustomExample {$/;"	s	file:
CustomExample::CustomExample	tests/test_eigen_tensor.inl	/^    CustomExample() : member(get_tensor<Options>()), view_member(member) {}$/;"	f	struct:CustomExample	file:	access:public	signature:()
CustomExample::member	tests/test_eigen_tensor.inl	/^    Eigen::Tensor<double, 3, Options> member;$/;"	m	struct:CustomExample	typeref:typename:Eigen::Tensor<double,3,Options>	file:	access:public
CustomExample::view_member	tests/test_eigen_tensor.inl	/^    Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> view_member;$/;"	m	struct:CustomExample	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>>	file:	access:public
CustomGuard	tests/test_call_policies.cpp	/^    CustomGuard() { enabled = true; }$/;"	f	struct:CustomGuard	file:	access:public	signature:()
CustomGuard	tests/test_call_policies.cpp	/^struct CustomGuard {$/;"	s	file:
CustomGuard::CustomGuard	tests/test_call_policies.cpp	/^    CustomGuard() { enabled = true; }$/;"	f	struct:CustomGuard	file:	access:public	signature:()
CustomGuard::enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:CustomGuard	typeref:typename:bool	file:	access:public
CustomGuard::enabled	tests/test_call_policies.cpp	/^bool CustomGuard::enabled = false;$/;"	m	class:CustomGuard	typeref:typename:bool
CustomGuard::report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:CustomGuard	typeref:typename:const char *	file:	access:public	signature:()
CustomGuard::~CustomGuard	tests/test_call_policies.cpp	/^    ~CustomGuard() { enabled = false; }$/;"	f	struct:CustomGuard	file:	access:public	signature:()
CustomOperatorNew	tests/test_eigen_matrix.cpp	/^    CustomOperatorNew() = default;$/;"	p	struct:CustomOperatorNew	file:	access:public	signature:()
CustomOperatorNew	tests/test_eigen_matrix.cpp	/^struct CustomOperatorNew {$/;"	s	file:
CustomOperatorNew::CustomOperatorNew	tests/test_eigen_matrix.cpp	/^    CustomOperatorNew() = default;$/;"	p	struct:CustomOperatorNew	file:	access:public	signature:()
CustomOperatorNew::a	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d a = Eigen::Matrix4d::Zero();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:	access:public
CustomOperatorNew::b	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d b = Eigen::Matrix4d::Identity();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:	access:public
D	tests/test_multiple_inheritance.cpp	/^    struct D : public C0, public C1 {$/;"	s	function:TEST_SUBMODULE	file:	inherits:C0,C1
DECL_NPY_API	include/pybind11/numpy.h	/^#define DECL_NPY_API(/;"	d	signature:(Func)
DIR	docs/conf.py	/^DIR = Path(__file__).parent.resolve()$/;"	v	access:public
DIR	pybind11/commands.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v	access:public
DIR	setup.py	/^DIR = Path(__file__).parent.absolute()$/;"	v	access:public
DIR	tests/extra_python_package/test_files.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v	access:public
DIR	tests/extra_setuptools/test_setuphelper.py	/^DIR = os.path.abspath(os.path.dirname(__file__))$/;"	v	access:public
DOWNLOAD_CATCH	tools/FindCatch.cmake	/^option(DOWNLOAD_CATCH "Download catch2 if not found")$/;"	D
DOWNLOAD_EIGEN	tests/CMakeLists.txt	/^option(DOWNLOAD_EIGEN "Download EIGEN (requires CMake 3.11+)" OFF)$/;"	D
DR	tests/test_virtual_functions.py	/^    class DR(m.D_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.D_Repeat	access:private
DT	tests/test_virtual_functions.py	/^    class DT(m.D_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.D_Tpl	access:private
DT2	tests/test_virtual_functions.py	/^    class DT2(DT):$/;"	c	function:test_inherited_virtuals	file:	inherits:DT	access:private
D_METHODS	tests/test_virtual_functions.cpp	/^#define D_METHODS /;"	d	file:
D_Repeat	tests/test_virtual_functions.cpp	/^class D_Repeat : public C_Repeat {$/;"	c	file:	inherits:C_Repeat
D_Tpl	tests/test_virtual_functions.cpp	/^class D_Tpl : public C_Tpl {$/;"	c	file:	inherits:C_Tpl
Data	tests/test_virtual_functions.cpp	/^    struct Data {};$/;"	s	struct:AdderBase	file:	access:public
Data	tests/test_virtual_functions.py	/^    class Data(m.Data):$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:m.Data	access:private
DataType	tests/test_vector_unique_ptr_member.cpp	/^struct DataType {};$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
DataVisitor	tests/test_virtual_functions.cpp	/^    using DataVisitor = std::function<void(const Data &)>;$/;"	t	struct:AdderBase	file:	access:public
Deepcopy support	docs/advanced/classes.rst	/^Deepcopy support$/;"	c	title:Classes
Default arguments	docs/basics.rst	/^Default arguments$/;"	c	title:First steps
Default arguments revisited	docs/advanced/functions.rst	/^Default arguments revisited$/;"	c	title:Functions
Default-Constructed Wrappers	docs/advanced/pycpp/object.rst	/^Default-Constructed Wrappers$/;"	s	chapter:Gotchas
DenseMatrixC	tests/test_eigen_matrix.cpp	/^    using DenseMatrixC = Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic>	file:
DenseMatrixR	tests/test_eigen_matrix.cpp	/^    using DenseMatrixR = Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor>	file:
DependentGuard	tests/test_call_policies.cpp	/^    DependentGuard() { enabled = CustomGuard::enabled; }$/;"	f	struct:DependentGuard	file:	access:public	signature:()
DependentGuard	tests/test_call_policies.cpp	/^struct DependentGuard {$/;"	s	file:
DependentGuard::DependentGuard	tests/test_call_policies.cpp	/^    DependentGuard() { enabled = CustomGuard::enabled; }$/;"	f	struct:DependentGuard	file:	access:public	signature:()
DependentGuard::enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:DependentGuard	typeref:typename:bool	file:	access:public
DependentGuard::enabled	tests/test_call_policies.cpp	/^bool DependentGuard::enabled = false;$/;"	m	class:DependentGuard	typeref:typename:bool
DependentGuard::report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:DependentGuard	typeref:typename:const char *	file:	access:public	signature:()
DependentGuard::~DependentGuard	tests/test_call_policies.cpp	/^    ~DependentGuard() { enabled = false; }$/;"	f	struct:DependentGuard	file:	access:public	signature:()
Deprecation of a few ``py::object`` APIs	docs/upgrade.rst	/^Deprecation of a few ``py::object`` APIs$/;"	s	chapter:v2.0
Deprecation of some ``py::object`` APIs	docs/upgrade.rst	/^Deprecation of some ``py::object`` APIs$/;"	s	chapter:v2.2
Deprecation of the ``PYBIND11_PLUGIN`` macro	docs/upgrade.rst	/^Deprecation of the ``PYBIND11_PLUGIN`` macro$/;"	s	chapter:v2.2
Deprecation of the ``py::base<T>()`` attribute	docs/upgrade.rst	/^Deprecation of the ``py::base<T>()`` attribute$/;"	s	chapter:v2.0
Derived	tests/test_call_policies.py	/^    class Derived(m.Parent):$/;"	c	function:test_alive_gc_derived	file:	inherits:m.Parent	access:private
Derived	tests/test_call_policies.py	/^    class Derived(m.Parent, m.Child):$/;"	c	function:test_alive_gc_multi_derived	file:	inherits:m.Parent, m.Child	access:private
DerivedBuffer	tests/test_buffers.cpp	/^    struct DerivedBuffer : public Buffer {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:Buffer
DerivedClass1	tests/test_class.cpp	/^    struct DerivedClass1 : BaseClass {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:BaseClass
DerivedClass2	tests/test_class.cpp	/^    struct DerivedClass2 : BaseClass {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:BaseClass
DerivedWidget	tests/test_embed/test_interpreter.py	/^class DerivedWidget(Widget):$/;"	c	inherits:Widget	access:public
DerivedWidget.__init__	tests/test_embed/test_interpreter.py	/^    def __init__(self, message):$/;"	m	class:DerivedWidget	access:public	signature:(self, message)
DerivedWidget.argv0	tests/test_embed/test_interpreter.py	/^    def argv0(self):$/;"	m	class:DerivedWidget	access:public	signature:(self)
DerivedWidget.the_answer	tests/test_embed/test_interpreter.py	/^    def the_answer(self):$/;"	m	class:DerivedWidget	access:public	signature:(self)
DerivedWithNested	tests/test_class.cpp	/^    struct DerivedWithNested : BaseWithNested {$/;"	s	function:TEST_SUBMODULE	file:	inherits:BaseWithNested
Description	.github/pull_request_template.md	/^## Description$/;"	s
Design choices	docs/limitations.rst	/^Design choices$/;"	c	title:Limitations
DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester() { print_default_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:()
DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester(DestructionTester &&) noexcept { print_move_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:(DestructionTester &&)
DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester(const DestructionTester &) { print_copy_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:(const DestructionTester &)
DestructionTester	tests/test_custom_type_casters.cpp	/^class DestructionTester {$/;"	c	file:
DestructionTester::DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester() { print_default_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:()
DestructionTester::DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester(DestructionTester &&) noexcept { print_move_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:(DestructionTester &&)
DestructionTester::DestructionTester	tests/test_custom_type_casters.cpp	/^    DestructionTester(const DestructionTester &) { print_copy_created(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:(const DestructionTester &)
DestructionTester::operator =	tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(DestructionTester &&) noexcept {$/;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:	access:public	signature:(DestructionTester &&)
DestructionTester::operator =	tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(const DestructionTester &) {$/;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:	access:public	signature:(const DestructionTester &)
DestructionTester::~DestructionTester	tests/test_custom_type_casters.cpp	/^    ~DestructionTester() { print_destroyed(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:()
Destructors that call Python	docs/advanced/classes.rst	/^Destructors that call Python$/;"	c	title:Classes
Development of pybind11	.github/CONTRIBUTING.md	/^## Development of pybind11$/;"	s
DiffType	include/pybind11/stl_bind.h	/^    using DiffType = typename Vector::difference_type;$/;"	t	function:vector_accessor	typeref:typename:Vector::difference_type
DiffType	include/pybind11/stl_bind.h	/^    using DiffType = typename Vector::difference_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::difference_type
Different method signatures	docs/advanced/classes.rst	/^Different method signatures$/;"	s	chapter:Extended trampoline class functionality
Direct access	docs/advanced/pycpp/numpy.rst	/^Direct access$/;"	c	title:NumPy
DispatchIssue	tests/test_virtual_functions.cpp	/^struct DispatchIssue : Base {$/;"	s	file:	inherits:Base
DispatchIssue::dispatch	tests/test_virtual_functions.cpp	/^    std::string dispatch() const override {$/;"	f	struct:DispatchIssue	typeref:typename:std::string	file:	access:public	signature:() const
DocstringTestEnum1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum1 { Member1, Member2 };$/;"	g	function:TEST_SUBMODULE	file:
DocstringTestEnum2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum2 { Member1, Member2 };$/;"	g	function:TEST_SUBMODULE	file:
DocstringTestEnum3	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum3 { Member1, Member2 };$/;"	g	function:TEST_SUBMODULE	file:
DocstringTestEnum4	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum4 { Member1, Member2 };$/;"	g	function:TEST_SUBMODULE	file:
DocstringTestEnum5	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum5 { Member1, Member2 };$/;"	g	function:TEST_SUBMODULE	file:
DocstringTestFoo	tests/test_docstring_options.cpp	/^        struct DocstringTestFoo {$/;"	s	function:TEST_SUBMODULE	file:
DoesNotSupportAsync	tests/test_async.cpp	/^    struct DoesNotSupportAsync {};$/;"	s	function:TEST_SUBMODULE	file:
DoesntBreak1	tests/test_class.cpp	/^using DoesntBreak1 = py::class_<BreaksBase<1>, std::unique_ptr<BreaksBase<1>>, BreaksTramp<1>>;$/;"	t	typeref:typename:py::class_<BreaksBase<1>,std::unique_ptr<BreaksBase<1>>,BreaksTramp<1>>	file:
DoesntBreak2	tests/test_class.cpp	/^using DoesntBreak2 = py::class_<BreaksBase<2>, BreaksTramp<2>, std::unique_ptr<BreaksBase<2>>>;$/;"	t	typeref:typename:py::class_<BreaksBase<2>,BreaksTramp<2>,std::unique_ptr<BreaksBase<2>>>	file:
DoesntBreak3	tests/test_class.cpp	/^using DoesntBreak3 = py::class_<BreaksBase<3>, std::unique_ptr<BreaksBase<3>>>;$/;"	t	typeref:typename:py::class_<BreaksBase<3>,std::unique_ptr<BreaksBase<3>>>	file:
DoesntBreak4	tests/test_class.cpp	/^using DoesntBreak4 = py::class_<BreaksBase<4>, BreaksTramp<4>>;$/;"	t	typeref:typename:py::class_<BreaksBase<4>,BreaksTramp<4>>	file:
DoesntBreak5	tests/test_class.cpp	/^using DoesntBreak5 = py::class_<BreaksBase<5>>;$/;"	t	typeref:typename:py::class_<BreaksBase<5>>	file:
DoesntBreak6	tests/test_class.cpp	/^using DoesntBreak6 = py::class_<BreaksBase<6>, std::shared_ptr<BreaksBase<6>>, BreaksTramp<6>>;$/;"	t	typeref:typename:py::class_<BreaksBase<6>,std::shared_ptr<BreaksBase<6>>,BreaksTramp<6>>	file:
DoesntBreak7	tests/test_class.cpp	/^using DoesntBreak7 = py::class_<BreaksBase<7>, BreaksTramp<7>, std::shared_ptr<BreaksBase<7>>>;$/;"	t	typeref:typename:py::class_<BreaksBase<7>,BreaksTramp<7>,std::shared_ptr<BreaksBase<7>>>	file:
DoesntBreak8	tests/test_class.cpp	/^using DoesntBreak8 = py::class_<BreaksBase<8>, std::shared_ptr<BreaksBase<8>>>;$/;"	t	typeref:typename:py::class_<BreaksBase<8>,std::shared_ptr<BreaksBase<8>>>	file:
Dog	tests/pybind11_cross_module_tests.cpp	/^        explicit Dog(std::string name) : Pet(std::move(name)) {}$/;"	f	class:PYBIND11_MODULE::Dog	file:	access:public	signature:(std::string name)
Dog	tests/pybind11_cross_module_tests.cpp	/^    class Dog : public pets::Pet {$/;"	c	function:PYBIND11_MODULE	file:	inherits:pets::Pet
Dog	tests/test_class.cpp	/^        explicit Dog(const std::string &name) : Pet(name, "dog") {}$/;"	f	class:TEST_SUBMODULE::Dog	file:	access:public	signature:(const std::string & name)
Dog	tests/test_class.cpp	/^    class Dog : public Pet {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Pet
Dog	tests/test_tagbased_polymorphic.cpp	/^        Dog = 100,$/;"	e	enum:Animal::Kind	file:	access:public
Dog	tests/test_tagbased_polymorphic.cpp	/^    explicit Dog(const std::string &_name, Kind _kind = Kind::Dog) : Animal(_name, _kind) {}$/;"	f	struct:Dog	file:	access:public	signature:(const std::string & _name,Kind _kind=Kind::Dog)
Dog	tests/test_tagbased_polymorphic.cpp	/^struct Dog : Animal {$/;"	s	file:	inherits:Animal
Dog::Dog	tests/test_tagbased_polymorphic.cpp	/^    explicit Dog(const std::string &_name, Kind _kind = Kind::Dog) : Animal(_name, _kind) {}$/;"	f	struct:Dog	file:	access:public	signature:(const std::string & _name,Kind _kind=Kind::Dog)
Dog::bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return name_of_kind(kind) + " " + name + " goes " + sound; }$/;"	f	struct:Dog	typeref:typename:std::string	file:	access:public	signature:() const
Dog::sound	tests/test_tagbased_polymorphic.cpp	/^    std::string sound = "WOOF!";$/;"	m	struct:Dog	typeref:typename:std::string	file:	access:public
DtypeCheck	tests/test_numpy_array.cpp	/^struct DtypeCheck {$/;"	s	file:
DtypeCheck::numpy	tests/test_numpy_array.cpp	/^    py::dtype numpy{};$/;"	m	struct:DtypeCheck	typeref:typename:py::dtype	file:	access:public
DtypeCheck::pybind11	tests/test_numpy_array.cpp	/^    py::dtype pybind11{};$/;"	m	struct:DtypeCheck	typeref:typename:py::dtype	file:	access:public
DtypeSizeCheck	tests/test_numpy_array.cpp	/^struct DtypeSizeCheck {$/;"	s	file:
DtypeSizeCheck::dtype	tests/test_numpy_array.cpp	/^    py::dtype dtype{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:py::dtype	file:	access:public
DtypeSizeCheck::name	tests/test_numpy_array.cpp	/^    std::string name{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:std::string	file:	access:public
DtypeSizeCheck::size_cpp	tests/test_numpy_array.cpp	/^    int size_cpp{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:int	file:	access:public
DtypeSizeCheck::size_numpy	tests/test_numpy_array.cpp	/^    int size_numpy{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:int	file:	access:public
Dupe1	tests/test_modules.cpp	/^        class Dupe1 {};$/;"	c	function:TEST_SUBMODULE::__anon256904100202	file:
Dupe2	tests/test_modules.cpp	/^        class Dupe2 {};$/;"	c	function:TEST_SUBMODULE::__anon256904100202	file:
Dupe3	tests/test_modules.cpp	/^        class Dupe3 {};$/;"	c	function:TEST_SUBMODULE::__anon256904100202	file:
DupeException	tests/test_modules.cpp	/^        class DupeException {};$/;"	c	function:TEST_SUBMODULE::__anon256904100202	file:
Duplicate	tests/test_class.cpp	/^    struct Duplicate {};$/;"	s	function:TEST_SUBMODULE	file:
DuplicateNested	tests/test_class.cpp	/^    struct DuplicateNested {};$/;"	s	function:TEST_SUBMODULE	file:
Dynamic	include/pybind11/numpy.h	/^    static constexpr bool Dynamic = Dims < 0;$/;"	m	class:unchecked_reference	typeref:typename:bool	access:protected
Dynamic attributes	docs/classes.rst	/^Dynamic attributes$/;"	c	title:Object-oriented code
DynamicClass	tests/test_methods_and_attributes.cpp	/^        DynamicClass() { print_default_created(this); }$/;"	f	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:()
DynamicClass	tests/test_methods_and_attributes.cpp	/^        DynamicClass(const DynamicClass &) = delete;$/;"	p	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:(const DynamicClass &)
DynamicClass	tests/test_methods_and_attributes.cpp	/^    class DynamicClass {$/;"	c	function:TEST_SUBMODULE	file:
E1	tests/test_numpy_dtypes.cpp	/^enum class E1 : int64_t { A = -1, B = 1 };$/;"	g	typeref:typename:int64_t	file:
E2	tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	g	typeref:typename:uint8_t	file:
EFirstEntry	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:	access:public
EFirstMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	e	enum:TEST_SUBMODULE::ClassWithUnscopedEnum::EMode	file:	access:public
EIGEN3_FOUND	tests/CMakeLists.txt	/^    set(EIGEN3_FOUND TRUE)$/;"	v
EIGEN3_FOUND	tools/FindEigen3.cmake	/^  set(EIGEN3_FOUND ${EIGEN3_VERSION_OK})$/;"	v
EIGEN3_INCLUDE_DIR	tests/CMakeLists.txt	/^    set(EIGEN3_INCLUDE_DIR ${eigen_SOURCE_DIR})$/;"	v
EIGEN3_MAJOR_VERSION	tools/FindEigen3.cmake	/^  set(EIGEN3_MAJOR_VERSION "${CMAKE_MATCH_1}")$/;"	v
EIGEN3_MINOR_VERSION	tools/FindEigen3.cmake	/^  set(EIGEN3_MINOR_VERSION "${CMAKE_MATCH_1}")$/;"	v
EIGEN3_VERSION	tests/CMakeLists.txt	/^      set(EIGEN3_VERSION ${EIGEN3_VERSION_STRING})$/;"	v
EIGEN3_VERSION	tests/CMakeLists.txt	/^    set(EIGEN3_VERSION "${PYBIND11_EIGEN_VERSION_STRING}")$/;"	v
EIGEN3_VERSION	tools/FindEigen3.cmake	/^  set(EIGEN3_VERSION ${EIGEN3_WORLD_VERSION}.${EIGEN3_MAJOR_VERSION}.${EIGEN3_MINOR_VERSION})$/;"	v
EIGEN3_VERSION_OK	tools/FindEigen3.cmake	/^    set(EIGEN3_VERSION_OK FALSE)$/;"	v
EIGEN3_VERSION_OK	tools/FindEigen3.cmake	/^    set(EIGEN3_VERSION_OK TRUE)$/;"	v
EIGEN3_WORLD_VERSION	tools/FindEigen3.cmake	/^  set(EIGEN3_WORLD_VERSION "${CMAKE_MATCH_1}")$/;"	v
EIGEN_AVOID_STL_ARRAY	tests/eigen_tensor_avoid_stl_array.cpp	/^#    define EIGEN_AVOID_STL_ARRAY$/;"	d	file:
EMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	g	class:TEST_SUBMODULE::ClassWithUnscopedEnum	file:	access:public
ENTRY	tools/make_changelog.py	/^ENTRY = re.compile($/;"	v	access:public
EOne	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
ESecondEntry	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	e	enum:MyEnum	file:	access:public
ESecondMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	e	enum:TEST_SUBMODULE::ClassWithUnscopedEnum::EMode	file:	access:public
EThree	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
ETwo	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
E_nc	tests/test_stl_binders.cpp	/^    E_nc(E_nc &&) = default;$/;"	p	class:E_nc	file:	access:public	signature:(E_nc &&)
E_nc	tests/test_stl_binders.cpp	/^    E_nc(const E_nc &) = delete;$/;"	p	class:E_nc	file:	access:public	signature:(const E_nc &)
E_nc	tests/test_stl_binders.cpp	/^    explicit E_nc(int i) : value{i} {}$/;"	f	class:E_nc	file:	access:public	signature:(int i)
E_nc	tests/test_stl_binders.cpp	/^class E_nc {$/;"	c	file:
E_nc::E_nc	tests/test_stl_binders.cpp	/^    E_nc(E_nc &&) = default;$/;"	p	class:E_nc	file:	access:public	signature:(E_nc &&)
E_nc::E_nc	tests/test_stl_binders.cpp	/^    E_nc(const E_nc &) = delete;$/;"	p	class:E_nc	file:	access:public	signature:(const E_nc &)
E_nc::E_nc	tests/test_stl_binders.cpp	/^    explicit E_nc(int i) : value{i} {}$/;"	f	class:E_nc	file:	access:public	signature:(int i)
E_nc::operator =	tests/test_stl_binders.cpp	/^    E_nc &operator=(E_nc &&) = default;$/;"	p	class:E_nc	typeref:typename:E_nc &	file:	access:public	signature:(E_nc &&)
E_nc::operator =	tests/test_stl_binders.cpp	/^    E_nc &operator=(const E_nc &) = delete;$/;"	p	class:E_nc	typeref:typename:E_nc &	file:	access:public	signature:(const E_nc &)
E_nc::value	tests/test_stl_binders.cpp	/^    int value;$/;"	m	class:E_nc	typeref:typename:int	file:	access:public
Eigen	docs/advanced/cast/eigen.rst	/^Eigen$/;"	H
Eigen3_FIND_VERSION	tools/FindEigen3.cmake	/^  set(Eigen3_FIND_VERSION$/;"	v
Eigen3_FIND_VERSION_MAJOR	tools/FindEigen3.cmake	/^    set(Eigen3_FIND_VERSION_MAJOR 2)$/;"	v
Eigen3_FIND_VERSION_MINOR	tools/FindEigen3.cmake	/^    set(Eigen3_FIND_VERSION_MINOR 91)$/;"	v
Eigen3_FIND_VERSION_PATCH	tools/FindEigen3.cmake	/^    set(Eigen3_FIND_VERSION_PATCH 0)$/;"	v
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex rstride, EigenIndex cstride)$/;"	f	struct:EigenConformable	access:public	signature:(EigenIndex r,EigenIndex c,EigenIndex rstride,EigenIndex cstride)
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex stride)$/;"	f	struct:EigenConformable	access:public	signature:(EigenIndex r,EigenIndex c,EigenIndex stride)
EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(bool fits = false) : conformable{fits} {}$/;"	f	struct:EigenConformable	access:public	signature:(bool fits=false)
EigenConformable	include/pybind11/eigen/matrix.h	/^struct EigenConformable {$/;"	s
EigenConformable::EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex rstride, EigenIndex cstride)$/;"	f	struct:EigenConformable	access:public	signature:(EigenIndex r,EigenIndex c,EigenIndex rstride,EigenIndex cstride)
EigenConformable::EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(EigenIndex r, EigenIndex c, EigenIndex stride)$/;"	f	struct:EigenConformable	access:public	signature:(EigenIndex r,EigenIndex c,EigenIndex stride)
EigenConformable::EigenConformable	include/pybind11/eigen/matrix.h	/^    EigenConformable(bool fits = false) : conformable{fits} {}$/;"	f	struct:EigenConformable	access:public	signature:(bool fits=false)
EigenConformable::cols	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex	access:public
EigenConformable::conformable	include/pybind11/eigen/matrix.h	/^    bool conformable = false;$/;"	m	struct:EigenConformable	typeref:typename:bool	access:public
EigenConformable::negativestrides	include/pybind11/eigen/matrix.h	/^    bool negativestrides = false; \/\/ If true, do not use stride!$/;"	m	struct:EigenConformable	typeref:typename:bool	access:public
EigenConformable::operator bool	include/pybind11/eigen/matrix.h	/^    operator bool() const { return conformable; }$/;"	f	struct:EigenConformable	access:public	signature:() const
EigenConformable::rows	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex	access:public
EigenConformable::stride	include/pybind11/eigen/matrix.h	/^    EigenDStride stride{0, 0};    \/\/ Only valid if negativestrides is false!$/;"	m	struct:EigenConformable	typeref:typename:EigenDStride	access:public
EigenConformable::stride_compatible	include/pybind11/eigen/matrix.h	/^    bool stride_compatible() const {$/;"	f	struct:EigenConformable	typeref:typename:bool	access:public	signature:() const
EigenDMap	include/pybind11/eigen/matrix.h	/^using EigenDMap = Eigen::Map<MatrixType, 0, EigenDStride>;$/;"	t	typeref:typename:Eigen::Map<MatrixType,0,EigenDStride>
EigenDRef	include/pybind11/eigen/matrix.h	/^using EigenDRef = Eigen::Ref<MatrixType, 0, EigenDStride>;$/;"	t	typeref:typename:Eigen::Ref<MatrixType,0,EigenDStride>
EigenDStride	include/pybind11/eigen/matrix.h	/^using EigenDStride = Eigen::Stride<Eigen::Dynamic, Eigen::Dynamic>;$/;"	t	typeref:typename:Eigen::Stride<Eigen::Dynamic,Eigen::Dynamic>
EigenIndex	include/pybind11/eigen/matrix.h	/^using EigenIndex = Eigen::Index;$/;"	t	typeref:typename:Eigen::Index
EigenMapSparseMatrix	include/pybind11/eigen/matrix.h	/^using EigenMapSparseMatrix = Eigen::Map<Eigen::SparseMatrix<Scalar, Flags, StorageIndex>>;$/;"	t	typeref:typename:Eigen::Map<Eigen::SparseMatrix<Scalar,Flags,StorageIndex>>
EigenProps	include/pybind11/eigen/matrix.h	/^struct EigenProps {$/;"	s
EigenProps::Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:EigenProps	typeref:typename:Type::Scalar	access:public
EigenProps::StrideType	include/pybind11/eigen/matrix.h	/^    using StrideType = typename eigen_extract_stride<Type>::type;$/;"	t	struct:EigenProps	typeref:typename:eigen_extract_stride<Type>::type	access:public
EigenProps::Type	include/pybind11/eigen/matrix.h	/^    using Type = Type_;$/;"	t	struct:EigenProps	typeref:typename:Type_	access:public
EigenProps::cols	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
EigenProps::conformable	include/pybind11/eigen/matrix.h	/^    static EigenConformable<row_major> conformable(const array &a) {$/;"	f	struct:EigenProps	typeref:typename:EigenConformable<row_major>	access:public	signature:(const array & a)
EigenProps::descriptor	include/pybind11/eigen/matrix.h	/^    static constexpr auto descriptor$/;"	m	struct:EigenProps	typeref:typename:auto	access:public
EigenProps::dynamic	include/pybind11/eigen/matrix.h	/^        dynamic = !fixed_rows && !fixed_cols;             \/\/ Fully-dynamic size$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::dynamic_stride	include/pybind11/eigen/matrix.h	/^    static constexpr bool dynamic_stride$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::fixed	include/pybind11/eigen/matrix.h	/^                          fixed = size != Eigen::Dynamic, \/\/ Fully-fixed size$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::fixed_cols	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::fixed_rows	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::if_zero	include/pybind11/eigen/matrix.h	/^    using if_zero = std::integral_constant<EigenIndex, i == 0 ? ifzero : i>;$/;"	t	struct:EigenProps	typeref:typename:std::integral_constant<EigenIndex,i==0?ifzero:i>	access:public
EigenProps::inner_stride	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex inner_stride$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
EigenProps::requires_col_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_col_major$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::requires_row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_row_major$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool row_major = Type::IsRowMajor,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::rows	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
EigenProps::show_c_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_c_contiguous = show_order && requires_row_major;$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::show_f_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_f_contiguous$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::show_order	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_order = is_eigen_dense_map<Type>::value;$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::show_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_writeable$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
EigenProps::size	include/pybind11/eigen/matrix.h	/^                                size = Type::SizeAtCompileTime;$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
EigenProps::vector	include/pybind11/eigen/matrix.h	/^                          vector$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
El	tests/test_stl_binders.cpp	/^    El() = delete;$/;"	p	class:El	file:	access:public	signature:()
El	tests/test_stl_binders.cpp	/^    explicit El(int v) : a(v) {}$/;"	f	class:El	file:	access:public	signature:(int v)
El	tests/test_stl_binders.cpp	/^class El {$/;"	c	file:
El::El	tests/test_stl_binders.cpp	/^    El() = delete;$/;"	p	class:El	file:	access:public	signature:()
El::El	tests/test_stl_binders.cpp	/^    explicit El(int v) : a(v) {}$/;"	f	class:El	file:	access:public	signature:(int v)
El::a	tests/test_stl_binders.cpp	/^    int a;$/;"	m	class:El	typeref:typename:int	file:	access:public
ElementA	tests/test_smart_ptr.cpp	/^    explicit ElementA(int v) : v(v) {}$/;"	f	struct:__anond975f9d30111::ElementA	file:	access:public	signature:(int v)
ElementA	tests/test_smart_ptr.cpp	/^struct ElementA : ElementBase {$/;"	s	namespace:__anond975f9d30111	file:	inherits:ElementBase
ElementBase	tests/test_smart_ptr.cpp	/^    ElementBase() = default;$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:()
ElementBase	tests/test_smart_ptr.cpp	/^    ElementBase(const ElementBase &) = delete;$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:(const ElementBase &)
ElementBase	tests/test_smart_ptr.cpp	/^struct ElementBase {$/;"	s	namespace:__anond975f9d30111	file:
ElementList	tests/test_smart_ptr.cpp	/^struct ElementList {$/;"	s	namespace:__anond975f9d30111	file:
Ellipsis	docs/advanced/pycpp/numpy.rst	/^Ellipsis$/;"	c	title:NumPy
Embedding the Python interpreter	docs/compiling.rst	/^Embedding the Python interpreter$/;"	s	chapter:Building with CMake
Embedding the interpreter	docs/advanced/embedding.rst	/^Embedding the interpreter$/;"	H
Embedding the interpreter	docs/reference.rst	/^Embedding the interpreter$/;"	c	title:Reference
Empty	tests/test_class.cpp	/^    struct Empty {};$/;"	s	function:TEST_SUBMODULE	file:
Empty0	tests/test_class.cpp	/^using Empty0 = SoEmpty<0x0>;$/;"	t	namespace:test_class::pr4220_tripped_over_this	typeref:typename:SoEmpty<0x0>	file:
EnumType	tests/test_stl.cpp	/^enum class EnumType {$/;"	g	file:
Enumerations and internal types	docs/classes.rst	/^Enumerations and internal types$/;"	c	title:Object-oriented code
Evaluating Python expressions from strings and files	docs/advanced/pycpp/utilities.rst	/^Evaluating Python expressions from strings and files$/;"	c	title:Utilities
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA() { print_default_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:()
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(ExampleMandA &&e) noexcept : value(e.value) { print_move_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(ExampleMandA && e)
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(const ExampleMandA &e) : value(e.value) { print_copy_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(const ExampleMandA & e)
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(int value) : value(value) { print_created(this, value); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(int value)
ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(std::string &&) {}$/;"	f	class:ExampleMandA	file:	access:public	signature:(std::string &&)
ExampleMandA	tests/test_methods_and_attributes.cpp	/^class ExampleMandA {$/;"	c	file:
ExampleMandA::ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA() { print_default_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:()
ExampleMandA::ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(ExampleMandA &&e) noexcept : value(e.value) { print_move_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(ExampleMandA && e)
ExampleMandA::ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ExampleMandA(const ExampleMandA &e) : value(e.value) { print_copy_created(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(const ExampleMandA & e)
ExampleMandA::ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(int value) : value(value) { print_created(this, value); }$/;"	f	class:ExampleMandA	file:	access:public	signature:(int value)
ExampleMandA::ExampleMandA	tests/test_methods_and_attributes.cpp	/^    explicit ExampleMandA(std::string &&) {}$/;"	f	class:ExampleMandA	file:	access:public	signature:(std::string &&)
ExampleMandA::add1	tests/test_methods_and_attributes.cpp	/^    void add1(ExampleMandA other) { value += other.value; }         \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA other)
ExampleMandA::add10	tests/test_methods_and_attributes.cpp	/^    void add10(const int *other) { value += *other; } \/\/ passing by const pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const int * other)
ExampleMandA::add2	tests/test_methods_and_attributes.cpp	/^    void add2(ExampleMandA &other) { value += other.value; }        \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA & other)
ExampleMandA::add3	tests/test_methods_and_attributes.cpp	/^    void add3(const ExampleMandA &other) { value += other.value; }  \/\/ passing by const refere/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA & other)
ExampleMandA::add4	tests/test_methods_and_attributes.cpp	/^    void add4(ExampleMandA *other) { value += other->value; }       \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA * other)
ExampleMandA::add5	tests/test_methods_and_attributes.cpp	/^    void add5(const ExampleMandA *other) { value += other->value; } \/\/ passing by const pointe/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA * other)
ExampleMandA::add6	tests/test_methods_and_attributes.cpp	/^    void add6(int other) { value += other; }        \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int other)
ExampleMandA::add7	tests/test_methods_and_attributes.cpp	/^    void add7(int &other) { value += other; }       \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int & other)
ExampleMandA::add8	tests/test_methods_and_attributes.cpp	/^    void add8(const int &other) { value += other; } \/\/ passing by const reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const int & other)
ExampleMandA::add9	tests/test_methods_and_attributes.cpp	/^    void add9(int *other) { value += *other; }        \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int * other)
ExampleMandA::consume_str	tests/test_methods_and_attributes.cpp	/^    void consume_str(std::string &&) {}$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(std::string &&)
ExampleMandA::internal1	tests/test_methods_and_attributes.cpp	/^    int internal1() const { return value; }        \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:int	file:	access:public	signature:() const
ExampleMandA::internal2	tests/test_methods_and_attributes.cpp	/^    int &internal2() { return value; }             \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:int &	file:	access:public	signature:()
ExampleMandA::internal3	tests/test_methods_and_attributes.cpp	/^    const int &internal3() const { return value; } \/\/ return by const reference$/;"	f	class:ExampleMandA	typeref:typename:const int &	file:	access:public	signature:() const
ExampleMandA::internal4	tests/test_methods_and_attributes.cpp	/^    int *internal4() { return &value; }            \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:int *	file:	access:public	signature:()
ExampleMandA::internal5	tests/test_methods_and_attributes.cpp	/^    const int *internal5() { return &value; }      \/\/ return by const pointer$/;"	f	class:ExampleMandA	typeref:typename:const int *	file:	access:public	signature:()
ExampleMandA::operator =	tests/test_methods_and_attributes.cpp	/^    void operator=(ExampleMandA &&e) noexcept {$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA && e)
ExampleMandA::operator =	tests/test_methods_and_attributes.cpp	/^    void operator=(const ExampleMandA &e) {$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA & e)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded() { return "()"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:()
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) const { return "(float, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,float) const
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) { return "(float, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,float)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) const { return "(float, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,int) const
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) { return "(float, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,int)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) const { return "(int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int) const
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) { return "(int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) const { return "(int, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,float) const
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) { return "(int, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,float)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) const { return "(int, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,int) const
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) { return "(int, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,int)
ExampleMandA::overloaded	tests/test_methods_and_attributes.cpp	/^    static py::str overloaded(float) { return "static float"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float)
ExampleMandA::self1	tests/test_methods_and_attributes.cpp	/^    ExampleMandA self1() { return *this; }              \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA	file:	access:public	signature:()
ExampleMandA::self2	tests/test_methods_and_attributes.cpp	/^    ExampleMandA &self2() { return *this; }             \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA &	file:	access:public	signature:()
ExampleMandA::self3	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA &self3() const { return *this; } \/\/ return by const reference$/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA &	file:	access:public	signature:() const
ExampleMandA::self4	tests/test_methods_and_attributes.cpp	/^    ExampleMandA *self4() { return this; }              \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA *	file:	access:public	signature:()
ExampleMandA::self5	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA *self5() const { return this; }  \/\/ return by const pointer$/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA *	file:	access:public	signature:() const
ExampleMandA::toString	tests/test_methods_and_attributes.cpp	/^    std::string toString() const { return "ExampleMandA[value=" + std::to_string(value) + "]"; }$/;"	f	class:ExampleMandA	typeref:typename:std::string	file:	access:public	signature:() const
ExampleMandA::value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	class:ExampleMandA	typeref:typename:int	file:	access:public
ExampleMandA::~ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ~ExampleMandA() { print_destroyed(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:()
ExampleVirt	tests/test_virtual_functions.cpp	/^    ExampleVirt(ExampleVirt &&e) noexcept : state(e.state) {$/;"	f	class:ExampleVirt	file:	access:public	signature:(ExampleVirt && e)
ExampleVirt	tests/test_virtual_functions.cpp	/^    ExampleVirt(const ExampleVirt &e) : state(e.state) { print_copy_created(this); }$/;"	f	class:ExampleVirt	file:	access:public	signature:(const ExampleVirt & e)
ExampleVirt	tests/test_virtual_functions.cpp	/^    explicit ExampleVirt(int state) : state(state) { print_created(this, state); }$/;"	f	class:ExampleVirt	file:	access:public	signature:(int state)
ExampleVirt	tests/test_virtual_functions.cpp	/^class ExampleVirt {$/;"	c	file:
ExampleVirt::ExampleVirt	tests/test_virtual_functions.cpp	/^    ExampleVirt(ExampleVirt &&e) noexcept : state(e.state) {$/;"	f	class:ExampleVirt	file:	access:public	signature:(ExampleVirt && e)
ExampleVirt::ExampleVirt	tests/test_virtual_functions.cpp	/^    ExampleVirt(const ExampleVirt &e) : state(e.state) { print_copy_created(this); }$/;"	f	class:ExampleVirt	file:	access:public	signature:(const ExampleVirt & e)
ExampleVirt::ExampleVirt	tests/test_virtual_functions.cpp	/^    explicit ExampleVirt(int state) : state(state) { print_created(this, state); }$/;"	f	class:ExampleVirt	file:	access:public	signature:(int state)
ExampleVirt::get_string1	tests/test_virtual_functions.cpp	/^    virtual const std::string &get_string1() { return str1; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string &	file:	access:public	signature:()
ExampleVirt::get_string2	tests/test_virtual_functions.cpp	/^    virtual const std::string *get_string2() { return &str2; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string *	file:	access:public	signature:()
ExampleVirt::pure_virtual	tests/test_virtual_functions.cpp	/^    virtual void pure_virtual() = 0;$/;"	p	class:ExampleVirt	typeref:typename:void	file:	access:public	signature:()
ExampleVirt::run	tests/test_virtual_functions.cpp	/^    virtual int run(int value) {$/;"	f	class:ExampleVirt	typeref:typename:int	file:	access:public	signature:(int value)
ExampleVirt::run_bool	tests/test_virtual_functions.cpp	/^    virtual bool run_bool() = 0;$/;"	p	class:ExampleVirt	typeref:typename:bool	file:	access:public	signature:()
ExampleVirt::state	tests/test_virtual_functions.cpp	/^    int state;$/;"	m	class:ExampleVirt	typeref:typename:int	file:	access:private
ExampleVirt::str1	tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:	access:private
ExampleVirt::str2	tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:	access:private
ExampleVirt::~ExampleVirt	tests/test_virtual_functions.cpp	/^    virtual ~ExampleVirt() { print_destroyed(this); }$/;"	f	class:ExampleVirt	file:	access:public	signature:()
ExceptionTranslator	include/pybind11/detail/internals.h	/^using ExceptionTranslator = void (*)(std::exception_ptr);$/;"	t
Exceptions	docs/advanced/exceptions.rst	/^Exceptions$/;"	H
Exceptions	docs/reference.rst	/^Exceptions$/;"	c	title:Reference
Execute	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
Executing Python code	docs/advanced/embedding.rst	/^Executing Python code$/;"	c	title:Embedding the interpreter
Explanation of the SDist/wheel building design	.github/CONTRIBUTING.md	/^### Explanation of the SDist\/wheel building design$/;"	S	section:Development of pybind11
Explicit conversions	docs/advanced/cast/strings.rst	/^Explicit conversions$/;"	s	chapter:Returning C++ strings to Python
Exporting variables	docs/basics.rst	/^Exporting variables$/;"	c	title:First steps
Extended trampoline class functionality	docs/advanced/classes.rst	/^Extended trampoline class functionality$/;"	c	title:Classes
ExtendedExampleVirt	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt(m.ExampleVirt):$/;"	c	function:test_override	file:	inherits:m.ExampleVirt	access:private
ExtendedExampleVirt2	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt2(ExtendedExampleVirt):$/;"	c	function:test_override	file:	inherits:ExtendedExampleVirt	access:private
ExtendedVirtClass	tests/test_gil_scoped.py	/^class ExtendedVirtClass(m.VirtClass):$/;"	c	inherits:m.VirtClass	access:public
ExtendedVirtClass.pure_virtual_func	tests/test_gil_scoped.py	/^    def pure_virtual_func(self):$/;"	m	class:ExtendedVirtClass	access:public	signature:(self)
ExtendedVirtClass.virtual_func	tests/test_gil_scoped.py	/^    def virtual_func(self):$/;"	m	class:ExtendedVirtClass	access:public	signature:(self)
ExternalType1	tests/local_bindings.h	/^using ExternalType1 = LocalBase<6>;$/;"	t	typeref:typename:LocalBase<6>
ExternalType2	tests/local_bindings.h	/^using ExternalType2 = LocalBase<7>;$/;"	t	typeref:typename:LocalBase<7>
FALSE	tests/test_enum.cpp	/^    enum class ScopedBoolEnum : bool { FALSE, TRUE };$/;"	e	enum:TEST_SUBMODULE::ScopedBoolEnum	file:	access:public
Failing rather than copying	docs/advanced/cast/eigen.rst	/^Failing rather than copying$/;"	c	title:Eigen
Field	tests/test_methods_and_attributes.cpp	/^struct Field : FieldBase {};$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:	inherits:FieldBase
FieldBase	tests/test_methods_and_attributes.cpp	/^struct FieldBase {$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:
FindPython mode	docs/compiling.rst	/^FindPython mode$/;"	s	chapter:Building with CMake
First steps	docs/basics.rst	/^First steps$/;"	H
FixedMatrixC	tests/test_eigen_matrix.cpp	/^    using FixedMatrixC = Eigen::Matrix<float, 5, 6>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,5,6>	file:
FixedMatrixR	tests/test_eigen_matrix.cpp	/^    using FixedMatrixR = Eigen::Matrix<float, 5, 6, Eigen::RowMajor>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,5,6,Eigen::RowMajor>	file:
Flags	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	g	function:TEST_SUBMODULE	file:
FlakyException	tests/test_exceptions.py	/^class FlakyException(Exception):$/;"	c	inherits:Exception	access:public
FlakyException.__init__	tests/test_exceptions.py	/^    def __init__(self, failure_point):$/;"	m	class:FlakyException	access:public	signature:(self, failure_point)
FlakyException.__str__	tests/test_exceptions.py	/^    def __str__(self):$/;"	m	class:FlakyException	access:public	signature:(self)
Float	tests/test_builtin_casters.py	/^    class Float:$/;"	c	function:test_int_convert	file:	inherits:	access:private
Forced trampoline class initialisation	docs/advanced/classes.rst	/^Forced trampoline class initialisation$/;"	s	chapter:Extended trampoline class functionality
Formatting	.github/CONTRIBUTING.md	/^### Formatting$/;"	S	section:Development of pybind11
FourColMatrixC	tests/test_eigen_matrix.cpp	/^    using FourColMatrixC = Eigen::Matrix<float, Eigen::Dynamic, 4>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,4>	file:
FourColMatrixR	tests/test_eigen_matrix.cpp	/^    using FourColMatrixR = Eigen::Matrix<float, Eigen::Dynamic, 4>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,Eigen::Dynamic,4>	file:
FourRowMatrixC	tests/test_eigen_matrix.cpp	/^    using FourRowMatrixC = Eigen::Matrix<float, 4, Eigen::Dynamic>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,4,Eigen::Dynamic>	file:
FourRowMatrixR	tests/test_eigen_matrix.cpp	/^    using FourRowMatrixR = Eigen::Matrix<float, 4, Eigen::Dynamic>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::Matrix<float,4,Eigen::Dynamic>	file:
Frequently asked questions	docs/faq.rst	/^Frequently asked questions$/;"	H
Full setup	.github/CONTRIBUTING.md	/^### Full setup$/;"	S	section:Development of pybind11
FunctionType	include/pybind11/pybind11.h	/^        using FunctionType = Return (*)(Args...);$/;"	t	function:cpp_function::initialize
Functional	docs/advanced/cast/functional.rst	/^Functional$/;"	H
Functions	docs/advanced/functions.rst	/^Functions$/;"	H
GC_IF_NEEDED	tests/test_kwargs_and_defaults.cpp	/^#    define GC_IF_NEEDED /;"	d	file:
GC_IF_NEEDED	tests/test_kwargs_and_defaults.cpp	/^#    define GC_IF_NEEDED$/;"	d	file:
General notes regarding convenience macros	docs/advanced/misc.rst	/^General notes regarding convenience macros$/;"	c	title:Miscellaneous
Generating binding code automatically	docs/compiling.rst	/^Generating binding code automatically$/;"	c	title:Build systems
Generating documentation using Sphinx	docs/advanced/misc.rst	/^Generating documentation using Sphinx$/;"	c	title:Miscellaneous
Getting started	docs/advanced/embedding.rst	/^Getting started$/;"	c	title:Embedding the interpreter
GitHub Discussions	README.rst	/^.. |GitHub Discussions| image:: https:\/\/img.shields.io\/static\/v1?label=Discussions&message=A/;"	d	section:License
Gitter chat	README.rst	/^.. |Gitter chat| image:: https:\/\/img.shields.io\/gitter\/room\/gitterHQ\/gitter.svg$/;"	d	section:License
Global Interpreter Lock (GIL)	docs/advanced/misc.rst	/^Global Interpreter Lock (GIL)$/;"	c	title:Miscellaneous
Global install with brew	docs/installing.rst	/^Global install with brew$/;"	c	title:Installing the library
Goodies	README.rst	/^Goodies$/;"	c
Gotchas	docs/advanced/pycpp/object.rst	/^Gotchas$/;"	c	title:Python types
Grapheme clusters	docs/advanced/cast/strings.rst	/^Grapheme clusters$/;"	s	chapter:Character literals
Guard	include/pybind11/pybind11.h	/^            using Guard = extract_guard_t<Extra...>;$/;"	t	function:cpp_function::initialize::__anon896e5fad0702	typeref:typename:extract_guard_t<Extra...>
HAVE_SNPRINTF	include/pybind11/detail/common.h	/^#    define HAVE_SNPRINTF /;"	d
Hamster	tests/test_class.cpp	/^        explicit Hamster(const std::string &name) : Pet(name, "rodent") {}$/;"	f	class:TEST_SUBMODULE::Hamster	file:	access:public	signature:(const std::string & name)
Hamster	tests/test_class.cpp	/^    class Hamster : public Pet {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Pet
Handling errors from the Python C API	docs/advanced/exceptions.rst	/^Handling errors from the Python C API$/;"	c	title:Exceptions
Handling exceptions	docs/advanced/pycpp/object.rst	/^Handling exceptions$/;"	c	title:Python types
Handling exceptions from Python in C++	docs/advanced/exceptions.rst	/^Handling exceptions from Python in C++$/;"	c	title:Exceptions
Handling unraisable exceptions	docs/advanced/exceptions.rst	/^Handling unraisable exceptions$/;"	c	title:Exceptions
HasOpNewDel	tests/test_class.cpp	/^    struct HasOpNewDel {$/;"	s	function:TEST_SUBMODULE	file:
HasOpNewDelBoth	tests/test_class.cpp	/^    struct HasOpNewDelBoth {$/;"	s	function:TEST_SUBMODULE	file:
HasOpNewDelSize	tests/test_class.cpp	/^    struct HasOpNewDelSize {$/;"	s	function:TEST_SUBMODULE	file:
HashMe	tests/test_operator_overloading.cpp	/^struct HashMe {$/;"	s	file:
HashMe::member	tests/test_operator_overloading.cpp	/^    std::string member;$/;"	m	struct:HashMe	typeref:typename:std::string	file:	access:public
Hashable	tests/test_operator_overloading.cpp	/^        explicit Hashable(int value) : Comparable{value} {};$/;"	f	struct:TEST_SUBMODULE::Hashable	file:	access:public	signature:(int value)
Hashable	tests/test_operator_overloading.cpp	/^    struct Hashable : Comparable {$/;"	s	function:TEST_SUBMODULE	file:	inherits:Comparable
Hashable	tests/test_pytypes.py	/^    class Hashable:$/;"	c	function:test_hash	file:	inherits:	access:private
Hashable2	tests/test_operator_overloading.cpp	/^    struct Hashable2 : Hashable {$/;"	s	function:TEST_SUBMODULE	file:	inherits:Hashable
Header and namespace conventions	docs/basics.rst	/^Header and namespace conventions$/;"	c	title:First steps
HeldByDefaultHolder	tests/test_smart_ptr.cpp	/^struct HeldByDefaultHolder {};$/;"	s	namespace:__anond975f9d30111	file:
Helper	include/pybind11/eigen/tensor.h	/^    using Helper = eigen_tensor_helper<Type>;$/;"	t	struct:type_caster	typeref:typename:eigen_tensor_helper<Type>	access:public
Helper	include/pybind11/eigen/tensor.h	/^    using Helper = eigen_tensor_helper<remove_cv_t<Type>>;$/;"	t	struct:type_caster	typeref:typename:eigen_tensor_helper<remove_cv_t<Type>>	access:public
Holder	include/pybind11/detail/init.h	/^using Holder = typename Class::holder_type;$/;"	t	typeref:typename:Class::holder_type
HolderWithAddressOf	tests/test_smart_ptr.cpp	/^    using HolderWithAddressOf = shared_ptr_with_addressof_operator<TypeForHolderWithAddressOf>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:shared_ptr_with_addressof_operator<TypeForHolderWithAddressOf>	file:
How can I create smaller binaries?	docs/faq.rst	/^How can I create smaller binaries?$/;"	c	title:Frequently asked questions
How can I properly handle Ctrl-C in long-running functions?	docs/faq.rst	/^How can I properly handle Ctrl-C in long-running functions?$/;"	c	title:Frequently asked questions
How can I reduce the build time?	docs/faq.rst	/^How can I reduce the build time?$/;"	c	title:Frequently asked questions
How to cite this project?	docs/faq.rst	/^How to cite this project?$/;"	c	title:Frequently asked questions
I18NSPHINXOPTS	docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
I801B1	tests/test_multiple_inheritance.cpp	/^    I801B1() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:()
I801B1	tests/test_multiple_inheritance.cpp	/^    I801B1(const I801B1 &) = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:(const I801B1 &)
I801B1	tests/test_multiple_inheritance.cpp	/^struct I801B1 {$/;"	s	namespace:__anon9ca8d76c0111	file:
I801B2	tests/test_multiple_inheritance.cpp	/^    I801B2() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:()
I801B2	tests/test_multiple_inheritance.cpp	/^    I801B2(const I801B2 &) = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:(const I801B2 &)
I801B2	tests/test_multiple_inheritance.cpp	/^struct I801B2 {$/;"	s	namespace:__anon9ca8d76c0111	file:
I801B3	tests/test_multiple_inheritance.cpp	/^    struct I801B3 {$/;"	s	function:TEST_SUBMODULE	file:
I801C	tests/test_multiple_inheritance.cpp	/^struct I801C : I801B1, I801B2 {};$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:I801B1,I801B2
I801D	tests/test_multiple_inheritance.cpp	/^struct I801D : I801C {}; \/\/ Indirect MI$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:I801C
I801E	tests/test_multiple_inheritance.cpp	/^    struct I801E : I801B3, I801D {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:I801B3,I801D
Implicit casting	docs/advanced/pycpp/object.rst	/^Implicit casting$/;"	c	title:Python types
Implicit conversions	docs/advanced/classes.rst	/^Implicit conversions$/;"	c	title:Classes
Importing modules	docs/advanced/embedding.rst	/^Importing modules$/;"	c	title:Embedding the interpreter
IncType	tests/pybind11_tests.h	/^    IncType() = default;$/;"	p	class:IncType	access:public	signature:()
IncType	tests/pybind11_tests.h	/^    IncType(IncType &&) = delete;$/;"	p	class:IncType	access:public	signature:(IncType &&)
IncType	tests/pybind11_tests.h	/^    IncType(const IncType &other) : IncType(other.value() + 1) {}$/;"	f	class:IncType	access:public	signature:(const IncType & other)
IncType	tests/pybind11_tests.h	/^class IncType : public UserType {$/;"	c	inherits:UserType
IncType::IncType	tests/pybind11_tests.h	/^    IncType() = default;$/;"	p	class:IncType	access:public	signature:()
IncType::IncType	tests/pybind11_tests.h	/^    IncType(IncType &&) = delete;$/;"	p	class:IncType	access:public	signature:(IncType &&)
IncType::IncType	tests/pybind11_tests.h	/^    IncType(const IncType &other) : IncType(other.value() + 1) {}$/;"	f	class:IncType	access:public	signature:(const IncType & other)
IncType::operator =	tests/pybind11_tests.h	/^    IncType &operator=(IncType &&) = delete;$/;"	p	class:IncType	typeref:typename:IncType &	access:public	signature:(IncType &&)
IncType::operator =	tests/pybind11_tests.h	/^    IncType &operator=(const IncType &) = delete;$/;"	p	class:IncType	typeref:typename:IncType &	access:public	signature:(const IncType &)
Include as a submodule	docs/installing.rst	/^Include as a submodule$/;"	c	title:Installing the library
Include what you use	.github/CONTRIBUTING.md	/^### Include what you use$/;"	S	section:Development of pybind11
Include with PyPI	docs/installing.rst	/^Include with PyPI$/;"	c	title:Installing the library
Include with conda-forge	docs/installing.rst	/^Include with conda-forge$/;"	c	title:Installing the library
Include with vcpkg	docs/installing.rst	/^Include with vcpkg$/;"	c	title:Installing the library
Inconsistent detection of Python version in CMake and pybind11	docs/faq.rst	/^Inconsistent detection of Python version in CMake and pybind11$/;"	c	title:Frequently asked questions
Index	include/pybind11/eigen/matrix.h	/^    using Index = typename Type::Index;$/;"	t	struct:type_caster	typeref:typename:Type::Index	access:public
Index	tests/test_builtin_casters.py	/^    class Index:$/;"	c	function:test_int_convert	file:	inherits:	access:private
Inheritance	docs/reference.rst	/^Inheritance$/;"	c	title:Reference
Inheritance and automatic downcasting	docs/classes.rst	/^Inheritance and automatic downcasting$/;"	c	title:Object-oriented code
Initializer	tests/pybind11_tests.h	/^    using Initializer = void (*)(py::module_ &);$/;"	t	class:test_initializer	access:private
InitializingFunctionRecordDeleter	include/pybind11/pybind11.h	/^    struct InitializingFunctionRecordDeleter {$/;"	s	class:cpp_function	access:protected
InstallHeadersNested	tools/setup_global.py.in	/^class InstallHeadersNested(install_headers):$/;"	c	inherits:install_headers	access:public
InstallHeadersNested.run	tools/setup_global.py.in	/^    def run(self):$/;"	m	class:InstallHeadersNested	access:public	signature:(self)
Installing the library	docs/installing.rst	/^Installing the library$/;"	H
Instance and static fields	docs/classes.rst	/^Instance and static fields$/;"	c	title:Object-oriented code
Instantiating compound Python types from C++	docs/advanced/pycpp/object.rst	/^Instantiating compound Python types from C++$/;"	c	title:Python types
Int	tests/test_builtin_casters.py	/^    class Int:$/;"	c	function:test_int_convert	file:	inherits:	access:private
IntAndIndex	tests/test_builtin_casters.py	/^    class IntAndIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
IntFloat	tests/pybind11_tests.h	/^union IntFloat {$/;"	u
IntFloat::f	tests/pybind11_tests.h	/^    float f;$/;"	m	union:IntFloat	typeref:typename:float	access:public
IntFloat::i	tests/pybind11_tests.h	/^    int i;$/;"	m	union:IntFloat	typeref:typename:int	access:public
IntPairs	tests/test_sequences_and_iterators.cpp	/^        explicit IntPairs(std::vector<std::pair<int, int>> data) : data_(std::move(data)) {}$/;"	f	class:TEST_SUBMODULE::IntPairs	file:	access:public	signature:(std::vector<std::pair<int,int>> data)
IntPairs	tests/test_sequences_and_iterators.cpp	/^    class IntPairs {$/;"	c	function:TEST_SUBMODULE	file:
IntStruct	tests/test_thread.cpp	/^    IntStruct(const IntStruct &) = default;$/;"	p	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:(const IntStruct &)
IntStruct	tests/test_thread.cpp	/^    explicit IntStruct(int v) : value(v){};$/;"	f	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:(int v)
IntStruct	tests/test_thread.cpp	/^struct IntStruct {$/;"	s	namespace:__anon837ffe4f0111	file:
Interpreter lifetime	docs/advanced/embedding.rst	/^Interpreter lifetime$/;"	c	title:Embedding the interpreter
Invalid	tests/test_class.cpp	/^    struct Invalid {};$/;"	s	function:TEST_SUBMODULE	file:
IsFinal	tests/test_class.cpp	/^    struct IsFinal final {};$/;"	s	function:TEST_SUBMODULE	file:
IsNonFinalFinal	tests/test_class.cpp	/^    struct IsNonFinalFinal {};$/;"	s	function:TEST_SUBMODULE	file:
Issue1561Inner	tests/test_stl.cpp	/^    struct Issue1561Inner {$/;"	s	function:TEST_SUBMODULE	file:
Issue1561Outer	tests/test_stl.cpp	/^    struct Issue1561Outer {$/;"	s	function:TEST_SUBMODULE	file:
It	include/pybind11/pytypes.h	/^    using It = generic_iterator;$/;"	t	class:generic_iterator	typeref:typename:generic_iterator	access:private
ItType	include/pybind11/stl_bind.h	/^    using ItType = typename Vector::iterator;$/;"	t	function:vector_accessor	typeref:typename:Vector::iterator
Item	tests/test_callbacks.py	/^    class Item:$/;"	c	function:test_async_callbacks	file:	inherits:	access:private
ItemsView	include/pybind11/stl_bind.h	/^    using ItemsView = detail::items_view<StrippedKeyType, StrippedMappedType>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:detail::items_view<StrippedKeyType,StrippedMappedType>
ItemsViewImpl	include/pybind11/stl_bind.h	/^    explicit ItemsViewImpl(Map &map) : map(map) {}$/;"	f	struct:ItemsViewImpl	access:public	signature:(Map & map)
ItemsViewImpl	include/pybind11/stl_bind.h	/^struct ItemsViewImpl : public ItemsView {$/;"	s	inherits:ItemsView
ItemsViewImpl::ItemsViewImpl	include/pybind11/stl_bind.h	/^    explicit ItemsViewImpl(Map &map) : map(map) {}$/;"	f	struct:ItemsViewImpl	access:public	signature:(Map & map)
ItemsViewImpl::iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_iterator(map.begin(), map.end()); }$/;"	f	struct:ItemsViewImpl	typeref:typename:iterator	access:public	signature:()
ItemsViewImpl::len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:ItemsViewImpl	typeref:typename:size_t	access:public	signature:()
ItemsViewImpl::map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ItemsViewImpl	typeref:typename:Map &	access:public
KDE4_INCLUDE_DIR	tools/FindEigen3.cmake	/^    set(KDE4_INCLUDE_DIR "")$/;"	v
KWClass	tests/test_kwargs_and_defaults.cpp	/^    struct KWClass {$/;"	s	function:TEST_SUBMODULE	file:
Keep alive	docs/advanced/functions.rst	/^Keep alive$/;"	s	chapter:Additional call policies
KeyType	include/pybind11/stl_bind.h	/^    using KeyType = typename Map::key_type;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:Map::key_type
KeyType	include/pybind11/stl_bind.h	/^    using KeyType = typename Map::key_type;$/;"	t	function:map_assignment	typeref:typename:Map::key_type
KeysView	include/pybind11/stl_bind.h	/^    using KeysView = detail::keys_view<StrippedKeyType>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:detail::keys_view<StrippedKeyType>
KeysViewImpl	include/pybind11/stl_bind.h	/^    explicit KeysViewImpl(Map &map) : map(map) {}$/;"	f	struct:KeysViewImpl	access:public	signature:(Map & map)
KeysViewImpl	include/pybind11/stl_bind.h	/^struct KeysViewImpl : public KeysView {$/;"	s	inherits:KeysView
KeysViewImpl::KeysViewImpl	include/pybind11/stl_bind.h	/^    explicit KeysViewImpl(Map &map) : map(map) {}$/;"	f	struct:KeysViewImpl	access:public	signature:(Map & map)
KeysViewImpl::contains	include/pybind11/stl_bind.h	/^    bool contains(const object &) override { return false; }$/;"	f	struct:KeysViewImpl	typeref:typename:bool	access:public	signature:(const object &)
KeysViewImpl::contains	include/pybind11/stl_bind.h	/^    bool contains(const typename Map::key_type &k) override { return map.find(k) != map.end(); }$/;"	f	struct:KeysViewImpl	typeref:typename:bool	access:public	signature:(const typename Map::key_type & k)
KeysViewImpl::iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_key_iterator(map.begin(), map.end()); }$/;"	f	struct:KeysViewImpl	typeref:typename:iterator	access:public	signature:()
KeysViewImpl::len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:KeysViewImpl	typeref:typename:size_t	access:public	signature:()
KeysViewImpl::map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:KeysViewImpl	typeref:typename:Map &	access:public
Keyword and default arguments	docs/classes.rst	/^Keyword and default arguments$/;"	c	title:Object-oriented code
Keyword arguments	docs/advanced/pycpp/object.rst	/^Keyword arguments$/;"	c	title:Python types
Keyword arguments	docs/basics.rst	/^Keyword arguments$/;"	c	title:First steps
Keyword-only arguments	docs/advanced/functions.rst	/^Keyword-only arguments$/;"	c	title:Functions
Kind	tests/test_tagbased_polymorphic.cpp	/^    enum class Kind {$/;"	g	struct:Animal	file:	access:public
Known bugs	docs/limitations.rst	/^Known bugs$/;"	c	title:Limitations
Known limitations	docs/limitations.rst	/^Known limitations$/;"	c	title:Limitations
LINUX	tests/env.py	/^LINUX = sys.platform.startswith("linux")$/;"	v	access:public
L_type	include/pybind11/operators.h	/^        using L_type = conditional_t<std::is_same<L, self_t>::value, Base, L>;$/;"	t	function:op_::execute	typeref:typename:conditional_t<std::is_same<L,self_t>::value,Base,L>
L_type	include/pybind11/operators.h	/^        using L_type = conditional_t<std::is_same<L, self_t>::value, Base, L>;$/;"	t	function:op_::execute_cast	typeref:typename:conditional_t<std::is_same<L,self_t>::value,Base,L>
Labrador	tests/test_tagbased_polymorphic.cpp	/^        Labrador,$/;"	e	enum:Animal::Kind	file:	access:public
Labrador	tests/test_tagbased_polymorphic.cpp	/^    explicit Labrador(const std::string &_name, int _excitement = 9001)$/;"	f	struct:Labrador	file:	access:public	signature:(const std::string & _name,int _excitement=9001)
Labrador	tests/test_tagbased_polymorphic.cpp	/^struct Labrador : Dog {$/;"	s	file:	inherits:Dog
Labrador::Labrador	tests/test_tagbased_polymorphic.cpp	/^    explicit Labrador(const std::string &_name, int _excitement = 9001)$/;"	f	struct:Labrador	file:	access:public	signature:(const std::string & _name,int _excitement=9001)
Labrador::excitement	tests/test_tagbased_polymorphic.cpp	/^    int excitement;$/;"	m	struct:Labrador	typeref:typename:int	file:	access:public
LastCat	tests/test_tagbased_polymorphic.cpp	/^        LastCat = 299$/;"	e	enum:Animal::Kind	file:	access:public
LastDog	tests/test_tagbased_polymorphic.cpp	/^        LastDog = 199,$/;"	e	enum:Animal::Kind	file:	access:public
Latest Documentation Status	README.rst	/^.. |Latest Documentation Status| image:: https:\/\/readthedocs.org\/projects\/pybind11\/badge?ve/;"	d	section:License
License	README.rst	/^License$/;"	s	chapter:About
Licensing of contributions	.github/CONTRIBUTING.md	/^### Licensing of contributions$/;"	S	section:Pull requests
Limitations	docs/limitations.rst	/^Limitations$/;"	H
Limitations involving reference arguments	docs/faq.rst	/^Limitations involving reference arguments$/;"	c	title:Frequently asked questions
Linux/macOS	docs/basics.rst	/^Linux\/macOS$/;"	s	chapter:Compiling the test cases
List of all builtin conversions	docs/advanced/cast/overview.rst	/^List of all builtin conversions$/;"	h	title:Overview
Literals	docs/reference.rst	/^Literals$/;"	c	title:Reference
Local STL container bindings	docs/upgrade.rst	/^Local STL container bindings$/;"	s	chapter:v2.2
Local vs Global Exception Translators	docs/advanced/exceptions.rst	/^Local vs Global Exception Translators$/;"	c	title:Exceptions
LocalBase	tests/local_bindings.h	/^    explicit LocalBase(int i) : i(i) {}$/;"	f	class:LocalBase	access:public	signature:(int i)
LocalBase	tests/local_bindings.h	/^class LocalBase {$/;"	c
LocalBase::LocalBase	tests/local_bindings.h	/^    explicit LocalBase(int i) : i(i) {}$/;"	f	class:LocalBase	access:public	signature:(int i)
LocalBase::i	tests/local_bindings.h	/^    int i = -1;$/;"	m	class:LocalBase	typeref:typename:int	access:public
LocalException	tests/local_bindings.h	/^    explicit LocalException(const char *m) : message{m} {}$/;"	f	class:LocalException	access:public	signature:(const char * m)
LocalException	tests/local_bindings.h	/^class LocalException : public std::exception {$/;"	c	inherits:std::exception
LocalException::LocalException	tests/local_bindings.h	/^    explicit LocalException(const char *m) : message{m} {}$/;"	f	class:LocalException	access:public	signature:(const char * m)
LocalException::message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalException	typeref:typename:std::string	access:private
LocalException::what	tests/local_bindings.h	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:LocalException	typeref:typename:const char *	access:public	signature:() const
LocalExternal	tests/local_bindings.h	/^using LocalExternal = LocalBase<3>;$/;"	t	typeref:typename:LocalBase<3>
LocalMap	tests/local_bindings.h	/^using LocalMap = std::unordered_map<std::string, LocalType>;$/;"	t	typeref:typename:std::unordered_map<std::string,LocalType>
LocalSimpleException	tests/local_bindings.h	/^    explicit LocalSimpleException(const char *m) : message{m} {}$/;"	f	class:LocalSimpleException	access:public	signature:(const char * m)
LocalSimpleException	tests/local_bindings.h	/^class LocalSimpleException : public std::exception {$/;"	c	inherits:std::exception
LocalSimpleException::LocalSimpleException	tests/local_bindings.h	/^    explicit LocalSimpleException(const char *m) : message{m} {}$/;"	f	class:LocalSimpleException	access:public	signature:(const char * m)
LocalSimpleException::message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalSimpleException	typeref:typename:std::string	access:private
LocalSimpleException::what	tests/local_bindings.h	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:LocalSimpleException	typeref:typename:const char *	access:public	signature:() const
LocalType	tests/local_bindings.h	/^using LocalType = LocalBase<0>;$/;"	t	typeref:typename:LocalBase<0>
LocalVec	tests/local_bindings.h	/^using LocalVec = std::vector<LocalType>;$/;"	t	typeref:typename:std::vector<LocalType>
LocalVec2	tests/local_bindings.h	/^using LocalVec2 = std::vector<NonLocal2>;$/;"	t	typeref:typename:std::vector<NonLocal2>
MACOS	pybind11/setup_helpers.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v	access:public
MACOS	tests/env.py	/^MACOS = sys.platform.startswith("darwin")$/;"	v	access:public
MAIN_DIR	tests/extra_python_package/test_files.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v	access:public
MAIN_DIR	tests/extra_setuptools/test_setuphelper.py	/^MAIN_DIR = os.path.dirname(os.path.dirname(DIR))$/;"	v	access:public
MAKE_TAG_TYPE	tests/test_factory_constructors.cpp	/^#define MAKE_TAG_TYPE(/;"	d	file:	signature:(Name)
MI1	tests/test_multiple_inheritance.py	/^    class MI1(m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base1, m.Base2	access:private
MI2	tests/test_multiple_inheritance.py	/^    class MI2(B1, m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B1, m.Base1, m.Base2	access:private
MI3	tests/test_multiple_inheritance.py	/^    class MI3(MI2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI2	access:private
MI4	tests/test_multiple_inheritance.py	/^    class MI4(MI3, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI3, m.Base2	access:private
MI5	tests/test_multiple_inheritance.py	/^    class MI5(m.Base2, B1, m.Base1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base2, B1, m.Base1	access:private
MI6	tests/test_multiple_inheritance.py	/^    class MI6(m.Base2, B1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base2, B1	access:private
MI7	tests/test_multiple_inheritance.py	/^    class MI7(B4, MI6):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B4, MI6	access:private
MI8	tests/test_multiple_inheritance.py	/^    class MI8(MI6, B3):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI6, B3	access:private
MI8b	tests/test_multiple_inheritance.py	/^    class MI8b(B3, MI6):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B3, MI6	access:private
MIMany117	tests/test_multiple_inheritance.py	/^    class MIMany117(MIMany14, MIMany58, MIMany916, m.BaseN17):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:MIMany14, MIMany58, MIMany916, m.BaseN17	access:private
MIMany14	tests/test_multiple_inheritance.py	/^    class MIMany14(m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4	access:private
MIMany19	tests/test_multiple_inheritance.py	/^    class MIMany19(MIMany14, MIMany58, m.BaseN9):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:MIMany14, MIMany58, m.BaseN9	access:private
MIMany58	tests/test_multiple_inheritance.py	/^    class MIMany58(m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8	access:private
MIMany916	tests/test_multiple_inheritance.py	/^    class MIMany916($/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN9, m.BaseN10, m.BaseN11, m.BaseN12, m.BaseN13, m.BaseN14, m.BaseN15, m.BaseN16, 	access:private
MITest	tests/test_factory_constructors.py	/^    class MITest(m.TestFactory1, m.TestFactory2):$/;"	c	function:test_multiple_inheritance	file:	inherits:m.TestFactory1, m.TestFactory2	access:private
MIType	tests/test_multiple_inheritance.cpp	/^        MIType(int i, int j) : Base12(i, j) {}$/;"	f	struct:TEST_SUBMODULE::MIType	file:	access:public	signature:(int i,int j)
MIType	tests/test_multiple_inheritance.cpp	/^    struct MIType : Base12 {$/;"	s	function:TEST_SUBMODULE	file:	inherits:Base12
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_mix1	file:	inherits:Base1, m.Base2	access:private
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix2	file:	inherits:m.Base1, Base2	access:private
MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base12a):$/;"	c	function:test_multiple_inheritance_virtbase	file:	inherits:m.Base12a	access:private
MVB	tests/test_multiple_inheritance.cpp	/^        MVB() = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:()
MVB	tests/test_multiple_inheritance.cpp	/^        MVB(const MVB &) = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:(const MVB &)
MVB	tests/test_multiple_inheritance.cpp	/^    struct MVB {$/;"	s	function:TEST_SUBMODULE	file:
MVC	tests/test_multiple_inheritance.cpp	/^    struct MVC : virtual MVB {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MVB
MVD0	tests/test_multiple_inheritance.cpp	/^    struct MVD0 : virtual MVC {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MVC
MVD1	tests/test_multiple_inheritance.cpp	/^    struct MVD1 : virtual MVC {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MVC
MVE	tests/test_multiple_inheritance.cpp	/^    struct MVE : virtual MVD0, virtual MVD1 {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MVD0,MVD1
MVF	tests/test_multiple_inheritance.cpp	/^    struct MVF : virtual MVE {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MVE
Macros	docs/reference.rst	/^Macros$/;"	c	title:Reference
Making opaque types	docs/advanced/cast/stl.rst	/^Making opaque types$/;"	c	title:STL containers
Manual packaging	docs/release.rst	/^Manual packaging$/;"	c
MapType	include/pybind11/eigen/matrix.h	/^    using MapType = Eigen::Map<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Map<PlainObjectType,0,StrideType>	access:private
MapType	include/pybind11/eigen/tensor.h	/^    using MapType = Eigen::TensorMap<Type, Options>;$/;"	t	struct:type_caster	typeref:typename:Eigen::TensorMap<Type,Options>	access:public
MappedType	include/pybind11/stl_bind.h	/^    using MappedType = typename Map::mapped_type;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:Map::mapped_type
MappedType	include/pybind11/stl_bind.h	/^    using MappedType = typename Map::mapped_type;$/;"	t	function:map_assignment	typeref:typename:Map::mapped_type
Matrix	include/pybind11/eigen/matrix.h	/^    using Matrix$/;"	t	struct:type_caster	typeref:typename:Eigen::Matrix<typename Type::Scalar,Type::RowsAtCompileTime,Type::ColsAtCompileTime>	access:protected
Matrix	tests/test_buffers.cpp	/^        Matrix(Matrix &&s) noexcept : m_rows(s.m_rows), m_cols(s.m_cols), m_data(s.m_data) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(Matrix && s)
Matrix	tests/test_buffers.cpp	/^        Matrix(const Matrix &s) : m_rows(s.m_rows), m_cols(s.m_cols) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(const Matrix & s)
Matrix	tests/test_buffers.cpp	/^        Matrix(py::ssize_t rows, py::ssize_t cols) : m_rows(rows), m_cols(cols) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(py::ssize_t rows,py::ssize_t cols)
Matrix	tests/test_buffers.cpp	/^    class Matrix {$/;"	c	function:TEST_SUBMODULE	file:
MatrixXdR	tests/test_eigen_matrix.cpp	/^using MatrixXdR = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>;$/;"	t	typeref:typename:Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic,Eigen::RowMajor>	file:
Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum1 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum1	file:	access:public
Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum2 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum2	file:	access:public
Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum3 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum3	file:	access:public
Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum4 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum4	file:	access:public
Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum5 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum5	file:	access:public
Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum1 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum1	file:	access:public
Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum2 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum2	file:	access:public
Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum3 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum3	file:	access:public
Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum4 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum4	file:	access:public
Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum5 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum5	file:	access:public
Memory view	docs/advanced/pycpp/numpy.rst	/^Memory view$/;"	c	title:NumPy
MetaclassOverride	tests/test_methods_and_attributes.cpp	/^    struct MetaclassOverride {};$/;"	s	function:TEST_SUBMODULE	file:
Minimum compiler versions are enforced at compile time	docs/upgrade.rst	/^Minimum compiler versions are enforced at compile time$/;"	s	chapter:v2.1
Miscellaneous	docs/advanced/misc.rst	/^Miscellaneous$/;"	H
MismatchBase1	tests/test_class.cpp	/^    struct MismatchBase1 {};$/;"	s	function:TEST_SUBMODULE	file:
MismatchBase2	tests/test_class.cpp	/^    struct MismatchBase2 {};$/;"	s	function:TEST_SUBMODULE	file:
MismatchDerived1	tests/test_class.cpp	/^    struct MismatchDerived1 : MismatchBase1 {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:MismatchBase1
MismatchDerived2	tests/test_class.cpp	/^    struct MismatchDerived2 : MismatchBase2 {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:MismatchBase2
MixGL	tests/local_bindings.h	/^    explicit MixGL(int i) : i{i} {}$/;"	f	struct:MixGL	access:public	signature:(int i)
MixGL	tests/local_bindings.h	/^struct MixGL {$/;"	s
MixGL2	tests/local_bindings.h	/^    explicit MixGL2(int i) : i{i} {}$/;"	f	struct:MixGL2	access:public	signature:(int i)
MixGL2	tests/local_bindings.h	/^struct MixGL2 {$/;"	s
MixGL2::MixGL2	tests/local_bindings.h	/^    explicit MixGL2(int i) : i{i} {}$/;"	f	struct:MixGL2	access:public	signature:(int i)
MixGL2::i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL2	typeref:typename:int	access:public
MixGL::MixGL	tests/local_bindings.h	/^    explicit MixGL(int i) : i{i} {}$/;"	f	struct:MixGL	access:public	signature:(int i)
MixGL::i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL	typeref:typename:int	access:public
MixedGlobalLocal	tests/local_bindings.h	/^using MixedGlobalLocal = LocalBase<5>;$/;"	t	typeref:typename:LocalBase<5>
MixedLocalGlobal	tests/local_bindings.h	/^using MixedLocalGlobal = LocalBase<4>;$/;"	t	typeref:typename:LocalBase<4>
Module Destructors	docs/advanced/misc.rst	/^Module Destructors$/;"	c	title:Miscellaneous
Module size	docs/benchmark.rst	/^Module size$/;"	c	title:Benchmark
Module-local class bindings	docs/advanced/classes.rst	/^Module-local class bindings$/;"	c	title:Classes
Movable	tests/test_virtual_functions.cpp	/^    Movable(Movable &&m) noexcept : value{m.value} { print_move_created(this); }$/;"	f	class:Movable	file:	access:public	signature:(Movable && m)
Movable	tests/test_virtual_functions.cpp	/^    Movable(const Movable &m) : value{m.value} { print_copy_created(this); }$/;"	f	class:Movable	file:	access:public	signature:(const Movable & m)
Movable	tests/test_virtual_functions.cpp	/^    Movable(int a, int b) : value{a + b} { print_created(this, a, b); }$/;"	f	class:Movable	file:	access:public	signature:(int a,int b)
Movable	tests/test_virtual_functions.cpp	/^class Movable {$/;"	c	file:
Movable::Movable	tests/test_virtual_functions.cpp	/^    Movable(Movable &&m) noexcept : value{m.value} { print_move_created(this); }$/;"	f	class:Movable	file:	access:public	signature:(Movable && m)
Movable::Movable	tests/test_virtual_functions.cpp	/^    Movable(const Movable &m) : value{m.value} { print_copy_created(this); }$/;"	f	class:Movable	file:	access:public	signature:(const Movable & m)
Movable::Movable	tests/test_virtual_functions.cpp	/^    Movable(int a, int b) : value{a + b} { print_created(this, a, b); }$/;"	f	class:Movable	file:	access:public	signature:(int a,int b)
Movable::get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const { return std::to_string(value); }$/;"	f	class:Movable	typeref:typename:std::string	file:	access:public	signature:() const
Movable::value	tests/test_virtual_functions.cpp	/^    int value;$/;"	m	class:Movable	typeref:typename:int	file:	access:private
Movable::~Movable	tests/test_virtual_functions.cpp	/^    ~Movable() { print_destroyed(this); }$/;"	f	class:Movable	file:	access:public	signature:()
MovableObject	tests/test_callbacks.cpp	/^        MovableObject() = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:()
MovableObject	tests/test_callbacks.cpp	/^        MovableObject(MovableObject &&o) noexcept : valid(o.valid) { o.valid = false; }$/;"	f	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:(MovableObject && o)
MovableObject	tests/test_callbacks.cpp	/^        MovableObject(const MovableObject &) = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:(const MovableObject &)
MovableObject	tests/test_callbacks.cpp	/^    struct MovableObject {$/;"	s	function:TEST_SUBMODULE	file:
MoveIssue1	tests/test_copy_move.cpp	/^        MoveIssue1(MoveIssue1 &&) = delete;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(MoveIssue1 &&)
MoveIssue1	tests/test_copy_move.cpp	/^        MoveIssue1(const MoveIssue1 &c) = default;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(const MoveIssue1 & c)
MoveIssue1	tests/test_copy_move.cpp	/^        explicit MoveIssue1(int v) : v{v} {}$/;"	f	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(int v)
MoveIssue1	tests/test_copy_move.cpp	/^    struct MoveIssue1 {$/;"	s	function:PYBIND11_NAMESPACE_END	file:
MoveIssue2	tests/test_copy_move.cpp	/^        MoveIssue2(MoveIssue2 &&) = default;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue2	file:	access:public	signature:(MoveIssue2 &&)
MoveIssue2	tests/test_copy_move.cpp	/^        explicit MoveIssue2(int v) : v{v} {}$/;"	f	struct:PYBIND11_NAMESPACE_END::MoveIssue2	file:	access:public	signature:(int v)
MoveIssue2	tests/test_copy_move.cpp	/^    struct MoveIssue2 {$/;"	s	function:PYBIND11_NAMESPACE_END	file:
MoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    using MoveOnlyHolderWithAddressOf$/;"	t	function:TEST_SUBMODULE	typeref:typename:unique_ptr_with_addressof_operator<TypeForMoveOnlyHolderWithAddressOf>	file:
MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt() { print_default_created(this); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:()
MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt(MoveOnlyInt &&m) noexcept {$/;"	f	class:MoveOnlyInt	file:	access:public	signature:(MoveOnlyInt && m)
MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt(const MoveOnlyInt &) = delete;$/;"	p	class:MoveOnlyInt	file:	access:public	signature:(const MoveOnlyInt &)
MoveOnlyInt	tests/test_copy_move.cpp	/^    explicit MoveOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:(int v)
MoveOnlyInt	tests/test_copy_move.cpp	/^class MoveOnlyInt {$/;"	c	file:
MoveOnlyInt::MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt() { print_default_created(this); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:()
MoveOnlyInt::MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt(MoveOnlyInt &&m) noexcept {$/;"	f	class:MoveOnlyInt	file:	access:public	signature:(MoveOnlyInt && m)
MoveOnlyInt::MoveOnlyInt	tests/test_copy_move.cpp	/^    MoveOnlyInt(const MoveOnlyInt &) = delete;$/;"	p	class:MoveOnlyInt	file:	access:public	signature:(const MoveOnlyInt &)
MoveOnlyInt::MoveOnlyInt	tests/test_copy_move.cpp	/^    explicit MoveOnlyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:(int v)
MoveOnlyInt::operator =	tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(MoveOnlyInt &&m) noexcept {$/;"	f	class:MoveOnlyInt	typeref:typename:MoveOnlyInt &	file:	access:public	signature:(MoveOnlyInt && m)
MoveOnlyInt::operator =	tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(const MoveOnlyInt &) = delete;$/;"	p	class:MoveOnlyInt	typeref:typename:MoveOnlyInt &	file:	access:public	signature:(const MoveOnlyInt &)
MoveOnlyInt::value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOnlyInt	typeref:typename:int	file:	access:public
MoveOnlyInt::~MoveOnlyInt	tests/test_copy_move.cpp	/^    ~MoveOnlyInt() { print_destroyed(this); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:()
MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt() { print_default_created(this); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:()
MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt(MoveOrCopyInt &&m) noexcept {$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(MoveOrCopyInt && m)
MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(const MoveOrCopyInt & c)
MoveOrCopyInt	tests/test_copy_move.cpp	/^    explicit MoveOrCopyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(int v)
MoveOrCopyInt	tests/test_copy_move.cpp	/^class MoveOrCopyInt {$/;"	c	file:
MoveOrCopyInt::MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt() { print_default_created(this); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:()
MoveOrCopyInt::MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt(MoveOrCopyInt &&m) noexcept {$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(MoveOrCopyInt && m)
MoveOrCopyInt::MoveOrCopyInt	tests/test_copy_move.cpp	/^    MoveOrCopyInt(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(const MoveOrCopyInt & c)
MoveOrCopyInt::MoveOrCopyInt	tests/test_copy_move.cpp	/^    explicit MoveOrCopyInt(int v) : value{v} { print_created(this, value); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:(int v)
MoveOrCopyInt::operator =	tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(MoveOrCopyInt &&m) noexcept {$/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:	access:public	signature:(MoveOrCopyInt && m)
MoveOrCopyInt::operator =	tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:	access:public	signature:(const MoveOrCopyInt & c)
MoveOrCopyInt::value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOrCopyInt	typeref:typename:int	file:	access:public
MoveOrCopyInt::~MoveOrCopyInt	tests/test_copy_move.cpp	/^    ~MoveOrCopyInt() { print_destroyed(this); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:()
MoveOutContainer	tests/test_stl.cpp	/^    struct MoveOutContainer {$/;"	s	function:TEST_SUBMODULE	file:
MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector() = default;$/;"	p	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:()
MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector(MoveOutDetector &&other) noexcept : initialized(other.initialized) {$/;"	f	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:(MoveOutDetector && other)
MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector(const MoveOutDetector &) = default;$/;"	p	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:(const MoveOutDetector &)
MoveOutDetector	tests/test_stl.cpp	/^    struct MoveOutDetector {$/;"	s	function:TEST_SUBMODULE	file:
Multiple Inheritance	docs/advanced/classes.rst	/^Multiple Inheritance$/;"	c	title:Classes
MutuallyRecursiveContainerPairMV	tests/test_stl_binders.cpp	/^struct MutuallyRecursiveContainerPairMV : std::map<int, MutuallyRecursiveContainerPairVM> {};$/;"	s	file:	inherits:std::map<int,MutuallyRecursiveContainerPairVM>
MutuallyRecursiveContainerPairVM	tests/test_stl_binders.cpp	/^struct MutuallyRecursiveContainerPairVM : std::vector<MutuallyRecursiveContainerPairMV> {};$/;"	s	file:	inherits:std::vector<MutuallyRecursiveContainerPairMV>
MyBase	tests/test_class.cpp	/^    struct MyBase {$/;"	s	function:TEST_SUBMODULE	file:
MyClass	tests/test_callbacks.py	/^    class MyClass:$/;"	c	function:test_bound_method_callback	file:	inherits:	access:private
MyDerived	tests/test_class.cpp	/^    struct MyDerived : MyBase {$/;"	s	function:TEST_SUBMODULE	file:	inherits:MyBase
MyEnum	tests/test_constants_and_functions.cpp	/^enum MyEnum { EFirstEntry = 1, ESecondEntry };$/;"	g	file:
MyException	tests/test_exceptions.cpp	/^    explicit MyException(const char *m) : message{m} {}$/;"	f	class:MyException	file:	access:public	signature:(const char * m)
MyException	tests/test_exceptions.cpp	/^class MyException : public std::exception {$/;"	c	file:	inherits:std::exception
MyException2	tests/test_exceptions.cpp	/^    explicit MyException2(const char *m) : message{m} {}$/;"	f	class:MyException2	file:	access:public	signature:(const char * m)
MyException2	tests/test_exceptions.cpp	/^class MyException2 : public std::exception {$/;"	c	file:	inherits:std::exception
MyException2::MyException2	tests/test_exceptions.cpp	/^    explicit MyException2(const char *m) : message{m} {}$/;"	f	class:MyException2	file:	access:public	signature:(const char * m)
MyException2::message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException2	typeref:typename:std::string	file:	access:private
MyException2::what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException2	typeref:typename:const char *	file:	access:public	signature:() const
MyException3	tests/test_exceptions.cpp	/^    MyException3(MyException3 &&) = default;$/;"	p	class:MyException3	file:	access:public	signature:(MyException3 &&)
MyException3	tests/test_exceptions.cpp	/^    MyException3(const MyException3 &) = default;$/;"	p	class:MyException3	file:	access:public	signature:(const MyException3 &)
MyException3	tests/test_exceptions.cpp	/^    explicit MyException3(const char *m) : message{m} {}$/;"	f	class:MyException3	file:	access:public	signature:(const char * m)
MyException3	tests/test_exceptions.cpp	/^class MyException3 {$/;"	c	file:
MyException3::MyException3	tests/test_exceptions.cpp	/^    MyException3(MyException3 &&) = default;$/;"	p	class:MyException3	file:	access:public	signature:(MyException3 &&)
MyException3::MyException3	tests/test_exceptions.cpp	/^    MyException3(const MyException3 &) = default;$/;"	p	class:MyException3	file:	access:public	signature:(const MyException3 &)
MyException3::MyException3	tests/test_exceptions.cpp	/^    explicit MyException3(const char *m) : message{m} {}$/;"	f	class:MyException3	file:	access:public	signature:(const char * m)
MyException3::message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException3	typeref:typename:std::string	file:	access:private
MyException3::operator =	tests/test_exceptions.cpp	/^    MyException3 &operator=(MyException3 &&) = default;$/;"	p	class:MyException3	typeref:typename:MyException3 &	file:	access:public	signature:(MyException3 &&)
MyException3::operator =	tests/test_exceptions.cpp	/^    MyException3 &operator=(const MyException3 &) = default;$/;"	p	class:MyException3	typeref:typename:MyException3 &	file:	access:public	signature:(const MyException3 &)
MyException3::what	tests/test_exceptions.cpp	/^    virtual const char *what() const noexcept { return message.c_str(); }$/;"	f	class:MyException3	typeref:typename:const char *	file:	access:public	signature:() const
MyException3::~MyException3	tests/test_exceptions.cpp	/^    virtual ~MyException3() = default;$/;"	p	class:MyException3	file:	access:public	signature:()
MyException4	tests/test_exceptions.cpp	/^    explicit MyException4(const char *m) : message{m} {}$/;"	f	class:MyException4	file:	access:public	signature:(const char * m)
MyException4	tests/test_exceptions.cpp	/^class MyException4 : public std::exception {$/;"	c	file:	inherits:std::exception
MyException4::MyException4	tests/test_exceptions.cpp	/^    explicit MyException4(const char *m) : message{m} {}$/;"	f	class:MyException4	file:	access:public	signature:(const char * m)
MyException4::message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException4	typeref:typename:std::string	file:	access:private
MyException4::what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException4	typeref:typename:const char *	file:	access:public	signature:() const
MyException5	tests/test_exceptions.cpp	/^    explicit MyException5(const std::string &what) : std::logic_error(what) {}$/;"	f	class:MyException5	file:	access:public	signature:(const std::string & what)
MyException5	tests/test_exceptions.cpp	/^class MyException5 : public std::logic_error {$/;"	c	file:	inherits:std::logic_error
MyException5::MyException5	tests/test_exceptions.cpp	/^    explicit MyException5(const std::string &what) : std::logic_error(what) {}$/;"	f	class:MyException5	file:	access:public	signature:(const std::string & what)
MyException5_1	tests/test_exceptions.cpp	/^class MyException5_1 : public MyException5 {$/;"	c	file:	inherits:MyException5
MyException6	tests/test_exceptions.cpp	/^    explicit MyException6(const char *m) : message{m} {}$/;"	f	class:MyException6	file:	access:public	signature:(const char * m)
MyException6	tests/test_exceptions.cpp	/^class MyException6 : public std::exception {$/;"	c	file:	inherits:std::exception
MyException6::MyException6	tests/test_exceptions.cpp	/^    explicit MyException6(const char *m) : message{m} {}$/;"	f	class:MyException6	file:	access:public	signature:(const char * m)
MyException6::message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException6	typeref:typename:std::string	file:	access:private
MyException6::what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException6	typeref:typename:const char *	file:	access:public	signature:() const
MyException::MyException	tests/test_exceptions.cpp	/^    explicit MyException(const char *m) : message{m} {}$/;"	f	class:MyException	file:	access:public	signature:(const char * m)
MyException::message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException	typeref:typename:std::string	file:	access:private
MyException::what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException	typeref:typename:const char *	file:	access:public	signature:() const
MyObject1	tests/test_smart_ptr.cpp	/^    explicit MyObject1(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject1	file:	access:public	signature:(int value)
MyObject1	tests/test_smart_ptr.cpp	/^class MyObject1 : public Object {$/;"	c	namespace:__anond975f9d30111	file:	inherits:Object
MyObject2	tests/test_smart_ptr.cpp	/^    MyObject2(const MyObject2 &) = default;$/;"	p	class:__anond975f9d30111::MyObject2	file:	access:public	signature:(const MyObject2 &)
MyObject2	tests/test_smart_ptr.cpp	/^    explicit MyObject2(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject2	file:	access:public	signature:(int value)
MyObject2	tests/test_smart_ptr.cpp	/^class MyObject2 {$/;"	c	namespace:__anond975f9d30111	file:
MyObject3	tests/test_smart_ptr.cpp	/^    MyObject3(const MyObject3 &) = default;$/;"	p	class:__anond975f9d30111::MyObject3	file:	access:public	signature:(const MyObject3 &)
MyObject3	tests/test_smart_ptr.cpp	/^    explicit MyObject3(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject3	file:	access:public	signature:(int value)
MyObject3	tests/test_smart_ptr.cpp	/^class MyObject3 : public std::enable_shared_from_this<MyObject3> {$/;"	c	namespace:__anond975f9d30111	file:	inherits:std::enable_shared_from_this<MyObject3>
MyObject4	tests/test_smart_ptr.cpp	/^    explicit MyObject4(int value) : value{value} {$/;"	f	class:__anond975f9d30111::MyObject4	file:	access:public	signature:(int value)
MyObject4	tests/test_smart_ptr.cpp	/^class MyObject4 {$/;"	c	namespace:__anond975f9d30111	file:
MyObject4a	tests/test_smart_ptr.cpp	/^    explicit MyObject4a(int i) : value{i} {$/;"	f	class:__anond975f9d30111::MyObject4a	file:	access:public	signature:(int i)
MyObject4a	tests/test_smart_ptr.cpp	/^class MyObject4a {$/;"	c	namespace:__anond975f9d30111	file:
MyObject4b	tests/test_smart_ptr.cpp	/^    explicit MyObject4b(int i) : MyObject4a(i) { print_created(this); }$/;"	f	class:__anond975f9d30111::MyObject4b	file:	access:public	signature:(int i)
MyObject4b	tests/test_smart_ptr.cpp	/^class MyObject4b : public MyObject4a {$/;"	c	namespace:__anond975f9d30111	file:	inherits:MyObject4a
MyObject5	tests/test_smart_ptr.cpp	/^    explicit MyObject5(int value) : value{value} { print_created(this); }$/;"	f	class:__anond975f9d30111::MyObject5	file:	access:public	signature:(int value)
MyObject5	tests/test_smart_ptr.cpp	/^class MyObject5 { \/\/ managed by huge_unique_ptr$/;"	c	namespace:__anond975f9d30111	file:
MyRepr	tests/test_exceptions.py	/^    class MyRepr:$/;"	c	function:test_invalid_repr	file:	inherits:	access:private
MyTest	tests/test_factory_constructors.py	/^    class MyTest(m.TestFactory6):$/;"	c	function:test_init_factory_alias	file:	inherits:m.TestFactory6	access:private
MyType	tests/test_custom_type_casters.cpp	/^struct MyType {};$/;"	s	namespace:other_lib	file:
N	include/pybind11/numpy.h	/^    static constexpr size_t N = sizeof...(Args);$/;"	m	struct:vectorize_helper	typeref:typename:size_t	access:public
NCVirt	tests/test_virtual_functions.cpp	/^    NCVirt() = default;$/;"	p	class:NCVirt	file:	access:public	signature:()
NCVirt	tests/test_virtual_functions.cpp	/^    NCVirt(const NCVirt &) = delete;$/;"	p	class:NCVirt	file:	access:public	signature:(const NCVirt &)
NCVirt	tests/test_virtual_functions.cpp	/^class NCVirt {$/;"	c	file:
NCVirt::NCVirt	tests/test_virtual_functions.cpp	/^    NCVirt() = default;$/;"	p	class:NCVirt	file:	access:public	signature:()
NCVirt::NCVirt	tests/test_virtual_functions.cpp	/^    NCVirt(const NCVirt &) = delete;$/;"	p	class:NCVirt	file:	access:public	signature:(const NCVirt &)
NCVirt::get_movable	tests/test_virtual_functions.cpp	/^    virtual Movable get_movable(int a, int b) = 0;$/;"	p	class:NCVirt	typeref:typename:Movable	file:	access:public	signature:(int a,int b)
NCVirt::get_noncopyable	tests/test_virtual_functions.cpp	/^    virtual NonCopyable get_noncopyable(int a, int b) { return NonCopyable(a, b); }$/;"	f	class:NCVirt	typeref:typename:NonCopyable	file:	access:public	signature:(int a,int b)
NCVirt::print_movable	tests/test_virtual_functions.cpp	/^    std::string print_movable(int a, int b) { return get_movable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:	access:public	signature:(int a,int b)
NCVirt::print_nc	tests/test_virtual_functions.cpp	/^    std::string print_nc(int a, int b) { return get_noncopyable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:	access:public	signature:(int a,int b)
NCVirt::~NCVirt	tests/test_virtual_functions.cpp	/^    virtual ~NCVirt() = default;$/;"	p	class:NCVirt	file:	access:public	signature:()
NCVirtExt	tests/test_virtual_functions.py	/^    class NCVirtExt(m.NCVirt):$/;"	c	function:test_move_support	file:	inherits:m.NCVirt	access:private
NCVirtExt2	tests/test_virtual_functions.py	/^    class NCVirtExt2(m.NCVirt):$/;"	c	function:test_move_support	file:	inherits:m.NCVirt	access:private
NCVirtTrampoline	tests/test_virtual_functions.cpp	/^class NCVirtTrampoline : public NCVirt {$/;"	c	file:	inherits:NCVirt
NCVirtTrampoline::get_movable	tests/test_virtual_functions.cpp	/^    Movable get_movable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:Movable	file:	access:private	signature:(int a,int b)
NCVirtTrampoline::get_noncopyable	tests/test_virtual_functions.cpp	/^    NonCopyable get_noncopyable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:NonCopyable	file:	access:private	signature:(int a,int b)
NO_DELETER_MSG	tests/test_methods_and_attributes.py	/^NO_DELETER_MSG = ($/;"	v	access:public
NO_FLTO_ARCH	tools/pybind11Common.cmake	/^      set(NO_FLTO_ARCH FALSE)$/;"	v	function:_pybind11_generate_lto
NO_FLTO_ARCH	tools/pybind11Common.cmake	/^      set(NO_FLTO_ARCH TRUE)$/;"	v	function:_pybind11_generate_lto
NO_GETTER_MSG	tests/test_methods_and_attributes.py	/^NO_GETTER_MSG = ($/;"	v	access:public
NO_SETTER_MSG	tests/test_methods_and_attributes.py	/^NO_SETTER_MSG = ($/;"	v	access:public
NPY_ARRAY_ALIGNED_	include/pybind11/numpy.h	/^        NPY_ARRAY_ALIGNED_ = 0x0100,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_C_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_C_CONTIGUOUS_ = 0x0001,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_ENSUREARRAY_	include/pybind11/numpy.h	/^        NPY_ARRAY_ENSUREARRAY_ = 0x0040,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_FORCECAST_	include/pybind11/numpy.h	/^        NPY_ARRAY_FORCECAST_ = 0x0010,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_F_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_F_CONTIGUOUS_ = 0x0002,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_OWNDATA_	include/pybind11/numpy.h	/^        NPY_ARRAY_OWNDATA_ = 0x0004,$/;"	e	enum:npy_api::constants	access:public
NPY_ARRAY_WRITEABLE_	include/pybind11/numpy.h	/^        NPY_ARRAY_WRITEABLE_ = 0x0400,$/;"	e	enum:npy_api::constants	access:public
NPY_BOOL_	include/pybind11/numpy.h	/^        NPY_BOOL_ = 0,$/;"	e	enum:npy_api::constants	access:public
NPY_BYTE_	include/pybind11/numpy.h	/^        NPY_BYTE_,$/;"	e	enum:npy_api::constants	access:public
NPY_CDOUBLE_	include/pybind11/numpy.h	/^        NPY_CDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
NPY_CFLOAT_	include/pybind11/numpy.h	/^        NPY_CFLOAT_,$/;"	e	enum:npy_api::constants	access:public
NPY_CLONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
NPY_DOUBLE_	include/pybind11/numpy.h	/^        NPY_DOUBLE_,$/;"	e	enum:npy_api::constants	access:public
NPY_FLOAT_	include/pybind11/numpy.h	/^        NPY_FLOAT_,$/;"	e	enum:npy_api::constants	access:public
NPY_INT16_	include/pybind11/numpy.h	/^        NPY_INT16_ = NPY_SHORT_,$/;"	e	enum:npy_api::constants	access:public
NPY_INT32_	include/pybind11/numpy.h	/^        NPY_INT32_$/;"	e	enum:npy_api::constants	access:public
NPY_INT64_	include/pybind11/numpy.h	/^        NPY_INT64_$/;"	e	enum:npy_api::constants	access:public
NPY_INT8_	include/pybind11/numpy.h	/^        NPY_INT8_ = NPY_BYTE_,$/;"	e	enum:npy_api::constants	access:public
NPY_INT_	include/pybind11/numpy.h	/^        NPY_INT_,$/;"	e	enum:npy_api::constants	access:public
NPY_LONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
NPY_LONGLONG_	include/pybind11/numpy.h	/^        NPY_LONGLONG_,$/;"	e	enum:npy_api::constants	access:public
NPY_LONG_	include/pybind11/numpy.h	/^        NPY_LONG_,$/;"	e	enum:npy_api::constants	access:public
NPY_OBJECT_	include/pybind11/numpy.h	/^        NPY_OBJECT_ = 17,$/;"	e	enum:npy_api::constants	access:public
NPY_SHORT_	include/pybind11/numpy.h	/^        NPY_SHORT_,$/;"	e	enum:npy_api::constants	access:public
NPY_STRING_	include/pybind11/numpy.h	/^        NPY_STRING_,$/;"	e	enum:npy_api::constants	access:public
NPY_UBYTE_	include/pybind11/numpy.h	/^        NPY_UBYTE_,$/;"	e	enum:npy_api::constants	access:public
NPY_UINT16_	include/pybind11/numpy.h	/^        NPY_UINT16_ = NPY_USHORT_,$/;"	e	enum:npy_api::constants	access:public
NPY_UINT32_	include/pybind11/numpy.h	/^        NPY_UINT32_ = platform_lookup<std::uint32_t, unsigned long, unsigned int, unsigned short/;"	e	enum:npy_api::constants	access:public
NPY_UINT64_	include/pybind11/numpy.h	/^        NPY_UINT64_$/;"	e	enum:npy_api::constants	access:public
NPY_UINT8_	include/pybind11/numpy.h	/^        NPY_UINT8_ = NPY_UBYTE_,$/;"	e	enum:npy_api::constants	access:public
NPY_UINT_	include/pybind11/numpy.h	/^        NPY_UINT_,$/;"	e	enum:npy_api::constants	access:public
NPY_ULONGLONG_	include/pybind11/numpy.h	/^        NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants	access:public
NPY_ULONG_	include/pybind11/numpy.h	/^        NPY_ULONG_,$/;"	e	enum:npy_api::constants	access:public
NPY_UNICODE_	include/pybind11/numpy.h	/^        NPY_UNICODE_,$/;"	e	enum:npy_api::constants	access:public
NPY_USHORT_	include/pybind11/numpy.h	/^        NPY_USHORT_,$/;"	e	enum:npy_api::constants	access:public
NPY_VOID_	include/pybind11/numpy.h	/^        NPY_VOID_,$/;"	e	enum:npy_api::constants	access:public
NVectorized	include/pybind11/numpy.h	/^    static constexpr size_t NVectorized = constexpr_sum(vectorize_arg<Args>::vectorize...);$/;"	m	struct:vectorize_helper	typeref:typename:size_t	access:public
Negative strides for Python buffer objects and numpy arrays	docs/upgrade.rst	/^Negative strides for Python buffer objects and numpy arrays$/;"	s	chapter:v2.2
NestA	tests/test_operator_overloading.cpp	/^    struct NestA : NestABase {$/;"	s	function:TEST_SUBMODULE	file:	inherits:NestABase
NestABase	tests/test_operator_overloading.cpp	/^    struct NestABase {$/;"	s	function:TEST_SUBMODULE	file:
NestB	tests/test_operator_overloading.cpp	/^    struct NestB {$/;"	s	function:TEST_SUBMODULE	file:
NestBase	tests/test_class.cpp	/^    struct NestBase {};$/;"	s	function:TEST_SUBMODULE	file:
NestC	tests/test_operator_overloading.cpp	/^    struct NestC {$/;"	s	function:TEST_SUBMODULE	file:
Nested	tests/test_class.cpp	/^        struct Nested {};$/;"	s	struct:TEST_SUBMODULE::BaseWithNested	file:	access:public
Nested	tests/test_class.cpp	/^        struct Nested {};$/;"	s	struct:TEST_SUBMODULE::DerivedWithNested	file:	access:public
Nested	tests/test_class.cpp	/^    struct Nested {};$/;"	s	function:TEST_SUBMODULE	file:
New API for defining custom constructors and pickling functions	docs/upgrade.rst	/^New API for defining custom constructors and pickling functions$/;"	s	chapter:v2.2
NoAssign	tests/test_stl.cpp	/^        NoAssign(NoAssign &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(NoAssign &&)
NoAssign	tests/test_stl.cpp	/^        NoAssign(const NoAssign &) = default;$/;"	p	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(const NoAssign &)
NoAssign	tests/test_stl.cpp	/^        explicit NoAssign(int value = 0) : value(value) {}$/;"	f	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(int value=0)
NoAssign	tests/test_stl.cpp	/^    struct NoAssign {$/;"	s	function:TEST_SUBMODULE	file:
NoBraceInitialization	tests/test_class.cpp	/^    NoBraceInitialization(std::initializer_list<T> l) : vec(l) {}$/;"	f	struct:NoBraceInitialization	file:	access:public	signature:(std::initializer_list<T> l)
NoBraceInitialization	tests/test_class.cpp	/^    explicit NoBraceInitialization(std::vector<int> v) : vec{std::move(v)} {}$/;"	f	struct:NoBraceInitialization	file:	access:public	signature:(std::vector<int> v)
NoBraceInitialization	tests/test_class.cpp	/^struct NoBraceInitialization {$/;"	s	file:
NoBraceInitialization::NoBraceInitialization	tests/test_class.cpp	/^    NoBraceInitialization(std::initializer_list<T> l) : vec(l) {}$/;"	f	struct:NoBraceInitialization	file:	access:public	signature:(std::initializer_list<T> l)
NoBraceInitialization::NoBraceInitialization	tests/test_class.cpp	/^    explicit NoBraceInitialization(std::vector<int> v) : vec{std::move(v)} {}$/;"	f	struct:NoBraceInitialization	file:	access:public	signature:(std::vector<int> v)
NoBraceInitialization::vec	tests/test_class.cpp	/^    std::vector<int> vec;$/;"	m	struct:NoBraceInitialization	typeref:typename:std::vector<int>	file:	access:public
NoConstructor	tests/test_class.cpp	/^        NoConstructor() = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:()
NoConstructor	tests/test_class.cpp	/^        NoConstructor(NoConstructor &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:(NoConstructor &&)
NoConstructor	tests/test_class.cpp	/^        NoConstructor(const NoConstructor &) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:(const NoConstructor &)
NoConstructor	tests/test_class.cpp	/^    struct NoConstructor {$/;"	s	function:TEST_SUBMODULE	file:
NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew() = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:()
NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew(NoConstructorNew &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:(NoConstructorNew &&)
NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew(const NoConstructorNew &) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:(const NoConstructorNew &)
NoConstructorNew	tests/test_class.cpp	/^    struct NoConstructorNew {$/;"	s	function:TEST_SUBMODULE	file:
NoPlacementNew	tests/test_factory_constructors.cpp	/^        explicit NoPlacementNew(int i) : i(i) {}$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	file:	access:public	signature:(int i)
NoPlacementNew	tests/test_factory_constructors.cpp	/^    class NoPlacementNew {$/;"	c	function:TEST_SUBMODULE	file:
NoisyAlloc	tests/test_factory_constructors.cpp	/^        NoisyAlloc(const NoisyAlloc &) = default;$/;"	p	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(const NoisyAlloc &)
NoisyAlloc	tests/test_factory_constructors.cpp	/^        explicit NoisyAlloc(double d) { py::print(py::str("NoisyAlloc(double {})").format(d)); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(double d)
NoisyAlloc	tests/test_factory_constructors.cpp	/^        explicit NoisyAlloc(int i) { py::print(py::str("NoisyAlloc(int {})").format(i)); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(int i)
NoisyAlloc	tests/test_factory_constructors.cpp	/^    struct NoisyAlloc {$/;"	s	function:TEST_SUBMODULE	file:
Non-converting arguments	docs/advanced/functions.rst	/^Non-converting arguments$/;"	c	title:Functions
Non-public destructors	docs/advanced/classes.rst	/^Non-public destructors$/;"	c	title:Classes
NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable() = delete;$/;"	p	class:NonCopyable	file:	access:public	signature:()
NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(NonCopyable &&o) noexcept : value{std::move(o.value)} { print_move_created(this)/;"	f	class:NonCopyable	file:	access:public	signature:(NonCopyable && o)
NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(const NonCopyable &) = delete;$/;"	p	class:NonCopyable	file:	access:public	signature:(const NonCopyable &)
NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(int a, int b) : value{new int(a * b)} { print_created(this, a, b); }$/;"	f	class:NonCopyable	file:	access:public	signature:(int a,int b)
NonCopyable	tests/test_virtual_functions.cpp	/^class NonCopyable {$/;"	c	file:
NonCopyable::NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable() = delete;$/;"	p	class:NonCopyable	file:	access:public	signature:()
NonCopyable::NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(NonCopyable &&o) noexcept : value{std::move(o.value)} { print_move_created(this)/;"	f	class:NonCopyable	file:	access:public	signature:(NonCopyable && o)
NonCopyable::NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(const NonCopyable &) = delete;$/;"	p	class:NonCopyable	file:	access:public	signature:(const NonCopyable &)
NonCopyable::NonCopyable	tests/test_virtual_functions.cpp	/^    NonCopyable(int a, int b) : value{new int(a * b)} { print_created(this, a, b); }$/;"	f	class:NonCopyable	file:	access:public	signature:(int a,int b)
NonCopyable::get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const {$/;"	f	class:NonCopyable	typeref:typename:std::string	file:	access:public	signature:() const
NonCopyable::operator =	tests/test_virtual_functions.cpp	/^    void operator=(NonCopyable &&) = delete;$/;"	p	class:NonCopyable	typeref:typename:void	file:	access:public	signature:(NonCopyable &&)
NonCopyable::operator =	tests/test_virtual_functions.cpp	/^    void operator=(const NonCopyable &) = delete;$/;"	p	class:NonCopyable	typeref:typename:void	file:	access:public	signature:(const NonCopyable &)
NonCopyable::value	tests/test_virtual_functions.cpp	/^    std::unique_ptr<int> value;$/;"	m	class:NonCopyable	typeref:typename:std::unique_ptr<int>	file:	access:private
NonCopyable::~NonCopyable	tests/test_virtual_functions.cpp	/^    ~NonCopyable() { print_destroyed(this); }$/;"	f	class:NonCopyable	file:	access:public	signature:()
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt(NonCopyableInt &&other) noexcept : value_(other.value_) {$/;"	f	class:NonCopyableInt	file:	access:public	signature:(NonCopyableInt && other)
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt(const NonCopyableInt &) = delete;$/;"	p	class:NonCopyableInt	file:	access:public	signature:(const NonCopyableInt &)
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    explicit NonCopyableInt(int value) : value_(value) {}$/;"	f	class:NonCopyableInt	file:	access:public	signature:(int value)
NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^class NonCopyableInt {$/;"	c	file:
NonCopyableInt::NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt(NonCopyableInt &&other) noexcept : value_(other.value_) {$/;"	f	class:NonCopyableInt	file:	access:public	signature:(NonCopyableInt && other)
NonCopyableInt::NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt(const NonCopyableInt &) = delete;$/;"	p	class:NonCopyableInt	file:	access:public	signature:(const NonCopyableInt &)
NonCopyableInt::NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    explicit NonCopyableInt(int value) : value_(value) {}$/;"	f	class:NonCopyableInt	file:	access:public	signature:(int value)
NonCopyableInt::get	tests/test_sequences_and_iterators.cpp	/^    int get() const { return value_; }$/;"	f	class:NonCopyableInt	typeref:typename:int	file:	access:public	signature:() const
NonCopyableInt::operator =	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt &operator=(NonCopyableInt &&other) noexcept {$/;"	f	class:NonCopyableInt	typeref:typename:NonCopyableInt &	file:	access:public	signature:(NonCopyableInt && other)
NonCopyableInt::operator =	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt &operator=(const NonCopyableInt &) = delete;$/;"	p	class:NonCopyableInt	typeref:typename:NonCopyableInt &	file:	access:public	signature:(const NonCopyableInt &)
NonCopyableInt::set	tests/test_sequences_and_iterators.cpp	/^    void set(int value) { value_ = value; }$/;"	f	class:NonCopyableInt	typeref:typename:void	file:	access:public	signature:(int value)
NonCopyableInt::value_	tests/test_sequences_and_iterators.cpp	/^    int value_;$/;"	m	class:NonCopyableInt	typeref:typename:int	file:	access:private
NonCopyableInt::~NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    ~NonCopyableInt() = default;$/;"	p	class:NonCopyableInt	file:	access:public	signature:()
NonCopyableIntPair	tests/test_sequences_and_iterators.cpp	/^using NonCopyableIntPair = std::pair<NonCopyableInt, NonCopyableInt>;$/;"	t	typeref:typename:std::pair<NonCopyableInt,NonCopyableInt>	file:
NonLocal2	tests/local_bindings.h	/^using NonLocal2 = LocalBase<2>;$/;"	t	typeref:typename:LocalBase<2>
NonLocalMap	tests/local_bindings.h	/^using NonLocalMap = std::unordered_map<std::string, NonLocalType>;$/;"	t	typeref:typename:std::unordered_map<std::string,NonLocalType>
NonLocalMap2	tests/local_bindings.h	/^using NonLocalMap2 = std::unordered_map<std::string, uint8_t>;$/;"	t	typeref:typename:std::unordered_map<std::string,uint8_t>
NonLocalType	tests/local_bindings.h	/^using NonLocalType = LocalBase<1>;$/;"	t	typeref:typename:LocalBase<1>
NonLocalVec	tests/local_bindings.h	/^using NonLocalVec = std::vector<NonLocalType>;$/;"	t	typeref:typename:std::vector<NonLocalType>
NonLocalVec2	tests/local_bindings.h	/^using NonLocalVec2 = std::vector<NonLocal2>;$/;"	t	typeref:typename:std::vector<NonLocal2>
NonPODClass	tests/test_numpy_vectorize.cpp	/^        explicit NonPODClass(int v) : value{v} {}$/;"	f	struct:TEST_SUBMODULE::NonPODClass	file:	access:public	signature:(int v)
NonPODClass	tests/test_numpy_vectorize.cpp	/^    struct NonPODClass {$/;"	s	function:TEST_SUBMODULE	file:
NonRefIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonRefIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonRefIterator	file:	access:public	signature:(const T * ptr)
NonRefIterator	tests/test_sequences_and_iterators.cpp	/^class NonRefIterator {$/;"	c	file:
NonRefIterator::NonRefIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonRefIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonRefIterator	file:	access:public	signature:(const T * ptr)
NonRefIterator::operator *	tests/test_sequences_and_iterators.cpp	/^    T operator*() const { return T(*ptr_); }$/;"	f	class:NonRefIterator	typeref:typename:T	file:	access:public	signature:() const
NonRefIterator::operator ++	tests/test_sequences_and_iterators.cpp	/^    NonRefIterator &operator++() {$/;"	f	class:NonRefIterator	typeref:typename:NonRefIterator &	file:	access:public	signature:()
NonRefIterator::operator ==	tests/test_sequences_and_iterators.cpp	/^    bool operator==(const NonRefIterator &other) const { return ptr_ == other.ptr_; }$/;"	f	class:NonRefIterator	typeref:typename:bool	file:	access:public	signature:(const NonRefIterator & other) const
NonRefIterator::ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonRefIterator	typeref:typename:const T *	file:	access:private
NonZeroIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonZeroIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonZeroIterator	file:	access:public	signature:(const T * ptr)
NonZeroIterator	tests/test_sequences_and_iterators.cpp	/^class NonZeroIterator {$/;"	c	file:
NonZeroIterator::NonZeroIterator	tests/test_sequences_and_iterators.cpp	/^    explicit NonZeroIterator(const T *ptr) : ptr_(ptr) {}$/;"	f	class:NonZeroIterator	file:	access:public	signature:(const T * ptr)
NonZeroIterator::operator *	tests/test_sequences_and_iterators.cpp	/^    const T &operator*() const { return *ptr_; }$/;"	f	class:NonZeroIterator	typeref:typename:const T &	file:	access:public	signature:() const
NonZeroIterator::operator ++	tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator &operator++() {$/;"	f	class:NonZeroIterator	typeref:typename:NonZeroIterator &	file:	access:public	signature:()
NonZeroIterator::ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonZeroIterator	typeref:typename:const T *	file:	access:private
NonZeroSentinel	tests/test_sequences_and_iterators.cpp	/^class NonZeroSentinel {};$/;"	c	file:
NoneCastTester	tests/test_methods_and_attributes.cpp	/^    NoneCastTester() = default;$/;"	p	class:NoneCastTester	file:	access:public	signature:()
NoneCastTester	tests/test_methods_and_attributes.cpp	/^    explicit NoneCastTester(int v) : answer(v) {}$/;"	f	class:NoneCastTester	file:	access:public	signature:(int v)
NoneCastTester	tests/test_methods_and_attributes.cpp	/^class NoneCastTester {$/;"	c	file:
NoneCastTester::NoneCastTester	tests/test_methods_and_attributes.cpp	/^    NoneCastTester() = default;$/;"	p	class:NoneCastTester	file:	access:public	signature:()
NoneCastTester::NoneCastTester	tests/test_methods_and_attributes.cpp	/^    explicit NoneCastTester(int v) : answer(v) {}$/;"	f	class:NoneCastTester	file:	access:public	signature:(int v)
NoneCastTester::answer	tests/test_methods_and_attributes.cpp	/^    int answer = -1;$/;"	m	class:NoneCastTester	typeref:typename:int	file:	access:public
NoneTester	tests/test_methods_and_attributes.cpp	/^class NoneTester {$/;"	c	file:
NoneTester::answer	tests/test_methods_and_attributes.cpp	/^    int answer = 42;$/;"	m	class:NoneTester	typeref:typename:int	file:	access:public
NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable() = default;$/;"	p	struct:NotCopyable	file:	access:public	signature:()
NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable(NotCopyable &&) = default;$/;"	p	struct:NotCopyable	file:	access:public	signature:(NotCopyable &&)
NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable(NotCopyable const &) = delete;$/;"	p	struct:NotCopyable	file:	access:public	signature:(NotCopyable const &)
NotCopyable	tests/test_copy_move.cpp	/^struct NotCopyable {$/;"	s	file:
NotCopyable::NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable() = default;$/;"	p	struct:NotCopyable	file:	access:public	signature:()
NotCopyable::NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable(NotCopyable &&) = default;$/;"	p	struct:NotCopyable	file:	access:public	signature:(NotCopyable &&)
NotCopyable::NotCopyable	tests/test_copy_move.cpp	/^    NotCopyable(NotCopyable const &) = delete;$/;"	p	struct:NotCopyable	file:	access:public	signature:(NotCopyable const &)
NotCopyable::operator =	tests/test_copy_move.cpp	/^    NotCopyable &operator=(NotCopyable &&) = default;$/;"	p	struct:NotCopyable	typeref:typename:NotCopyable &	file:	access:public	signature:(NotCopyable &&)
NotCopyable::operator =	tests/test_copy_move.cpp	/^    NotCopyable &operator=(NotCopyable const &) = delete;$/;"	p	struct:NotCopyable	typeref:typename:NotCopyable &	file:	access:public	signature:(NotCopyable const &)
NotCopyableMap	tests/test_copy_move.cpp	/^struct NotCopyableMap : std::map<int, NotCopyable> {};$/;"	s	file:	inherits:std::map<int,NotCopyable>
NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable() = default;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:()
NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable(NotCopyableNotMovable &&) = delete;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:(NotCopyableNotMovable &&)
NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable(NotCopyableNotMovable const &) = delete;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:(NotCopyableNotMovable const &)
NotCopyableNotMovable	tests/test_copy_move.cpp	/^struct NotCopyableNotMovable {$/;"	s	file:
NotCopyableNotMovable::NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable() = default;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:()
NotCopyableNotMovable::NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable(NotCopyableNotMovable &&) = delete;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:(NotCopyableNotMovable &&)
NotCopyableNotMovable::NotCopyableNotMovable	tests/test_copy_move.cpp	/^    NotCopyableNotMovable(NotCopyableNotMovable const &) = delete;$/;"	p	struct:NotCopyableNotMovable	file:	access:public	signature:(NotCopyableNotMovable const &)
NotCopyableNotMovable::operator =	tests/test_copy_move.cpp	/^    NotCopyableNotMovable &operator=(NotCopyableNotMovable &&) = delete;$/;"	p	struct:NotCopyableNotMovable	typeref:typename:NotCopyableNotMovable &	file:	access:public	signature:(NotCopyableNotMovable &&)
NotCopyableNotMovable::operator =	tests/test_copy_move.cpp	/^    NotCopyableNotMovable &operator=(NotCopyableNotMovable const &) = delete;$/;"	p	struct:NotCopyableNotMovable	typeref:typename:NotCopyableNotMovable &	file:	access:public	signature:(NotCopyableNotMovable const &)
NotCopyableNotMovableMap	tests/test_copy_move.cpp	/^struct NotCopyableNotMovableMap : std::map<int, NotCopyableNotMovable> {};$/;"	s	file:	inherits:std::map<int,NotCopyableNotMovable>
NotCopyableNotMovableVector	tests/test_copy_move.cpp	/^struct NotCopyableNotMovableVector : std::vector<NotCopyableNotMovable> {};$/;"	s	file:	inherits:std::vector<NotCopyableNotMovable>
NotCopyableVector	tests/test_copy_move.cpp	/^struct NotCopyableVector : std::vector<NotCopyable> {};$/;"	s	file:	inherits:std::vector<NotCopyable>
NotInt	tests/test_builtin_casters.py	/^    class NotInt:$/;"	c	function:test_int_convert	file:	inherits:	access:private
NotMovable	tests/test_copy_move.cpp	/^    NotMovable() = default;$/;"	p	struct:NotMovable	file:	access:public	signature:()
NotMovable	tests/test_copy_move.cpp	/^    NotMovable(NotMovable &&) = delete;$/;"	p	struct:NotMovable	file:	access:public	signature:(NotMovable &&)
NotMovable	tests/test_copy_move.cpp	/^    NotMovable(NotMovable const &) = default;$/;"	p	struct:NotMovable	file:	access:public	signature:(NotMovable const &)
NotMovable	tests/test_copy_move.cpp	/^struct NotMovable {$/;"	s	file:
NotMovable::NotMovable	tests/test_copy_move.cpp	/^    NotMovable() = default;$/;"	p	struct:NotMovable	file:	access:public	signature:()
NotMovable::NotMovable	tests/test_copy_move.cpp	/^    NotMovable(NotMovable &&) = delete;$/;"	p	struct:NotMovable	file:	access:public	signature:(NotMovable &&)
NotMovable::NotMovable	tests/test_copy_move.cpp	/^    NotMovable(NotMovable const &) = default;$/;"	p	struct:NotMovable	file:	access:public	signature:(NotMovable const &)
NotMovable::operator =	tests/test_copy_move.cpp	/^    NotMovable &operator=(NotMovable &&) = delete;$/;"	p	struct:NotMovable	typeref:typename:NotMovable &	file:	access:public	signature:(NotMovable &&)
NotMovable::operator =	tests/test_copy_move.cpp	/^    NotMovable &operator=(NotMovable const &) = default;$/;"	p	struct:NotMovable	typeref:typename:NotMovable &	file:	access:public	signature:(NotMovable const &)
NotMovableMap	tests/test_copy_move.cpp	/^struct NotMovableMap : std::map<int, NotMovable> {};$/;"	s	file:	inherits:std::map<int,NotMovable>
NotMovableVector	tests/test_copy_move.cpp	/^struct NotMovableVector : std::vector<NotMovable> {};$/;"	s	file:	inherits:std::vector<NotMovable>
NotPOD	tests/test_numpy_dtypes.cpp	/^        NotPOD() : v("hi"){};$/;"	f	struct:TEST_SUBMODULE::NotPOD	file:	access:public	signature:()
NotPOD	tests/test_numpy_dtypes.cpp	/^    struct NotPOD {$/;"	s	function:TEST_SUBMODULE	file:
NotPybindDerived	tests/test_factory_constructors.py	/^    class NotPybindDerived:$/;"	c	function:test_invalid_self	file:	inherits:	access:private
NotRegistered	tests/test_class.cpp	/^    struct NotRegistered {};$/;"	s	function:TEST_SUBMODULE	file:
NumPy	docs/advanced/pycpp/numpy.rst	/^NumPy$/;"	H
ONE	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
Object	tests/object.h	/^    Object() { print_default_created(this); }$/;"	f	class:Object	access:public	signature:()
Object	tests/object.h	/^    Object(const Object &) : m_refCount(0) { print_copy_created(this); }$/;"	f	class:Object	access:public	signature:(const Object &)
Object	tests/object.h	/^class Object {$/;"	c
Object-oriented code	docs/classes.rst	/^Object-oriented code$/;"	H
Object::Object	tests/object.h	/^    Object() { print_default_created(this); }$/;"	f	class:Object	access:public	signature:()
Object::Object	tests/object.h	/^    Object(const Object &) : m_refCount(0) { print_copy_created(this); }$/;"	f	class:Object	access:public	signature:(const Object &)
Object::decRef	tests/object.h	/^    void decRef(bool dealloc = true) const {$/;"	f	class:Object	typeref:typename:void	access:public	signature:(bool dealloc=true) const
Object::getRefCount	tests/object.h	/^    int getRefCount() const { return m_refCount; };$/;"	f	class:Object	typeref:typename:int	access:public	signature:() const
Object::incRef	tests/object.h	/^    void incRef() const { ++m_refCount; }$/;"	f	class:Object	typeref:typename:void	access:public	signature:() const
Object::m_refCount	tests/object.h	/^    mutable std::atomic<int> m_refCount{0};$/;"	m	class:Object	typeref:typename:std::atomic<int>	access:private
Object::toString	tests/object.h	/^    virtual std::string toString() const = 0;$/;"	p	class:Object	typeref:typename:std::string	access:public	signature:() const
Object::~Object	tests/object.h	/^    virtual ~Object() { print_destroyed(this); }$/;"	f	class:Object	access:protected	signature:()
On version numbers	docs/release.rst	/^On version numbers$/;"	c
Operator overloading	docs/advanced/classes.rst	/^Operator overloading$/;"	c	title:Classes
OptionalEnumValue	tests/test_stl.cpp	/^    using OptionalEnumValue = OptionalImpl<EnumType>;$/;"	t	class:OptionalProperties	typeref:typename:OptionalImpl<EnumType>	file:	access:public
OptionalHolder	tests/test_stl.cpp	/^    OptionalHolder(){};$/;"	f	struct:OptionalHolder	file:	access:public	signature:()
OptionalHolder	tests/test_stl.cpp	/^struct OptionalHolder {$/;"	s	file:
OptionalHolder::OptionalHolder	tests/test_stl.cpp	/^    OptionalHolder(){};$/;"	f	struct:OptionalHolder	file:	access:public	signature:()
OptionalHolder::member_initialized	tests/test_stl.cpp	/^    bool member_initialized() const { return member && member->initialized; }$/;"	f	struct:OptionalHolder	typeref:typename:bool	file:	access:public	signature:() const
OptionalProperties	tests/test_stl.cpp	/^    OptionalProperties() : value(EnumType::kSet) {}$/;"	f	class:OptionalProperties	file:	access:public	signature:()
OptionalProperties	tests/test_stl.cpp	/^class OptionalProperties {$/;"	c	file:
OptionalProperties::OptionalEnumValue	tests/test_stl.cpp	/^    using OptionalEnumValue = OptionalImpl<EnumType>;$/;"	t	class:OptionalProperties	typeref:typename:OptionalImpl<EnumType>	file:	access:public
OptionalProperties::OptionalProperties	tests/test_stl.cpp	/^    OptionalProperties() : value(EnumType::kSet) {}$/;"	f	class:OptionalProperties	file:	access:public	signature:()
OptionalProperties::access_by_copy	tests/test_stl.cpp	/^    OptionalEnumValue access_by_copy() { return value; }$/;"	f	class:OptionalProperties	typeref:typename:OptionalEnumValue	file:	access:public	signature:()
OptionalProperties::access_by_ref	tests/test_stl.cpp	/^    OptionalEnumValue &access_by_ref() { return value; }$/;"	f	class:OptionalProperties	typeref:typename:OptionalEnumValue &	file:	access:public	signature:()
OptionalProperties::value	tests/test_stl.cpp	/^    OptionalEnumValue value;$/;"	m	class:OptionalProperties	typeref:typename:OptionalEnumValue	file:	access:private
OptionalProperties::~OptionalProperties	tests/test_stl.cpp	/^    ~OptionalProperties() {$/;"	f	class:OptionalProperties	file:	access:public	signature:()
OstreamRedirect	include/pybind11/iostream.h	/^    explicit OstreamRedirect(bool do_stdout = true, bool do_stderr = true)$/;"	f	class:OstreamRedirect	access:public	signature:(bool do_stdout=true,bool do_stderr=true)
OstreamRedirect	include/pybind11/iostream.h	/^class OstreamRedirect {$/;"	c
OstreamRedirect::OstreamRedirect	include/pybind11/iostream.h	/^    explicit OstreamRedirect(bool do_stdout = true, bool do_stderr = true)$/;"	f	class:OstreamRedirect	access:public	signature:(bool do_stdout=true,bool do_stderr=true)
OstreamRedirect::do_stderr_	include/pybind11/iostream.h	/^    bool do_stderr_;$/;"	m	class:OstreamRedirect	typeref:typename:bool	access:private
OstreamRedirect::do_stdout_	include/pybind11/iostream.h	/^    bool do_stdout_;$/;"	m	class:OstreamRedirect	typeref:typename:bool	access:private
OstreamRedirect::enter	include/pybind11/iostream.h	/^    void enter() {$/;"	f	class:OstreamRedirect	typeref:typename:void	access:public	signature:()
OstreamRedirect::exit	include/pybind11/iostream.h	/^    void exit() {$/;"	f	class:OstreamRedirect	typeref:typename:void	access:public	signature:()
OstreamRedirect::redirect_stderr	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_estream_redirect> redirect_stderr;$/;"	m	class:OstreamRedirect	typeref:typename:std::unique_ptr<scoped_estream_redirect>	access:private
OstreamRedirect::redirect_stdout	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_ostream_redirect> redirect_stdout;$/;"	m	class:OstreamRedirect	typeref:typename:std::unique_ptr<scoped_ostream_redirect>	access:private
Other options	docs/installing.rst	/^Other options$/;"	c	title:Installing the library
OtherDuplicate	tests/test_class.cpp	/^    struct OtherDuplicate {};$/;"	s	function:TEST_SUBMODULE	file:
OtherDuplicateNested	tests/test_class.cpp	/^    struct OtherDuplicateNested {};$/;"	s	function:TEST_SUBMODULE	file:
Out-of-the-box support for ``std::shared_ptr``	docs/upgrade.rst	/^Out-of-the-box support for ``std::shared_ptr``$/;"	s	chapter:v2.0
Output	tests/conftest.py	/^class Output:$/;"	c	inherits:	access:public
Output.__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Output	access:public	signature:(self, other)
Output.__init__	tests/conftest.py	/^    def __init__(self, string):$/;"	m	class:Output	access:public	signature:(self, string)
Output.__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Output	access:public	signature:(self)
Overload resolution order	docs/advanced/functions.rst	/^Overload resolution order$/;"	c	title:Functions
Overloaded methods	docs/classes.rst	/^Overloaded methods$/;"	c	title:Object-oriented code
OverrideTest	tests/test_virtual_functions.cpp	/^        OverrideTest() = default;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:()
OverrideTest	tests/test_virtual_functions.cpp	/^        OverrideTest(const OverrideTest &) = delete;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:(const OverrideTest &)
OverrideTest	tests/test_virtual_functions.cpp	/^        explicit OverrideTest(const std::string &v) : v{v} {}$/;"	f	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:(const std::string & v)
OverrideTest	tests/test_virtual_functions.cpp	/^    class OverrideTest {$/;"	c	function:TEST_SUBMODULE	file:
Overriding virtual functions in Python	docs/advanced/classes.rst	/^Overriding virtual functions in Python$/;"	c	title:Classes
Overview	docs/advanced/cast/overview.rst	/^Overview$/;"	H
OwnsPythonObjects	tests/test_custom_type_setup.cpp	/^struct OwnsPythonObjects {$/;"	s	namespace:__anon39e9e6a30111	file:
PAPER	docs/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PEP 517	docs/compiling.rst	/^.. _PEP 517: https:\/\/www.python.org\/dev\/peps\/pep-0517\/$/;"	T	section:PEP 518 requirements (Pip 10+ required)
PEP 518 requirements (Pip 10+ required)	docs/compiling.rst	/^PEP 518 requirements (Pip 10+ required)$/;"	s	chapter:Building with setuptools
PEP448	docs/advanced/pycpp/object.rst	/^.. _PEP448: https:\/\/www.python.org\/dev\/peps\/pep-0448\/$/;"	T	chapter:Unpacking arguments
PKGCONFIG	tests/extra_python_package/test_files.py	/^PKGCONFIG = """\\$/;"	v	access:public
PYBIND11_ASSERT_GIL_HELD_INCREF_DECREF	include/pybind11/detail/common.h	/^#    define PYBIND11_ASSERT_GIL_HELD_INCREF_DECREF$/;"	d
PYBIND11_ASSIGN_HELPER	tests/test_buffers.cpp	/^#define PYBIND11_ASSIGN_HELPER(/;"	d	file:	signature:(...)
PYBIND11_AUTO_IT	tests/test_pytypes.cpp	/^#    define PYBIND11_AUTO_IT /;"	d	file:
PYBIND11_BASEN	tests/test_multiple_inheritance.cpp	/^#define PYBIND11_BASEN(/;"	d	file:	signature:(N)
PYBIND11_BINARY_OPERATOR	include/pybind11/operators.h	/^#define PYBIND11_BINARY_OPERATOR(/;"	d	signature:(id,rid,op,expr)
PYBIND11_BOOL_ATTR	include/pybind11/detail/common.h	/^#define PYBIND11_BOOL_ATTR /;"	d
PYBIND11_BUILD_ABI	include/pybind11/detail/internals.h	/^#        define PYBIND11_BUILD_ABI /;"	d
PYBIND11_BUILD_TYPE	include/pybind11/detail/internals.h	/^#    define PYBIND11_BUILD_TYPE /;"	d
PYBIND11_BUILTINS_MODULE	include/pybind11/detail/common.h	/^#define PYBIND11_BUILTINS_MODULE /;"	d
PYBIND11_BUILTIN_QUALNAME	include/pybind11/detail/class.h	/^#    define PYBIND11_BUILTIN_QUALNAME$/;"	d
PYBIND11_BYTES_AS_STRING	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_AS_STRING /;"	d
PYBIND11_BYTES_AS_STRING_AND_SIZE	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_AS_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_CHECK	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_CHECK /;"	d
PYBIND11_BYTES_FROM_STRING	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_FROM_STRING /;"	d
PYBIND11_BYTES_FROM_STRING_AND_SIZE	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_FROM_STRING_AND_SIZE /;"	d
PYBIND11_BYTES_NAME	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_NAME /;"	d
PYBIND11_BYTES_SIZE	include/pybind11/detail/common.h	/^#define PYBIND11_BYTES_SIZE /;"	d
PYBIND11_CATCH_INIT_EXCEPTIONS	include/pybind11/detail/common.h	/^#define PYBIND11_CATCH_INIT_EXCEPTIONS /;"	d
PYBIND11_CHECK_PYTHON_VERSION	include/pybind11/detail/common.h	/^#define PYBIND11_CHECK_PYTHON_VERSION /;"	d
PYBIND11_CMAKECONFIG_INSTALL_DIR	CMakeLists.txt	/^  set(PYBIND11_CMAKECONFIG_INSTALL_DIR$/;"	v
PYBIND11_COMPAT_STRDUP	include/pybind11/pybind11.h	/^#    define PYBIND11_COMPAT_STRDUP /;"	d
PYBIND11_COMPILER_CLANG	include/pybind11/detail/common.h	/^#    define PYBIND11_COMPILER_CLANG$/;"	d
PYBIND11_COMPILER_GCC	include/pybind11/detail/common.h	/^#    define PYBIND11_COMPILER_GCC$/;"	d
PYBIND11_COMPILER_INTEL	include/pybind11/detail/common.h	/^#    define PYBIND11_COMPILER_INTEL$/;"	d
PYBIND11_COMPILER_MSVC	include/pybind11/detail/common.h	/^#    define PYBIND11_COMPILER_MSVC$/;"	d
PYBIND11_COMPILER_TYPE	include/pybind11/detail/internals.h	/^#        define PYBIND11_COMPILER_TYPE /;"	d
PYBIND11_CONCAT	include/pybind11/detail/common.h	/^#define PYBIND11_CONCAT(/;"	d	signature:(first,second)
PYBIND11_CPP14	include/pybind11/detail/common.h	/^#        define PYBIND11_CPP14$/;"	d
PYBIND11_CPP17	include/pybind11/detail/common.h	/^#            define PYBIND11_CPP17$/;"	d
PYBIND11_CPP20	include/pybind11/detail/common.h	/^#                define PYBIND11_CPP20$/;"	d
PYBIND11_CPPTEST_FILES	tests/CMakeLists.txt	/^set(PYBIND11_CPPTEST_FILES "")$/;"	v
PYBIND11_CUDA_TESTS	tests/CMakeLists.txt	/^option(PYBIND11_CUDA_TESTS "Enable building CUDA tests (requires CMake 3.12+)" OFF)$/;"	D
PYBIND11_DEBUG_MARKER	include/pybind11/detail/common.h	/^#        define PYBIND11_DEBUG_MARKER$/;"	d
PYBIND11_DECLARE_HOLDER_TYPE	include/pybind11/cast.h	/^#define PYBIND11_DECLARE_HOLDER_TYPE(/;"	d	signature:(type,holder_type,...)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, custom_unique_ptr<T>);$/;"	p	file:	signature:(T,custom_unique_ptr<T>)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, huge_unique_ptr<T>);$/;"	p	file:	signature:(T,huge_unique_ptr<T>)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, ref<T>, true);$/;"	p	file:	signature:(T,ref<T>,true)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, shared_ptr_with_addressof_operator<T>);$/;"	p	file:	signature:(T,shared_ptr_with_addressof_operator<T>)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);$/;"	p	file:	signature:(T,std::shared_ptr<T>)
PYBIND11_DECLARE_HOLDER_TYPE	tests/test_smart_ptr.cpp	/^PYBIND11_DECLARE_HOLDER_TYPE(T, unique_ptr_with_addressof_operator<T>);$/;"	p	file:	signature:(T,unique_ptr_with_addressof_operator<T>)
PYBIND11_DECL_CHAR_FMT	include/pybind11/numpy.h	/^#define PYBIND11_DECL_CHAR_FMT /;"	d
PYBIND11_DEPRECATED	include/pybind11/detail/common.h	/^#    define PYBIND11_DEPRECATED(/;"	d	signature:(reason)
PYBIND11_DESCR_CONSTEXPR	include/pybind11/detail/descr.h	/^#    define PYBIND11_DESCR_CONSTEXPR /;"	d
PYBIND11_DETAILED_ERROR_MESSAGES	include/pybind11/detail/common.h	/^#    define PYBIND11_DETAILED_ERROR_MESSAGES$/;"	d
PYBIND11_DETAIL_UNDERSCORE_BACKWARD_COMPATIBILITY	include/pybind11/detail/descr.h	/^#    define PYBIND11_DETAIL_UNDERSCORE_BACKWARD_COMPATIBILITY$/;"	d
PYBIND11_DETECTED_CLANG_WITH_MISLEADING_CALL_STD_MOVE_EXPLICITLY_WARNING	include/pybind11/detail/common.h	/^#    define PYBIND11_DETECTED_CLANG_WITH_MISLEADING_CALL_STD_MOVE_EXPLICITLY_WARNING$/;"	d
PYBIND11_EIGEN_MESSAGE_POINTER_TYPES_ARE_NOT_SUPPORTED	include/pybind11/eigen/common.h	/^#define PYBIND11_EIGEN_MESSAGE_POINTER_TYPES_ARE_NOT_SUPPORTED /;"	d
PYBIND11_EIGEN_REPO	tests/CMakeLists.txt	/^set(PYBIND11_EIGEN_REPO$/;"	v
PYBIND11_EIGEN_VERSION_AND_HASH	tests/CMakeLists.txt	/^set(PYBIND11_EIGEN_VERSION_AND_HASH$/;"	v
PYBIND11_EMBEDDED_MODULE	include/pybind11/embed.h	/^#define PYBIND11_EMBEDDED_MODULE(/;"	d	signature:(name,variable)
PYBIND11_EMBEDDED_MODULE	tests/test_cmake_build/embed.cpp	/^PYBIND11_EMBEDDED_MODULE(test_cmake_build, m) {$/;"	f	signature:(test_cmake_build,m)
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(trampoline_module, m) {$/;"	f	signature:(trampoline_module,m)
PYBIND11_EMBEDDED_MODULE	tests/test_embed/test_interpreter.cpp	/^PYBIND11_EMBEDDED_MODULE(widget_module, m) {$/;"	f	signature:(widget_module,m)
PYBIND11_EMBEDDED_MODULE_IMPL	include/pybind11/embed.h	/^#define PYBIND11_EMBEDDED_MODULE_IMPL(/;"	d	signature:(name)
PYBIND11_ENSURE_INTERNALS_READY	include/pybind11/detail/common.h	/^#define PYBIND11_ENSURE_INTERNALS_READY /;"	d
PYBIND11_ENUM_OP_CONV	include/pybind11/pybind11.h	/^#define PYBIND11_ENUM_OP_CONV(/;"	d	signature:(op,expr)
PYBIND11_ENUM_OP_CONV_LHS	include/pybind11/pybind11.h	/^#define PYBIND11_ENUM_OP_CONV_LHS(/;"	d	signature:(op,expr)
PYBIND11_ENUM_OP_STRICT	include/pybind11/pybind11.h	/^#define PYBIND11_ENUM_OP_STRICT(/;"	d	signature:(op,expr,strict_behavior)
PYBIND11_EVAL	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL(...) PYBIND11_EVAL4(PYBIND11_EVAL4(PYBIND11_EVAL4/;"	d	signature:(...)
PYBIND11_EVAL0	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL0(/;"	d	signature:(...)
PYBIND11_EVAL1	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL1(/;"	d	signature:(...)
PYBIND11_EVAL2	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL2(/;"	d	signature:(...)
PYBIND11_EVAL3	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL3(/;"	d	signature:(...)
PYBIND11_EVAL4	include/pybind11/numpy.h	/^#    define PYBIND11_EVAL4(/;"	d	signature:(...)
PYBIND11_EXPAND_SIDE_EFFECTS	include/pybind11/detail/common.h	/^#    define PYBIND11_EXPAND_SIDE_EFFECTS(/;"	d	signature:(PATTERN)
PYBIND11_EXPORT	include/pybind11/detail/common.h	/^#        define PYBIND11_EXPORT /;"	d
PYBIND11_EXPORT_EXCEPTION	include/pybind11/detail/common.h	/^#        define PYBIND11_EXPORT_EXCEPTION /;"	d
PYBIND11_EXPORT_EXCEPTION	include/pybind11/detail/common.h	/^#        define PYBIND11_EXPORT_EXCEPTION$/;"	d
PYBIND11_EXPORT_NAME	CMakeLists.txt	/^    set(PYBIND11_EXPORT_NAME "${PROJECT_NAME}Targets")$/;"	v
PYBIND11_EXPORT_NAME	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^set(PYBIND11_EXPORT_NAME test_export)$/;"	v
PYBIND11_FIELD_DESCRIPTOR	include/pybind11/numpy.h	/^#    define PYBIND11_FIELD_DESCRIPTOR(T, Field) PYBIND11_FIELD_DESCRIPTOR_/;"	d	signature:(T,Field)
PYBIND11_FIELD_DESCRIPTOR_EX	include/pybind11/numpy.h	/^#    define PYBIND11_FIELD_DESCRIPTOR_EX(/;"	d	signature:(T,Field,Name)
PYBIND11_FILTER_TESTS_FOUND	tests/CMakeLists.txt	/^      set(PYBIND11_FILTER_TESTS_FOUND ON)$/;"	v
PYBIND11_FILTER_TESTS_FOUND	tests/CMakeLists.txt	/^  set(PYBIND11_FILTER_TESTS_FOUND OFF)$/;"	v
PYBIND11_FROM_STRING	include/pybind11/detail/common.h	/^#define PYBIND11_FROM_STRING /;"	d
PYBIND11_HANDLE_REF_DEBUG	include/pybind11/pytypes.h	/^#    define PYBIND11_HANDLE_REF_DEBUG$/;"	d
PYBIND11_HAS_EXPERIMENTAL_FILESYSTEM	include/pybind11/stl/filesystem.h	/^#            define PYBIND11_HAS_EXPERIMENTAL_FILESYSTEM /;"	d
PYBIND11_HAS_EXP_OPTIONAL	include/pybind11/detail/common.h	/^#        define PYBIND11_HAS_EXP_OPTIONAL /;"	d
PYBIND11_HAS_FILESYSTEM	include/pybind11/stl/filesystem.h	/^#            define PYBIND11_HAS_FILESYSTEM /;"	d
PYBIND11_HAS_FILESYSTEM_IS_OPTIONAL	tests/test_stl.cpp	/^#    define PYBIND11_HAS_FILESYSTEM_IS_OPTIONAL$/;"	d	file:
PYBIND11_HAS_OPTIONAL	include/pybind11/detail/common.h	/^#        define PYBIND11_HAS_OPTIONAL /;"	d
PYBIND11_HAS_STD_LAUNDER	include/pybind11/pybind11.h	/^#    define PYBIND11_HAS_STD_LAUNDER /;"	d
PYBIND11_HAS_STRING_VIEW	include/pybind11/detail/common.h	/^#            define PYBIND11_HAS_STRING_VIEW$/;"	d
PYBIND11_HAS_U8STRING	include/pybind11/detail/common.h	/^#    define PYBIND11_HAS_U8STRING$/;"	d
PYBIND11_HAS_VARIANT	include/pybind11/detail/common.h	/^#        define PYBIND11_HAS_VARIANT /;"	d
PYBIND11_HEADERS	CMakeLists.txt	/^set(PYBIND11_HEADERS$/;"	v
PYBIND11_INCLUDE_DIR	CMakeLists.txt	/^  set(PYBIND11_INCLUDE_DIR$/;"	v
PYBIND11_INPLACE_OP	include/pybind11/pytypes.h	/^    PYBIND11_INPLACE_OP(operator*=)$/;"	p	class:object	access:public	signature:(operator * =)
PYBIND11_INPLACE_OP	include/pybind11/pytypes.h	/^#define PYBIND11_INPLACE_OP(/;"	d	signature:(iop)
PYBIND11_INPLACE_OPERATOR	include/pybind11/operators.h	/^#define PYBIND11_INPLACE_OPERATOR(/;"	d	signature:(id,op,expr)
PYBIND11_INSTALL	CMakeLists.txt	/^  set(PYBIND11_INSTALL OFF)$/;"	v
PYBIND11_INSTALL	CMakeLists.txt	/^option(PYBIND11_INSTALL "Install pybind11 header files?" ${PYBIND11_MASTER_PROJECT})$/;"	D
PYBIND11_INSTALL	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^set(PYBIND11_INSTALL$/;"	v
PYBIND11_INSTANCE_METHOD_CHECK	include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_CHECK /;"	d
PYBIND11_INSTANCE_METHOD_GET_FUNCTION	include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_GET_FUNCTION /;"	d
PYBIND11_INSTANCE_METHOD_NEW	include/pybind11/detail/common.h	/^#define PYBIND11_INSTANCE_METHOD_NEW(/;"	d	signature:(ptr,class_)
PYBIND11_INTERNALS_ID	include/pybind11/detail/internals.h	/^#define PYBIND11_INTERNALS_ID /;"	d
PYBIND11_INTERNALS_KIND	include/pybind11/detail/internals.h	/^#        define PYBIND11_INTERNALS_KIND /;"	d
PYBIND11_INTERNALS_VERSION	CMakeLists.txt	/^set(PYBIND11_INTERNALS_VERSION$/;"	v
PYBIND11_INTERNALS_VERSION	include/pybind11/detail/internals.h	/^#        define PYBIND11_INTERNALS_VERSION /;"	d
PYBIND11_INTERNALS_VERSION	tests/cross_module_gil_utils.cpp	/^#define PYBIND11_INTERNALS_VERSION /;"	d	file:
PYBIND11_LOCAL_DEF	tests/test_pytypes.cpp	/^#    define PYBIND11_LOCAL_DEF(/;"	d	file:	signature:(...)
PYBIND11_LONG_AS_LONGLONG	include/pybind11/detail/common.h	/^#define PYBIND11_LONG_AS_LONGLONG(/;"	d	signature:(o)
PYBIND11_LONG_CHECK	include/pybind11/detail/common.h	/^#define PYBIND11_LONG_CHECK(/;"	d	signature:(o)
PYBIND11_LONG_FROM_SIGNED	include/pybind11/detail/common.h	/^#define PYBIND11_LONG_FROM_SIGNED(/;"	d	signature:(o)
PYBIND11_LONG_FROM_UNSIGNED	include/pybind11/detail/common.h	/^#define PYBIND11_LONG_FROM_UNSIGNED(/;"	d	signature:(o)
PYBIND11_MAKE_OPAQUE	include/pybind11/cast.h	/^#define PYBIND11_MAKE_OPAQUE(/;"	d	signature:(...)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalMap);$/;"	p	signature:(LocalMap)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalVec);$/;"	p	signature:(LocalVec)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(LocalVec2);$/;"	p	signature:(LocalVec2)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap);$/;"	p	signature:(NonLocalMap)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalMap2);$/;"	p	signature:(NonLocalMap2)
PYBIND11_MAKE_OPAQUE	tests/local_bindings.h	/^PYBIND11_MAKE_OPAQUE(NonLocalVec);$/;"	p	signature:(NonLocalVec)
PYBIND11_MAKE_OPAQUE	tests/test_opaque_types.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<std::string, std::allocator<std::string>>);$/;"	p	file:	signature:(std::vector<std::string,std::allocator<std::string>>)
PYBIND11_MAKE_OPAQUE	tests/test_sequences_and_iterators.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<NonCopyableInt>);$/;"	p	file:	signature:(std::vector<NonCopyableInt>)
PYBIND11_MAKE_OPAQUE	tests/test_sequences_and_iterators.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<NonCopyableIntPair>);$/;"	p	file:	signature:(std::vector<NonCopyableIntPair>)
PYBIND11_MAKE_OPAQUE	tests/test_stl.cpp	/^PYBIND11_MAKE_OPAQUE(std::vector<std::string, std::allocator<std::string>>);$/;"	p	file:	signature:(std::vector<std::string,std::allocator<std::string>>)
PYBIND11_MAP2_LIST	include/pybind11/numpy.h	/^#    define PYBIND11_MAP2_LIST(/;"	d	signature:(f,t,...)
PYBIND11_MAP2_LIST0	include/pybind11/numpy.h	/^#    define PYBIND11_MAP2_LIST0(/;"	d	signature:(f,t,x1,x2,peek,...)
PYBIND11_MAP2_LIST1	include/pybind11/numpy.h	/^#    define PYBIND11_MAP2_LIST1(/;"	d	signature:(f,t,x1,x2,peek,...)
PYBIND11_MAP2_LIST_NEXT	include/pybind11/numpy.h	/^#    define PYBIND11_MAP2_LIST_NEXT(/;"	d	signature:(test,next)
PYBIND11_MAP2_LIST_NEXT1	include/pybind11/numpy.h	/^#        define PYBIND11_MAP2_LIST_NEXT1(/;"	d	signature:(test,next)
PYBIND11_MAP_COMMA	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_COMMA /;"	d
PYBIND11_MAP_END	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_END(/;"	d	signature:(...)
PYBIND11_MAP_GET_END	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_GET_END(/;"	d	signature:()
PYBIND11_MAP_LIST	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_LIST(/;"	d	signature:(f,t,...)
PYBIND11_MAP_LIST0	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_LIST0(/;"	d	signature:(f,t,x,peek,...)
PYBIND11_MAP_LIST1	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_LIST1(/;"	d	signature:(f,t,x,peek,...)
PYBIND11_MAP_LIST_NEXT	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_LIST_NEXT(/;"	d	signature:(test,next)
PYBIND11_MAP_LIST_NEXT1	include/pybind11/numpy.h	/^#        define PYBIND11_MAP_LIST_NEXT1(/;"	d	signature:(test,next)
PYBIND11_MAP_NEXT	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_NEXT(test, next) PYBIND11_MAP_NEXT1/;"	d	signature:(test,next)
PYBIND11_MAP_NEXT0	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_NEXT0(/;"	d	signature:(test,next,...)
PYBIND11_MAP_NEXT1	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_NEXT1(/;"	d	signature:(test,next)
PYBIND11_MAP_OUT	include/pybind11/numpy.h	/^#    define PYBIND11_MAP_OUT$/;"	d
PYBIND11_MASTER_PROJECT	CMakeLists.txt	/^  set(PYBIND11_MASTER_PROJECT OFF)$/;"	v
PYBIND11_MASTER_PROJECT	CMakeLists.txt	/^  set(PYBIND11_MASTER_PROJECT ON)$/;"	v
PYBIND11_MATH_OPERATOR_BINARY	include/pybind11/pytypes.h	/^#define PYBIND11_MATH_OPERATOR_BINARY(/;"	d	signature:(op,fn)
PYBIND11_MATH_OPERATOR_BINARY_INPLACE	include/pybind11/pytypes.h	/^#define PYBIND11_MATH_OPERATOR_BINARY_INPLACE(/;"	d	signature:(iop,fn)
PYBIND11_MATH_OPERATOR_UNARY	include/pybind11/pytypes.h	/^#define PYBIND11_MATH_OPERATOR_UNARY(/;"	d	signature:(op,fn)
PYBIND11_MAYBE_UNUSED	include/pybind11/detail/common.h	/^#    define PYBIND11_MAYBE_UNUSED /;"	d
PYBIND11_MAYBE_UNUSED	include/pybind11/detail/common.h	/^#    define PYBIND11_MAYBE_UNUSED$/;"	d
PYBIND11_MODULE	include/pybind11/detail/common.h	/^#define PYBIND11_MODULE(/;"	d	signature:(name,variable)
PYBIND11_MODULE	tests/eigen_tensor_avoid_stl_array.cpp	/^PYBIND11_MODULE(eigen_tensor_avoid_stl_array, m) { eigen_tensor_test::test_module(m); }$/;"	f	signature:(eigen_tensor_avoid_stl_array,m)
PYBIND11_MODULE	tests/pybind11_cross_module_tests.cpp	/^PYBIND11_MODULE(pybind11_cross_module_tests, m) {$/;"	f	signature:(pybind11_cross_module_tests,m)
PYBIND11_MODULE	tests/pybind11_tests.cpp	/^PYBIND11_MODULE(pybind11_tests, m) {$/;"	f	signature:(pybind11_tests,m)
PYBIND11_MODULE	tests/test_cmake_build/main.cpp	/^PYBIND11_MODULE(test_cmake_build, m) {$/;"	f	signature:(test_cmake_build,m)
PYBIND11_MODULE	tests/test_embed/external_module.cpp	/^PYBIND11_MODULE(external_module, m) {$/;"	f	signature:(external_module,m)
PYBIND11_MODULE::A::A	tests/test_embed/external_module.cpp	/^        explicit A(int value) : v{value} {};$/;"	f	class:PYBIND11_MODULE::A	file:	access:public	signature:(int value)
PYBIND11_MODULE::A::v	tests/test_embed/external_module.cpp	/^        int v;$/;"	m	class:PYBIND11_MODULE::A	typeref:typename:int	file:	access:public
PYBIND11_MODULE::Dog::Dog	tests/pybind11_cross_module_tests.cpp	/^        explicit Dog(std::string name) : Pet(std::move(name)) {}$/;"	f	class:PYBIND11_MODULE::Dog	file:	access:public	signature:(std::string name)
PYBIND11_MODULE_LOCAL_ID	include/pybind11/detail/internals.h	/^#define PYBIND11_MODULE_LOCAL_ID /;"	d
PYBIND11_NAMESPACE	include/pybind11/detail/common.h	/^#        define PYBIND11_NAMESPACE /;"	d
PYBIND11_NAMESPACE	tests/test_custom_type_casters.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE	tests/test_custom_type_casters.cpp	/^namespace PYBIND11_NAMESPACE {}$/;"	n	namespace:other_lib	file:
PYBIND11_NAMESPACE	tests/test_smart_ptr.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE	tests/test_stl.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE	tests/test_tagbased_polymorphic.cpp	/^namespace PYBIND11_NAMESPACE {$/;"	n	file:
PYBIND11_NAMESPACE::detail	tests/test_custom_type_casters.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
PYBIND11_NAMESPACE::detail	tests/test_smart_ptr.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
PYBIND11_NAMESPACE::detail	tests/test_stl.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
PYBIND11_NAMESPACE::detail::holder_helper	tests/test_smart_ptr.cpp	/^struct holder_helper<ref<T>> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::holder_helper::get	tests/test_smart_ptr.cpp	/^    static const T *get(const ref<T> &p) { return p.get_ptr(); }$/;"	f	struct:PYBIND11_NAMESPACE::detail::holder_helper	typeref:typename:const T *	file:	access:public	signature:(const ref<T> & p)
PYBIND11_NAMESPACE::detail::type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgAlwaysConverts> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector1> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector2> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<DestructionTester> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<other_lib::MyType> : public other_lib::my_caster {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:other_lib::my_caster
PYBIND11_NAMESPACE::detail::type_caster	tests/test_stl.cpp	/^struct type_caster<ReferenceSensitiveOptional<T>>$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:optional_caster<ReferenceSensitiveOptional<T>>
PYBIND11_NAMESPACE::detail::type_caster	tests/test_stl.cpp	/^struct type_caster<boost::none_t> : void_caster<boost::none_t> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:void_caster<boost::none_t>
PYBIND11_NAMESPACE::detail::type_caster	tests/test_stl.cpp	/^struct type_caster<boost::optional<T>> : optional_caster<boost::optional<T>> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:optional_caster<boost::optional<T>>
PYBIND11_NAMESPACE::detail::type_caster	tests/test_stl.cpp	/^struct type_caster<boost::variant<Ts...>> : variant_caster<boost::variant<Ts...>> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:variant_caster<boost::variant<Ts...>>
PYBIND11_NAMESPACE::detail::type_caster::cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgAlwaysConverts &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgAlwaysConverts &,return_value_policy,handle)
PYBIND11_NAMESPACE::detail::type_caster::cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector1 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgInspector1 & src,return_value_policy,handle)
PYBIND11_NAMESPACE::detail::type_caster::cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector2 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgInspector2 & src,return_value_policy,handle)
PYBIND11_NAMESPACE::detail::type_caster::cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const DestructionTester &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const DestructionTester &,return_value_policy,handle)
PYBIND11_NAMESPACE::detail::type_caster::load	tests/test_custom_type_casters.cpp	/^    bool load(handle src, bool convert) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle src,bool convert)
PYBIND11_NAMESPACE::detail::type_caster::load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool convert) { return convert; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool convert)
PYBIND11_NAMESPACE::detail::type_caster::load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool)
PYBIND11_NAMESPACE::detail::visit_helper	tests/test_stl.cpp	/^struct visit_helper<boost::variant> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
PYBIND11_NAMESPACE::detail::visit_helper::call	tests/test_stl.cpp	/^    static auto call(Args &&...args) -> decltype(boost::apply_visitor(args...)) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::visit_helper	typeref:typename:decltype(boost::apply_visitor (args...))	file:	access:public	signature:(Args &&...args)
PYBIND11_NAMESPACE::polymorphic_type_hook	tests/test_tagbased_polymorphic.cpp	/^struct polymorphic_type_hook<itype, detail::enable_if_t<std::is_base_of<Animal, itype>::value>> /;"	s	namespace:PYBIND11_NAMESPACE	file:
PYBIND11_NAMESPACE::polymorphic_type_hook::get	tests/test_tagbased_polymorphic.cpp	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:PYBIND11_NAMESPACE::polymorphic_type_hook	typeref:typename:const void *	file:	access:public	signature:(const itype * src,const std::type_info * & type)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/buffer_info.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	typeref:typename:PYBIND11_NAMESPACE	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/cast.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/class.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	typeref:typename:PYBIND11_NAMESPACE	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/common.h	/^#define PYBIND11_NAMESPACE_BEGIN(/;"	d	signature:(name)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/common.h	/^PYBIND11_NAMESPACE_BEGIN(constexpr_impl)$/;"	f	signature:(constexpr_impl)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/common.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/init.h	/^PYBIND11_NAMESPACE_BEGIN(initimpl)$/;"	f	signature:(initimpl)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/internals.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	p	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/detail/typeid.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	typeref:typename:PYBIND11_NAMESPACE	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/eigen/tensor.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/eval.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	typeref:typename:PYBIND11_NAMESPACE	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/gil.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	p	typeref:typename:PYBIND11_NAMESPACE	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/pybind11.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/pytypes.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_BEGIN	include/pybind11/pytypes.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail) const
PYBIND11_NAMESPACE_BEGIN	include/pybind11/stl_bind.h	/^PYBIND11_NAMESPACE_BEGIN(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/cast.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/detail/common.h	/^#define PYBIND11_NAMESPACE_END(/;"	d	signature:(name)
PYBIND11_NAMESPACE_END	include/pybind11/detail/common.h	/^PYBIND11_NAMESPACE_END(constexpr_impl)$/;"	f	signature:(constexpr_impl)
PYBIND11_NAMESPACE_END	include/pybind11/detail/common.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/detail/internals.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/detail/typeid.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/embed.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/iostream.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/numpy.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/pybind11.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	include/pybind11/stl_bind.h	/^PYBIND11_NAMESPACE_END(detail)$/;"	f	signature:(detail)
PYBIND11_NAMESPACE_END	tests/pybind11_tests.h	/^PYBIND11_NAMESPACE_END(pybind11)$/;"	f	typeref:typename:detail	signature:(pybind11)
PYBIND11_NAMESPACE_END	tests/test_builtin_casters.cpp	/^PYBIND11_NAMESPACE_END(pybind11)$/;"	f	typeref:typename:detail	signature:(pybind11)
PYBIND11_NAMESPACE_END	tests/test_copy_move.cpp	/^PYBIND11_NAMESPACE_END(pybind11)$/;"	f	typeref:typename:detail	signature:(pybind11)
PYBIND11_NAMESPACE_END::MoveIssue1::MoveIssue1	tests/test_copy_move.cpp	/^        MoveIssue1(MoveIssue1 &&) = delete;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(MoveIssue1 &&)
PYBIND11_NAMESPACE_END::MoveIssue1::MoveIssue1	tests/test_copy_move.cpp	/^        MoveIssue1(const MoveIssue1 &c) = default;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(const MoveIssue1 & c)
PYBIND11_NAMESPACE_END::MoveIssue1::MoveIssue1	tests/test_copy_move.cpp	/^        explicit MoveIssue1(int v) : v{v} {}$/;"	f	struct:PYBIND11_NAMESPACE_END::MoveIssue1	file:	access:public	signature:(int v)
PYBIND11_NAMESPACE_END::MoveIssue1::v	tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:PYBIND11_NAMESPACE_END::MoveIssue1	typeref:typename:int	file:	access:public
PYBIND11_NAMESPACE_END::MoveIssue2::MoveIssue2	tests/test_copy_move.cpp	/^        MoveIssue2(MoveIssue2 &&) = default;$/;"	p	struct:PYBIND11_NAMESPACE_END::MoveIssue2	file:	access:public	signature:(MoveIssue2 &&)
PYBIND11_NAMESPACE_END::MoveIssue2::MoveIssue2	tests/test_copy_move.cpp	/^        explicit MoveIssue2(int v) : v{v} {}$/;"	f	struct:PYBIND11_NAMESPACE_END::MoveIssue2	file:	access:public	signature:(int v)
PYBIND11_NAMESPACE_END::MoveIssue2::v	tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:PYBIND11_NAMESPACE_END::MoveIssue2	typeref:typename:int	file:	access:public
PYBIND11_NAMESPACE_END::PrivateOpNew::operator new	tests/test_copy_move.cpp	/^        void *operator new(size_t bytes) {$/;"	f	struct:PYBIND11_NAMESPACE_END::PrivateOpNew	typeref:typename:void *	file:	access:private	signature:(size_t bytes)
PYBIND11_NAMESPACE_END::PrivateOpNew::value	tests/test_copy_move.cpp	/^        int value = 1;$/;"	m	struct:PYBIND11_NAMESPACE_END::PrivateOpNew	typeref:typename:int	file:	access:public
PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView::operator std::string	tests/test_builtin_casters.cpp	/^        operator std::string() const { return "success"; }$/;"	f	struct:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView	file:	access:public	signature:() const
PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView::operator std::string_view	tests/test_builtin_casters.cpp	/^        operator std::string_view() const { return "failure"; }$/;"	f	struct:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView	file:	access:public	signature:() const
PYBIND11_NB_BOOL	include/pybind11/detail/common.h	/^#define PYBIND11_NB_BOOL(/;"	d	signature:(ptr)
PYBIND11_NOINLINE	include/pybind11/detail/common.h	/^#    define PYBIND11_NOINLINE /;"	d
PYBIND11_NOINLINE_DISABLED	include/pybind11/detail/common.h	/^#    define PYBIND11_NOINLINE_DISABLED$/;"	d
PYBIND11_NOPYTHON	CMakeLists.txt	/^option(PYBIND11_NOPYTHON "Disable search for Python" OFF)$/;"	D
PYBIND11_NUMPY_DTYPE	include/pybind11/numpy.h	/^#    define PYBIND11_NUMPY_DTYPE(/;"	d	signature:(Type,...)
PYBIND11_NUMPY_DTYPE_EX	include/pybind11/numpy.h	/^#    define PYBIND11_NUMPY_DTYPE_EX(/;"	d	signature:(Type,...)
PYBIND11_OBJECT	include/pybind11/pybind11.h	/^    PYBIND11_OBJECT(class_, generic_type, PyType_Check)$/;"	f	class:class_	access:public	signature:(class_,generic_type,PyType_Check)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(anyset, object, PyAnySet_Check)$/;"	f	class:anyset	access:public	signature:(anyset,object,PyAnySet_Check)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)$/;"	f	class:bytes	access:public	signature:(bytes,object,PYBIND11_BYTES_CHECK)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)$/;"	f	class:ellipsis	access:public	signature:(ellipsis,object,detail::PyEllipsis_Check)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(none, object, detail::PyNone_Check)$/;"	f	class:none	access:public	signature:(none,object,detail::PyNone_Check)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(type, object, PyType_Check)$/;"	f	class:type	access:public	signature:(type,object,PyType_Check)
PYBIND11_OBJECT	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT(/;"	d	signature:(Name,Parent,CheckFun)
PYBIND11_OBJECT_CHECK_FAILED	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CHECK_FAILED(/;"	d	signature:(Name,o_ptr)
PYBIND11_OBJECT_COMMON	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_COMMON(/;"	d	signature:(Name,Parent,CheckFun)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(bool_, object, PyBool_Check, raw_bool)$/;"	f	class:bool_	access:public	signature:(bool_,object,PyBool_Check,raw_bool)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(bytearray, object, PyByteArray_Check, PyByteArray_FromObject)$/;"	f	class:bytearray	access:public	signature:(bytearray,object,PyByteArray_Check,PyByteArray_FromObject)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(dict, object, PyDict_Check, raw_dict)$/;"	f	class:dict	access:public	signature:(dict,object,PyDict_Check,raw_dict)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(float_, object, PyFloat_Check, PyNumber_Float)$/;"	f	class:float_	access:public	signature:(float_,object,PyFloat_Check,PyNumber_Float)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(int_, object, PYBIND11_LONG_CHECK, PyNumber_Long)$/;"	f	class:int_	access:public	signature:(int_,object,PYBIND11_LONG_CHECK,PyNumber_Long)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(list, object, PyList_Check, PySequence_List)$/;"	f	class:list	access:public	signature:(list,object,PyList_Check,PySequence_List)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(memoryview, object, PyMemoryView_Check, PyMemoryView_FromObject)$/;"	f	class:memoryview	access:public	signature:(memoryview,object,PyMemoryView_Check,PyMemoryView_FromObject)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)$/;"	f	class:set	access:public	signature:(set,anyset,PySet_Check,PySet_New)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)$/;"	f	class:str	access:public	signature:(str,object,PYBIND11_STR_CHECK_FUN,raw_str)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(tuple, object, PyTuple_Check, PySequence_Tuple)$/;"	f	class:tuple	access:public	signature:(tuple,object,PyTuple_Check,PySequence_Tuple)
PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CVT(/;"	d	signature:(Name,Parent,CheckFun,ConvertFun)
PYBIND11_OBJECT_CVT	tests/test_pytypes.cpp	/^    PYBIND11_OBJECT_CVT(float_, py::object, external::detail::check, external::detail::conv)$/;"	f	class:external::float_	file:	access:private	signature:(float_,py::object,external::detail::check,external::detail::conv)
PYBIND11_OBJECT_CVT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)$/;"	f	class:weakref	access:public	signature:(weakref,object,PyWeakref_Check,raw_weakref)
PYBIND11_OBJECT_CVT_DEFAULT	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_CVT_DEFAULT(/;"	d	signature:(Name,Parent,CheckFun,ConvertFun)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pybind11.h	/^    PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)$/;"	f	class:module_	access:public	signature:(module_,object,PyModule_Check)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)$/;"	f	class:buffer	access:public	signature:(buffer,object,PyObject_CheckBuffer)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)$/;"	f	class:capsule	access:public	signature:(capsule,object,PyCapsule_CheckExact)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)$/;"	f	class:function	access:public	signature:(function,object,PyCallable_Check)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)$/;"	f	class:sequence	access:public	signature:(sequence,object,PySequence_Check)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)$/;"	f	class:slice	access:public	signature:(slice,object,PySlice_Check)
PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^#define PYBIND11_OBJECT_DEFAULT(/;"	d	signature:(Name,Parent,CheckFun)
PYBIND11_OPT_SIZE	tools/pybind11Common.cmake	/^  set(PYBIND11_OPT_SIZE -Os)$/;"	v
PYBIND11_OPT_SIZE	tools/pybind11Common.cmake	/^  set(PYBIND11_OPT_SIZE \/Os)$/;"	v
PYBIND11_OVERLOAD	include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD(/;"	d	signature:(ret_type,cname,fn,...)
PYBIND11_OVERLOAD_CAST	include/pybind11/detail/common.h	/^#    define PYBIND11_OVERLOAD_CAST /;"	d
PYBIND11_OVERLOAD_INT	include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_INT(/;"	d	signature:(ret_type,cname,name,...)
PYBIND11_OVERLOAD_NAME	include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_NAME(/;"	d	signature:(ret_type,cname,name,fn,...)
PYBIND11_OVERLOAD_PURE	include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE(/;"	d	signature:(ret_type,cname,fn,...)
PYBIND11_OVERLOAD_PURE_NAME	include/pybind11/pybind11.h	/^#define PYBIND11_OVERLOAD_PURE_NAME(/;"	d	signature:(ret_type,cname,name,fn,...)
PYBIND11_OVERRIDE	include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE(/;"	d	signature:(ret_type,cname,fn,...)
PYBIND11_OVERRIDE_IMPL	include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_IMPL(/;"	d	signature:(ret_type,cname,name,...)
PYBIND11_OVERRIDE_NAME	include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_NAME(/;"	d	signature:(ret_type,cname,name,fn,...)
PYBIND11_OVERRIDE_PURE	include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_PURE(/;"	d	signature:(ret_type,cname,fn,...)
PYBIND11_OVERRIDE_PURE_NAME	include/pybind11/pybind11.h	/^#define PYBIND11_OVERRIDE_PURE_NAME(/;"	d	signature:(ret_type,cname,name,fn,...)
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	/^#    define PYBIND11_PACKED(/;"	d	file:	signature:(cls)
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	/^PYBIND11_PACKED(struct EnumStruct {$/;"	p	file:	signature:(struct EnumStruct{ E1 e1; E2 e2; })
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	/^PYBIND11_PACKED(struct NestedStruct {$/;"	p	file:	signature:(struct NestedStruct{ SimpleStruct a; PackedStruct b; })
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	/^PYBIND11_PACKED(struct PackedStruct {$/;"	p	file:	signature:(struct PackedStruct{ bool bool_; uint32_t uint_; float float_; long double ldbl_; })
PYBIND11_PACKED	tests/test_numpy_dtypes.cpp	/^PYBIND11_PACKED(struct StructWithUglyNames {$/;"	p	file:	signature:(struct StructWithUglyNames{ int8_t __x__; uint64_t __y__; })
PYBIND11_PLUGIN	include/pybind11/detail/common.h	/^#define PYBIND11_PLUGIN(/;"	d	signature:(name)
PYBIND11_PLUGIN_IMPL	include/pybind11/detail/common.h	/^#define PYBIND11_PLUGIN_IMPL(/;"	d	signature:(name)
PYBIND11_PRAGMA	include/pybind11/detail/common.h	/^#    define PYBIND11_PRAGMA(/;"	d	signature:(...)
PYBIND11_PYCONFIG_SUPPORT_PY_VERSION_HEX	include/pybind11/embed.h	/^#    define PYBIND11_PYCONFIG_SUPPORT_PY_VERSION_HEX /;"	d
PYBIND11_PYTEST_FILES	tests/CMakeLists.txt	/^set(PYBIND11_PYTEST_FILES "")$/;"	v
PYBIND11_PYTHONLIBS_OVERWRITE	tools/FindPythonLibsNew.cmake	/^  PYBIND11_PYTHONLIBS_OVERWRITE$/;"	D
PYBIND11_PYTHON_EXECUTABLE_LAST	tools/pybind11NewTools.cmake	/^  set(PYBIND11_PYTHON_EXECUTABLE_LAST$/;"	v
PYBIND11_PYTHON_VERSION	tools/pybind11Tools.cmake	/^  set(PYBIND11_PYTHON_VERSION$/;"	v
PYBIND11_RUNTIME_EXCEPTION	include/pybind11/detail/common.h	/^#define PYBIND11_RUNTIME_EXCEPTION(/;"	d	signature:(name,type)
PYBIND11_RUNTIME_EXCEPTION	include/pybind11/detail/common.h	/^PYBIND11_RUNTIME_EXCEPTION(stop_iteration, PyExc_StopIteration)$/;"	f	signature:(stop_iteration,PyExc_StopIteration)
PYBIND11_SET_OLDPY_QUALNAME	include/pybind11/detail/class.h	/^#    define PYBIND11_SET_OLDPY_QUALNAME(/;"	d	signature:(obj,nameobj)
PYBIND11_SIMPLE_GIL_MANAGEMENT	CMakeLists.txt	/^option(PYBIND11_SIMPLE_GIL_MANAGEMENT$/;"	D
PYBIND11_SIMPLE_GIL_MANAGEMENT	include/pybind11/detail/common.h	/^#    define PYBIND11_SIMPLE_GIL_MANAGEMENT$/;"	d
PYBIND11_SLICE_OBJECT	include/pybind11/detail/common.h	/^#define PYBIND11_SLICE_OBJECT /;"	d
PYBIND11_STDLIB	include/pybind11/detail/internals.h	/^#        define PYBIND11_STDLIB /;"	d
PYBIND11_STD_LAUNDER	include/pybind11/pybind11.h	/^#    define PYBIND11_STD_LAUNDER /;"	d
PYBIND11_STD_LAUNDER	include/pybind11/pybind11.h	/^#    define PYBIND11_STD_LAUNDER$/;"	d
PYBIND11_STRINGIFY	include/pybind11/detail/common.h	/^#define PYBIND11_STRINGIFY(/;"	d	signature:(x)
PYBIND11_STRING_NAME	include/pybind11/detail/common.h	/^#define PYBIND11_STRING_NAME /;"	d
PYBIND11_STR_CHECK_FUN	include/pybind11/pytypes.h	/^#    define PYBIND11_STR_CHECK_FUN /;"	d
PYBIND11_STR_TYPE	include/pybind11/detail/common.h	/^#define PYBIND11_STR_TYPE /;"	d
PYBIND11_TEST	CMakeLists.txt	/^option(PYBIND11_TEST "Build pybind11 test suite?" ${PYBIND11_MASTER_PROJECT})$/;"	D
PYBIND11_TEST_EIGEN_TENSOR_NAMESPACE	tests/test_eigen_tensor.cpp	/^#define PYBIND11_TEST_EIGEN_TENSOR_NAMESPACE /;"	d	file:
PYBIND11_TEST_FILES	tests/CMakeLists.txt	/^set(PYBIND11_TEST_FILES ${PYBIND11_CPPTEST_FILES})$/;"	v
PYBIND11_TEST_FILES	tests/CMakeLists.txt	/^set(PYBIND11_TEST_FILES$/;"	v
PYBIND11_TEST_FILTER	tests/CMakeLists.txt	/^set(PYBIND11_TEST_FILTER$/;"	v
PYBIND11_TEST_OVERRIDE	tests/CMakeLists.txt	/^set(PYBIND11_TEST_OVERRIDE$/;"	v
PYBIND11_TEST_PREFIX_COMMAND	tests/CMakeLists.txt	/^set(PYBIND11_TEST_PREFIX_COMMAND$/;"	v
PYBIND11_TEST_VARIANT	tests/test_stl.cpp	/^#    define PYBIND11_TEST_VARIANT /;"	d	file:
PYBIND11_THROW	include/pybind11/pybind11.h	/^#define PYBIND11_THROW /;"	d
PYBIND11_TLS_DELETE_VALUE	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_DELETE_VALUE(/;"	d	signature:(key)
PYBIND11_TLS_FREE	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_FREE(/;"	d	signature:(key)
PYBIND11_TLS_FREE	include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_FREE(/;"	d	signature:(key)
PYBIND11_TLS_GET_VALUE	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_GET_VALUE(/;"	d	signature:(key)
PYBIND11_TLS_GET_VALUE	include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_GET_VALUE(/;"	d	signature:(key)
PYBIND11_TLS_KEY_CREATE	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_KEY_CREATE(/;"	d	signature:(var)
PYBIND11_TLS_KEY_CREATE	include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_KEY_CREATE(/;"	d	signature:(var)
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	/^    PYBIND11_TLS_KEY_INIT(loader_life_support_tls_key)$/;"	p	struct:internals	typeref:typename:tstate	access:public	signature:(loader_life_support_tls_key)
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	/^#            define PYBIND11_TLS_KEY_INIT(/;"	d	signature:(var)
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_KEY_INIT(/;"	d	signature:(var)
PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_KEY_INIT(/;"	d	signature:(var)
PYBIND11_TLS_KEY_REF	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_KEY_REF /;"	d
PYBIND11_TLS_KEY_REF	include/pybind11/detail/internals.h	/^#    define PYBIND11_TLS_KEY_REF /;"	d
PYBIND11_TLS_REPLACE_VALUE	include/pybind11/detail/internals.h	/^#        define PYBIND11_TLS_REPLACE_VALUE(/;"	d	signature:(key,value)
PYBIND11_TOSTRING	include/pybind11/detail/common.h	/^#define PYBIND11_TOSTRING(/;"	d	signature:(x)
PYBIND11_TRY_NEXT_OVERLOAD	include/pybind11/detail/common.h	/^#define PYBIND11_TRY_NEXT_OVERLOAD /;"	d
PYBIND11_TYPE	include/pybind11/cast.h	/^#define PYBIND11_TYPE(/;"	d	signature:(...)
PYBIND11_TYPE_CASTER	include/pybind11/cast.h	/^    PYBIND11_TYPE_CASTER(StringType, const_name(PYBIND11_STRING_NAME));$/;"	p	struct:string_caster	access:public	signature:(StringType,const_name (PYBIND11_STRING_NAME))
PYBIND11_TYPE_CASTER	include/pybind11/cast.h	/^    PYBIND11_TYPE_CASTER(type, handle_type_name<type>::name);$/;"	p	struct:pyobject_caster	access:public	signature:(type,handle_type_name<type>::name)
PYBIND11_TYPE_CASTER	include/pybind11/cast.h	/^#define PYBIND11_TYPE_CASTER(/;"	d	signature:(type,py_name)
PYBIND11_TYPE_CASTER	include/pybind11/eigen/tensor.h	/^    PYBIND11_TYPE_CASTER(Type, temp_name);$/;"	p	struct:type_caster	access:public	signature:(Type,temp_name)
PYBIND11_TYPE_CASTER	include/pybind11/numpy.h	/^    PYBIND11_TYPE_CASTER(type, handle_type_name<type>::name);$/;"	p	struct:pyobject_caster	access:public	signature:(type,handle_type_name<type>::name)
PYBIND11_UNARY_OPERATOR	include/pybind11/operators.h	/^#define PYBIND11_UNARY_OPERATOR(/;"	d	signature:(id,op,expr)
PYBIND11_VERSION_HEX	include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_HEX /;"	d
PYBIND11_VERSION_MAJOR	include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_MAJOR /;"	d
PYBIND11_VERSION_MINOR	include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_MINOR /;"	d
PYBIND11_VERSION_PATCH	include/pybind11/detail/common.h	/^#define PYBIND11_VERSION_PATCH /;"	d
PYBIND11_WARNING_DISABLE_CLANG	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_DISABLE_CLANG(/;"	d	signature:(name)
PYBIND11_WARNING_DISABLE_GCC	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_DISABLE_GCC(/;"	d	signature:(name)
PYBIND11_WARNING_DISABLE_INTEL	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_DISABLE_INTEL(/;"	d	signature:(name)
PYBIND11_WARNING_DISABLE_MSVC	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_DISABLE_MSVC(/;"	d	signature:(name)
PYBIND11_WARNING_DISABLE_MSVC	include/pybind11/eigen/matrix.h	/^PYBIND11_WARNING_DISABLE_MSVC(5054) \/\/ https:\/\/github.com\/pybind\/pybind11\/pull\/3741$/;"	v	typeref:typename:PYBIND11_WARNING_PUSH
PYBIND11_WARNING_DISABLE_MSVC	include/pybind11/eigen/tensor.h	/^PYBIND11_WARNING_DISABLE_MSVC(4554)$/;"	v	typeref:typename:PYBIND11_WARNING_PUSH
PYBIND11_WARNING_POP	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_POP /;"	d
PYBIND11_WARNING_PUSH	include/pybind11/detail/common.h	/^#    define PYBIND11_WARNING_PUSH /;"	d
PYBIND11_WERROR	tests/CMakeLists.txt	/^option(PYBIND11_WERROR "Report all warnings as errors" OFF)$/;"	D
PYBIND11_WORKAROUND_INCORRECT_GCC_UNUSED_BUT_SET_PARAMETER	include/pybind11/detail/common.h	/^#    define PYBIND11_WORKAROUND_INCORRECT_GCC_UNUSED_BUT_SET_PARAMETER(/;"	d	signature:(...)
PYBIND11_WORKAROUND_INCORRECT_MSVC_C4100	include/pybind11/detail/common.h	/^#    define PYBIND11_WORKAROUND_INCORRECT_MSVC_C4100(/;"	d	signature:(...)
PYPY	tests/env.py	/^PYPY = platform.python_implementation() == "PyPy"$/;"	v	access:public
PYPY_VERSION	tools/pybind11Tools.cmake	/^      set(PYPY_VERSION$/;"	v
PYTHONLIBS_FOUND	tools/FindPythonLibsNew.cmake	/^  set(PYTHONLIBS_FOUND FALSE)$/;"	v
PYTHONLIBS_FOUND	tools/FindPythonLibsNew.cmake	/^set(PYTHONLIBS_FOUND TRUE)$/;"	v
PYTHON_DEBUG_LIBRARIES	tools/FindPythonLibsNew.cmake	/^set(PYTHON_DEBUG_LIBRARIES "${PYTHON_DEBUG_LIBRARY}")$/;"	v
PYTHON_DEBUG_LIBRARY	tools/FindPythonLibsNew.cmake	/^  set(PYTHON_DEBUG_LIBRARY "")$/;"	v
PYTHON_EXECUTABLE	tests/CMakeLists.txt	/^  set(PYTHON_EXECUTABLE "${Python_EXECUTABLE}")$/;"	v
PYTHON_INCLUDE_DIRS	tools/FindPythonLibsNew.cmake	/^set(PYTHON_INCLUDE_DIRS "${PYTHON_INCLUDE_DIR}")$/;"	v
PYTHON_IS_DEBUG	tools/pybind11NewTools.cmake	/^  set(PYTHON_IS_DEBUG$/;"	v
PYTHON_LIBRARIES	tools/FindPythonLibsNew.cmake	/^set(PYTHON_LIBRARIES "${PYTHON_LIBRARY}")$/;"	v
PYTHON_LIBRARY	tools/FindPythonLibsNew.cmake	/^    set(PYTHON_LIBRARY "${_PYTHON_ROOT}\/libs\/python${PYTHON_LIBRARY_SUFFIX}.lib")$/;"	v
PYTHON_LIBRARY	tools/FindPythonLibsNew.cmake	/^    set(PYTHON_LIBRARY python${PYTHON_LIBRARY_SUFFIX})$/;"	v
PYTHON_LIBRARY	tools/FindPythonLibsNew.cmake	/^  set(PYTHON_LIBRARY "${PYTHON_PREFIX}\/libs\/python${PYTHON_LIBRARY_SUFFIX}.lib")$/;"	v
PYTHON_MODULE_EXTENSION	tools/pybind11NewTools.cmake	/^  set(PYTHON_MODULE_EXTENSION$/;"	v
PYTHON_MODULE_PREFIX	tools/FindPythonLibsNew.cmake	/^  set(PYTHON_MODULE_PREFIX "")$/;"	v
PYTHON_VERSION	tests/CMakeLists.txt	/^  set(PYTHON_VERSION "${Python_VERSION}")$/;"	v
PYTHON_VERSION	tools/FindPythonLibsNew.cmake	/^set(PYTHON_VERSION "${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.${PYTHON_VERSION_PATCH}")$/;"	v
PYTHON_VERSIONS	noxfile.py	/^PYTHON_VERSIONS = [$/;"	v	access:public
Panther	tests/test_tagbased_polymorphic.cpp	/^        Panther,$/;"	e	enum:Animal::Kind	file:	access:public
Panther	tests/test_tagbased_polymorphic.cpp	/^    explicit Panther(const std::string &_name) : Cat(_name, Kind::Panther) {}$/;"	f	struct:Panther	file:	access:public	signature:(const std::string & _name)
Panther	tests/test_tagbased_polymorphic.cpp	/^struct Panther : Cat {$/;"	s	file:	inherits:Cat
Panther::Panther	tests/test_tagbased_polymorphic.cpp	/^    explicit Panther(const std::string &_name) : Cat(_name, Kind::Panther) {}$/;"	f	struct:Panther	file:	access:public	signature:(const std::string & _name)
Panther::purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrrrRRRRRR"; }$/;"	f	struct:Panther	typeref:typename:std::string	file:	access:public	signature:() const
ParallelCompile	pybind11/setup_helpers.py	/^class ParallelCompile:$/;"	c	inherits:	access:public
ParallelCompile.__enter__	pybind11/setup_helpers.py	/^    def __enter__(self: S) -> S:$/;"	m	class:ParallelCompile	typeref:typename:S	access:public	signature:(self: S)
ParallelCompile.__exit__	pybind11/setup_helpers.py	/^    def __exit__(self, *args: Any) -> None:$/;"	m	class:ParallelCompile	typeref:typename:None	access:public	signature:(self, *args: Any)
ParallelCompile.__init__	pybind11/setup_helpers.py	/^    def __init__($/;"	m	class:ParallelCompile	typeref:typename:None	access:public	signature:( self, envvar: Optional[str] = None, default: int = 0, max: int = 0, needs_recompile: Callable[[str, str], bool] = no_recompile, )
ParallelCompile.__slots__	pybind11/setup_helpers.py	/^    __slots__ = ("envvar", "default", "max", "_old", "needs_recompile")$/;"	v	class:ParallelCompile	file:	access:private
ParallelCompile.function	pybind11/setup_helpers.py	/^    def function(self) -> CCompilerMethod:$/;"	m	class:ParallelCompile	typeref:typename:CCompilerMethod	access:public	signature:(self)
ParallelCompile.function.compile_function	pybind11/setup_helpers.py	/^        def compile_function($/;"	f	member:ParallelCompile.function	typeref:typename:Any	file:	access:private	signature:( compiler: distutils.ccompiler.CCompiler, sources: List[str], output_dir: Optional[str] = None, macros: Optional[Union[Tuple[str], Tuple[str, Optional[str]]]] = None, include_dirs: Optional[List[str]] = None, debug: bool = False, extra_preargs: Optional[List[str]] = None, extra_postargs: Optional[List[str]] = None, depends: Optional[List[str]] = None, )
ParallelCompile.function.compile_function._single_compile	pybind11/setup_helpers.py	/^            def _single_compile(obj: Any) -> None:$/;"	f	function:ParallelCompile.function.compile_function	typeref:typename:None	file:	access:private	signature:(obj: Any)
ParallelCompile.install	pybind11/setup_helpers.py	/^    def install(self: S) -> S:$/;"	m	class:ParallelCompile	typeref:typename:S	access:public	signature:(self: S)
Parent	tests/test_call_policies.cpp	/^        Parent() { py::print("Allocating parent."); }$/;"	f	class:TEST_SUBMODULE::Parent	file:	access:public	signature:()
Parent	tests/test_call_policies.cpp	/^        Parent(const Parent &parent) = default;$/;"	p	class:TEST_SUBMODULE::Parent	file:	access:public	signature:(const Parent & parent)
Parent	tests/test_call_policies.cpp	/^    class Parent {$/;"	c	function:TEST_SUBMODULE	file:
Parent	tests/test_stl_binders.cpp	/^    using Parent = std::map<int, RecursiveMap>;$/;"	t	struct:RecursiveMap	typeref:typename:std::map<int,RecursiveMap>	file:	access:public
Parent	tests/test_stl_binders.cpp	/^    using Parent = std::vector<RecursiveVector>;$/;"	t	struct:RecursiveVector	typeref:typename:std::vector<RecursiveVector>	file:	access:public
ParentGC	tests/test_call_policies.cpp	/^    class ParentGC : public Parent {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Parent
PartialNestedStruct	tests/test_numpy_dtypes.cpp	/^struct PartialNestedStruct {$/;"	s	file:
PartialNestedStruct::a	tests/test_numpy_dtypes.cpp	/^    PartialStruct a;$/;"	m	struct:PartialNestedStruct	typeref:typename:PartialStruct	file:	access:public
PartialNestedStruct::dummy1	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy1;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:	access:public
PartialNestedStruct::dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:	access:public
PartialStruct	tests/test_numpy_dtypes.cpp	/^struct PartialStruct {$/;"	s	file:
PartialStruct::bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:PartialStruct	typeref:typename:bool	file:	access:public
PartialStruct::dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialStruct	typeref:typename:uint64_t	file:	access:public
PartialStruct::float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:PartialStruct	typeref:typename:float	file:	access:public
PartialStruct::ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:PartialStruct	typeref:typename:long double	file:	access:public
PartialStruct::uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:PartialStruct	typeref:typename:uint32_t	file:	access:public
Partitioning code over multiple extension modules	docs/advanced/misc.rst	/^Partitioning code over multiple extension modules$/;"	c	title:Miscellaneous
Pass-by-reference	docs/advanced/cast/eigen.rst	/^Pass-by-reference$/;"	c	title:Eigen
Pass-by-value	docs/advanced/cast/eigen.rst	/^Pass-by-value$/;"	c	title:Eigen
Passing Python strings to C++	docs/advanced/cast/strings.rst	/^Passing Python strings to C++$/;"	c	title:Strings, bytes and Unicode conversions
Passing bytes to C++	docs/advanced/cast/strings.rst	/^Passing bytes to C++$/;"	s	chapter:Passing Python strings to C++
Passing extra arguments to ``def`` or ``class_``	docs/reference.rst	/^Passing extra arguments to ``def`` or ``class_``$/;"	c	title:Reference
Payload	tests/test_callbacks.cpp	/^        Payload() { print_default_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:()
Payload	tests/test_callbacks.cpp	/^        Payload(Payload &&) noexcept { print_move_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:(Payload &&)
Payload	tests/test_callbacks.cpp	/^        Payload(const Payload &) { print_copy_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:(const Payload &)
Payload	tests/test_callbacks.cpp	/^    struct Payload {$/;"	s	function:TEST_SUBMODULE	file:
Pet	tests/local_bindings.h	/^    explicit Pet(std::string name) : name_(std::move(name)) {}$/;"	f	class:pets::Pet	access:public	signature:(std::string name)
Pet	tests/local_bindings.h	/^class Pet {$/;"	c	namespace:pets
Pet	tests/test_class.cpp	/^        Pet(const std::string &name, const std::string &species)$/;"	f	class:TEST_SUBMODULE::Pet	file:	access:public	signature:(const std::string & name,const std::string & species)
Pet	tests/test_class.cpp	/^    class Pet {$/;"	c	function:TEST_SUBMODULE	file:
Pickleable	tests/test_pickling.cpp	/^        explicit Pickleable(const std::string &value) : m_value(value) {}$/;"	f	class:TEST_SUBMODULE::Pickleable	file:	access:public	signature:(const std::string & value)
Pickleable	tests/test_pickling.cpp	/^    class Pickleable {$/;"	c	function:TEST_SUBMODULE	file:
PickleableNew	tests/test_pickling.cpp	/^    class PickleableNew : public Pickleable {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Pickleable
PickleableWithDict	tests/test_pickling.cpp	/^        explicit PickleableWithDict(const std::string &value) : value(value) {}$/;"	f	class:TEST_SUBMODULE::PickleableWithDict	file:	access:public	signature:(const std::string & value)
PickleableWithDict	tests/test_pickling.cpp	/^    class PickleableWithDict {$/;"	c	function:TEST_SUBMODULE	file:
PickleableWithDictNew	tests/test_pickling.cpp	/^    class PickleableWithDictNew : public PickleableWithDict {$/;"	c	function:TEST_SUBMODULE	file:	inherits:PickleableWithDict
Pickling support	docs/advanced/classes.rst	/^Pickling support$/;"	c	title:Classes
Placeholder	tests/test_stl.cpp	/^        Placeholder() { print_created(this); }$/;"	f	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:()
Placeholder	tests/test_stl.cpp	/^        Placeholder(const Placeholder &) = delete;$/;"	p	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:(const Placeholder &)
Placeholder	tests/test_stl.cpp	/^    class Placeholder {$/;"	c	function:TEST_SUBMODULE	file:
Positional-only arguments	docs/advanced/functions.rst	/^Positional-only arguments$/;"	c	title:Functions
Positive	tests/test_enum.cpp	/^    enum class ScopedChar16Enum : char16_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar16Enum	file:	access:public
Positive	tests/test_enum.cpp	/^    enum class ScopedChar32Enum : char32_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar32Enum	file:	access:public
Positive	tests/test_enum.cpp	/^    enum class ScopedChar8Enum : char8_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar8Enum	file:	access:public
Positive	tests/test_enum.cpp	/^    enum class ScopedCharEnum : char { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedCharEnum	file:	access:public
Positive	tests/test_enum.cpp	/^    enum class ScopedWCharEnum : wchar_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedWCharEnum	file:	access:public
PrivateOpNew	tests/test_copy_move.cpp	/^    struct PrivateOpNew {$/;"	s	function:PYBIND11_NAMESPACE_END	file:
ProtectedA	tests/test_class.cpp	/^    class ProtectedA {$/;"	c	function:TEST_SUBMODULE	file:
ProtectedB	tests/test_class.cpp	/^        ProtectedB() = default;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:()
ProtectedB	tests/test_class.cpp	/^        ProtectedB(const ProtectedB &) = delete;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:(const ProtectedB &)
ProtectedB	tests/test_class.cpp	/^    class ProtectedB {$/;"	c	function:TEST_SUBMODULE	file:
Provided conversions	docs/advanced/cast/chrono.rst	/^Provided conversions$/;"	c	title:Chrono
PseudoBytesPath	tests/test_stl.py	/^    class PseudoBytesPath:$/;"	c	function:test_fs_path	file:	inherits:	access:private
PseudoStrPath	tests/test_stl.py	/^    class PseudoStrPath:$/;"	c	function:test_fs_path	file:	inherits:	access:private
PublicistA	tests/test_class.cpp	/^    class PublicistA : public ProtectedA {$/;"	c	function:TEST_SUBMODULE	file:	inherits:ProtectedA
PublicistB	tests/test_class.cpp	/^    class PublicistB : public ProtectedB {$/;"	c	function:TEST_SUBMODULE	file:	inherits:ProtectedB
Pull requests	.github/CONTRIBUTING.md	/^## Pull requests$/;"	s
PyA	tests/test_virtual_functions.cpp	/^        PyA() { py::print("PyA.PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:()
PyA	tests/test_virtual_functions.cpp	/^        PyA(const PyA &) = delete;$/;"	p	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:(const PyA &)
PyA	tests/test_virtual_functions.cpp	/^    struct PyA : A {$/;"	s	function:TEST_SUBMODULE	file:	inherits:A
PyA2	tests/test_virtual_functions.cpp	/^        PyA2() { py::print("PyA2.PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:()
PyA2	tests/test_virtual_functions.cpp	/^        PyA2(const PyA2 &) = delete;$/;"	p	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:(const PyA2 &)
PyA2	tests/test_virtual_functions.cpp	/^    struct PyA2 : A2 {$/;"	s	function:TEST_SUBMODULE	file:	inherits:A2
PyA_Repeat	tests/test_virtual_functions.cpp	/^class PyA_Repeat : public A_Repeat {$/;"	c	file:	inherits:A_Repeat
PyA_Repeat::say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyA_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
PyA_Repeat::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE_PURE(int, A_Repeat, unlucky_number, ); }$/;"	f	class:PyA_Repeat	typeref:typename:int	file:	access:public	signature:()
PyA_Tpl	tests/test_virtual_functions.cpp	/^class PyA_Tpl : public Base {$/;"	c	file:	inherits:Base
PyA_Tpl::say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyA_Tpl	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
PyA_Tpl::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE_PURE(int, Base, unlucky_number, ); }$/;"	f	class:PyA_Tpl	typeref:typename:int	file:	access:public	signature:()
PyAliasedHasOpNewDelSize	tests/test_class.cpp	/^        PyAliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	file:	access:public	signature:()
PyAliasedHasOpNewDelSize	tests/test_class.cpp	/^        explicit PyAliasedHasOpNewDelSize(int) {}$/;"	f	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	file:	access:public	signature:(int)
PyAliasedHasOpNewDelSize	tests/test_class.cpp	/^    struct PyAliasedHasOpNewDelSize : AliasedHasOpNewDelSize {$/;"	s	function:TEST_SUBMODULE	file:	inherits:AliasedHasOpNewDelSize
PyArrayDescr_Check_	include/pybind11/numpy.h	/^    bool PyArrayDescr_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool	access:public	signature:(PyObject * obj) const
PyArrayDescr_Proxy	include/pybind11/numpy.h	/^struct PyArrayDescr_Proxy {$/;"	s
PyArrayDescr_Proxy::alignment	include/pybind11/numpy.h	/^    int alignment;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
PyArrayDescr_Proxy::byteorder	include/pybind11/numpy.h	/^    char byteorder;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
PyArrayDescr_Proxy::elsize	include/pybind11/numpy.h	/^    int elsize;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
PyArrayDescr_Proxy::fields	include/pybind11/numpy.h	/^    PyObject *fields;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *	access:public
PyArrayDescr_Proxy::flags	include/pybind11/numpy.h	/^    char flags;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
PyArrayDescr_Proxy::kind	include/pybind11/numpy.h	/^    char kind;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
PyArrayDescr_Proxy::names	include/pybind11/numpy.h	/^    PyObject *names;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *	access:public
PyArrayDescr_Proxy::subarray	include/pybind11/numpy.h	/^    char *subarray;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char *	access:public
PyArrayDescr_Proxy::type	include/pybind11/numpy.h	/^    char type;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
PyArrayDescr_Proxy::type_num	include/pybind11/numpy.h	/^    int type_num;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
PyArrayDescr_Proxy::typeobj	include/pybind11/numpy.h	/^    PyObject *typeobj;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject_HEAD PyObject *	access:public
PyArrayDescr_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArrayDescr_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
PyArray_Check_	include/pybind11/numpy.h	/^    bool PyArray_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool	access:public	signature:(PyObject * obj) const
PyArray_CopyInto_	include/pybind11/numpy.h	/^    int (*PyArray_CopyInto_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)	access:public
PyArray_DescrConverter_	include/pybind11/numpy.h	/^    int (*PyArray_DescrConverter_)(PyObject *, PyObject **);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject **)	access:public
PyArray_DescrFromScalar_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromScalar_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)	access:public
PyArray_DescrFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)	access:public
PyArray_DescrNewFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrNewFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)	access:public
PyArray_Dims	include/pybind11/numpy.h	/^    struct PyArray_Dims {$/;"	s	struct:npy_api	access:public
PyArray_EquivTypes_	include/pybind11/numpy.h	/^    bool (*PyArray_EquivTypes_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:bool (*)(PyObject *,PyObject *)	access:public
PyArray_FromAny_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_FromAny_)(PyObject *, PyObject *, int, int, int, PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyObject *,int,int,int,PyObject *)	access:public
PyArray_GetArrayParamsFromObject_	include/pybind11/numpy.h	/^    int (*PyArray_GetArrayParamsFromObject_)(PyObject *,$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *,unsigned char,PyObject **,int *,Py_intptr_t *,PyObject **,PyObject *)	access:public
PyArray_GetNDArrayCFeatureVersion_	include/pybind11/numpy.h	/^    unsigned int (*PyArray_GetNDArrayCFeatureVersion_)();$/;"	m	struct:npy_api	typeref:typename:unsigned int (*)()	access:public
PyArray_NewCopy_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewCopy_)(PyObject *, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,int)	access:public
PyArray_NewFromDescr_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewFromDescr_)(PyTypeObject *,$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyTypeObject *,PyObject *,int,Py_intptr_t const *,Py_intptr_t const *,void *,int,PyObject *)	access:public
PyArray_Newshape_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Newshape_)(PyObject *, PyArray_Dims *, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyArray_Dims *,int)	access:public
PyArray_Proxy	include/pybind11/numpy.h	/^struct PyArray_Proxy {$/;"	s
PyArray_Proxy::base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *	access:public
PyArray_Proxy::data	include/pybind11/numpy.h	/^    char *data;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject_HEAD char *	access:public
PyArray_Proxy::descr	include/pybind11/numpy.h	/^    PyObject *descr;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *	access:public
PyArray_Proxy::dimensions	include/pybind11/numpy.h	/^    ssize_t *dimensions;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *	access:public
PyArray_Proxy::flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyArray_Proxy	typeref:typename:int	access:public
PyArray_Proxy::nd	include/pybind11/numpy.h	/^    int nd;$/;"	m	struct:PyArray_Proxy	typeref:typename:int	access:public
PyArray_Proxy::strides	include/pybind11/numpy.h	/^    ssize_t *strides;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *	access:public
PyArray_Resize_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Resize_)(PyObject *, PyArray_Dims *, int, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyArray_Dims *,int,int)	access:public
PyArray_SetBaseObject_	include/pybind11/numpy.h	/^    int (*PyArray_SetBaseObject_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)	access:public
PyArray_Squeeze_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Squeeze_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)	access:public
PyArray_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArray_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
PyArray_View_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_View_)(PyObject *, PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyObject *,PyObject *)	access:public
PyB_Repeat	tests/test_virtual_functions.cpp	/^class PyB_Repeat : public B_Repeat {$/;"	c	file:	inherits:B_Repeat
PyB_Repeat::lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, B_Repeat, lucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:double	file:	access:public	signature:()
PyB_Repeat::say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyB_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
PyB_Repeat::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, B_Repeat, unlucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:int	file:	access:public	signature:()
PyB_Tpl	tests/test_virtual_functions.cpp	/^class PyB_Tpl : public PyA_Tpl<Base> {$/;"	c	file:	inherits:PyA_Tpl<Base>
PyB_Tpl::lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, Base, lucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:double	file:	access:public	signature:()
PyB_Tpl::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, Base, unlucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:int	file:	access:public	signature:()
PyC_Repeat	tests/test_virtual_functions.cpp	/^class PyC_Repeat : public C_Repeat {$/;"	c	file:	inherits:C_Repeat
PyC_Repeat::lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, C_Repeat, lucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:double	file:	access:public	signature:()
PyC_Repeat::say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyC_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
PyC_Repeat::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, C_Repeat, unlucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:int	file:	access:public	signature:()
PyClass1	tests/test_virtual_functions.py	/^    class PyClass1(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:	inherits:m.DispatchIssue	access:private
PyClass2	tests/test_virtual_functions.py	/^    class PyClass2(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:	inherits:m.DispatchIssue	access:private
PyD_Repeat	tests/test_virtual_functions.cpp	/^class PyD_Repeat : public D_Repeat {$/;"	c	file:	inherits:D_Repeat
PyD_Repeat::lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, D_Repeat, lucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:double	file:	access:public	signature:()
PyD_Repeat::say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyD_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
PyD_Repeat::unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, D_Repeat, unlucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:int	file:	access:public	signature:()
PyDog	tests/test_class.py	/^    class PyDog(m.Dog):$/;"	c	function:test_class_refcount	file:	inherits:m.Dog	access:private
PyEllipsis_Check	include/pybind11/pytypes.h	/^inline bool PyEllipsis_Check(PyObject *o) { return o == Py_Ellipsis; }$/;"	f	typeref:typename:bool	signature:(PyObject * o)
PyExampleVirt	tests/test_virtual_functions.cpp	/^class PyExampleVirt : public ExampleVirt {$/;"	c	file:	inherits:ExampleVirt
PyExampleVirt::get_string1	tests/test_virtual_functions.cpp	/^    const std::string &get_string1() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string &	file:	access:public	signature:()
PyExampleVirt::get_string2	tests/test_virtual_functions.cpp	/^    const std::string *get_string2() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string *	file:	access:public	signature:()
PyExampleVirt::pure_virtual	tests/test_virtual_functions.cpp	/^    void pure_virtual() override {$/;"	f	class:PyExampleVirt	typeref:typename:void	file:	access:public	signature:()
PyExampleVirt::run	tests/test_virtual_functions.cpp	/^    int run(int value) override {$/;"	f	class:PyExampleVirt	typeref:typename:int	file:	access:public	signature:(int value)
PyExampleVirt::run_bool	tests/test_virtual_functions.cpp	/^    bool run_bool() override {$/;"	f	class:PyExampleVirt	typeref:typename:bool	file:	access:public	signature:()
PyFinalChild	tests/test_class.py	/^        class PyFinalChild(m.IsFinal):$/;"	c	function:test_final	file:	inherits:m.IsFinal	access:private
PyInit_cross_module_gil_utils	tests/cross_module_gil_utils.cpp	/^extern "C" PYBIND11_EXPORT PyObject *PyInit_cross_module_gil_utils() {$/;"	f	typeref:typename:PYBIND11_EXPORT PyObject *	signature:()
PyInit_cross_module_interleaved_error_already_set	tests/cross_module_interleaved_error_already_set.cpp	/^extern "C" PYBIND11_EXPORT PyObject *PyInit_cross_module_interleaved_error_already_set() {$/;"	f	typeref:typename:PYBIND11_EXPORT PyObject *	signature:()
PyIterable_Check	include/pybind11/pytypes.h	/^inline bool PyIterable_Check(PyObject *obj) {$/;"	f	typeref:typename:bool	signature:(PyObject * obj)
PyMVF	tests/test_multiple_inheritance.py	/^    class PyMVF(m.MVF):$/;"	c	function:test_python_inherit_from_mi	file:	inherits:m.MVF	access:private
PyNonFinalFinalChild	tests/test_class.py	/^        class PyNonFinalFinalChild(m.IsNonFinalFinal):$/;"	c	function:test_non_final_final	file:	inherits:m.IsNonFinalFinal	access:private
PyNone_Check	include/pybind11/pytypes.h	/^inline bool PyNone_Check(PyObject *o) { return o == Py_None; }$/;"	f	typeref:typename:bool	signature:(PyObject * o)
PyOverrideTest	tests/test_virtual_functions.cpp	/^    class PyOverrideTest : public OverrideTest {$/;"	c	function:TEST_SUBMODULE	file:	inherits:OverrideTest
PyPI package	README.rst	/^.. |PyPI package| image:: https:\/\/img.shields.io\/pypi\/v\/pybind11.svg$/;"	d	section:License
PyPrintDestructor	tests/test_class.cpp	/^        PyPrintDestructor() = default;$/;"	p	struct:TEST_SUBMODULE::PyPrintDestructor	file:	access:public	signature:()
PyPrintDestructor	tests/test_class.cpp	/^    struct PyPrintDestructor {$/;"	s	function:TEST_SUBMODULE	file:
PyStaticMethod_Check	include/pybind11/pytypes.h	/^inline bool PyStaticMethod_Check(PyObject *o) { return o->ob_type == &PyStaticMethod_Type; }$/;"	f	typeref:typename:bool	signature:(PyObject * o)
PyTF6	tests/test_factory_constructors.cpp	/^    PyTF6(PyTF6 &&f) noexcept : TestFactory6(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF6	file:	access:public	signature:(PyTF6 && f)
PyTF6	tests/test_factory_constructors.cpp	/^    PyTF6(const PyTF6 &f) : TestFactory6(f) { print_copy_created(this); }$/;"	f	class:PyTF6	file:	access:public	signature:(const PyTF6 & f)
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(TestFactory6 &&base) : TestFactory6(std::move(base)) {$/;"	f	class:PyTF6	file:	access:public	signature:(TestFactory6 && base)
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(int i) : TestFactory6(i) {$/;"	f	class:PyTF6	file:	access:public	signature:(int i)
PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(std::string s) : TestFactory6((int) s.size()) {$/;"	f	class:PyTF6	file:	access:public	signature:(std::string s)
PyTF6	tests/test_factory_constructors.cpp	/^class PyTF6 : public TestFactory6 {$/;"	c	file:	inherits:TestFactory6
PyTF6::PyTF6	tests/test_factory_constructors.cpp	/^    PyTF6(PyTF6 &&f) noexcept : TestFactory6(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF6	file:	access:public	signature:(PyTF6 && f)
PyTF6::PyTF6	tests/test_factory_constructors.cpp	/^    PyTF6(const PyTF6 &f) : TestFactory6(f) { print_copy_created(this); }$/;"	f	class:PyTF6	file:	access:public	signature:(const PyTF6 & f)
PyTF6::PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(TestFactory6 &&base) : TestFactory6(std::move(base)) {$/;"	f	class:PyTF6	file:	access:public	signature:(TestFactory6 && base)
PyTF6::PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(int i) : TestFactory6(i) {$/;"	f	class:PyTF6	file:	access:public	signature:(int i)
PyTF6::PyTF6	tests/test_factory_constructors.cpp	/^    explicit PyTF6(std::string s) : TestFactory6((int) s.size()) {$/;"	f	class:PyTF6	file:	access:public	signature:(std::string s)
PyTF6::get	tests/test_factory_constructors.cpp	/^    int get() override { PYBIND11_OVERRIDE(int, TestFactory6, get, \/*no args*\/); }$/;"	f	class:PyTF6	typeref:typename:int	file:	access:public	signature:()
PyTF6::~PyTF6	tests/test_factory_constructors.cpp	/^    ~PyTF6() override { print_destroyed(this); }$/;"	f	class:PyTF6	file:	access:public	signature:()
PyTF7	tests/test_factory_constructors.cpp	/^    PyTF7(PyTF7 &&f) noexcept : TestFactory7(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF7	file:	access:public	signature:(PyTF7 && f)
PyTF7	tests/test_factory_constructors.cpp	/^    PyTF7(const PyTF7 &f) : TestFactory7(f) { print_copy_created(this); }$/;"	f	class:PyTF7	file:	access:public	signature:(const PyTF7 & f)
PyTF7	tests/test_factory_constructors.cpp	/^    explicit PyTF7(int i) : TestFactory7(i) {$/;"	f	class:PyTF7	file:	access:public	signature:(int i)
PyTF7	tests/test_factory_constructors.cpp	/^class PyTF7 : public TestFactory7 {$/;"	c	file:	inherits:TestFactory7
PyTF7::PyTF7	tests/test_factory_constructors.cpp	/^    PyTF7(PyTF7 &&f) noexcept : TestFactory7(std::move(f)) { print_move_created(this); }$/;"	f	class:PyTF7	file:	access:public	signature:(PyTF7 && f)
PyTF7::PyTF7	tests/test_factory_constructors.cpp	/^    PyTF7(const PyTF7 &f) : TestFactory7(f) { print_copy_created(this); }$/;"	f	class:PyTF7	file:	access:public	signature:(const PyTF7 & f)
PyTF7::PyTF7	tests/test_factory_constructors.cpp	/^    explicit PyTF7(int i) : TestFactory7(i) {$/;"	f	class:PyTF7	file:	access:public	signature:(int i)
PyTF7::get	tests/test_factory_constructors.cpp	/^    int get() override { PYBIND11_OVERRIDE(int, TestFactory7, get, \/*no args*\/); }$/;"	f	class:PyTF7	typeref:typename:int	file:	access:public	signature:()
PyTF7::~PyTF7	tests/test_factory_constructors.cpp	/^    ~PyTF7() override { print_destroyed(this); }$/;"	f	class:PyTF7	file:	access:public	signature:()
PyThreadState_Swap	tests/test_embed/test_interpreter.cpp	/^    PyThreadState_Swap(main_tstate);$/;"	p	file:	signature:(main_tstate)
PyUnicode_Check_Permissive	include/pybind11/pytypes.h	/^inline bool PyUnicode_Check_Permissive(PyObject *o) {$/;"	f	typeref:typename:bool	signature:(PyObject * o)
PyValueHolder	tests/test_numpy_array.py	/^class PyValueHolder:$/;"	c	inherits:	access:public
PyValueHolder.__init__	tests/test_numpy_array.py	/^    def __init__(self, value):$/;"	m	class:PyValueHolder	access:public	signature:(self, value)
PyVirtClass	tests/test_gil_scoped.cpp	/^class PyVirtClass : public VirtClass {$/;"	c	file:	inherits:VirtClass
PyVirtClass::pure_virtual_func	tests/test_gil_scoped.cpp	/^    void pure_virtual_func() override {$/;"	f	class:PyVirtClass	typeref:typename:void	file:	access:private	signature:()
PyVirtClass::virtual_func	tests/test_gil_scoped.cpp	/^    void virtual_func() override { PYBIND11_OVERRIDE(void, VirtClass, virtual_func, ); }$/;"	f	class:PyVirtClass	typeref:typename:void	file:	access:private	signature:()
PyVoidArrType_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyVoidArrType_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
PyVoidScalarObject_Proxy	include/pybind11/numpy.h	/^struct PyVoidScalarObject_Proxy {$/;"	s
PyVoidScalarObject_Proxy::base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject *	access:public
PyVoidScalarObject_Proxy::descr	include/pybind11/numpy.h	/^    PyArrayDescr_Proxy *descr;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyArrayDescr_Proxy *	access:public
PyVoidScalarObject_Proxy::flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:int	access:public
PyVoidScalarObject_Proxy::obval	include/pybind11/numpy.h	/^    PyObject_VAR_HEAD char *obval;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject_VAR_HEAD char *	access:public
PyWidget	tests/test_embed/test_interpreter.cpp	/^class PyWidget final : public Widget {$/;"	c	file:	inherits:Widget
PyWidget::argv0	tests/test_embed/test_interpreter.cpp	/^    std::string argv0() const override { PYBIND11_OVERRIDE_PURE(std::string, Widget, argv0); }$/;"	f	class:PyWidget	typeref:typename:std::string	file:	access:private	signature:() const
PyWidget::the_answer	tests/test_embed/test_interpreter.cpp	/^    int the_answer() const override { PYBIND11_OVERRIDE_PURE(int, Widget, the_answer); }$/;"	f	class:PyWidget	typeref:typename:int	file:	access:private	signature:() const
Py_EndInterpreter	tests/test_embed/test_interpreter.cpp	/^    Py_EndInterpreter(sub_tstate);$/;"	p	file:	signature:(sub_tstate)
Py_IsInitialized	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(Py_IsInitialized() == 0);$/;"	p	typeref:typename:REQUIRE (==0)	file:	signature:()
Py_IsInitialized	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(Py_IsInitialized() == 1);$/;"	p	typeref:typename:REQUIRE (==1)	file:	signature:()
Pybind11Extension	pybind11/setup_helpers.py	/^class Pybind11Extension(_Extension):  # type: ignore[misc]$/;"	c	inherits:_Extension	access:public
Pybind11Extension.__init__	pybind11/setup_helpers.py	/^    def __init__(self, *args: Any, **kwargs: Any) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:public	signature:(self, *args: Any, **kwargs: Any)
Pybind11Extension._add_cflags	pybind11/setup_helpers.py	/^    def _add_cflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:protected	signature:(self, flags: List[str])
Pybind11Extension._add_ldflags	pybind11/setup_helpers.py	/^    def _add_ldflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:protected	signature:(self, flags: List[str])
Pybind11Extension.cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self) -> int:$/;"	m	class:Pybind11Extension	typeref:typename:int	access:public	signature:(self)
Pybind11Extension.cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self, level: int) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:public	signature:(self, level: int)
PythFactory7	tests/test_factory_constructors.py	/^    class PythFactory7(TestFactory7):$/;"	c	function:test_init_factory_dual	file:	inherits:TestFactory7	access:private
Python	tests/test_class.py	/^    class Python(m.Pet):$/;"	c	function:test_inheritance_init	file:	inherits:m.Pet	access:private
Python 3.9.0 warning	docs/limitations.rst	/^Python 3.9.0 warning$/;"	c	title:Limitations
Python C++ interface	docs/advanced/pycpp/index.rst	/^Python C++ interface$/;"	H
Python Versions	README.rst	/^.. |Python Versions| image:: https:\/\/img.shields.io\/pypi\/pyversions\/pybind11.svg$/;"	d	section:License
Python built-in functions	docs/reference.rst	/^Python built-in functions$/;"	c	title:Reference
Python objects as arguments	docs/advanced/functions.rst	/^Python objects as arguments$/;"	c	title:Functions
Python types	docs/advanced/pycpp/object.rst	/^Python types$/;"	H
PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    explicit PythonAlreadySetInDestructor(const py::str &s) : s(s) {}$/;"	f	struct:PythonAlreadySetInDestructor	file:	access:public	signature:(const py::str & s)
PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^struct PythonAlreadySetInDestructor {$/;"	s	file:
PythonAlreadySetInDestructor::PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    explicit PythonAlreadySetInDestructor(const py::str &s) : s(s) {}$/;"	f	struct:PythonAlreadySetInDestructor	file:	access:public	signature:(const py::str & s)
PythonAlreadySetInDestructor::s	tests/test_exceptions.cpp	/^    py::str s;$/;"	m	struct:PythonAlreadySetInDestructor	typeref:typename:py::str	file:	access:public
PythonAlreadySetInDestructor::~PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    ~PythonAlreadySetInDestructor() {$/;"	f	struct:PythonAlreadySetInDestructor	file:	access:public	signature:()
PythonCallInDestructor	tests/test_exceptions.cpp	/^    explicit PythonCallInDestructor(const py::dict &d) : d(d) {}$/;"	f	struct:PythonCallInDestructor	file:	access:public	signature:(const py::dict & d)
PythonCallInDestructor	tests/test_exceptions.cpp	/^struct PythonCallInDestructor {$/;"	s	file:
PythonCallInDestructor::PythonCallInDestructor	tests/test_exceptions.cpp	/^    explicit PythonCallInDestructor(const py::dict &d) : d(d) {}$/;"	f	struct:PythonCallInDestructor	file:	access:public	signature:(const py::dict & d)
PythonCallInDestructor::d	tests/test_exceptions.cpp	/^    py::dict d;$/;"	m	struct:PythonCallInDestructor	typeref:typename:py::dict	file:	access:public
PythonCallInDestructor::~PythonCallInDestructor	tests/test_exceptions.cpp	/^    ~PythonCallInDestructor() { d["good"] = true; }$/;"	f	struct:PythonCallInDestructor	file:	access:public	signature:()
PythonDerivedDynamicClass	tests/test_methods_and_attributes.py	/^    class PythonDerivedDynamicClass(m.DynamicClass):$/;"	c	function:test_dynamic_attributes	file:	inherits:m.DynamicClass	access:private
PythonLibsNew_FIND_VERSION	tools/FindPythonLibsNew.cmake	/^  set(PythonLibsNew_FIND_VERSION "3.6")$/;"	v
PythonLibsNew_FOUND	tools/FindPythonLibsNew.cmake	/^  set(PythonLibsNew_FOUND FALSE)$/;"	v
PythonLibsNew_FOUND	tools/FindPythonLibsNew.cmake	/^set(PythonLibsNew_FOUND TRUE)$/;"	v
Python_ADDITIONAL_VERSIONS	tools/pybind11Tools.cmake	/^set(Python_ADDITIONAL_VERSIONS$/;"	v
Python_FIND_IMPLEMENTATIONS	tools/pybind11NewTools.cmake	/^    set(Python_FIND_IMPLEMENTATIONS CPython PyPy)$/;"	v
Python_ROOT_DIR	tools/pybind11NewTools.cmake	/^    set(Python_ROOT_DIR "$ENV{pythonLocation}")$/;"	v
Quick setup	.github/CONTRIBUTING.md	/^### Quick setup$/;"	S	section:Development of pybind11
REQUIRE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(has_pybind11_internals_static());$/;"	p	file:	signature:(has_pybind11_internals_static ())
REQUIRE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(has_state_dict_internals_obj());$/;"	p	file:	signature:(has_state_dict_internals_obj ())
REQUIRE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(ran);$/;"	p	file:	signature:(ran)
REQUIRE_FALSE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_FALSE(has_pybind11_internals_static());$/;"	p	file:	signature:(has_pybind11_internals_static ())
REQUIRE_FALSE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_FALSE(has_state_dict_internals_obj());$/;"	p	file:	signature:(has_state_dict_internals_obj ())
REQUIRE_FALSE	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_FALSE(ran);$/;"	p	file:	signature:(ran)
REQUIRE_NOTHROW	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_NOTHROW(py::scoped_interpreter());$/;"	p	file:	signature:(py::scoped_interpreter ())
REQUIRE_NOTHROW	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_NOTHROW(py::scoped_interpreter{&config});$/;"	p	file:	signature:(py::scoped_interpreter{&config})
RValueCaster	tests/pybind11_tests.h	/^struct RValueCaster {};$/;"	s
RValueRefParam	tests/test_methods_and_attributes.cpp	/^struct RValueRefParam {$/;"	s	file:
RValueRefParam::func1	tests/test_methods_and_attributes.cpp	/^    std::size_t func1(std::string &&s) { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s)
RValueRefParam::func2	tests/test_methods_and_attributes.cpp	/^    std::size_t func2(std::string &&s) const { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s) const
RValueRefParam::func3	tests/test_methods_and_attributes.cpp	/^    std::size_t func3(std::string &&s) & { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s)
RValueRefParam::func4	tests/test_methods_and_attributes.cpp	/^    std::size_t func4(std::string &&s) const & { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s) const
R_type	include/pybind11/operators.h	/^        using R_type = conditional_t<std::is_same<R, self_t>::value, Base, R>;$/;"	t	function:op_::execute	typeref:typename:conditional_t<std::is_same<R,self_t>::value,Base,R>
R_type	include/pybind11/operators.h	/^        using R_type = conditional_t<std::is_same<R, self_t>::value, Base, R>;$/;"	t	function:op_::execute_cast	typeref:typename:conditional_t<std::is_same<R,self_t>::value,Base,R>
Rabbit	tests/test_class.cpp	/^        explicit Rabbit(const std::string &name) : Pet(name, "parrot") {}$/;"	f	class:TEST_SUBMODULE::Rabbit	file:	access:public	signature:(const std::string & name)
Rabbit	tests/test_class.cpp	/^    class Rabbit : public Pet {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Pet
RabbitHamster	tests/test_class.py	/^    class RabbitHamster(m.Rabbit, m.Hamster):$/;"	c	function:test_inheritance_init	file:	inherits:m.Rabbit, m.Hamster	access:private
RaisingRepr	tests/test_constants_and_functions.py	/^    class RaisingRepr:$/;"	c	function:test_function_record_leaks	file:	inherits:	access:private
RaisingTypeErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingTypeErrorOnIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
RaisingValueErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingValueErrorOnIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
Read	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
RecursiveMap	tests/test_copy_move.cpp	/^struct RecursiveMap : std::map<int, RecursiveMap> {};$/;"	s	file:	inherits:std::map<int,RecursiveMap>
RecursiveMap	tests/test_stl_binders.cpp	/^struct RecursiveMap : std::map<int, RecursiveMap> {$/;"	s	file:	inherits:std::map<int,RecursiveMap>
RecursiveMap::Parent	tests/test_stl_binders.cpp	/^    using Parent = std::map<int, RecursiveMap>;$/;"	t	struct:RecursiveMap	typeref:typename:std::map<int,RecursiveMap>	file:	access:public
RecursiveVector	tests/test_copy_move.cpp	/^struct RecursiveVector : std::vector<RecursiveVector> {};$/;"	s	file:	inherits:std::vector<RecursiveVector>
RecursiveVector	tests/test_stl_binders.cpp	/^struct RecursiveVector : std::vector<RecursiveVector> {$/;"	s	file:	inherits:std::vector<RecursiveVector>
RecursiveVector::Parent	tests/test_stl_binders.cpp	/^    using Parent = std::vector<RecursiveVector>;$/;"	t	struct:RecursiveVector	typeref:typename:std::vector<RecursiveVector>	file:	access:public
Redirecting C++ streams	docs/reference.rst	/^Redirecting C++ streams$/;"	c	title:Reference
RefQualified	tests/test_methods_and_attributes.cpp	/^struct RefQualified {$/;"	s	file:
RefQualified::constRefQualified	tests/test_methods_and_attributes.cpp	/^    int constRefQualified(int other) const & { return value + other; }$/;"	f	struct:RefQualified	typeref:typename:int	file:	access:public	signature:(int other) const
RefQualified::refQualified	tests/test_methods_and_attributes.cpp	/^    void refQualified(int other) & { value += other; }$/;"	f	struct:RefQualified	typeref:typename:void	file:	access:public	signature:(int other)
RefQualified::value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	struct:RefQualified	typeref:typename:int	file:	access:public
Reference	docs/reference.rst	/^Reference$/;"	H
ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional() = default;$/;"	p	class:ReferenceSensitiveOptional	file:	access:public	signature:()
ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(T &&value) : storage{std::move(value)} {}$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:(T && value)
ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(const T &value) : storage{value} {}$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:(const T & value)
ReferenceSensitiveOptional	tests/test_stl.cpp	/^class ReferenceSensitiveOptional {$/;"	c	file:
ReferenceSensitiveOptional::ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional() = default;$/;"	p	class:ReferenceSensitiveOptional	file:	access:public	signature:()
ReferenceSensitiveOptional::ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(T &&value) : storage{std::move(value)} {}$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:(T && value)
ReferenceSensitiveOptional::ReferenceSensitiveOptional	tests/test_stl.cpp	/^    ReferenceSensitiveOptional(const T &value) : storage{value} {}$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:(const T & value)
ReferenceSensitiveOptional::emplace	tests/test_stl.cpp	/^    T &emplace(Args &&...args) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:T &	file:	access:public	signature:(Args &&...args)
ReferenceSensitiveOptional::operator *	tests/test_stl.cpp	/^    const T &operator*() const noexcept { return value(); }$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T &	file:	access:public	signature:() const
ReferenceSensitiveOptional::operator ->	tests/test_stl.cpp	/^    const T *operator->() const noexcept { return &value(); }$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T *	file:	access:public	signature:() const
ReferenceSensitiveOptional::operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(T &&value) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:ReferenceSensitiveOptional &	file:	access:public	signature:(T && value)
ReferenceSensitiveOptional::operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(const T &value) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:ReferenceSensitiveOptional &	file:	access:public	signature:(const T & value)
ReferenceSensitiveOptional::operator bool	tests/test_stl.cpp	/^    explicit operator bool() const noexcept { return !storage.empty(); }$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:() const
ReferenceSensitiveOptional::storage	tests/test_stl.cpp	/^    std::vector<T> storage;$/;"	m	class:ReferenceSensitiveOptional	typeref:typename:std::vector<T>	file:	access:private
ReferenceSensitiveOptional::value	tests/test_stl.cpp	/^    const T &value() const noexcept {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T &	file:	access:public	signature:() const
ReferenceSensitiveOptional::value_type	tests/test_stl.cpp	/^    using value_type = T;$/;"	t	class:ReferenceSensitiveOptional	typeref:typename:T	file:	access:public
References	docs/advanced/cast/strings.rst	/^References$/;"	c	title:Strings, bytes and Unicode conversions
RegisteredDerived	tests/test_methods_and_attributes.cpp	/^class RegisteredDerived : public UnregisteredBase {$/;"	c	file:	inherits:UnregisteredBase
RegisteredDerived::sum	tests/test_methods_and_attributes.cpp	/^    double sum() const { return rw_value + ro_value; }$/;"	f	class:RegisteredDerived	typeref:typename:double	file:	access:public	signature:() const
Registering custom translators	docs/advanced/exceptions.rst	/^Registering custom translators$/;"	c	title:Exceptions
Repology	README.rst	/^.. |Repology| image:: https:\/\/repology.org\/badge\/latest-versions\/python:pybind11.svg$/;"	d	section:License
Reporting a Vulnerability	SECURITY.md	/^## Reporting a Vulnerability$/;"	s	chapter:Security Policy
Reporting bugs	.github/CONTRIBUTING.md	/^### Reporting bugs$/;"	S
Return C++ strings without conversion	docs/advanced/cast/strings.rst	/^Return C++ strings without conversion$/;"	s	chapter:Returning C++ strings to Python
Return value policies	docs/advanced/functions.rst	/^Return value policies$/;"	c	title:Functions
ReturnTester	tests/test_eigen_matrix.cpp	/^        ReturnTester() { print_created(this); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	file:	access:public	signature:()
ReturnTester	tests/test_eigen_matrix.cpp	/^    class ReturnTester {$/;"	c	function:TEST_SUBMODULE	file:
Returning C++ strings to Python	docs/advanced/cast/strings.rst	/^Returning C++ strings to Python$/;"	c	title:Strings, bytes and Unicode conversions
Returning values to Python	docs/advanced/cast/eigen.rst	/^Returning values to Python$/;"	c	title:Eigen
S	pybind11/setup_helpers.py	/^S = TypeVar("S", bound="ParallelCompile")$/;"	v	access:public
SDist	setup.py	/^class SDist(setuptools.command.sdist.sdist):  # type: ignore[misc]$/;"	c	inherits:setuptools.command.sdist.sdist	access:public
SDist.make_release_tree	setup.py	/^    def make_release_tree(self, base_dir: str, files: List[str]) -> None:$/;"	m	class:SDist	typeref:typename:None	access:public	signature:(self, base_dir: str, files: List[str])
SET_TEST_VALS	tests/test_numpy_dtypes.cpp	/^#define SET_TEST_VALS(/;"	d	file:	signature:(s,i)
SKIP_TZ_ENV_ON_WIN	tests/test_chrono.py	/^SKIP_TZ_ENV_ON_WIN = pytest.mark.skipif($/;"	v	access:public
SPHINXBUILD	docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	docs/Makefile	/^SPHINXOPTS    =$/;"	m
SPT	include/pybind11/eigen/tensor.h	/^    using SPT = typename MapType::PointerArgType;$/;"	t	struct:get_storage_pointer_type	typeref:typename:MapType::PointerArgType	access:public
SPT	include/pybind11/eigen/tensor.h	/^    using SPT = typename MapType::StoragePointerType;$/;"	t	struct:get_storage_pointer_type	typeref:typename:MapType::StoragePointerType	access:public
STD_FS_LIB	tests/CMakeLists.txt	/^  set(STD_FS_LIB "")$/;"	v
STD_FS_LIB	tests/CMakeLists.txt	/^  set(STD_FS_LIB c++fs)$/;"	v
STD_FS_LIB	tests/CMakeLists.txt	/^  set(STD_FS_LIB stdc++fs)$/;"	v
STD_FS_NO_LIB_NEEDED	tests/CMakeLists.txt	/^  set(STD_FS_NO_LIB_NEEDED TRUE)$/;"	v
STD_TMPL	pybind11/setup_helpers.py	/^STD_TMPL = "\/std:c++{}" if WIN else "-std=c++{}"$/;"	v	access:public
STL containers	docs/advanced/cast/stl.rst	/^STL containers$/;"	H
SamePointer	tests/test_class.cpp	/^    struct SamePointer {};$/;"	s	function:TEST_SUBMODULE	file:
SanitizedString	tests/conftest.py	/^class SanitizedString:$/;"	c	inherits:	access:public
SanitizedString.__call__	tests/conftest.py	/^    def __call__(self, thing):$/;"	m	class:SanitizedString	access:public	signature:(self, thing)
SanitizedString.__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:SanitizedString	access:public	signature:(self, other)
SanitizedString.__init__	tests/conftest.py	/^    def __init__(self, sanitizer):$/;"	m	class:SanitizedString	access:public	signature:(self, sanitizer)
Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:EigenProps	typeref:typename:Type::Scalar	access:public
Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:type_caster	typeref:typename:Type::Scalar	access:public
Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename props::Scalar;$/;"	t	struct:type_caster	typeref:typename:props::Scalar	access:private
Scalar	include/pybind11/pybind11.h	/^    using Scalar = detail::conditional_t<detail::any_of<detail::is_std_char_type<Underlying>,$/;"	t	class:enum_	access:public
ScopedBoolEnum	tests/test_enum.cpp	/^    enum class ScopedBoolEnum : bool { FALSE, TRUE };$/;"	g	function:TEST_SUBMODULE	typeref:typename:bool	file:
ScopedChar16Enum	tests/test_enum.cpp	/^    enum class ScopedChar16Enum : char16_t { Zero, Positive };$/;"	g	function:TEST_SUBMODULE	typeref:typename:char16_t	file:
ScopedChar32Enum	tests/test_enum.cpp	/^    enum class ScopedChar32Enum : char32_t { Zero, Positive };$/;"	g	function:TEST_SUBMODULE	typeref:typename:char32_t	file:
ScopedChar8Enum	tests/test_enum.cpp	/^    enum class ScopedChar8Enum : char8_t { Zero, Positive };$/;"	g	function:TEST_SUBMODULE	typeref:typename:char8_t	file:
ScopedCharEnum	tests/test_enum.cpp	/^    enum class ScopedCharEnum : char { Zero, Positive };$/;"	g	function:TEST_SUBMODULE	typeref:typename:char	file:
ScopedEnum	tests/test_enum.cpp	/^    enum class ScopedEnum { Two = 2, Three };$/;"	g	function:TEST_SUBMODULE	file:
ScopedLongEnum	tests/test_enum.cpp	/^    enum class ScopedLongEnum : long {};$/;"	g	function:TEST_SUBMODULE	typeref:typename:long	file:
ScopedShortEnum	tests/test_enum.cpp	/^    enum class ScopedShortEnum : short {};$/;"	g	function:TEST_SUBMODULE	typeref:typename:short	file:
ScopedWCharEnum	tests/test_enum.cpp	/^    enum class ScopedWCharEnum : wchar_t { Zero, Positive };$/;"	g	function:TEST_SUBMODULE	typeref:typename:wchar_t	file:
Security Policy	SECURITY.md	/^# Security Policy$/;"	c
Sequence	tests/test_sequences_and_iterators.cpp	/^        Sequence(Sequence &&s) noexcept : m_size(s.m_size), m_data(s.m_data) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(Sequence && s)
Sequence	tests/test_sequences_and_iterators.cpp	/^        Sequence(const Sequence &s) : m_size(s.m_size) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(const Sequence & s)
Sequence	tests/test_sequences_and_iterators.cpp	/^        explicit Sequence(const std::vector<float> &value) : m_size(value.size()) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(const std::vector<float> & value)
Sequence	tests/test_sequences_and_iterators.cpp	/^        explicit Sequence(size_t size) : m_size(size) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(size_t size)
Sequence	tests/test_sequences_and_iterators.cpp	/^    class Sequence {$/;"	c	function:TEST_SUBMODULE	file:
SequenceLike	tests/test_sequences_and_iterators.py	/^    class SequenceLike:$/;"	c	function:test_sequence_length	file:	inherits:	access:private
SetIntValue	tests/test_methods_and_attributes.cpp	/^    FieldBase &SetIntValue(int int_value) {$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:FieldBase &	file:	access:public	signature:(int int_value)
Setup	docs/benchmark.rst	/^Setup$/;"	c	title:Benchmark
ShapeContainer	include/pybind11/numpy.h	/^    using ShapeContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>	access:public
SharedFromThisRef	tests/test_smart_ptr.cpp	/^struct SharedFromThisRef {$/;"	s	namespace:__anond975f9d30111	file:
SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    SharedFromThisVBase() = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:()
SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    SharedFromThisVBase(const SharedFromThisVBase &) = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:(const SharedFromThisVBase &)
SharedFromThisVBase	tests/test_smart_ptr.cpp	/^struct SharedFromThisVBase : std::enable_shared_from_this<SharedFromThisVBase> {$/;"	s	namespace:__anond975f9d30111	file:	inherits:std::enable_shared_from_this<SharedFromThisVBase>
SharedFromThisVirt	tests/test_smart_ptr.cpp	/^struct SharedFromThisVirt : virtual SharedFromThisVBase {};$/;"	s	namespace:__anond975f9d30111	file:	inherits:SharedFromThisVBase
SharedPtrRef	tests/test_smart_ptr.cpp	/^struct SharedPtrRef {$/;"	s	namespace:__anond975f9d30111	file:
SimpleBase	tests/test_pickling.cpp	/^    SimpleBase() = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:()
SimpleBase	tests/test_pickling.cpp	/^    SimpleBase(const SimpleBase &) = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:(const SimpleBase &)
SimpleBase	tests/test_pickling.cpp	/^struct SimpleBase {$/;"	s	namespace:exercise_trampoline	file:
SimpleBaseTrampoline	tests/test_pickling.cpp	/^struct SimpleBaseTrampoline : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:	inherits:SimpleBase
SimpleCppDerived	tests/test_pickling.cpp	/^struct SimpleCppDerived : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:	inherits:SimpleBase
SimpleEnum	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	g	function:TEST_SUBMODULE	file:
SimplePyDerived	tests/test_pickling.py	/^class SimplePyDerived(m.SimpleBase):$/;"	c	inherits:m.SimpleBase	access:public
SimpleStruct	tests/test_numpy_dtypes.cpp	/^struct SimpleStruct {$/;"	s	file:
SimpleStruct::bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStruct	typeref:typename:bool	file:	access:public
SimpleStruct::float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStruct	typeref:typename:float	file:	access:public
SimpleStruct::ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStruct	typeref:typename:long double	file:	access:public
SimpleStruct::uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStruct	typeref:typename:uint32_t	file:	access:public
SimpleStructReordered	tests/test_numpy_dtypes.cpp	/^struct SimpleStructReordered {$/;"	s	file:
SimpleStructReordered::bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStructReordered	typeref:typename:bool	file:	access:public
SimpleStructReordered::float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStructReordered	typeref:typename:float	file:	access:public
SimpleStructReordered::ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStructReordered	typeref:typename:long double	file:	access:public
SimpleStructReordered::uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStructReordered	typeref:typename:uint32_t	file:	access:public
SizeType	include/pybind11/stl_bind.h	/^    using SizeType = typename Vector::size_type;$/;"	t	function:vector_accessor	typeref:typename:Vector::size_type
SizeType	include/pybind11/stl_bind.h	/^    using SizeType = typename Vector::size_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::size_type
Sliceable	tests/test_sequences_and_iterators.cpp	/^        explicit Sliceable(int n) : size(n) {}$/;"	f	class:TEST_SUBMODULE::Sliceable	file:	access:public	signature:(int n)
Sliceable	tests/test_sequences_and_iterators.cpp	/^    class Sliceable {$/;"	c	function:TEST_SUBMODULE	file:
Smart pointers	docs/advanced/smart_ptrs.rst	/^Smart pointers$/;"	H
SoEmpty	tests/test_class.cpp	/^struct SoEmpty {};$/;"	s	namespace:test_class::pr4220_tripped_over_this	file:
SparseMatrixC	tests/test_eigen_matrix.cpp	/^    using SparseMatrixC = Eigen::SparseMatrix<float>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::SparseMatrix<float>	file:
SparseMatrixR	tests/test_eigen_matrix.cpp	/^    using SparseMatrixR = Eigen::SparseMatrix<float, Eigen::RowMajor>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:Eigen::SparseMatrix<float,Eigen::RowMajor>	file:
SquareMatrix	tests/test_buffers.cpp	/^        explicit SquareMatrix(py::ssize_t n) : Matrix(n, n) {}$/;"	f	class:TEST_SUBMODULE::SquareMatrix	file:	access:public	signature:(py::ssize_t n)
SquareMatrix	tests/test_buffers.cpp	/^    class SquareMatrix : public Matrix {$/;"	c	function:TEST_SUBMODULE	file:	inherits:Matrix
Stable Documentation Status	README.rst	/^.. |Stable Documentation Status| image:: https:\/\/img.shields.io\/badge\/docs-stable-blue.svg$/;"	d	section:License
Static properties	docs/advanced/classes.rst	/^Static properties$/;"	c	title:Classes
Storage orders	docs/advanced/cast/eigen.rst	/^Storage orders$/;"	c	title:Eigen
StorageIndex	include/pybind11/eigen/matrix.h	/^    using StorageIndex = remove_reference_t<decltype(*std::declval<Type>().outerIndexPtr())>;$/;"	t	struct:type_caster	access:public
StoreResultVisitor	tests/test_virtual_functions.py	/^    class StoreResultVisitor:$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:	access:private
StrIssue	tests/test_methods_and_attributes.cpp	/^    StrIssue() = default;$/;"	p	struct:StrIssue	file:	access:public	signature:()
StrIssue	tests/test_methods_and_attributes.cpp	/^    explicit StrIssue(int i) : val{i} {}$/;"	f	struct:StrIssue	file:	access:public	signature:(int i)
StrIssue	tests/test_methods_and_attributes.cpp	/^struct StrIssue {$/;"	s	file:
StrIssue::StrIssue	tests/test_methods_and_attributes.cpp	/^    StrIssue() = default;$/;"	p	struct:StrIssue	file:	access:public	signature:()
StrIssue::StrIssue	tests/test_methods_and_attributes.cpp	/^    explicit StrIssue(int i) : val{i} {}$/;"	f	struct:StrIssue	file:	access:public	signature:(int i)
StrIssue::val	tests/test_methods_and_attributes.cpp	/^    int val = -1;$/;"	m	struct:StrIssue	typeref:typename:int	file:	access:public
Stricter compile-time error checking	docs/upgrade.rst	/^Stricter compile-time error checking$/;"	s	chapter:v2.2
Stricter enforcement of hidden symbol visibility for pybind11 modules	docs/upgrade.rst	/^Stricter enforcement of hidden symbol visibility for pybind11 modules$/;"	s	chapter:v2.2
StrideType	include/pybind11/eigen/matrix.h	/^    using StrideType = typename eigen_extract_stride<Type>::type;$/;"	t	struct:EigenProps	typeref:typename:eigen_extract_stride<Type>::type	access:public
StridesContainer	include/pybind11/numpy.h	/^    using StridesContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>	access:public
StringCaster	include/pybind11/cast.h	/^    using StringCaster = make_caster<StringType>;$/;"	t	struct:type_caster	typeref:typename:make_caster<StringType>	access:public
StringList	tests/test_opaque_types.cpp	/^using StringList = std::vector<std::string, std::allocator<std::string>>;$/;"	t	typeref:typename:std::vector<std::string,std::allocator<std::string>>	file:
StringMap	tests/test_sequences_and_iterators.cpp	/^        StringMap() = default;$/;"	p	class:TEST_SUBMODULE::StringMap	file:	access:public	signature:()
StringMap	tests/test_sequences_and_iterators.cpp	/^        explicit StringMap(std::unordered_map<std::string, std::string> init)$/;"	f	class:TEST_SUBMODULE::StringMap	file:	access:public	signature:(std::unordered_map<std::string,std::string> init)
StringMap	tests/test_sequences_and_iterators.cpp	/^    class StringMap {$/;"	c	function:TEST_SUBMODULE	file:
StringStruct	tests/test_numpy_dtypes.cpp	/^struct StringStruct {$/;"	s	file:
StringStruct::a	tests/test_numpy_dtypes.cpp	/^    char a[3];$/;"	m	struct:StringStruct	typeref:typename:char[3]	file:	access:public
StringStruct::b	tests/test_numpy_dtypes.cpp	/^    std::array<char, 3> b;$/;"	m	struct:StringStruct	typeref:typename:std::array<char,3>	file:	access:public
StringType	include/pybind11/cast.h	/^    using StringType = std::basic_string<CharT>;$/;"	t	struct:type_caster	typeref:typename:std::basic_string<CharT>	access:public
StringWrapper	tests/test_class.cpp	/^    struct StringWrapper {$/;"	s	function:TEST_SUBMODULE	file:
Strings, bytes and Unicode conversions	docs/advanced/cast/strings.rst	/^Strings, bytes and Unicode conversions$/;"	H
StrippedKeyType	include/pybind11/stl_bind.h	/^    using StrippedKeyType = detail::remove_cvref_t<KeyType>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:detail::remove_cvref_t<KeyType>
StrippedMappedType	include/pybind11/stl_bind.h	/^    using StrippedMappedType = detail::remove_cvref_t<MappedType>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:detail::remove_cvref_t<MappedType>
Structured types	docs/advanced/pycpp/numpy.rst	/^Structured types$/;"	c	title:NumPy
Sub-interpreter support	docs/advanced/embedding.rst	/^Sub-interpreter support$/;"	c	title:Embedding the interpreter
SubAliased	tests/test_class.py	/^    class SubAliased(m.AliasedHasOpNewDelSize):$/;"	c	function:test_operator_new_delete	file:	inherits:m.AliasedHasOpNewDelSize	access:private
SubTestObject	tests/test_pytypes.py	/^    class SubTestObject:$/;"	c	function:test_accessors	file:	inherits:	access:private
Suggested changelog entry:	.github/pull_request_template.md	/^## Suggested changelog entry:$/;"	s
Supported Versions	SECURITY.md	/^## Supported Versions$/;"	s	chapter:Security Policy
Supported compilers	README.rst	/^Supported compilers$/;"	c
Supported data types	docs/basics.rst	/^Supported data types$/;"	c	title:First steps
SupportsAsync	tests/test_async.cpp	/^    struct SupportsAsync {};$/;"	s	function:TEST_SUBMODULE	file:
T	include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_accessor	typeref:typename:Vector::value_type
T	include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_buffer_impl	typeref:typename:Vector::value_type
T	include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_if_equal_operator	typeref:typename:Vector::value_type
T	include/pybind11/stl_bind.h	/^    using T = typename Vector::value_type;$/;"	t	function:vector_modifiers	typeref:typename:Vector::value_type
TEST_SUBMODULE	tests/pybind11_tests.h	/^#define TEST_SUBMODULE(/;"	d	signature:(name,variable)
TEST_SUBMODULE	tests/test_async.cpp	/^TEST_SUBMODULE(async_module, m) {$/;"	f	signature:(async_module,m)
TEST_SUBMODULE	tests/test_buffers.cpp	/^TEST_SUBMODULE(buffers, m) {$/;"	f	signature:(buffers,m)
TEST_SUBMODULE	tests/test_call_policies.cpp	/^TEST_SUBMODULE(call_policies, m) {$/;"	f	signature:(call_policies,m)
TEST_SUBMODULE	tests/test_callbacks.cpp	/^TEST_SUBMODULE(callbacks, m) {$/;"	f	signature:(callbacks,m)
TEST_SUBMODULE	tests/test_chrono.cpp	/^TEST_SUBMODULE(chrono, m) {$/;"	f	signature:(chrono,m)
TEST_SUBMODULE	tests/test_class.cpp	/^TEST_SUBMODULE(class_, m) {$/;"	f	signature:(class_,m)
TEST_SUBMODULE	tests/test_constants_and_functions.cpp	/^TEST_SUBMODULE(constants_and_functions, m) {$/;"	f	signature:(constants_and_functions,m)
TEST_SUBMODULE	tests/test_custom_type_casters.cpp	/^TEST_SUBMODULE(custom_type_casters, m) {$/;"	f	signature:(custom_type_casters,m)
TEST_SUBMODULE	tests/test_custom_type_setup.cpp	/^TEST_SUBMODULE(custom_type_setup, m) {$/;"	f	signature:(custom_type_setup,m)
TEST_SUBMODULE	tests/test_docstring_options.cpp	/^TEST_SUBMODULE(docstring_options, m) {$/;"	f	signature:(docstring_options,m)
TEST_SUBMODULE	tests/test_eigen_matrix.cpp	/^TEST_SUBMODULE(eigen_matrix, m) {$/;"	f	signature:(eigen_matrix,m)
TEST_SUBMODULE	tests/test_enum.cpp	/^TEST_SUBMODULE(enums, m) {$/;"	f	signature:(enums,m)
TEST_SUBMODULE	tests/test_eval.cpp	/^TEST_SUBMODULE(eval_, m) {$/;"	f	signature:(eval_,m)
TEST_SUBMODULE	tests/test_exceptions.cpp	/^TEST_SUBMODULE(exceptions, m) {$/;"	f	signature:(exceptions,m)
TEST_SUBMODULE	tests/test_factory_constructors.cpp	/^TEST_SUBMODULE(factory_constructors, m) {$/;"	f	signature:(factory_constructors,m)
TEST_SUBMODULE	tests/test_gil_scoped.cpp	/^TEST_SUBMODULE(gil_scoped, m) {$/;"	f	signature:(gil_scoped,m)
TEST_SUBMODULE	tests/test_iostream.cpp	/^TEST_SUBMODULE(iostream, m) {$/;"	f	signature:(iostream,m)
TEST_SUBMODULE	tests/test_kwargs_and_defaults.cpp	/^TEST_SUBMODULE(kwargs_and_defaults, m) {$/;"	f	signature:(kwargs_and_defaults,m)
TEST_SUBMODULE	tests/test_local_bindings.cpp	/^TEST_SUBMODULE(local_bindings, m) {$/;"	f	signature:(local_bindings,m)
TEST_SUBMODULE	tests/test_methods_and_attributes.cpp	/^TEST_SUBMODULE(methods_and_attributes, m) {$/;"	f	signature:(methods_and_attributes,m)
TEST_SUBMODULE	tests/test_modules.cpp	/^TEST_SUBMODULE(modules, m) {$/;"	f	signature:(modules,m)
TEST_SUBMODULE	tests/test_multiple_inheritance.cpp	/^TEST_SUBMODULE(multiple_inheritance, m) {$/;"	f	signature:(multiple_inheritance,m)
TEST_SUBMODULE	tests/test_numpy_array.cpp	/^TEST_SUBMODULE(numpy_array, sm) {$/;"	f	signature:(numpy_array,sm)
TEST_SUBMODULE	tests/test_numpy_dtypes.cpp	/^TEST_SUBMODULE(numpy_dtypes, m) {$/;"	f	signature:(numpy_dtypes,m)
TEST_SUBMODULE	tests/test_numpy_vectorize.cpp	/^TEST_SUBMODULE(numpy_vectorize, m) {$/;"	f	signature:(numpy_vectorize,m)
TEST_SUBMODULE	tests/test_opaque_types.cpp	/^TEST_SUBMODULE(opaque_types, m) {$/;"	f	signature:(opaque_types,m)
TEST_SUBMODULE	tests/test_operator_overloading.cpp	/^TEST_SUBMODULE(operators, m) {$/;"	f	signature:(operators,m)
TEST_SUBMODULE	tests/test_pickling.cpp	/^TEST_SUBMODULE(pickling, m) {$/;"	f	signature:(pickling,m)
TEST_SUBMODULE	tests/test_pytypes.cpp	/^TEST_SUBMODULE(pytypes, m) {$/;"	f	signature:(pytypes,m)
TEST_SUBMODULE	tests/test_sequences_and_iterators.cpp	/^TEST_SUBMODULE(sequences_and_iterators, m) {$/;"	f	signature:(sequences_and_iterators,m)
TEST_SUBMODULE	tests/test_smart_ptr.cpp	/^TEST_SUBMODULE(smart_ptr, m) {$/;"	f	signature:(smart_ptr,m)
TEST_SUBMODULE	tests/test_stl.cpp	/^TEST_SUBMODULE(stl, m) {$/;"	f	signature:(stl,m)
TEST_SUBMODULE	tests/test_stl_binders.cpp	/^TEST_SUBMODULE(stl_binders, m) {$/;"	f	signature:(stl_binders,m)
TEST_SUBMODULE	tests/test_tagbased_polymorphic.cpp	/^TEST_SUBMODULE(tagbased_polymorphic, m) {$/;"	f	signature:(tagbased_polymorphic,m)
TEST_SUBMODULE	tests/test_thread.cpp	/^TEST_SUBMODULE(thread, m) {$/;"	f	signature:(thread,m)
TEST_SUBMODULE	tests/test_type_caster_pyobject_ptr.cpp	/^TEST_SUBMODULE(type_caster_pyobject_ptr, m) {$/;"	f	signature:(type_caster_pyobject_ptr,m)
TEST_SUBMODULE	tests/test_union.cpp	/^TEST_SUBMODULE(union_, m) {$/;"	f	signature:(union_,m)
TEST_SUBMODULE	tests/test_unnamed_namespace_a.cpp	/^TEST_SUBMODULE(unnamed_namespace_a, m) {$/;"	f	signature:(unnamed_namespace_a,m)
TEST_SUBMODULE	tests/test_unnamed_namespace_b.cpp	/^TEST_SUBMODULE(unnamed_namespace_b, m) {$/;"	f	signature:(unnamed_namespace_b,m)
TEST_SUBMODULE	tests/test_vector_unique_ptr_member.cpp	/^TEST_SUBMODULE(vector_unique_ptr_member, m) {$/;"	f	signature:(vector_unique_ptr_member,m)
TEST_SUBMODULE	tests/test_virtual_functions.cpp	/^TEST_SUBMODULE(virtual_functions, m) {$/;"	f	signature:(virtual_functions,m)
TEST_SUBMODULE::A2::A2	tests/test_virtual_functions.cpp	/^        A2() = default;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:()
TEST_SUBMODULE::A2::A2	tests/test_virtual_functions.cpp	/^        A2(const A2 &) = delete;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:(const A2 &)
TEST_SUBMODULE::A2::f	tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A2.f()"); }$/;"	f	struct:TEST_SUBMODULE::A2	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::A2::~A2	tests/test_virtual_functions.cpp	/^        virtual ~A2() = default;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:()
TEST_SUBMODULE::A::A	tests/test_modules.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:(const A &)
TEST_SUBMODULE::A::A	tests/test_modules.cpp	/^        explicit A(int v) : v(v) { print_created(this, v); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:(int v)
TEST_SUBMODULE::A::A	tests/test_virtual_functions.cpp	/^        A() = default;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:()
TEST_SUBMODULE::A::A	tests/test_virtual_functions.cpp	/^        A(const A &) = delete;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:(const A &)
TEST_SUBMODULE::A::f	tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A.f()"); }$/;"	f	struct:TEST_SUBMODULE::A	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::A::operator =	tests/test_modules.cpp	/^        A &operator=(const A &copy) {$/;"	f	class:TEST_SUBMODULE::A	typeref:typename:A &	file:	access:public	signature:(const A & copy)
TEST_SUBMODULE::A::toString	tests/test_modules.cpp	/^        std::string toString() const { return "A[" + std::to_string(v) + "]"; }$/;"	f	class:TEST_SUBMODULE::A	typeref:typename:std::string	file:	access:public	signature:() const
TEST_SUBMODULE::A::v	tests/test_modules.cpp	/^        int v;$/;"	m	class:TEST_SUBMODULE::A	typeref:typename:int	file:	access:private
TEST_SUBMODULE::A::~A	tests/test_modules.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:()
TEST_SUBMODULE::A::~A	tests/test_virtual_functions.cpp	/^        virtual ~A() = default;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:()
TEST_SUBMODULE::AbstractBase::func	tests/test_callbacks.cpp	/^        virtual unsigned int func() = 0;$/;"	p	class:TEST_SUBMODULE::AbstractBase	typeref:typename:unsigned int	file:	access:public	signature:()
TEST_SUBMODULE::AbstractBase::~AbstractBase	tests/test_callbacks.cpp	/^        virtual ~AbstractBase() {} \/\/ NOLINT(modernize-use-equals-default)$/;"	f	class:TEST_SUBMODULE::AbstractBase	file:	access:public	signature:()
TEST_SUBMODULE::AliasedHasOpNewDelSize::AliasedHasOpNewDelSize	tests/test_class.cpp	/^        AliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:()
TEST_SUBMODULE::AliasedHasOpNewDelSize::AliasedHasOpNewDelSize	tests/test_class.cpp	/^        AliasedHasOpNewDelSize(const AliasedHasOpNewDelSize &) = delete;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:(const AliasedHasOpNewDelSize &)
TEST_SUBMODULE::AliasedHasOpNewDelSize::i	tests/test_class.cpp	/^        std::uint64_t i;$/;"	m	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:std::uint64_t	file:	access:public
TEST_SUBMODULE::AliasedHasOpNewDelSize::operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
TEST_SUBMODULE::AliasedHasOpNewDelSize::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s)
TEST_SUBMODULE::AliasedHasOpNewDelSize::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
TEST_SUBMODULE::AliasedHasOpNewDelSize::~AliasedHasOpNewDelSize	tests/test_class.cpp	/^        virtual ~AliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:()
TEST_SUBMODULE::Aligned::ptr	tests/test_class.cpp	/^        std::uintptr_t ptr() const { return (uintptr_t) this; }$/;"	f	struct:TEST_SUBMODULE::Aligned	typeref:typename:std::uintptr_t	file:	access:public	signature:() const
TEST_SUBMODULE::ArgInspector::f	tests/test_custom_type_casters.cpp	/^        ArgInspector1 f(ArgInspector1 a, ArgAlwaysConverts) { return a; }$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:ArgInspector1	file:	access:public	signature:(ArgInspector1 a,ArgAlwaysConverts)
TEST_SUBMODULE::ArgInspector::g	tests/test_custom_type_casters.cpp	/^        std::string g(const ArgInspector1 &a,$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:std::string	file:	access:public	signature:(const ArgInspector1 & a,const ArgInspector1 & b,int c,ArgInspector2 * d,ArgAlwaysConverts)
TEST_SUBMODULE::ArgInspector::h	tests/test_custom_type_casters.cpp	/^        static ArgInspector2 h(ArgInspector2 a, ArgAlwaysConverts) { return a; }$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:ArgInspector2	file:	access:public	signature:(ArgInspector2 a,ArgAlwaysConverts)
TEST_SUBMODULE::ArrayClass::ArrayClass	tests/test_numpy_array.cpp	/^        ArrayClass() { py::print("ArrayClass()"); }$/;"	f	struct:TEST_SUBMODULE::ArrayClass	file:	access:public	signature:()
TEST_SUBMODULE::ArrayClass::data	tests/test_numpy_array.cpp	/^        int data[2] = {1, 2};$/;"	m	struct:TEST_SUBMODULE::ArrayClass	typeref:typename:int[2]	file:	access:public
TEST_SUBMODULE::ArrayClass::~ArrayClass	tests/test_numpy_array.cpp	/^        ~ArrayClass() { py::print("~ArrayClass()"); }$/;"	f	struct:TEST_SUBMODULE::ArrayClass	file:	access:public	signature:()
TEST_SUBMODULE::B::B	tests/test_modules.cpp	/^        B() { print_default_created(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:()
TEST_SUBMODULE::B::B	tests/test_modules.cpp	/^        B(const B &) { print_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:(const B &)
TEST_SUBMODULE::B::B	tests/test_multiple_inheritance.cpp	/^        B() = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:()
TEST_SUBMODULE::B::B	tests/test_multiple_inheritance.cpp	/^        B(const B &) = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:(const B &)
TEST_SUBMODULE::B::a1	tests/test_modules.cpp	/^        A a1{1};$/;"	m	class:TEST_SUBMODULE::B	typeref:typename:A	file:	access:public
TEST_SUBMODULE::B::a2	tests/test_modules.cpp	/^        A a2{2};$/;"	m	class:TEST_SUBMODULE::B	typeref:typename:A	file:	access:public
TEST_SUBMODULE::B::b	tests/test_multiple_inheritance.cpp	/^        int b;$/;"	m	struct:TEST_SUBMODULE::B	typeref:typename:int	file:	access:public
TEST_SUBMODULE::B::get_a1	tests/test_modules.cpp	/^        A &get_a1() { return a1; }$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:A &	file:	access:public	signature:()
TEST_SUBMODULE::B::get_a2	tests/test_modules.cpp	/^        A &get_a2() { return a2; }$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:A &	file:	access:public	signature:()
TEST_SUBMODULE::B::operator =	tests/test_modules.cpp	/^        B &operator=(const B &copy) {$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:B &	file:	access:public	signature:(const B & copy)
TEST_SUBMODULE::B::~B	tests/test_modules.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:()
TEST_SUBMODULE::B::~B	tests/test_multiple_inheritance.cpp	/^        virtual ~B() = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:()
TEST_SUBMODULE::Base12::Base12	tests/test_multiple_inheritance.cpp	/^        Base12(int i, int j) : Base1(i), Base2(j) {}$/;"	f	struct:TEST_SUBMODULE::Base12	file:	access:public	signature:(int i,int j)
TEST_SUBMODULE::Base1::Base1	tests/test_multiple_inheritance.cpp	/^        explicit Base1(int i) : i(i) {}$/;"	f	struct:TEST_SUBMODULE::Base1	file:	access:public	signature:(int i)
TEST_SUBMODULE::Base1::foo	tests/test_multiple_inheritance.cpp	/^        int foo() const { return i; }$/;"	f	struct:TEST_SUBMODULE::Base1	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::Base1::i	tests/test_multiple_inheritance.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::Base1	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Base2::Base2	tests/test_multiple_inheritance.cpp	/^        explicit Base2(int i) : i(i) {}$/;"	f	struct:TEST_SUBMODULE::Base2	file:	access:public	signature:(int i)
TEST_SUBMODULE::Base2::bar	tests/test_multiple_inheritance.cpp	/^        int bar() const { return i; }$/;"	f	struct:TEST_SUBMODULE::Base2	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::Base2::i	tests/test_multiple_inheritance.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::Base2	typeref:typename:int	file:	access:public
TEST_SUBMODULE::BaseClass::BaseClass	tests/test_class.cpp	/^        BaseClass() = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:()
TEST_SUBMODULE::BaseClass::BaseClass	tests/test_class.cpp	/^        BaseClass(BaseClass &&) = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:(BaseClass &&)
TEST_SUBMODULE::BaseClass::BaseClass	tests/test_class.cpp	/^        BaseClass(const BaseClass &) = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:(const BaseClass &)
TEST_SUBMODULE::BaseClass::~BaseClass	tests/test_class.cpp	/^        virtual ~BaseClass() = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:()
TEST_SUBMODULE::BaseWithNested::Nested	tests/test_class.cpp	/^        struct Nested {};$/;"	s	struct:TEST_SUBMODULE::BaseWithNested	file:	access:public
TEST_SUBMODULE::BogusImplicitConversion::BogusImplicitConversion	tests/test_class.cpp	/^        BogusImplicitConversion(const BogusImplicitConversion &) = default;$/;"	p	struct:TEST_SUBMODULE::BogusImplicitConversion	file:	access:public	signature:(const BogusImplicitConversion &)
TEST_SUBMODULE::BraceInitialization::field1	tests/test_class.cpp	/^        int field1;$/;"	m	struct:TEST_SUBMODULE::BraceInitialization	typeref:typename:int	file:	access:public
TEST_SUBMODULE::BraceInitialization::field2	tests/test_class.cpp	/^        std::string field2;$/;"	m	struct:TEST_SUBMODULE::BraceInitialization	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::Buffer::get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() {$/;"	f	struct:TEST_SUBMODULE::Buffer	typeref:typename:py::buffer_info	file:	access:public	signature:()
TEST_SUBMODULE::Buffer::value	tests/test_buffers.cpp	/^        int32_t value = 0;$/;"	m	struct:TEST_SUBMODULE::Buffer	typeref:typename:int32_t	file:	access:public
TEST_SUBMODULE::BufferReadOnly::BufferReadOnly	tests/test_buffers.cpp	/^        explicit BufferReadOnly(uint8_t value) : value(value) {}$/;"	f	struct:TEST_SUBMODULE::BufferReadOnly	file:	access:public	signature:(uint8_t value)
TEST_SUBMODULE::BufferReadOnly::get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() { return py::buffer_info(&value, 1); }$/;"	f	struct:TEST_SUBMODULE::BufferReadOnly	typeref:typename:py::buffer_info	file:	access:public	signature:()
TEST_SUBMODULE::BufferReadOnly::value	tests/test_buffers.cpp	/^        const uint8_t value = 0;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnly	typeref:typename:const uint8_t	file:	access:public
TEST_SUBMODULE::BufferReadOnlySelect::get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() { return py::buffer_info(&value, 1, readonly); }$/;"	f	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:py::buffer_info	file:	access:public	signature:()
TEST_SUBMODULE::BufferReadOnlySelect::readonly	tests/test_buffers.cpp	/^        bool readonly = false;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::BufferReadOnlySelect::value	tests/test_buffers.cpp	/^        uint8_t value = 0;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:uint8_t	file:	access:public
TEST_SUBMODULE::C0::c0	tests/test_multiple_inheritance.cpp	/^        int c0;$/;"	m	struct:TEST_SUBMODULE::C0	typeref:typename:int	file:	access:public
TEST_SUBMODULE::C1::c1	tests/test_multiple_inheritance.cpp	/^        int c1;$/;"	m	struct:TEST_SUBMODULE::C1	typeref:typename:int	file:	access:public
TEST_SUBMODULE::CArrayHolder::CArrayHolder	tests/test_sequences_and_iterators.cpp	/^        CArrayHolder(double x, double y, double z) {$/;"	f	class:TEST_SUBMODULE::CArrayHolder	file:	access:public	signature:(double x,double y,double z)
TEST_SUBMODULE::CArrayHolder::values	tests/test_sequences_and_iterators.cpp	/^        double values[3];$/;"	m	class:TEST_SUBMODULE::CArrayHolder	typeref:typename:double[3]	file:	access:public
TEST_SUBMODULE::Cat::Cat	tests/test_local_bindings.cpp	/^        explicit Cat(std::string name) : Pet(std::move(name)) {}$/;"	f	class:TEST_SUBMODULE::Cat	file:	access:public	signature:(std::string name)
TEST_SUBMODULE::Child::Child	tests/test_call_policies.cpp	/^        Child() { py::print("Allocating child."); }$/;"	f	class:TEST_SUBMODULE::Child	file:	access:public	signature:()
TEST_SUBMODULE::Child::Child	tests/test_call_policies.cpp	/^        Child(Child &&) = default;$/;"	p	class:TEST_SUBMODULE::Child	file:	access:public	signature:(Child &&)
TEST_SUBMODULE::Child::Child	tests/test_call_policies.cpp	/^        Child(const Child &) = default;$/;"	p	class:TEST_SUBMODULE::Child	file:	access:public	signature:(const Child &)
TEST_SUBMODULE::Child::~Child	tests/test_call_policies.cpp	/^        ~Child() { py::print("Releasing child."); }$/;"	f	class:TEST_SUBMODULE::Child	file:	access:public	signature:()
TEST_SUBMODULE::Chimera::Chimera	tests/test_class.cpp	/^        Chimera() : Pet("Kimmy", "chimera") {}$/;"	f	class:TEST_SUBMODULE::Chimera	file:	access:private	signature:()
TEST_SUBMODULE::ClassWithSTLVecProperty::stringList	tests/test_opaque_types.cpp	/^        StringList stringList;$/;"	m	class:TEST_SUBMODULE::ClassWithSTLVecProperty	typeref:typename:StringList	file:	access:public
TEST_SUBMODULE::ClassWithUnscopedEnum::EFirstMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	e	enum:TEST_SUBMODULE::ClassWithUnscopedEnum::EMode	file:	access:public
TEST_SUBMODULE::ClassWithUnscopedEnum::EMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	g	class:TEST_SUBMODULE::ClassWithUnscopedEnum	file:	access:public
TEST_SUBMODULE::ClassWithUnscopedEnum::ESecondMode	tests/test_enum.cpp	/^        enum EMode { EFirstMode = 1, ESecondMode };$/;"	e	enum:TEST_SUBMODULE::ClassWithUnscopedEnum::EMode	file:	access:public
TEST_SUBMODULE::ClassWithUnscopedEnum::test_function	tests/test_enum.cpp	/^        static EMode test_function(EMode mode) { return mode; }$/;"	f	class:TEST_SUBMODULE::ClassWithUnscopedEnum	typeref:typename:EMode	file:	access:public	signature:(EMode mode)
TEST_SUBMODULE::Comparable::operator ==	tests/test_operator_overloading.cpp	/^        bool operator==(const Comparable &rhs) const { return value == rhs.value; }$/;"	f	struct:TEST_SUBMODULE::Comparable	typeref:typename:bool	file:	access:public	signature:(const Comparable & rhs) const
TEST_SUBMODULE::Comparable::value	tests/test_operator_overloading.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::Comparable	typeref:typename:int	file:	access:public
TEST_SUBMODULE::CompareStruct::x	tests/test_numpy_dtypes.cpp	/^        bool x;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::CompareStruct::y	tests/test_numpy_dtypes.cpp	/^        uint32_t y;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:uint32_t	file:	access:public
TEST_SUBMODULE::CompareStruct::z	tests/test_numpy_dtypes.cpp	/^        float z;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:float	file:	access:public
TEST_SUBMODULE::ConstBuffer::ConstBuffer	tests/test_buffers.cpp	/^        ConstBuffer() : value(new int32_t{0}) {}$/;"	f	class:TEST_SUBMODULE::ConstBuffer	file:	access:public	signature:()
TEST_SUBMODULE::ConstBuffer::get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() const {$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:py::buffer_info	file:	access:public	signature:() const
TEST_SUBMODULE::ConstBuffer::get_value	tests/test_buffers.cpp	/^        int32_t get_value() const { return *value; }$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:int32_t	file:	access:public	signature:() const
TEST_SUBMODULE::ConstBuffer::set_value	tests/test_buffers.cpp	/^        void set_value(int32_t v) { *value = v; }$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:void	file:	access:public	signature:(int32_t v)
TEST_SUBMODULE::ConstBuffer::value	tests/test_buffers.cpp	/^        std::unique_ptr<int32_t> value;$/;"	m	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:std::unique_ptr<int32_t>	file:	access:private
TEST_SUBMODULE::ConvertibleFromUserType::ConvertibleFromUserType	tests/test_class.cpp	/^        explicit ConvertibleFromUserType(UserType u) : i(u.value()) {}$/;"	f	struct:TEST_SUBMODULE::ConvertibleFromUserType	file:	access:public	signature:(UserType u)
TEST_SUBMODULE::ConvertibleFromUserType::i	tests/test_class.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::ConvertibleFromUserType	typeref:typename:int	file:	access:public
TEST_SUBMODULE::CppCallable::CppCallable	tests/test_callbacks.cpp	/^        CppCallable() { track_default_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:()
TEST_SUBMODULE::CppCallable::CppCallable	tests/test_callbacks.cpp	/^        CppCallable(CppCallable &&) noexcept { track_move_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:(CppCallable &&)
TEST_SUBMODULE::CppCallable::CppCallable	tests/test_callbacks.cpp	/^        CppCallable(const CppCallable &) { track_copy_created(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:(const CppCallable &)
TEST_SUBMODULE::CppCallable::operator ()	tests/test_callbacks.cpp	/^        void operator()() {}$/;"	f	class:TEST_SUBMODULE::CppCallable	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::CppCallable::~CppCallable	tests/test_callbacks.cpp	/^        ~CppCallable() { track_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:()
TEST_SUBMODULE::D::d	tests/test_multiple_inheritance.cpp	/^        int d;$/;"	m	struct:TEST_SUBMODULE::D	typeref:typename:int	file:	access:public
TEST_SUBMODULE::DerivedWithNested::Nested	tests/test_class.cpp	/^        struct Nested {};$/;"	s	struct:TEST_SUBMODULE::DerivedWithNested	file:	access:public
TEST_SUBMODULE::DocstringTestFoo::getValue	tests/test_docstring_options.cpp	/^            int getValue() const { return value; }$/;"	f	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::DocstringTestFoo::setValue	tests/test_docstring_options.cpp	/^            void setValue(int v) { value = v; }$/;"	f	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:void	file:	access:public	signature:(int v)
TEST_SUBMODULE::DocstringTestFoo::value	tests/test_docstring_options.cpp	/^            int value;$/;"	m	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Dog::Dog	tests/test_class.cpp	/^        explicit Dog(const std::string &name) : Pet(name, "dog") {}$/;"	f	class:TEST_SUBMODULE::Dog	file:	access:public	signature:(const std::string & name)
TEST_SUBMODULE::Dog::bark	tests/test_class.cpp	/^        std::string bark() const { return "Woof!"; }$/;"	f	class:TEST_SUBMODULE::Dog	typeref:typename:std::string	file:	access:public	signature:() const
TEST_SUBMODULE::DynamicClass::DynamicClass	tests/test_methods_and_attributes.cpp	/^        DynamicClass() { print_default_created(this); }$/;"	f	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:()
TEST_SUBMODULE::DynamicClass::DynamicClass	tests/test_methods_and_attributes.cpp	/^        DynamicClass(const DynamicClass &) = delete;$/;"	p	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:(const DynamicClass &)
TEST_SUBMODULE::DynamicClass::~DynamicClass	tests/test_methods_and_attributes.cpp	/^        ~DynamicClass() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:()
TEST_SUBMODULE::EOne	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
TEST_SUBMODULE::EThree	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
TEST_SUBMODULE::ETwo	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	e	enum:TEST_SUBMODULE::UnscopedEnum	file:	access:public
TEST_SUBMODULE::Execute	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
TEST_SUBMODULE::FALSE	tests/test_enum.cpp	/^    enum class ScopedBoolEnum : bool { FALSE, TRUE };$/;"	e	enum:TEST_SUBMODULE::ScopedBoolEnum	file:	access:public
TEST_SUBMODULE::Hamster::Hamster	tests/test_class.cpp	/^        explicit Hamster(const std::string &name) : Pet(name, "rodent") {}$/;"	f	class:TEST_SUBMODULE::Hamster	file:	access:public	signature:(const std::string & name)
TEST_SUBMODULE::HasOpNewDel::i	tests/test_class.cpp	/^        std::uint64_t i;$/;"	m	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:std::uint64_t	file:	access:public
TEST_SUBMODULE::HasOpNewDel::operator delete	tests/test_class.cpp	/^        static void operator delete(void *p) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void	file:	access:public	signature:(void * p)
TEST_SUBMODULE::HasOpNewDel::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void *	file:	access:public	signature:(size_t s)
TEST_SUBMODULE::HasOpNewDel::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
TEST_SUBMODULE::HasOpNewDelBoth::i	tests/test_class.cpp	/^        std::uint32_t i[8];$/;"	m	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:std::uint32_t[8]	file:	access:public
TEST_SUBMODULE::HasOpNewDelBoth::operator delete	tests/test_class.cpp	/^        static void operator delete(void *p) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void	file:	access:public	signature:(void * p)
TEST_SUBMODULE::HasOpNewDelBoth::operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
TEST_SUBMODULE::HasOpNewDelBoth::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void *	file:	access:public	signature:(size_t s)
TEST_SUBMODULE::HasOpNewDelBoth::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
TEST_SUBMODULE::HasOpNewDelSize::i	tests/test_class.cpp	/^        std::uint32_t i;$/;"	m	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:std::uint32_t	file:	access:public
TEST_SUBMODULE::HasOpNewDelSize::operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
TEST_SUBMODULE::HasOpNewDelSize::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s)
TEST_SUBMODULE::HasOpNewDelSize::operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
TEST_SUBMODULE::Hashable::Hashable	tests/test_operator_overloading.cpp	/^        explicit Hashable(int value) : Comparable{value} {};$/;"	f	struct:TEST_SUBMODULE::Hashable	file:	access:public	signature:(int value)
TEST_SUBMODULE::Hashable::hash	tests/test_operator_overloading.cpp	/^        size_t hash() const { return static_cast<size_t>(value); }$/;"	f	struct:TEST_SUBMODULE::Hashable	typeref:typename:size_t	file:	access:public	signature:() const
TEST_SUBMODULE::I801B3::c	tests/test_multiple_inheritance.cpp	/^        int c = 3;$/;"	m	struct:TEST_SUBMODULE::I801B3	typeref:typename:int	file:	access:public
TEST_SUBMODULE::I801B3::~I801B3	tests/test_multiple_inheritance.cpp	/^        virtual ~I801B3() = default;$/;"	p	struct:TEST_SUBMODULE::I801B3	file:	access:public	signature:()
TEST_SUBMODULE::IntPairs::IntPairs	tests/test_sequences_and_iterators.cpp	/^        explicit IntPairs(std::vector<std::pair<int, int>> data) : data_(std::move(data)) {}$/;"	f	class:TEST_SUBMODULE::IntPairs	file:	access:public	signature:(std::vector<std::pair<int,int>> data)
TEST_SUBMODULE::IntPairs::begin	tests/test_sequences_and_iterators.cpp	/^        const std::pair<int, int> *begin() const { return data_.data(); }$/;"	f	class:TEST_SUBMODULE::IntPairs	typeref:typename:const std::pair<int,int> *	file:	access:public	signature:() const
TEST_SUBMODULE::IntPairs::data_	tests/test_sequences_and_iterators.cpp	/^        std::vector<std::pair<int, int>> data_;$/;"	m	class:TEST_SUBMODULE::IntPairs	typeref:typename:std::vector<std::pair<int,int>>	file:	access:private
TEST_SUBMODULE::IntPairs::end	tests/test_sequences_and_iterators.cpp	/^        const std::pair<int, int> *end() const { return data_.data() + data_.size(); }$/;"	f	class:TEST_SUBMODULE::IntPairs	typeref:typename:const std::pair<int,int> *	file:	access:public	signature:() const
TEST_SUBMODULE::Issue1561Inner::data	tests/test_stl.cpp	/^        std::string data;$/;"	m	struct:TEST_SUBMODULE::Issue1561Inner	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::Issue1561Outer::list	tests/test_stl.cpp	/^        std::vector<Issue1561Inner> list;$/;"	m	struct:TEST_SUBMODULE::Issue1561Outer	typeref:typename:std::vector<Issue1561Inner>	file:	access:public
TEST_SUBMODULE::KWClass::foo	tests/test_kwargs_and_defaults.cpp	/^        void foo(int, float) {}$/;"	f	struct:TEST_SUBMODULE::KWClass	typeref:typename:void	file:	access:public	signature:(int,float)
TEST_SUBMODULE::MIType::MIType	tests/test_multiple_inheritance.cpp	/^        MIType(int i, int j) : Base12(i, j) {}$/;"	f	struct:TEST_SUBMODULE::MIType	file:	access:public	signature:(int i,int j)
TEST_SUBMODULE::MVB::MVB	tests/test_multiple_inheritance.cpp	/^        MVB() = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:()
TEST_SUBMODULE::MVB::MVB	tests/test_multiple_inheritance.cpp	/^        MVB(const MVB &) = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:(const MVB &)
TEST_SUBMODULE::MVB::b	tests/test_multiple_inheritance.cpp	/^        int b = 1;$/;"	m	struct:TEST_SUBMODULE::MVB	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVB::get_b_b	tests/test_multiple_inheritance.cpp	/^        int get_b_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVB	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVB::~MVB	tests/test_multiple_inheritance.cpp	/^        virtual ~MVB() = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:()
TEST_SUBMODULE::MVC::c	tests/test_multiple_inheritance.cpp	/^        int c = 2;$/;"	m	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVC::get_c_b	tests/test_multiple_inheritance.cpp	/^        int get_c_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVC::get_c_c	tests/test_multiple_inheritance.cpp	/^        int get_c_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD0::d0	tests/test_multiple_inheritance.cpp	/^        int d0 = 3;$/;"	m	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVD0::get_d0_b	tests/test_multiple_inheritance.cpp	/^        int get_d0_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD0::get_d0_c	tests/test_multiple_inheritance.cpp	/^        int get_d0_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD0::get_d0_d0	tests/test_multiple_inheritance.cpp	/^        int get_d0_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD1::d1	tests/test_multiple_inheritance.cpp	/^        int d1 = 4;$/;"	m	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVD1::get_d1_b	tests/test_multiple_inheritance.cpp	/^        int get_d1_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD1::get_d1_c	tests/test_multiple_inheritance.cpp	/^        int get_d1_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVD1::get_d1_d1	tests/test_multiple_inheritance.cpp	/^        int get_d1_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVE::e	tests/test_multiple_inheritance.cpp	/^        int e = 5;$/;"	m	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVE::get_e_b	tests/test_multiple_inheritance.cpp	/^        int get_e_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVE::get_e_c	tests/test_multiple_inheritance.cpp	/^        int get_e_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVE::get_e_d0	tests/test_multiple_inheritance.cpp	/^        int get_e_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVE::get_e_d1	tests/test_multiple_inheritance.cpp	/^        int get_e_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVE::get_e_e	tests/test_multiple_inheritance.cpp	/^        int get_e_e() const { return e; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::f	tests/test_multiple_inheritance.cpp	/^        int f = 6;$/;"	m	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MVF::get_f_b	tests/test_multiple_inheritance.cpp	/^        int get_f_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::get_f_c	tests/test_multiple_inheritance.cpp	/^        int get_f_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::get_f_d0	tests/test_multiple_inheritance.cpp	/^        int get_f_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::get_f_d1	tests/test_multiple_inheritance.cpp	/^        int get_f_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::get_f_e	tests/test_multiple_inheritance.cpp	/^        int get_f_e() const { return e; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::MVF::get_f_f	tests/test_multiple_inheritance.cpp	/^        int get_f_f() const { return f; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::Matrix::Matrix	tests/test_buffers.cpp	/^        Matrix(Matrix &&s) noexcept : m_rows(s.m_rows), m_cols(s.m_cols), m_data(s.m_data) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(Matrix && s)
TEST_SUBMODULE::Matrix::Matrix	tests/test_buffers.cpp	/^        Matrix(const Matrix &s) : m_rows(s.m_rows), m_cols(s.m_cols) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(const Matrix & s)
TEST_SUBMODULE::Matrix::Matrix	tests/test_buffers.cpp	/^        Matrix(py::ssize_t rows, py::ssize_t cols) : m_rows(rows), m_cols(cols) {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:(py::ssize_t rows,py::ssize_t cols)
TEST_SUBMODULE::Matrix::cols	tests/test_buffers.cpp	/^        py::ssize_t cols() const { return m_cols; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:public	signature:() const
TEST_SUBMODULE::Matrix::data	tests/test_buffers.cpp	/^        float *data() { return m_data; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float *	file:	access:public	signature:()
TEST_SUBMODULE::Matrix::m_cols	tests/test_buffers.cpp	/^        py::ssize_t m_cols;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:private
TEST_SUBMODULE::Matrix::m_data	tests/test_buffers.cpp	/^        float *m_data;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:float *	file:	access:private
TEST_SUBMODULE::Matrix::m_rows	tests/test_buffers.cpp	/^        py::ssize_t m_rows;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:private
TEST_SUBMODULE::Matrix::operator ()	tests/test_buffers.cpp	/^        float &operator()(py::ssize_t i, py::ssize_t j) {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float &	file:	access:public	signature:(py::ssize_t i,py::ssize_t j)
TEST_SUBMODULE::Matrix::operator ()	tests/test_buffers.cpp	/^        float operator()(py::ssize_t i, py::ssize_t j) const {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float	file:	access:public	signature:(py::ssize_t i,py::ssize_t j) const
TEST_SUBMODULE::Matrix::operator =	tests/test_buffers.cpp	/^        Matrix &operator=(Matrix &&s) noexcept {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:Matrix &	file:	access:public	signature:(Matrix && s)
TEST_SUBMODULE::Matrix::operator =	tests/test_buffers.cpp	/^        Matrix &operator=(const Matrix &s) {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:Matrix &	file:	access:public	signature:(const Matrix & s)
TEST_SUBMODULE::Matrix::rows	tests/test_buffers.cpp	/^        py::ssize_t rows() const { return m_rows; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:public	signature:() const
TEST_SUBMODULE::Matrix::~Matrix	tests/test_buffers.cpp	/^        ~Matrix() {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:()
TEST_SUBMODULE::Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum1 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum1	file:	access:public
TEST_SUBMODULE::Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum2 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum2	file:	access:public
TEST_SUBMODULE::Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum3 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum3	file:	access:public
TEST_SUBMODULE::Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum4 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum4	file:	access:public
TEST_SUBMODULE::Member1	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum5 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum5	file:	access:public
TEST_SUBMODULE::Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum1 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum1	file:	access:public
TEST_SUBMODULE::Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum2 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum2	file:	access:public
TEST_SUBMODULE::Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum3 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum3	file:	access:public
TEST_SUBMODULE::Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum4 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum4	file:	access:public
TEST_SUBMODULE::Member2	tests/test_docstring_options.cpp	/^        enum class DocstringTestEnum5 { Member1, Member2 };$/;"	e	enum:TEST_SUBMODULE::DocstringTestEnum5	file:	access:public
TEST_SUBMODULE::MovableObject::MovableObject	tests/test_callbacks.cpp	/^        MovableObject() = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:()
TEST_SUBMODULE::MovableObject::MovableObject	tests/test_callbacks.cpp	/^        MovableObject(MovableObject &&o) noexcept : valid(o.valid) { o.valid = false; }$/;"	f	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:(MovableObject && o)
TEST_SUBMODULE::MovableObject::MovableObject	tests/test_callbacks.cpp	/^        MovableObject(const MovableObject &) = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	file:	access:public	signature:(const MovableObject &)
TEST_SUBMODULE::MovableObject::operator =	tests/test_callbacks.cpp	/^        MovableObject &operator=(MovableObject &&o) noexcept {$/;"	f	struct:TEST_SUBMODULE::MovableObject	typeref:typename:MovableObject &	file:	access:public	signature:(MovableObject && o)
TEST_SUBMODULE::MovableObject::operator =	tests/test_callbacks.cpp	/^        MovableObject &operator=(const MovableObject &) = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	typeref:typename:MovableObject &	file:	access:public	signature:(const MovableObject &)
TEST_SUBMODULE::MovableObject::valid	tests/test_callbacks.cpp	/^        bool valid = true;$/;"	m	struct:TEST_SUBMODULE::MovableObject	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::MoveOutContainer::Value	tests/test_stl.cpp	/^        struct Value {$/;"	s	struct:TEST_SUBMODULE::MoveOutContainer	file:	access:public
TEST_SUBMODULE::MoveOutContainer::Value::value	tests/test_stl.cpp	/^            int value;$/;"	m	struct:TEST_SUBMODULE::MoveOutContainer::Value	typeref:typename:int	file:	access:public
TEST_SUBMODULE::MoveOutContainer::move_list	tests/test_stl.cpp	/^        std::list<Value> move_list() const { return {{0}, {1}, {2}}; }$/;"	f	struct:TEST_SUBMODULE::MoveOutContainer	typeref:typename:std::list<Value>	file:	access:public	signature:() const
TEST_SUBMODULE::MoveOutDetector::MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector() = default;$/;"	p	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:()
TEST_SUBMODULE::MoveOutDetector::MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector(MoveOutDetector &&other) noexcept : initialized(other.initialized) {$/;"	f	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:(MoveOutDetector && other)
TEST_SUBMODULE::MoveOutDetector::MoveOutDetector	tests/test_stl.cpp	/^        MoveOutDetector(const MoveOutDetector &) = default;$/;"	p	struct:TEST_SUBMODULE::MoveOutDetector	file:	access:public	signature:(const MoveOutDetector &)
TEST_SUBMODULE::MoveOutDetector::initialized	tests/test_stl.cpp	/^        bool initialized = true;$/;"	m	struct:TEST_SUBMODULE::MoveOutDetector	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::MyBase::make	tests/test_class.cpp	/^        static std::unique_ptr<MyBase> make() { return std::unique_ptr<MyBase>(new MyBase()); }$/;"	f	struct:TEST_SUBMODULE::MyBase	typeref:typename:std::unique_ptr<MyBase>	file:	access:public	signature:()
TEST_SUBMODULE::MyDerived::make	tests/test_class.cpp	/^        static std::unique_ptr<MyDerived> make() {$/;"	f	struct:TEST_SUBMODULE::MyDerived	typeref:typename:std::unique_ptr<MyDerived>	file:	access:public	signature:()
TEST_SUBMODULE::NestA::operator +=	tests/test_operator_overloading.cpp	/^        NestA &operator+=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestA	typeref:typename:NestA &	file:	access:public	signature:(int i)
TEST_SUBMODULE::NestA::value	tests/test_operator_overloading.cpp	/^        int value = 3;$/;"	m	struct:TEST_SUBMODULE::NestA	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NestABase::value	tests/test_operator_overloading.cpp	/^        int value = -2;$/;"	m	struct:TEST_SUBMODULE::NestABase	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NestB::a	tests/test_operator_overloading.cpp	/^        NestA a;$/;"	m	struct:TEST_SUBMODULE::NestB	typeref:typename:NestA	file:	access:public
TEST_SUBMODULE::NestB::operator -=	tests/test_operator_overloading.cpp	/^        NestB &operator-=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestB	typeref:typename:NestB &	file:	access:public	signature:(int i)
TEST_SUBMODULE::NestB::value	tests/test_operator_overloading.cpp	/^        int value = 4;$/;"	m	struct:TEST_SUBMODULE::NestB	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NestC::b	tests/test_operator_overloading.cpp	/^        NestB b;$/;"	m	struct:TEST_SUBMODULE::NestC	typeref:typename:NestB	file:	access:public
TEST_SUBMODULE::NestC::operator *=	tests/test_operator_overloading.cpp	/^        NestC &operator*=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestC	typeref:typename:NestC &	file:	access:public	signature:(int i)
TEST_SUBMODULE::NestC::value	tests/test_operator_overloading.cpp	/^        int value = 5;$/;"	m	struct:TEST_SUBMODULE::NestC	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NoAssign::NoAssign	tests/test_stl.cpp	/^        NoAssign(NoAssign &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(NoAssign &&)
TEST_SUBMODULE::NoAssign::NoAssign	tests/test_stl.cpp	/^        NoAssign(const NoAssign &) = default;$/;"	p	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(const NoAssign &)
TEST_SUBMODULE::NoAssign::NoAssign	tests/test_stl.cpp	/^        explicit NoAssign(int value = 0) : value(value) {}$/;"	f	struct:TEST_SUBMODULE::NoAssign	file:	access:public	signature:(int value=0)
TEST_SUBMODULE::NoAssign::operator =	tests/test_stl.cpp	/^        NoAssign &operator=(NoAssign &&) = delete;$/;"	p	struct:TEST_SUBMODULE::NoAssign	typeref:typename:NoAssign &	file:	access:public	signature:(NoAssign &&)
TEST_SUBMODULE::NoAssign::operator =	tests/test_stl.cpp	/^        NoAssign &operator=(const NoAssign &) = delete;$/;"	p	struct:TEST_SUBMODULE::NoAssign	typeref:typename:NoAssign &	file:	access:public	signature:(const NoAssign &)
TEST_SUBMODULE::NoAssign::value	tests/test_stl.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::NoAssign	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NoConstructor::NoConstructor	tests/test_class.cpp	/^        NoConstructor() = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:()
TEST_SUBMODULE::NoConstructor::NoConstructor	tests/test_class.cpp	/^        NoConstructor(NoConstructor &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:(NoConstructor &&)
TEST_SUBMODULE::NoConstructor::NoConstructor	tests/test_class.cpp	/^        NoConstructor(const NoConstructor &) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:(const NoConstructor &)
TEST_SUBMODULE::NoConstructor::new_instance	tests/test_class.cpp	/^        static NoConstructor *new_instance() {$/;"	f	struct:TEST_SUBMODULE::NoConstructor	typeref:typename:NoConstructor *	file:	access:public	signature:()
TEST_SUBMODULE::NoConstructor::~NoConstructor	tests/test_class.cpp	/^        ~NoConstructor() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:()
TEST_SUBMODULE::NoConstructorNew::NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew() = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:()
TEST_SUBMODULE::NoConstructorNew::NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew(NoConstructorNew &&) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:(NoConstructorNew &&)
TEST_SUBMODULE::NoConstructorNew::NoConstructorNew	tests/test_class.cpp	/^        NoConstructorNew(const NoConstructorNew &) = default;$/;"	p	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:(const NoConstructorNew &)
TEST_SUBMODULE::NoConstructorNew::new_instance	tests/test_class.cpp	/^        static NoConstructorNew *new_instance() {$/;"	f	struct:TEST_SUBMODULE::NoConstructorNew	typeref:typename:NoConstructorNew *	file:	access:public	signature:()
TEST_SUBMODULE::NoConstructorNew::~NoConstructorNew	tests/test_class.cpp	/^        ~NoConstructorNew() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:()
TEST_SUBMODULE::NoPlacementNew::NoPlacementNew	tests/test_factory_constructors.cpp	/^        explicit NoPlacementNew(int i) : i(i) {}$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	file:	access:public	signature:(int i)
TEST_SUBMODULE::NoPlacementNew::i	tests/test_factory_constructors.cpp	/^        int i;$/;"	m	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NoPlacementNew::operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *p) {$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:void	file:	access:public	signature:(void * p)
TEST_SUBMODULE::NoPlacementNew::operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(std::size_t s) {$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:void *	file:	access:public	signature:(std::size_t s)
TEST_SUBMODULE::NoisyAlloc::NoisyAlloc	tests/test_factory_constructors.cpp	/^        NoisyAlloc(const NoisyAlloc &) = default;$/;"	p	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(const NoisyAlloc &)
TEST_SUBMODULE::NoisyAlloc::NoisyAlloc	tests/test_factory_constructors.cpp	/^        explicit NoisyAlloc(double d) { py::print(py::str("NoisyAlloc(double {})").format(d)); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(double d)
TEST_SUBMODULE::NoisyAlloc::NoisyAlloc	tests/test_factory_constructors.cpp	/^        explicit NoisyAlloc(int i) { py::print(py::str("NoisyAlloc(int {})").format(i)); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:(int i)
TEST_SUBMODULE::NoisyAlloc::operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *, void *) { py::print("noisy placement delete"); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void	file:	access:public	signature:(void *,void *)
TEST_SUBMODULE::NoisyAlloc::operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *p, size_t) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void	file:	access:public	signature:(void * p,size_t)
TEST_SUBMODULE::NoisyAlloc::operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void *	file:	access:public	signature:(size_t s)
TEST_SUBMODULE::NoisyAlloc::operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(size_t, void *p) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void *	file:	access:public	signature:(size_t,void * p)
TEST_SUBMODULE::NoisyAlloc::~NoisyAlloc	tests/test_factory_constructors.cpp	/^        ~NoisyAlloc() { py::print("~NoisyAlloc()"); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:()
TEST_SUBMODULE::NonPODClass::NonPODClass	tests/test_numpy_vectorize.cpp	/^        explicit NonPODClass(int v) : value{v} {}$/;"	f	struct:TEST_SUBMODULE::NonPODClass	file:	access:public	signature:(int v)
TEST_SUBMODULE::NonPODClass::value	tests/test_numpy_vectorize.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::NonPODClass	typeref:typename:int	file:	access:public
TEST_SUBMODULE::NotPOD::NotPOD	tests/test_numpy_dtypes.cpp	/^        NotPOD() : v("hi"){};$/;"	f	struct:TEST_SUBMODULE::NotPOD	file:	access:public	signature:()
TEST_SUBMODULE::NotPOD::v	tests/test_numpy_dtypes.cpp	/^        std::string v;$/;"	m	struct:TEST_SUBMODULE::NotPOD	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::ONE	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
TEST_SUBMODULE::OverrideTest::A	tests/test_virtual_functions.cpp	/^        struct A {$/;"	s	class:TEST_SUBMODULE::OverrideTest	file:	access:public
TEST_SUBMODULE::OverrideTest::A::value	tests/test_virtual_functions.cpp	/^            std::string value = "hi";$/;"	m	struct:TEST_SUBMODULE::OverrideTest::A	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::OverrideTest::A_ref	tests/test_virtual_functions.cpp	/^        virtual A &A_ref() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A &	file:	access:public	signature:()
TEST_SUBMODULE::OverrideTest::A_value	tests/test_virtual_functions.cpp	/^        virtual A A_value() { return a; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:	access:public	signature:()
TEST_SUBMODULE::OverrideTest::OverrideTest	tests/test_virtual_functions.cpp	/^        OverrideTest() = default;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:()
TEST_SUBMODULE::OverrideTest::OverrideTest	tests/test_virtual_functions.cpp	/^        OverrideTest(const OverrideTest &) = delete;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:(const OverrideTest &)
TEST_SUBMODULE::OverrideTest::OverrideTest	tests/test_virtual_functions.cpp	/^        explicit OverrideTest(const std::string &v) : v{v} {}$/;"	f	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:(const std::string & v)
TEST_SUBMODULE::OverrideTest::a	tests/test_virtual_functions.cpp	/^        A a;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:	access:public
TEST_SUBMODULE::OverrideTest::str_ref	tests/test_virtual_functions.cpp	/^        virtual std::string &str_ref() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
TEST_SUBMODULE::OverrideTest::str_value	tests/test_virtual_functions.cpp	/^        virtual std::string str_value() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:	access:public	signature:()
TEST_SUBMODULE::OverrideTest::v	tests/test_virtual_functions.cpp	/^        std::string v;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::OverrideTest::~OverrideTest	tests/test_virtual_functions.cpp	/^        virtual ~OverrideTest() = default;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:()
TEST_SUBMODULE::Parent::Parent	tests/test_call_policies.cpp	/^        Parent() { py::print("Allocating parent."); }$/;"	f	class:TEST_SUBMODULE::Parent	file:	access:public	signature:()
TEST_SUBMODULE::Parent::Parent	tests/test_call_policies.cpp	/^        Parent(const Parent &parent) = default;$/;"	p	class:TEST_SUBMODULE::Parent	file:	access:public	signature:(const Parent & parent)
TEST_SUBMODULE::Parent::addChild	tests/test_call_policies.cpp	/^        void addChild(Child *) {}$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:void	file:	access:public	signature:(Child *)
TEST_SUBMODULE::Parent::returnChild	tests/test_call_policies.cpp	/^        Child *returnChild() { return new Child(); }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:()
TEST_SUBMODULE::Parent::returnNullChild	tests/test_call_policies.cpp	/^        Child *returnNullChild() { return nullptr; }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:()
TEST_SUBMODULE::Parent::staticFunction	tests/test_call_policies.cpp	/^        static Child *staticFunction(Parent *) { return new Child(); }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:(Parent *)
TEST_SUBMODULE::Parent::~Parent	tests/test_call_policies.cpp	/^        ~Parent() { py::print("Releasing parent."); }$/;"	f	class:TEST_SUBMODULE::Parent	file:	access:public	signature:()
TEST_SUBMODULE::Payload::Payload	tests/test_callbacks.cpp	/^        Payload() { print_default_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:()
TEST_SUBMODULE::Payload::Payload	tests/test_callbacks.cpp	/^        Payload(Payload &&) noexcept { print_move_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:(Payload &&)
TEST_SUBMODULE::Payload::Payload	tests/test_callbacks.cpp	/^        Payload(const Payload &) { print_copy_created(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:(const Payload &)
TEST_SUBMODULE::Payload::~Payload	tests/test_callbacks.cpp	/^        ~Payload() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:()
TEST_SUBMODULE::Pet::Pet	tests/test_class.cpp	/^        Pet(const std::string &name, const std::string &species)$/;"	f	class:TEST_SUBMODULE::Pet	file:	access:public	signature:(const std::string & name,const std::string & species)
TEST_SUBMODULE::Pet::m_name	tests/test_class.cpp	/^        std::string m_name;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:private
TEST_SUBMODULE::Pet::m_species	tests/test_class.cpp	/^        std::string m_species;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:private
TEST_SUBMODULE::Pet::name	tests/test_class.cpp	/^        std::string name() const { return m_name; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:public	signature:() const
TEST_SUBMODULE::Pet::species	tests/test_class.cpp	/^        std::string species() const { return m_species; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:public	signature:() const
TEST_SUBMODULE::Pickleable::Pickleable	tests/test_pickling.cpp	/^        explicit Pickleable(const std::string &value) : m_value(value) {}$/;"	f	class:TEST_SUBMODULE::Pickleable	file:	access:public	signature:(const std::string & value)
TEST_SUBMODULE::Pickleable::extra1	tests/test_pickling.cpp	/^        int extra1() const { return m_extra1; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::Pickleable::extra2	tests/test_pickling.cpp	/^        int extra2() const { return m_extra2; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::Pickleable::m_extra1	tests/test_pickling.cpp	/^        int m_extra1 = 0;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:private
TEST_SUBMODULE::Pickleable::m_extra2	tests/test_pickling.cpp	/^        int m_extra2 = 0;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:private
TEST_SUBMODULE::Pickleable::m_value	tests/test_pickling.cpp	/^        std::string m_value;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:std::string	file:	access:private
TEST_SUBMODULE::Pickleable::setExtra1	tests/test_pickling.cpp	/^        void setExtra1(int extra1) { m_extra1 = extra1; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:void	file:	access:public	signature:(int extra1)
TEST_SUBMODULE::Pickleable::setExtra2	tests/test_pickling.cpp	/^        void setExtra2(int extra2) { m_extra2 = extra2; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:void	file:	access:public	signature:(int extra2)
TEST_SUBMODULE::Pickleable::value	tests/test_pickling.cpp	/^        const std::string &value() const { return m_value; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:const std::string &	file:	access:public	signature:() const
TEST_SUBMODULE::PickleableWithDict::PickleableWithDict	tests/test_pickling.cpp	/^        explicit PickleableWithDict(const std::string &value) : value(value) {}$/;"	f	class:TEST_SUBMODULE::PickleableWithDict	file:	access:public	signature:(const std::string & value)
TEST_SUBMODULE::PickleableWithDict::extra	tests/test_pickling.cpp	/^        int extra;$/;"	m	class:TEST_SUBMODULE::PickleableWithDict	typeref:typename:int	file:	access:public
TEST_SUBMODULE::PickleableWithDict::value	tests/test_pickling.cpp	/^        std::string value;$/;"	m	class:TEST_SUBMODULE::PickleableWithDict	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::Placeholder::Placeholder	tests/test_stl.cpp	/^        Placeholder() { print_created(this); }$/;"	f	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:()
TEST_SUBMODULE::Placeholder::Placeholder	tests/test_stl.cpp	/^        Placeholder(const Placeholder &) = delete;$/;"	p	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:(const Placeholder &)
TEST_SUBMODULE::Placeholder::~Placeholder	tests/test_stl.cpp	/^        ~Placeholder() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:()
TEST_SUBMODULE::Positive	tests/test_enum.cpp	/^    enum class ScopedChar16Enum : char16_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar16Enum	file:	access:public
TEST_SUBMODULE::Positive	tests/test_enum.cpp	/^    enum class ScopedChar32Enum : char32_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar32Enum	file:	access:public
TEST_SUBMODULE::Positive	tests/test_enum.cpp	/^    enum class ScopedChar8Enum : char8_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar8Enum	file:	access:public
TEST_SUBMODULE::Positive	tests/test_enum.cpp	/^    enum class ScopedCharEnum : char { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedCharEnum	file:	access:public
TEST_SUBMODULE::Positive	tests/test_enum.cpp	/^    enum class ScopedWCharEnum : wchar_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedWCharEnum	file:	access:public
TEST_SUBMODULE::ProtectedA::foo	tests/test_class.cpp	/^        int foo() const { return value; }$/;"	f	class:TEST_SUBMODULE::ProtectedA	typeref:typename:int	file:	access:protected	signature:() const
TEST_SUBMODULE::ProtectedA::value	tests/test_class.cpp	/^        int value = 42;$/;"	m	class:TEST_SUBMODULE::ProtectedA	typeref:typename:int	file:	access:private
TEST_SUBMODULE::ProtectedB::ProtectedB	tests/test_class.cpp	/^        ProtectedB() = default;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:()
TEST_SUBMODULE::ProtectedB::ProtectedB	tests/test_class.cpp	/^        ProtectedB(const ProtectedB &) = delete;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:(const ProtectedB &)
TEST_SUBMODULE::ProtectedB::foo	tests/test_class.cpp	/^        virtual int foo() const { return value; }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:int	file:	access:protected	signature:() const
TEST_SUBMODULE::ProtectedB::get_self	tests/test_class.cpp	/^        virtual void *get_self() { return static_cast<void *>(this); }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:void *	file:	access:protected	signature:()
TEST_SUBMODULE::ProtectedB::value	tests/test_class.cpp	/^        int value = 42;$/;"	m	class:TEST_SUBMODULE::ProtectedB	typeref:typename:int	file:	access:private
TEST_SUBMODULE::ProtectedB::void_foo	tests/test_class.cpp	/^        virtual void *void_foo() { return static_cast<void *>(&value); }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:void *	file:	access:protected	signature:()
TEST_SUBMODULE::ProtectedB::~ProtectedB	tests/test_class.cpp	/^        virtual ~ProtectedB() = default;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:()
TEST_SUBMODULE::PublicistB::~PublicistB	tests/test_class.cpp	/^        ~PublicistB() override{}; \/\/ NOLINT(modernize-use-equals-default)$/;"	f	class:TEST_SUBMODULE::PublicistB	file:	access:public	signature:()
TEST_SUBMODULE::PyA2::PyA2	tests/test_virtual_functions.cpp	/^        PyA2() { py::print("PyA2.PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:()
TEST_SUBMODULE::PyA2::PyA2	tests/test_virtual_functions.cpp	/^        PyA2(const PyA2 &) = delete;$/;"	p	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:(const PyA2 &)
TEST_SUBMODULE::PyA2::f	tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA2	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::PyA2::~PyA2	tests/test_virtual_functions.cpp	/^        ~PyA2() override { py::print("PyA2.~PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:()
TEST_SUBMODULE::PyA::PyA	tests/test_virtual_functions.cpp	/^        PyA() { py::print("PyA.PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:()
TEST_SUBMODULE::PyA::PyA	tests/test_virtual_functions.cpp	/^        PyA(const PyA &) = delete;$/;"	p	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:(const PyA &)
TEST_SUBMODULE::PyA::f	tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::PyA::~PyA	tests/test_virtual_functions.cpp	/^        ~PyA() override { py::print("PyA.~PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:()
TEST_SUBMODULE::PyAliasedHasOpNewDelSize::PyAliasedHasOpNewDelSize	tests/test_class.cpp	/^        PyAliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	file:	access:public	signature:()
TEST_SUBMODULE::PyAliasedHasOpNewDelSize::PyAliasedHasOpNewDelSize	tests/test_class.cpp	/^        explicit PyAliasedHasOpNewDelSize(int) {}$/;"	f	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	file:	access:public	signature:(int)
TEST_SUBMODULE::PyAliasedHasOpNewDelSize::j	tests/test_class.cpp	/^        std::uint64_t j;$/;"	m	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	typeref:typename:std::uint64_t	file:	access:public
TEST_SUBMODULE::PyOverrideTest::A_ref	tests/test_virtual_functions.cpp	/^        A &A_ref() override { PYBIND11_OVERRIDE(A &, OverrideTest, A_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A &	file:	access:public	signature:()
TEST_SUBMODULE::PyOverrideTest::A_value	tests/test_virtual_functions.cpp	/^        A A_value() override { PYBIND11_OVERRIDE(A, OverrideTest, A_value); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:A	file:	access:public	signature:()
TEST_SUBMODULE::PyOverrideTest::_tmp	tests/test_virtual_functions.cpp	/^        std::string _tmp;$/;"	m	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:private
TEST_SUBMODULE::PyOverrideTest::str_ref	tests/test_virtual_functions.cpp	/^        std::string &str_ref() override { return _tmp = str_ref_helper(); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
TEST_SUBMODULE::PyOverrideTest::str_ref	tests/test_virtual_functions.cpp	/^        std::string &str_ref() override {$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
TEST_SUBMODULE::PyOverrideTest::str_ref_helper	tests/test_virtual_functions.cpp	/^        std::string str_ref_helper() { PYBIND11_OVERRIDE(std::string, OverrideTest, str_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:private	signature:()
TEST_SUBMODULE::PyOverrideTest::str_value	tests/test_virtual_functions.cpp	/^        std::string str_value() override {$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:public	signature:()
TEST_SUBMODULE::PyPrintDestructor::PyPrintDestructor	tests/test_class.cpp	/^        PyPrintDestructor() = default;$/;"	p	struct:TEST_SUBMODULE::PyPrintDestructor	file:	access:public	signature:()
TEST_SUBMODULE::PyPrintDestructor::throw_something	tests/test_class.cpp	/^        void throw_something() { throw std::runtime_error("error"); }$/;"	f	struct:TEST_SUBMODULE::PyPrintDestructor	typeref:typename:void	file:	access:public	signature:()
TEST_SUBMODULE::PyPrintDestructor::~PyPrintDestructor	tests/test_class.cpp	/^        ~PyPrintDestructor() { py::print("Print from destructor"); }$/;"	f	struct:TEST_SUBMODULE::PyPrintDestructor	file:	access:public	signature:()
TEST_SUBMODULE::Rabbit::Rabbit	tests/test_class.cpp	/^        explicit Rabbit(const std::string &name) : Pet(name, "parrot") {}$/;"	f	class:TEST_SUBMODULE::Rabbit	file:	access:public	signature:(const std::string & name)
TEST_SUBMODULE::Read	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
TEST_SUBMODULE::ReturnTester::ReturnTester	tests/test_eigen_matrix.cpp	/^        ReturnTester() { print_created(this); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::block	tests/test_eigen_matrix.cpp	/^        Eigen::Block<Eigen::MatrixXd> block(int r, int c, int nrow, int ncol) {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Block<Eigen::MatrixXd>	file:	access:public	signature:(int r,int c,int nrow,int ncol)
TEST_SUBMODULE::ReturnTester::blockConst	tests/test_eigen_matrix.cpp	/^        Eigen::Block<const Eigen::MatrixXd> blockConst(int r, int c, int nrow, int ncol) const {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Block<const Eigen::MatrixXd>	file:	access:public	signature:(int r,int c,int nrow,int ncol) const
TEST_SUBMODULE::ReturnTester::corners	tests/test_eigen_matrix.cpp	/^        py::EigenDMap<Eigen::Matrix2d> corners() {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:py::EigenDMap<Eigen::Matrix2d>	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::cornersConst	tests/test_eigen_matrix.cpp	/^        py::EigenDMap<const Eigen::Matrix2d> cornersConst() const {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:py::EigenDMap<const Eigen::Matrix2d>	file:	access:public	signature:() const
TEST_SUBMODULE::ReturnTester::create	tests/test_eigen_matrix.cpp	/^        static Eigen::MatrixXd create() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::createConst	tests/test_eigen_matrix.cpp	/^        static const Eigen::MatrixXd createConst() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::get	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd &get() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd &	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::getPtr	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd *getPtr() { return &mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd *	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::mat	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd mat = create();$/;"	m	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd	file:	access:private
TEST_SUBMODULE::ReturnTester::ref	tests/test_eigen_matrix.cpp	/^        Eigen::Ref<Eigen::MatrixXd> ref() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Ref<Eigen::MatrixXd>	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::refConst	tests/test_eigen_matrix.cpp	/^        Eigen::Ref<const Eigen::MatrixXd> refConst() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Ref<const Eigen::MatrixXd>	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::view	tests/test_eigen_matrix.cpp	/^        const Eigen::MatrixXd &view() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd &	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::viewPtr	tests/test_eigen_matrix.cpp	/^        const Eigen::MatrixXd *viewPtr() { return &mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd *	file:	access:public	signature:()
TEST_SUBMODULE::ReturnTester::~ReturnTester	tests/test_eigen_matrix.cpp	/^        ~ReturnTester() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	file:	access:public	signature:()
TEST_SUBMODULE::Sequence::Sequence	tests/test_sequences_and_iterators.cpp	/^        Sequence(Sequence &&s) noexcept : m_size(s.m_size), m_data(s.m_data) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(Sequence && s)
TEST_SUBMODULE::Sequence::Sequence	tests/test_sequences_and_iterators.cpp	/^        Sequence(const Sequence &s) : m_size(s.m_size) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(const Sequence & s)
TEST_SUBMODULE::Sequence::Sequence	tests/test_sequences_and_iterators.cpp	/^        explicit Sequence(const std::vector<float> &value) : m_size(value.size()) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(const std::vector<float> & value)
TEST_SUBMODULE::Sequence::Sequence	tests/test_sequences_and_iterators.cpp	/^        explicit Sequence(size_t size) : m_size(size) {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:(size_t size)
TEST_SUBMODULE::Sequence::begin	tests/test_sequences_and_iterators.cpp	/^        const float *begin() const { return m_data; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:const float *	file:	access:public	signature:() const
TEST_SUBMODULE::Sequence::contains	tests/test_sequences_and_iterators.cpp	/^        bool contains(float v) const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(float v) const
TEST_SUBMODULE::Sequence::end	tests/test_sequences_and_iterators.cpp	/^        const float *end() const { return m_data + m_size; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:const float *	file:	access:public	signature:() const
TEST_SUBMODULE::Sequence::m_data	tests/test_sequences_and_iterators.cpp	/^        float *m_data;$/;"	m	class:TEST_SUBMODULE::Sequence	typeref:typename:float *	file:	access:private
TEST_SUBMODULE::Sequence::m_size	tests/test_sequences_and_iterators.cpp	/^        size_t m_size;$/;"	m	class:TEST_SUBMODULE::Sequence	typeref:typename:size_t	file:	access:private
TEST_SUBMODULE::Sequence::operator !=	tests/test_sequences_and_iterators.cpp	/^        bool operator!=(const Sequence &s) const { return !operator==(s); }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(const Sequence & s) const
TEST_SUBMODULE::Sequence::operator =	tests/test_sequences_and_iterators.cpp	/^        Sequence &operator=(Sequence &&s) noexcept {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence &	file:	access:public	signature:(Sequence && s)
TEST_SUBMODULE::Sequence::operator =	tests/test_sequences_and_iterators.cpp	/^        Sequence &operator=(const Sequence &s) {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence &	file:	access:public	signature:(const Sequence & s)
TEST_SUBMODULE::Sequence::operator ==	tests/test_sequences_and_iterators.cpp	/^        bool operator==(const Sequence &s) const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(const Sequence & s) const
TEST_SUBMODULE::Sequence::operator []	tests/test_sequences_and_iterators.cpp	/^        float &operator[](size_t index) { return m_data[index]; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:float &	file:	access:public	signature:(size_t index)
TEST_SUBMODULE::Sequence::operator []	tests/test_sequences_and_iterators.cpp	/^        float operator[](size_t index) const { return m_data[index]; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:float	file:	access:public	signature:(size_t index) const
TEST_SUBMODULE::Sequence::reversed	tests/test_sequences_and_iterators.cpp	/^        Sequence reversed() const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence	file:	access:public	signature:() const
TEST_SUBMODULE::Sequence::size	tests/test_sequences_and_iterators.cpp	/^        size_t size() const { return m_size; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:size_t	file:	access:public	signature:() const
TEST_SUBMODULE::Sequence::~Sequence	tests/test_sequences_and_iterators.cpp	/^        ~Sequence() {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:()
TEST_SUBMODULE::Sliceable::Sliceable	tests/test_sequences_and_iterators.cpp	/^        explicit Sliceable(int n) : size(n) {}$/;"	f	class:TEST_SUBMODULE::Sliceable	file:	access:public	signature:(int n)
TEST_SUBMODULE::Sliceable::size	tests/test_sequences_and_iterators.cpp	/^        int size;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Sliceable::start	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Sliceable::step	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Sliceable::stop	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
TEST_SUBMODULE::SquareMatrix::SquareMatrix	tests/test_buffers.cpp	/^        explicit SquareMatrix(py::ssize_t n) : Matrix(n, n) {}$/;"	f	class:TEST_SUBMODULE::SquareMatrix	file:	access:public	signature:(py::ssize_t n)
TEST_SUBMODULE::StringMap::StringMap	tests/test_sequences_and_iterators.cpp	/^        StringMap() = default;$/;"	p	class:TEST_SUBMODULE::StringMap	file:	access:public	signature:()
TEST_SUBMODULE::StringMap::StringMap	tests/test_sequences_and_iterators.cpp	/^        explicit StringMap(std::unordered_map<std::string, std::string> init)$/;"	f	class:TEST_SUBMODULE::StringMap	file:	access:public	signature:(std::unordered_map<std::string,std::string> init)
TEST_SUBMODULE::StringMap::begin	tests/test_sequences_and_iterators.cpp	/^        decltype(map.cbegin()) begin() const { return map.cbegin(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:decltype(map.cbegin ())	file:	access:public	signature:() const
TEST_SUBMODULE::StringMap::end	tests/test_sequences_and_iterators.cpp	/^        decltype(map.cend()) end() const { return map.cend(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:decltype(map.cend ())	file:	access:public	signature:() const
TEST_SUBMODULE::StringMap::get	tests/test_sequences_and_iterators.cpp	/^        std::string get(const std::string &key) const { return map.at(key); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:std::string	file:	access:public	signature:(const std::string & key) const
TEST_SUBMODULE::StringMap::map	tests/test_sequences_and_iterators.cpp	/^        std::unordered_map<std::string, std::string> map;$/;"	m	class:TEST_SUBMODULE::StringMap	typeref:typename:std::unordered_map<std::string,std::string>	file:	access:private
TEST_SUBMODULE::StringMap::set	tests/test_sequences_and_iterators.cpp	/^        void set(const std::string &key, std::string val) { map[key] = std::move(val); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:void	file:	access:public	signature:(const std::string & key,std::string val)
TEST_SUBMODULE::StringMap::size	tests/test_sequences_and_iterators.cpp	/^        size_t size() const { return map.size(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:size_t	file:	access:public	signature:() const
TEST_SUBMODULE::StringWrapper::str	tests/test_class.cpp	/^        std::string str;$/;"	m	struct:TEST_SUBMODULE::StringWrapper	typeref:typename:std::string	file:	access:public
TEST_SUBMODULE::THREE	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
TEST_SUBMODULE::TRUE	tests/test_enum.cpp	/^    enum class ScopedBoolEnum : bool { FALSE, TRUE };$/;"	e	enum:TEST_SUBMODULE::ScopedBoolEnum	file:	access:public
TEST_SUBMODULE::TWO	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
TEST_SUBMODULE::TestUnion::value_int	tests/test_union.cpp	/^        int value_int;$/;"	m	union:TEST_SUBMODULE::TestUnion	typeref:typename:int	file:	access:public
TEST_SUBMODULE::TestUnion::value_uint	tests/test_union.cpp	/^        unsigned value_uint;$/;"	m	union:TEST_SUBMODULE::TestUnion	typeref:typename:unsigned	file:	access:public
TEST_SUBMODULE::Three	tests/test_enum.cpp	/^    enum class ScopedEnum { Two = 2, Three };$/;"	e	enum:TEST_SUBMODULE::ScopedEnum	file:	access:public
TEST_SUBMODULE::TrailingPaddingStruct::a	tests/test_numpy_dtypes.cpp	/^        int32_t a;$/;"	m	struct:TEST_SUBMODULE::TrailingPaddingStruct	typeref:typename:int32_t	file:	access:public
TEST_SUBMODULE::TrailingPaddingStruct::b	tests/test_numpy_dtypes.cpp	/^        char b;$/;"	m	struct:TEST_SUBMODULE::TrailingPaddingStruct	typeref:typename:char	file:	access:public
TEST_SUBMODULE::TrampolineB::foo	tests/test_class.cpp	/^        int foo() const override { PYBIND11_OVERRIDE(int, ProtectedB, foo, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:int	file:	access:public	signature:() const
TEST_SUBMODULE::TrampolineB::get_self	tests/test_class.cpp	/^        void *get_self() override { PYBIND11_OVERRIDE(void *, ProtectedB, get_self, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:void *	file:	access:public	signature:()
TEST_SUBMODULE::TrampolineB::void_foo	tests/test_class.cpp	/^        void *void_foo() override { PYBIND11_OVERRIDE(void *, ProtectedB, void_foo, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:void *	file:	access:public	signature:()
TEST_SUBMODULE::Two	tests/test_enum.cpp	/^    enum class ScopedEnum { Two = 2, Three };$/;"	e	enum:TEST_SUBMODULE::ScopedEnum	file:	access:public
TEST_SUBMODULE::VStruct::w	tests/test_stl_binders.cpp	/^        bool w;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::VStruct::x	tests/test_stl_binders.cpp	/^        uint32_t x;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:uint32_t	file:	access:public
TEST_SUBMODULE::VStruct::y	tests/test_stl_binders.cpp	/^        double y;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:double	file:	access:public
TEST_SUBMODULE::VStruct::z	tests/test_stl_binders.cpp	/^        bool z;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::VUndeclStruct::w	tests/test_stl_binders.cpp	/^        bool w;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::VUndeclStruct::x	tests/test_stl_binders.cpp	/^        uint32_t x;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:uint32_t	file:	access:public
TEST_SUBMODULE::VUndeclStruct::y	tests/test_stl_binders.cpp	/^        double y;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:double	file:	access:public
TEST_SUBMODULE::VUndeclStruct::z	tests/test_stl_binders.cpp	/^        bool z;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:bool	file:	access:public
TEST_SUBMODULE::VectorizeTestClass::VectorizeTestClass	tests/test_numpy_vectorize.cpp	/^        explicit VectorizeTestClass(int v) : value{v} {};$/;"	f	struct:TEST_SUBMODULE::VectorizeTestClass	file:	access:public	signature:(int v)
TEST_SUBMODULE::VectorizeTestClass::method	tests/test_numpy_vectorize.cpp	/^        float method(int x, float y) const { return y + (float) (x + value); }$/;"	f	struct:TEST_SUBMODULE::VectorizeTestClass	typeref:typename:float	file:	access:public	signature:(int x,float y) const
TEST_SUBMODULE::VectorizeTestClass::value	tests/test_numpy_vectorize.cpp	/^        int value = 0;$/;"	m	struct:TEST_SUBMODULE::VectorizeTestClass	typeref:typename:int	file:	access:public
TEST_SUBMODULE::Write	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
TEST_SUBMODULE::Zero	tests/test_enum.cpp	/^    enum class ScopedChar16Enum : char16_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar16Enum	file:	access:public
TEST_SUBMODULE::Zero	tests/test_enum.cpp	/^    enum class ScopedChar32Enum : char32_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar32Enum	file:	access:public
TEST_SUBMODULE::Zero	tests/test_enum.cpp	/^    enum class ScopedChar8Enum : char8_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar8Enum	file:	access:public
TEST_SUBMODULE::Zero	tests/test_enum.cpp	/^    enum class ScopedCharEnum : char { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedCharEnum	file:	access:public
TEST_SUBMODULE::Zero	tests/test_enum.cpp	/^    enum class ScopedWCharEnum : wchar_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedWCharEnum	file:	access:public
TEST_SUBMODULE::visitor::operator ()	tests/test_stl.cpp	/^        result_type operator()(const std::string &) { return "std::string"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(const std::string &)
TEST_SUBMODULE::visitor::operator ()	tests/test_stl.cpp	/^        result_type operator()(double) { return "double"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(double)
TEST_SUBMODULE::visitor::operator ()	tests/test_stl.cpp	/^        result_type operator()(int) { return "int"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(int)
TEST_SUBMODULE::visitor::operator ()	tests/test_stl.cpp	/^        result_type operator()(std::monostate) { return "std::monostate"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(std::monostate)
TEST_SUBMODULE::visitor::operator ()	tests/test_stl.cpp	/^        result_type operator()(std::nullptr_t) { return "std::nullptr_t"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(std::nullptr_t)
TEST_SUBMODULE::visitor::result_type	tests/test_stl.cpp	/^        using result_type = const char *;$/;"	t	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:	access:public
THREE	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
TRUE	tests/test_enum.cpp	/^    enum class ScopedBoolEnum : bool { FALSE, TRUE };$/;"	e	enum:TEST_SUBMODULE::ScopedBoolEnum	file:	access:public
TWO	tests/test_enum.cpp	/^    enum SimpleEnum { ONE, TWO, THREE };$/;"	e	enum:TEST_SUBMODULE::SimpleEnum	file:	access:public
Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func	file:	inherits:trampoline_module.test_override_cache_helper	access:private
Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func2	file:	inherits:trampoline_module.test_override_cache_helper	access:private
Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func	file:	inherits:m.test_override_cache_helper	access:private
Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func2	file:	inherits:m.test_override_cache_helper	access:private
TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1() : value("(empty)") { print_default_created(this); }$/;"	f	class:TestFactory1	file:	access:private	signature:()
TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1(TestFactory1 &&) = delete;$/;"	p	class:TestFactory1	file:	access:public	signature:(TestFactory1 &&)
TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1(const TestFactory1 &) = delete;$/;"	p	class:TestFactory1	file:	access:public	signature:(const TestFactory1 &)
TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:	access:private	signature:(int v)
TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:	access:private	signature:(std::string v)
TestFactory1	tests/test_factory_constructors.cpp	/^class TestFactory1 {$/;"	c	file:
TestFactory1::TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1() : value("(empty)") { print_default_created(this); }$/;"	f	class:TestFactory1	file:	access:private	signature:()
TestFactory1::TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1(TestFactory1 &&) = delete;$/;"	p	class:TestFactory1	file:	access:public	signature:(TestFactory1 &&)
TestFactory1::TestFactory1	tests/test_factory_constructors.cpp	/^    TestFactory1(const TestFactory1 &) = delete;$/;"	p	class:TestFactory1	file:	access:public	signature:(const TestFactory1 &)
TestFactory1::TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:	access:private	signature:(int v)
TestFactory1::TestFactory1	tests/test_factory_constructors.cpp	/^    explicit TestFactory1(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory1	file:	access:private	signature:(std::string v)
TestFactory1::operator =	tests/test_factory_constructors.cpp	/^    TestFactory1 &operator=(TestFactory1 &&) = delete;$/;"	p	class:TestFactory1	typeref:typename:TestFactory1 &	file:	access:public	signature:(TestFactory1 &&)
TestFactory1::operator =	tests/test_factory_constructors.cpp	/^    TestFactory1 &operator=(const TestFactory1 &) = delete;$/;"	p	class:TestFactory1	typeref:typename:TestFactory1 &	file:	access:public	signature:(const TestFactory1 &)
TestFactory1::value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory1	typeref:typename:std::string	file:	access:public
TestFactory1::~TestFactory1	tests/test_factory_constructors.cpp	/^    ~TestFactory1() { print_destroyed(this); }$/;"	f	class:TestFactory1	file:	access:public	signature:()
TestFactory2	tests/test_factory_constructors.cpp	/^    TestFactory2() : value("(empty2)") { print_default_created(this); }$/;"	f	class:TestFactory2	file:	access:private	signature:()
TestFactory2	tests/test_factory_constructors.cpp	/^    TestFactory2(TestFactory2 &&m) noexcept : value{std::move(m.value)} {$/;"	f	class:TestFactory2	file:	access:public	signature:(TestFactory2 && m)
TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:	access:private	signature:(int v)
TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:	access:private	signature:(std::string v)
TestFactory2	tests/test_factory_constructors.cpp	/^class TestFactory2 {$/;"	c	file:
TestFactory2::TestFactory2	tests/test_factory_constructors.cpp	/^    TestFactory2() : value("(empty2)") { print_default_created(this); }$/;"	f	class:TestFactory2	file:	access:private	signature:()
TestFactory2::TestFactory2	tests/test_factory_constructors.cpp	/^    TestFactory2(TestFactory2 &&m) noexcept : value{std::move(m.value)} {$/;"	f	class:TestFactory2	file:	access:public	signature:(TestFactory2 && m)
TestFactory2::TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:	access:private	signature:(int v)
TestFactory2::TestFactory2	tests/test_factory_constructors.cpp	/^    explicit TestFactory2(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory2	file:	access:private	signature:(std::string v)
TestFactory2::operator =	tests/test_factory_constructors.cpp	/^    TestFactory2 &operator=(TestFactory2 &&m) noexcept {$/;"	f	class:TestFactory2	typeref:typename:TestFactory2 &	file:	access:public	signature:(TestFactory2 && m)
TestFactory2::value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory2	typeref:typename:std::string	file:	access:public
TestFactory2::~TestFactory2	tests/test_factory_constructors.cpp	/^    ~TestFactory2() { print_destroyed(this); }$/;"	f	class:TestFactory2	file:	access:public	signature:()
TestFactory3	tests/test_factory_constructors.cpp	/^    TestFactory3() : value("(empty3)") { print_default_created(this); }$/;"	f	class:TestFactory3	file:	access:protected	signature:()
TestFactory3	tests/test_factory_constructors.cpp	/^    TestFactory3(TestFactory3 &&m) noexcept : value{std::move(m.value)} {$/;"	f	class:TestFactory3	file:	access:public	signature:(TestFactory3 && m)
TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory3	file:	access:protected	signature:(int v)
TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory3	file:	access:public	signature:(std::string v)
TestFactory3	tests/test_factory_constructors.cpp	/^class TestFactory3 {$/;"	c	file:
TestFactory3::TestFactory3	tests/test_factory_constructors.cpp	/^    TestFactory3() : value("(empty3)") { print_default_created(this); }$/;"	f	class:TestFactory3	file:	access:protected	signature:()
TestFactory3::TestFactory3	tests/test_factory_constructors.cpp	/^    TestFactory3(TestFactory3 &&m) noexcept : value{std::move(m.value)} {$/;"	f	class:TestFactory3	file:	access:public	signature:(TestFactory3 && m)
TestFactory3::TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(int v) : value(std::to_string(v)) { print_created(this, value); }$/;"	f	class:TestFactory3	file:	access:protected	signature:(int v)
TestFactory3::TestFactory3	tests/test_factory_constructors.cpp	/^    explicit TestFactory3(std::string v) : value(std::move(v)) { print_created(this, value); }$/;"	f	class:TestFactory3	file:	access:public	signature:(std::string v)
TestFactory3::operator =	tests/test_factory_constructors.cpp	/^    TestFactory3 &operator=(TestFactory3 &&m) noexcept {$/;"	f	class:TestFactory3	typeref:typename:TestFactory3 &	file:	access:public	signature:(TestFactory3 && m)
TestFactory3::value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory3	typeref:typename:std::string	file:	access:public
TestFactory3::~TestFactory3	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory3() { print_destroyed(this); }$/;"	f	class:TestFactory3	file:	access:public	signature:()
TestFactory4	tests/test_factory_constructors.cpp	/^    TestFactory4() : TestFactory3() { print_default_created(this); }$/;"	f	class:TestFactory4	file:	access:public	signature:()
TestFactory4	tests/test_factory_constructors.cpp	/^    explicit TestFactory4(int v) : TestFactory3(v) { print_created(this, v); }$/;"	f	class:TestFactory4	file:	access:public	signature:(int v)
TestFactory4	tests/test_factory_constructors.cpp	/^class TestFactory4 : public TestFactory3 {$/;"	c	file:	inherits:TestFactory3
TestFactory4::TestFactory4	tests/test_factory_constructors.cpp	/^    TestFactory4() : TestFactory3() { print_default_created(this); }$/;"	f	class:TestFactory4	file:	access:public	signature:()
TestFactory4::TestFactory4	tests/test_factory_constructors.cpp	/^    explicit TestFactory4(int v) : TestFactory3(v) { print_created(this, v); }$/;"	f	class:TestFactory4	file:	access:public	signature:(int v)
TestFactory4::~TestFactory4	tests/test_factory_constructors.cpp	/^    ~TestFactory4() override { print_destroyed(this); }$/;"	f	class:TestFactory4	file:	access:public	signature:()
TestFactory5	tests/test_factory_constructors.cpp	/^    explicit TestFactory5(int i) : TestFactory3(i) { print_created(this, i); }$/;"	f	class:TestFactory5	file:	access:public	signature:(int i)
TestFactory5	tests/test_factory_constructors.cpp	/^class TestFactory5 : public TestFactory3 {$/;"	c	file:	inherits:TestFactory3
TestFactory5::TestFactory5	tests/test_factory_constructors.cpp	/^    explicit TestFactory5(int i) : TestFactory3(i) { print_created(this, i); }$/;"	f	class:TestFactory5	file:	access:public	signature:(int i)
TestFactory5::~TestFactory5	tests/test_factory_constructors.cpp	/^    ~TestFactory5() override { print_destroyed(this); }$/;"	f	class:TestFactory5	file:	access:public	signature:()
TestFactory6	tests/test_factory_constructors.cpp	/^    TestFactory6(TestFactory6 &&f) noexcept {$/;"	f	class:TestFactory6	file:	access:public	signature:(TestFactory6 && f)
TestFactory6	tests/test_factory_constructors.cpp	/^    TestFactory6(const TestFactory6 &f) {$/;"	f	class:TestFactory6	file:	access:public	signature:(const TestFactory6 & f)
TestFactory6	tests/test_factory_constructors.cpp	/^    explicit TestFactory6(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory6	file:	access:public	signature:(int i)
TestFactory6	tests/test_factory_constructors.cpp	/^class TestFactory6 {$/;"	c	file:
TestFactory6::TestFactory6	tests/test_factory_constructors.cpp	/^    TestFactory6(TestFactory6 &&f) noexcept {$/;"	f	class:TestFactory6	file:	access:public	signature:(TestFactory6 && f)
TestFactory6::TestFactory6	tests/test_factory_constructors.cpp	/^    TestFactory6(const TestFactory6 &f) {$/;"	f	class:TestFactory6	file:	access:public	signature:(const TestFactory6 & f)
TestFactory6::TestFactory6	tests/test_factory_constructors.cpp	/^    explicit TestFactory6(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory6	file:	access:public	signature:(int i)
TestFactory6::alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory6	typeref:typename:bool	file:	access:protected
TestFactory6::get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory6	typeref:typename:int	file:	access:public	signature:()
TestFactory6::has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory6	typeref:typename:bool	file:	access:public	signature:() const
TestFactory6::value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory6	typeref:typename:int	file:	access:protected
TestFactory6::~TestFactory6	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory6() { print_destroyed(this); }$/;"	f	class:TestFactory6	file:	access:public	signature:()
TestFactory7	tests/test_factory_constructors.cpp	/^    TestFactory7(TestFactory7 &&f) noexcept {$/;"	f	class:TestFactory7	file:	access:public	signature:(TestFactory7 && f)
TestFactory7	tests/test_factory_constructors.cpp	/^    TestFactory7(const TestFactory7 &f) {$/;"	f	class:TestFactory7	file:	access:public	signature:(const TestFactory7 & f)
TestFactory7	tests/test_factory_constructors.cpp	/^    explicit TestFactory7(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory7	file:	access:public	signature:(int i)
TestFactory7	tests/test_factory_constructors.cpp	/^class TestFactory7 {$/;"	c	file:
TestFactory7::TestFactory7	tests/test_factory_constructors.cpp	/^    TestFactory7(TestFactory7 &&f) noexcept {$/;"	f	class:TestFactory7	file:	access:public	signature:(TestFactory7 && f)
TestFactory7::TestFactory7	tests/test_factory_constructors.cpp	/^    TestFactory7(const TestFactory7 &f) {$/;"	f	class:TestFactory7	file:	access:public	signature:(const TestFactory7 & f)
TestFactory7::TestFactory7	tests/test_factory_constructors.cpp	/^    explicit TestFactory7(int i) : value{i} { print_created(this, i); }$/;"	f	class:TestFactory7	file:	access:public	signature:(int i)
TestFactory7::alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory7	typeref:typename:bool	file:	access:protected
TestFactory7::get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory7	typeref:typename:int	file:	access:public	signature:()
TestFactory7::has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory7	typeref:typename:bool	file:	access:public	signature:() const
TestFactory7::value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory7	typeref:typename:int	file:	access:protected
TestFactory7::~TestFactory7	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory7() { print_destroyed(this); }$/;"	f	class:TestFactory7	file:	access:public	signature:()
TestFactoryHelper	tests/test_factory_constructors.cpp	/^class TestFactoryHelper {$/;"	c	file:
TestFactoryHelper::construct1	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1() { return new TestFactory1(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory1 *	file:	access:public	signature:()
TestFactoryHelper::construct1	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory1> construct1(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::unique_ptr<TestFactory1>	file:	access:public	signature:(int a)
TestFactoryHelper::construct1_string	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1_string(std::string a) {$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory1 *	file:	access:public	signature:(std::string a)
TestFactoryHelper::construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 *construct2() { return new TestFactory2(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory2 *	file:	access:public	signature:()
TestFactoryHelper::construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 construct2(std::string a) { return TestFactory2(std::move(a)); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory2	file:	access:public	signature:(std::string a)
TestFactoryHelper::construct2	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory2> construct2(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::unique_ptr<TestFactory2>	file:	access:public	signature:(int a)
TestFactoryHelper::construct3	tests/test_factory_constructors.cpp	/^    static TestFactory3 *construct3() { return new TestFactory3(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory3 *	file:	access:public	signature:()
TestFactoryHelper::construct3	tests/test_factory_constructors.cpp	/^    static std::shared_ptr<TestFactory3> construct3(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::shared_ptr<TestFactory3>	file:	access:public	signature:(int a)
TestObject	tests/test_pytypes.py	/^    class TestObject:$/;"	c	function:test_accessors	file:	inherits:	access:private
TestPropRVP	tests/test_methods_and_attributes.cpp	/^struct TestPropRVP {$/;"	s	file:
TestPropRVP::get1	tests/test_methods_and_attributes.cpp	/^    const UserType &get1() const { return v1; }$/;"	f	struct:TestPropRVP	typeref:typename:const UserType &	file:	access:public	signature:() const
TestPropRVP::get2	tests/test_methods_and_attributes.cpp	/^    const UserType &get2() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:const UserType &	file:	access:public	signature:() const
TestPropRVP::get_rvalue	tests/test_methods_and_attributes.cpp	/^    UserType get_rvalue() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:UserType	file:	access:public	signature:() const
TestPropRVP::set1	tests/test_methods_and_attributes.cpp	/^    void set1(int v) { v1.set(v); }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:	access:public	signature:(int v)
TestPropRVP::set2	tests/test_methods_and_attributes.cpp	/^    void set2(int v) { v2.set(v); }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:	access:public	signature:(int v)
TestPropRVP::sv1	tests/test_methods_and_attributes.cpp	/^    static UserType sv1;$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
TestPropRVP::sv1	tests/test_methods_and_attributes.cpp	/^UserType TestPropRVP::sv1(1);$/;"	m	class:TestPropRVP	typeref:typename:UserType
TestPropRVP::sv2	tests/test_methods_and_attributes.cpp	/^    static UserType sv2;$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
TestPropRVP::sv2	tests/test_methods_and_attributes.cpp	/^UserType TestPropRVP::sv2(1);$/;"	m	class:TestPropRVP	typeref:typename:UserType
TestPropRVP::v1	tests/test_methods_and_attributes.cpp	/^    UserType v1{1};$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
TestPropRVP::v2	tests/test_methods_and_attributes.cpp	/^    UserType v2{1};$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
TestProperties	tests/test_methods_and_attributes.cpp	/^struct TestProperties {$/;"	s	file:
TestProperties::get	tests/test_methods_and_attributes.cpp	/^    int get() const { return value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:	access:public	signature:() const
TestProperties::set	tests/test_methods_and_attributes.cpp	/^    void set(int v) { value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:	access:public	signature:(int v)
TestProperties::static_get	tests/test_methods_and_attributes.cpp	/^    static int static_get() { return static_value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:	access:public	signature:()
TestProperties::static_set	tests/test_methods_and_attributes.cpp	/^    static void static_set(int v) { static_value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:	access:public	signature:(int v)
TestProperties::static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestProperties	typeref:typename:int	file:	access:public
TestProperties::static_value	tests/test_methods_and_attributes.cpp	/^int TestProperties::static_value = 1;$/;"	m	class:TestProperties	typeref:typename:int
TestProperties::value	tests/test_methods_and_attributes.cpp	/^    int value = 1;$/;"	m	struct:TestProperties	typeref:typename:int	file:	access:public
TestPropertiesOverride	tests/test_methods_and_attributes.cpp	/^struct TestPropertiesOverride : TestProperties {$/;"	s	file:	inherits:TestProperties
TestPropertiesOverride::static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:	access:public
TestPropertiesOverride::static_value	tests/test_methods_and_attributes.cpp	/^int TestPropertiesOverride::static_value = 99;$/;"	m	class:TestPropertiesOverride	typeref:typename:int
TestPropertiesOverride::value	tests/test_methods_and_attributes.cpp	/^    int value = 99;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:	access:public
TestThread	tests/test_iostream.cpp	/^    TestThread() : stop_{false} {$/;"	f	struct:TestThread	file:	access:public	signature:()
TestThread	tests/test_iostream.cpp	/^struct TestThread {$/;"	s	file:
TestThread::TestThread	tests/test_iostream.cpp	/^    TestThread() : stop_{false} {$/;"	f	struct:TestThread	file:	access:public	signature:()
TestThread::join	tests/test_iostream.cpp	/^    void join() const {$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:() const
TestThread::sleep	tests/test_iostream.cpp	/^    void sleep() {$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:()
TestThread::stop	tests/test_iostream.cpp	/^    void stop() { stop_ = true; }$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:()
TestThread::stop_	tests/test_iostream.cpp	/^    std::atomic<bool> stop_;$/;"	m	struct:TestThread	typeref:typename:std::atomic<bool>	file:	access:public
TestThread::t_	tests/test_iostream.cpp	/^    std::thread *t_{nullptr};$/;"	m	struct:TestThread	typeref:typename:std::thread *	file:	access:public
TestThread::~TestThread	tests/test_iostream.cpp	/^    ~TestThread() { delete t_; }$/;"	f	struct:TestThread	file:	access:public	signature:()
TestUnion	tests/test_union.cpp	/^    union TestUnion {$/;"	u	function:TEST_SUBMODULE	file:
The Python interpreter immediately crashes when importing my module	docs/faq.rst	/^The Python interpreter immediately crashes when importing my module$/;"	c	title:Frequently asked questions
The ``py::metaclass`` attribute is not required for static properties	docs/upgrade.rst	/^The ``py::metaclass`` attribute is not required for static properties$/;"	s	chapter:v2.1
ThinLTO	docs/compiling.rst	/^.. _ThinLTO: http:\/\/clang.llvm.org\/docs\/ThinLTO.html$/;"	T	section:pybind11_add_module
Thread	tests/test_thread.py	/^class Thread(threading.Thread):$/;"	c	inherits:threading.Thread	access:public
Thread.__init__	tests/test_thread.py	/^    def __init__(self, fn):$/;"	m	class:Thread	access:public	signature:(self, fn)
Thread.join	tests/test_thread.py	/^    def join(self):$/;"	m	class:Thread	access:public	signature:(self)
Thread.run	tests/test_thread.py	/^    def run(self):$/;"	m	class:Thread	access:public	signature:(self)
Three	tests/test_enum.cpp	/^    enum class ScopedEnum { Two = 2, Three };$/;"	e	enum:TEST_SUBMODULE::ScopedEnum	file:	access:public
To release a new version of pybind11:	docs/release.rst	/^To release a new version of pybind11:$/;"	c
TplCtorClass	tests/test_stl.cpp	/^    explicit TplCtorClass(const T &) {}$/;"	f	struct:TplCtorClass	file:	access:public	signature:(const T &)
TplCtorClass	tests/test_stl.cpp	/^struct TplCtorClass {$/;"	s	file:
TplCtorClass::TplCtorClass	tests/test_stl.cpp	/^    explicit TplCtorClass(const T &) {}$/;"	f	struct:TplCtorClass	file:	access:public	signature:(const T &)
TplCtorClass::operator ==	tests/test_stl.cpp	/^    bool operator==(const TplCtorClass &) const { return true; }$/;"	f	struct:TplCtorClass	typeref:typename:bool	file:	access:public	signature:(const TplCtorClass &) const
TrailingPaddingStruct	tests/test_numpy_dtypes.cpp	/^    struct TrailingPaddingStruct {$/;"	s	function:TEST_SUBMODULE	file:
TrampolineB	tests/test_class.cpp	/^    class TrampolineB : public ProtectedB {$/;"	c	function:TEST_SUBMODULE	file:	inherits:ProtectedB
Two	tests/test_enum.cpp	/^    enum class ScopedEnum { Two = 2, Three };$/;"	e	enum:TEST_SUBMODULE::ScopedEnum	file:	access:public
Type	include/pybind11/eigen/matrix.h	/^    using Type = Eigen::Ref<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Ref<PlainObjectType,0,StrideType>	access:private
Type	include/pybind11/eigen/matrix.h	/^    using Type = Type_;$/;"	t	struct:EigenProps	typeref:typename:Type_	access:public
Type	include/pybind11/eigen/tensor.h	/^    using Type = Eigen::Tensor<Scalar_, NumIndices_, Options_, IndexType>;$/;"	t	struct:eigen_tensor_helper	typeref:typename:Eigen::Tensor<Scalar_,NumIndices_,Options_,IndexType>	access:public
Type	include/pybind11/eigen/tensor.h	/^    using Type = Eigen::TensorFixedSize<Scalar_, Eigen::Sizes<Indices...>, Options_, IndexType>;$/;"	t	struct:eigen_tensor_helper	typeref:typename:Eigen::TensorFixedSize<Scalar_,Eigen::Sizes<Indices...>,Options_,IndexType>	access:public
Type	include/pybind11/numpy.h	/^    using Type = array_t<Return>;$/;"	t	struct:vectorize_returned_array	typeref:typename:array_t<Return>	access:public
Type	include/pybind11/numpy.h	/^    using Type = none;$/;"	t	struct:vectorize_returned_array	typeref:typename:none	access:public
Type	include/pybind11/stl.h	/^    using Type = V<Ts...>;$/;"	t	struct:variant_caster	typeref:typename:V<Ts...>	access:public
Type conversions	docs/advanced/cast/index.rst	/^Type conversions$/;"	H
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf() { print_created(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:()
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf(TypeForHolderWithAddressOf &&) noexcept {$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:(TypeForHolderWithAddressOf &&)
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf(const TypeForHolderWithAddressOf &) { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:(const TypeForHolderWithAddressOf &)
TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForHolderWithAddressOf {$/;"	s	namespace:__anond975f9d30111	file:
TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    explicit TypeForMoveOnlyHolderWithAddressOf(int value) : value{value} { print_created(this);/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	file:	access:public	signature:(int value)
TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForMoveOnlyHolderWithAddressOf {$/;"	s	namespace:__anond975f9d30111	file:
TypeWithBothOperatorStringAndStringView	tests/test_builtin_casters.cpp	/^    struct TypeWithBothOperatorStringAndStringView {$/;"	s	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:
UTF_N	include/pybind11/cast.h	/^    static constexpr size_t UTF_N = 8 * sizeof(CharT);$/;"	m	struct:string_caster	typeref:typename:size_t	access:public
UnboundStruct	tests/test_numpy_dtypes.cpp	/^struct UnboundStruct {};$/;"	s	file:
Underlying	include/pybind11/pybind11.h	/^    using Underlying = typename std::underlying_type<Type>::type;$/;"	t	class:enum_	typeref:typename:std::underlying_type<Type>::type	access:public
Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_hash	file:	inherits:	access:private
Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_unhashable_exceptions	file:	inherits:	access:private
Unknown	tests/test_tagbased_polymorphic.cpp	/^        Unknown = 0,$/;"	e	enum:Animal::Kind	file:	access:public
Unordered	tests/conftest.py	/^class Unordered(Output):$/;"	c	inherits:Output	access:public
Unordered.__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Unordered	access:public	signature:(self, other)
Unpacking arguments	docs/advanced/pycpp/object.rst	/^Unpacking arguments$/;"	c	title:Python types
UnregisteredBase	tests/test_methods_and_attributes.cpp	/^class UnregisteredBase {$/;"	c	file:
UnregisteredBase::do_nothing	tests/test_methods_and_attributes.cpp	/^    void do_nothing() const {}$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:() const
UnregisteredBase::get_double	tests/test_methods_and_attributes.cpp	/^    double get_double() const { return ro_value; }$/;"	f	class:UnregisteredBase	typeref:typename:double	file:	access:public	signature:() const
UnregisteredBase::get_int	tests/test_methods_and_attributes.cpp	/^    int get_int() const { return rw_value; }$/;"	f	class:UnregisteredBase	typeref:typename:int	file:	access:public	signature:() const
UnregisteredBase::increase_value	tests/test_methods_and_attributes.cpp	/^    void increase_value() {$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:()
UnregisteredBase::ro_value	tests/test_methods_and_attributes.cpp	/^    double ro_value = 1.25;$/;"	m	class:UnregisteredBase	typeref:typename:double	file:	access:public
UnregisteredBase::rw_value	tests/test_methods_and_attributes.cpp	/^    int rw_value = 42;$/;"	m	class:UnregisteredBase	typeref:typename:int	file:	access:public
UnregisteredBase::set_int	tests/test_methods_and_attributes.cpp	/^    void set_int(int v) { rw_value = v; }$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:(int v)
UnregisteredType	tests/pybind11_tests.h	/^struct UnregisteredType {};$/;"	s
UnscopedEnum	tests/test_enum.cpp	/^    enum UnscopedEnum { EOne = 1, ETwo, EThree };$/;"	g	function:TEST_SUBMODULE	file:
UnscopedUCharEnum	tests/test_enum.cpp	/^    enum UnscopedUCharEnum : unsigned char {};$/;"	g	function:TEST_SUBMODULE	typeref:typename:unsigned char	file:
UnscopedUInt64Enum	tests/test_enum.cpp	/^    enum UnscopedUInt64Enum : std::uint64_t {};$/;"	g	function:TEST_SUBMODULE	typeref:typename:std::uint64_t	file:
UnwrapPyValueHolder	tests/test_numpy_array.py	/^def UnwrapPyValueHolder(vhs):$/;"	f	access:public	signature:(vhs)
Upgrade guide	docs/upgrade.rst	/^Upgrade guide$/;"	H
UserType	tests/pybind11_tests.h	/^    UserType() = default;$/;"	p	class:UserType	access:public	signature:()
UserType	tests/pybind11_tests.h	/^    explicit UserType(int i) : i(i) {}$/;"	f	class:UserType	access:public	signature:(int i)
UserType	tests/pybind11_tests.h	/^class UserType {$/;"	c
UserType::UserType	tests/pybind11_tests.h	/^    UserType() = default;$/;"	p	class:UserType	access:public	signature:()
UserType::UserType	tests/pybind11_tests.h	/^    explicit UserType(int i) : i(i) {}$/;"	f	class:UserType	access:public	signature:(int i)
UserType::i	tests/pybind11_tests.h	/^    int i = -1;$/;"	m	class:UserType	typeref:typename:int	access:private
UserType::set	tests/pybind11_tests.h	/^    void set(int set) { i = set; }$/;"	f	class:UserType	typeref:typename:void	access:public	signature:(int set)
UserType::value	tests/pybind11_tests.h	/^    int value() const { return i; }$/;"	f	class:UserType	typeref:typename:int	access:public	signature:() const
Using Python's print function in C++	docs/advanced/pycpp/utilities.rst	/^Using Python's print function in C++$/;"	c	title:Utilities
Utilities	docs/advanced/pycpp/utilities.rst	/^Utilities$/;"	H
V	tests/test_stl.cpp	/^        using V = variant<int, std::string>;$/;"	t	function:TEST_SUBMODULE::__anon9556870a2e02	typeref:typename:variant<int,std::string>	file:
V	tests/test_stl.cpp	/^        using V = variant<std::monostate, int, std::string>;$/;"	t	function:TEST_SUBMODULE::__anon9556870a3002	typeref:typename:variant<std::monostate,int,std::string>	file:
VARS_BEFORE_ALL_BASIC_TESTS	tests/test_gil_scoped.py	/^VARS_BEFORE_ALL_BASIC_TESTS = dict(vars())  # Make a copy of the dict (critical).$/;"	v	access:public
VERSION_FILE	setup.py	/^VERSION_FILE = Path("pybind11\/_version.py")$/;"	v	access:public
VERSION_REGEX	setup.py	/^VERSION_REGEX = re.compile($/;"	v	access:public
VStruct	tests/test_stl_binders.cpp	/^    struct VStruct {$/;"	s	function:TEST_SUBMODULE	file:
VUndeclStruct	tests/test_stl_binders.cpp	/^    struct VUndeclStruct {$/;"	s	function:TEST_SUBMODULE	file:
ValidType	include/pybind11/eigen/tensor.h	/^    using ValidType = void;$/;"	t	struct:eigen_tensor_helper	typeref:typename:void	access:public
Value	tests/test_stl.cpp	/^        struct Value {$/;"	s	struct:TEST_SUBMODULE::MoveOutContainer	file:	access:public
ValueHolder	tests/test_type_caster_pyobject_ptr.py	/^class ValueHolder:$/;"	c	inherits:	access:public
ValueHolder.__init__	tests/test_type_caster_pyobject_ptr.py	/^    def __init__(self, value):$/;"	m	class:ValueHolder	access:public	signature:(self, value)
ValuesView	include/pybind11/stl_bind.h	/^    using ValuesView = detail::values_view<StrippedMappedType>;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:detail::values_view<StrippedMappedType>
ValuesViewImpl	include/pybind11/stl_bind.h	/^    explicit ValuesViewImpl(Map &map) : map(map) {}$/;"	f	struct:ValuesViewImpl	access:public	signature:(Map & map)
ValuesViewImpl	include/pybind11/stl_bind.h	/^struct ValuesViewImpl : public ValuesView {$/;"	s	inherits:ValuesView
ValuesViewImpl::ValuesViewImpl	include/pybind11/stl_bind.h	/^    explicit ValuesViewImpl(Map &map) : map(map) {}$/;"	f	struct:ValuesViewImpl	access:public	signature:(Map & map)
ValuesViewImpl::iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_value_iterator(map.begin(), map.end()); }$/;"	f	struct:ValuesViewImpl	typeref:typename:iterator	access:public	signature:()
ValuesViewImpl::len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:ValuesViewImpl	typeref:typename:size_t	access:public	signature:()
ValuesViewImpl::map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ValuesViewImpl	typeref:typename:Map &	access:public
Vanilla	tests/test_multiple_inheritance.cpp	/^struct Vanilla {$/;"	s	namespace:__anon9ca8d76c0111	file:
VanillaDictMix1	tests/test_multiple_inheritance.cpp	/^    struct VanillaDictMix1 : Vanilla, WithDict {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:Vanilla,WithDict
VanillaDictMix2	tests/test_multiple_inheritance.cpp	/^    struct VanillaDictMix2 : WithDict, Vanilla {};$/;"	s	function:TEST_SUBMODULE	file:	inherits:WithDict,Vanilla
VanillaStaticMix1	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix1 : Vanilla, WithStatic1, WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:Vanilla,WithStatic1,WithStatic2
VanillaStaticMix2	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix2 : WithStatic1, Vanilla, WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:WithStatic1,Vanilla,WithStatic2
Vector2	tests/test_operator_overloading.cpp	/^    Vector2(Vector2 &&v) noexcept : x(v.x), y(v.y) {$/;"	f	class:Vector2	file:	access:public	signature:(Vector2 && v)
Vector2	tests/test_operator_overloading.cpp	/^    Vector2(const Vector2 &v) : x(v.x), y(v.y) { print_copy_created(this); }$/;"	f	class:Vector2	file:	access:public	signature:(const Vector2 & v)
Vector2	tests/test_operator_overloading.cpp	/^    Vector2(float x, float y) : x(x), y(y) { print_created(this, toString()); }$/;"	f	class:Vector2	file:	access:public	signature:(float x,float y)
Vector2	tests/test_operator_overloading.cpp	/^class Vector2 {$/;"	c	file:
Vector2::Vector2	tests/test_operator_overloading.cpp	/^    Vector2(Vector2 &&v) noexcept : x(v.x), y(v.y) {$/;"	f	class:Vector2	file:	access:public	signature:(Vector2 && v)
Vector2::Vector2	tests/test_operator_overloading.cpp	/^    Vector2(const Vector2 &v) : x(v.x), y(v.y) { print_copy_created(this); }$/;"	f	class:Vector2	file:	access:public	signature:(const Vector2 & v)
Vector2::Vector2	tests/test_operator_overloading.cpp	/^    Vector2(float x, float y) : x(x), y(y) { print_created(this, toString()); }$/;"	f	class:Vector2	file:	access:public	signature:(float x,float y)
Vector2::operator !=	tests/test_operator_overloading.cpp	/^    bool operator!=(const Vector2 &v) const { return x != v.x || y != v.y; }$/;"	f	class:Vector2	typeref:typename:bool	file:	access:public	signature:(const Vector2 & v) const
Vector2::operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(const Vector2 &v) const { return Vector2(x * v.x, y * v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
Vector2::operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
Vector2::operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
Vector2::operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(float v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(float v)
Vector2::operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
Vector2::operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(float value) const { return Vector2(x + value, y + value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
Vector2::operator +=	tests/test_operator_overloading.cpp	/^    Vector2 &operator+=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
Vector2::operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-() const { return Vector2(-x, -y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:() const
Vector2::operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(const Vector2 &v) const { return Vector2(x - v.x, y - v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
Vector2::operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(float value) const { return Vector2(x - value, y - value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
Vector2::operator -=	tests/test_operator_overloading.cpp	/^    Vector2 &operator-=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
Vector2::operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(const Vector2 &v) const { return Vector2(x \/ v.x, y \/ v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
Vector2::operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(float value) const { return Vector2(x \/ value, y \/ value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
Vector2::operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
Vector2::operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(float v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(float v)
Vector2::operator =	tests/test_operator_overloading.cpp	/^    Vector2 &operator=(Vector2 &&v) noexcept {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(Vector2 && v)
Vector2::operator =	tests/test_operator_overloading.cpp	/^    Vector2 &operator=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
Vector2::operator ==	tests/test_operator_overloading.cpp	/^    bool operator==(const Vector2 &v) const { return x == v.x && y == v.y; }$/;"	f	class:Vector2	typeref:typename:bool	file:	access:public	signature:(const Vector2 & v) const
Vector2::toString	tests/test_operator_overloading.cpp	/^    std::string toString() const {$/;"	f	class:Vector2	typeref:typename:std::string	file:	access:public	signature:() const
Vector2::x	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:	access:private
Vector2::y	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:	access:private
Vector2::~Vector2	tests/test_operator_overloading.cpp	/^    ~Vector2() { print_destroyed(this); }$/;"	f	class:Vector2	file:	access:public	signature:()
VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^    explicit VectorOwner(std::vector<std::unique_ptr<DataType>> data) : data_(std::move(data)) {/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	file:	access:private	signature:(std::vector<std::unique_ptr<DataType>> data)
VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^struct VectorOwner {$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
VectorizeTestClass	tests/test_numpy_vectorize.cpp	/^        explicit VectorizeTestClass(int v) : value{v} {};$/;"	f	struct:TEST_SUBMODULE::VectorizeTestClass	file:	access:public	signature:(int v)
VectorizeTestClass	tests/test_numpy_vectorize.cpp	/^    struct VectorizeTestClass {$/;"	s	function:TEST_SUBMODULE	file:
Vectorizing functions	docs/advanced/pycpp/numpy.rst	/^Vectorizing functions$/;"	c	title:NumPy
Vectors versus column/row matrices	docs/advanced/cast/eigen.rst	/^Vectors versus column\/row matrices$/;"	c	title:Eigen
Version 2.10.0 (Jul 15, 2022)	docs/changelog.rst	/^Version 2.10.0 (Jul 15, 2022)$/;"	c	title:Changelog
Version 2.10.1 (Oct 31, 2022)	docs/changelog.rst	/^Version 2.10.1 (Oct 31, 2022)$/;"	c	title:Changelog
Version 2.10.2 (Dec 20, 2022)	docs/changelog.rst	/^Version 2.10.2 (Dec 20, 2022)$/;"	c	title:Changelog
Version 2.10.3 (Jan 3, 2023)	docs/changelog.rst	/^Version 2.10.3 (Jan 3, 2023)$/;"	c	title:Changelog
Version 2.10.4 (Mar 16, 2023)	docs/changelog.rst	/^Version 2.10.4 (Mar 16, 2023)$/;"	c	title:Changelog
Version 2.11.0 (June 2, 2023)	docs/changelog.rst	/^Version 2.11.0 (June 2, 2023)$/;"	c	title:Changelog
Version 2.9.0 (Dec 28, 2021)	docs/changelog.rst	/^Version 2.9.0 (Dec 28, 2021)$/;"	c	title:Changelog
Version 2.9.1 (Feb 2, 2022)	docs/changelog.rst	/^Version 2.9.1 (Feb 2, 2022)$/;"	c	title:Changelog
Version 2.9.2 (Mar 29, 2022)	docs/changelog.rst	/^Version 2.9.2 (Mar 29, 2022)$/;"	c	title:Changelog
VirtClass	tests/test_gil_scoped.cpp	/^    VirtClass() = default;$/;"	p	class:VirtClass	file:	access:public	signature:()
VirtClass	tests/test_gil_scoped.cpp	/^    VirtClass(const VirtClass &) = delete;$/;"	p	class:VirtClass	file:	access:public	signature:(const VirtClass &)
VirtClass	tests/test_gil_scoped.cpp	/^class VirtClass {$/;"	c	file:
VirtClass::VirtClass	tests/test_gil_scoped.cpp	/^    VirtClass() = default;$/;"	p	class:VirtClass	file:	access:public	signature:()
VirtClass::VirtClass	tests/test_gil_scoped.cpp	/^    VirtClass(const VirtClass &) = delete;$/;"	p	class:VirtClass	file:	access:public	signature:(const VirtClass &)
VirtClass::pure_virtual_func	tests/test_gil_scoped.cpp	/^    virtual void pure_virtual_func() = 0;$/;"	p	class:VirtClass	typeref:typename:void	file:	access:public	signature:()
VirtClass::virtual_func	tests/test_gil_scoped.cpp	/^    virtual void virtual_func() {}$/;"	f	class:VirtClass	typeref:typename:void	file:	access:public	signature:()
VirtClass::~VirtClass	tests/test_gil_scoped.cpp	/^    virtual ~VirtClass() = default;$/;"	p	class:VirtClass	file:	access:public	signature:()
WIN	pybind11/setup_helpers.py	/^WIN = sys.platform.startswith("win32") and "mingw" not in sysconfig.get_platform()$/;"	v	access:public
WIN	tests/env.py	/^WIN = sys.platform.startswith("win32") or sys.platform.startswith("cygwin")$/;"	v	access:public
WIN	tests/extra_setuptools/test_setuphelper.py	/^WIN = sys.platform.startswith("win32") or sys.platform.startswith("cygwin")$/;"	v	access:public
WeaklyReferenced	tests/test_pytypes.py	/^    class WeaklyReferenced:$/;"	c	function:test_weakref	file:	inherits:	access:private
Wide character strings	docs/advanced/cast/strings.rst	/^Wide character strings$/;"	c	title:Strings, bytes and Unicode conversions
Widget	tests/test_embed/test_interpreter.cpp	/^    explicit Widget(std::string message) : message(std::move(message)) {}$/;"	f	class:Widget	file:	access:public	signature:(std::string message)
Widget	tests/test_embed/test_interpreter.cpp	/^class Widget {$/;"	c	file:
Widget::Widget	tests/test_embed/test_interpreter.cpp	/^    explicit Widget(std::string message) : message(std::move(message)) {}$/;"	f	class:Widget	file:	access:public	signature:(std::string message)
Widget::argv0	tests/test_embed/test_interpreter.cpp	/^    virtual std::string argv0() const = 0;$/;"	p	class:Widget	typeref:typename:std::string	file:	access:public	signature:() const
Widget::message	tests/test_embed/test_interpreter.cpp	/^    std::string message;$/;"	m	class:Widget	typeref:typename:std::string	file:	access:private
Widget::the_answer	tests/test_embed/test_interpreter.cpp	/^    virtual int the_answer() const = 0;$/;"	p	class:Widget	typeref:typename:int	file:	access:public	signature:() const
Widget::the_message	tests/test_embed/test_interpreter.cpp	/^    std::string the_message() const { return message; }$/;"	f	class:Widget	typeref:typename:std::string	file:	access:public	signature:() const
Widget::~Widget	tests/test_embed/test_interpreter.cpp	/^    virtual ~Widget() = default;$/;"	p	class:Widget	file:	access:public	signature:()
Windows	docs/basics.rst	/^Windows$/;"	s	chapter:Compiling the test cases
With reference counting	docs/reference.rst	/^With reference counting$/;"	s	chapter:Convenience classes for arbitrary Python types
WithDict	tests/test_multiple_inheritance.cpp	/^    struct WithDict {};$/;"	s	function:TEST_SUBMODULE	file:
WithStatic1	tests/test_multiple_inheritance.cpp	/^struct WithStatic1 {$/;"	s	namespace:__anon9ca8d76c0111	file:
WithStatic2	tests/test_multiple_inheritance.cpp	/^struct WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:
Without reference counting	docs/reference.rst	/^Without reference counting$/;"	s	chapter:Convenience classes for arbitrary Python types
WrapWithPyValueHolder	tests/test_numpy_array.py	/^def WrapWithPyValueHolder(*values):$/;"	f	access:public	signature:(*values)
Write	tests/test_enum.cpp	/^    enum Flags { Read = 4, Write = 2, Execute = 1 };$/;"	e	enum:TEST_SUBMODULE::Flags	file:	access:public
X	tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	e	enum:E2	file:	access:public
XFAIL_CONDITION	tests/test_unnamed_namespace_a.py	/^XFAIL_CONDITION = ($/;"	v	access:public
XFAIL_REASON	tests/test_unnamed_namespace_a.py	/^XFAIL_REASON = "Known issues: https:\/\/github.com\/pybind\/pybind11\/pull\/4319"$/;"	v	access:public
Y	tests/test_numpy_dtypes.cpp	/^enum E2 : uint8_t { X = 1, Y = 2 };$/;"	e	enum:E2	file:	access:public
Zero	tests/test_enum.cpp	/^    enum class ScopedChar16Enum : char16_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar16Enum	file:	access:public
Zero	tests/test_enum.cpp	/^    enum class ScopedChar32Enum : char32_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar32Enum	file:	access:public
Zero	tests/test_enum.cpp	/^    enum class ScopedChar8Enum : char8_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedChar8Enum	file:	access:public
Zero	tests/test_enum.cpp	/^    enum class ScopedCharEnum : char { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedCharEnum	file:	access:public
Zero	tests/test_enum.cpp	/^    enum class ScopedWCharEnum : wchar_t { Zero, Positive };$/;"	e	enum:TEST_SUBMODULE::ScopedWCharEnum	file:	access:public
_	include/pybind11/detail/descr.h	/^auto constexpr _() -> remove_cv_t<decltype(int_to_str<Size \/ 10, Size % 10>::digits)> {$/;"	f	typeref:typename:auto 	signature:()
_	include/pybind11/detail/descr.h	/^constexpr descr<1, Type> _() {$/;"	f	typeref:typename:descr<1,Type>	signature:()
_	include/pybind11/detail/descr.h	/^constexpr descr<N - 1> _(char const (&text)[N]) {$/;"	f	typeref:typename:descr<N-1>	signature:(char const (& text)[N])
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, T2> _(const T1 &d1, const T2 &d2) {$/;"	f	typeref:typename:enable_if_t<!B,T2>	signature:(const T1 & d1,const T2 & d2)
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, descr<N2 - 1>> _(char const (&text1)[N1], char const (&text2)[N2]) {$/;"	f	typeref:typename:enable_if_t<!B,descr<N2-1>>	signature:(char const (& text1)[N1],char const (& text2)[N2])
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, T1> _(const T1 &d1, const T2 &d2) {$/;"	f	typeref:typename:enable_if_t<B,T1>	signature:(const T1 & d1,const T2 & d2)
_	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, descr<N1 - 1>> _(char const (&text1)[N1], char const (&text2)[N2]) {$/;"	f	typeref:typename:enable_if_t<B,descr<N1-1>>	signature:(char const (& text1)[N1],char const (& text2)[N2])
_DEBUG	include/pybind11/detail/common.h	/^#        define _DEBUG$/;"	d
_Extension	pybind11/setup_helpers.py	/^    from distutils.extension import Extension as _Extension$/;"	Y	access:protected	nameref:unknown:Extension
_Extension	pybind11/setup_helpers.py	/^    from setuptools import Extension as _Extension$/;"	Y	access:protected	nameref:unknown:Extension
_PYBIND11_CMAKE_SIZEOF_VOID_P	CMakeLists.txt	/^    set(_PYBIND11_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})$/;"	v
_PYBIND11_GET_IF_UNDEF	tools/FindPythonLibsNew.cmake	/^macro(_PYBIND11_GET_IF_UNDEF lst index name)$/;"	m
_PYBIND11_PROMOTE_TO_CACHE	tools/pybind11Tools.cmake	/^macro(_PYBIND11_PROMOTE_TO_CACHE NAME)$/;"	m
_PYTHON_LIBS_SEARCH	tools/FindPythonLibsNew.cmake	/^      set(_PYTHON_LIBS_SEARCH "${PYTHON_LIBDIR}")$/;"	v
_PYTHON_LIBS_SEARCH	tools/FindPythonLibsNew.cmake	/^      set(_PYTHON_LIBS_SEARCH "${PYTHON_LIBDIR}\/${PYTHON_MULTIARCH}" "${PYTHON_LIBDIR}")$/;"	v
_PYTHON_LIBS_SEARCH	tools/FindPythonLibsNew.cmake	/^    set(_PYTHON_LIBS_SEARCH "${PYTHON_LIBDIR}")$/;"	v
_PYTHON_LIBS_SEARCH	tools/FindPythonLibsNew.cmake	/^    set(_PYTHON_LIBS_SEARCH "${PYTHON_LIBDIR}\/${PYTHON_MULTIARCH}" "${PYTHON_LIBDIR}")$/;"	v
_Python	tools/pybind11NewTools.cmake	/^  set(_Python$/;"	v
_Python	tools/pybind11Tools.cmake	/^set(_Python$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/installed_function/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${PYTHON_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/installed_function/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${Python_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/installed_target/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${PYTHON_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/installed_target/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${Python_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/subdirectory_function/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${PYTHON_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/subdirectory_function/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${Python_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/subdirectory_target/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${PYTHON_EXECUTABLE}")$/;"	v
_Python_EXECUTABLE	tests/test_cmake_build/subdirectory_target/CMakeLists.txt	/^  set(_Python_EXECUTABLE "${Python_EXECUTABLE}")$/;"	v
_TMP_ACTUAL_LIST	tests/CMakeLists.txt	/^  set(_TMP_ACTUAL_LIST "${${LISTNAME}};") # enforce ';' at the end to allow matching last item.$/;"	v
__OBJECT_H	tests/object.h	/^#    define __OBJECT_H$/;"	d
__STDC_WANT_LIB_EXT1__	include/pybind11/detail/common.h	/^#    define __STDC_WANT_LIB_EXT1__$/;"	d
__all__	pybind11/__init__.py	/^__all__ = ($/;"	v	access:protected
__anon062ae7710102	include/pybind11/eigen/matrix.h	/^    capsule base(src, [](void *o) { delete static_cast<Type *>(o); });$/;"	f	function:eigen_encapsulate	file:	signature:(void *o) 
__anon0719fd280102	tests/test_numpy_dtypes.cpp	/^    auto fill = [](py::array arr) {$/;"	f	function:test_array_ctors	file:	signature:(py::array arr) 
__anon0719fd280202	tests/test_numpy_dtypes.cpp	/^        .def(py::init([]() { return SimpleStruct(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280302	tests/test_numpy_dtypes.cpp	/^             [](const SimpleStruct &self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const SimpleStruct &self) 
__anon0719fd280402	tests/test_numpy_dtypes.cpp	/^        .def_static("fromtuple", [](const py::tuple &tup) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::tuple &tup) 
__anon0719fd280502	tests/test_numpy_dtypes.cpp	/^    m.def("create_rec_nested", [](size_t n) { \/\/ test_signature$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t n) 
__anon0719fd280602	tests/test_numpy_dtypes.cpp	/^    m.def("create_rec_partial_nested", [](size_t n) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t n) 
__anon0719fd280702	tests/test_numpy_dtypes.cpp	/^    m.def("get_format_unbound", []() { return py::format_descriptor<UnboundStruct>::format(); })/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280802	tests/test_numpy_dtypes.cpp	/^    m.def("print_format_descriptors", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280902	tests/test_numpy_dtypes.cpp	/^    m.def("print_dtypes", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280a02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_kind", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280b02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_char_", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280c02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_num", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280d02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_byteorder", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280e02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_alignment", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd280f02	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_flags", [dtype_names]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd281002	tests/test_numpy_dtypes.cpp	/^    m.def("test_dtype_methods", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd281102	tests/test_numpy_dtypes.cpp	/^    m.def("trailing_padding_dtype", []() { return py::dtype::of<TrailingPaddingStruct>(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd281202	tests/test_numpy_dtypes.cpp	/^    m.def("create_string_array", [](bool non_empty) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool non_empty) 
__anon0719fd281302	tests/test_numpy_dtypes.cpp	/^    m.def("create_array_array", [](size_t n) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t n) 
__anon0719fd281402	tests/test_numpy_dtypes.cpp	/^    m.def("create_enum_array", [](size_t n) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t n) 
__anon0719fd281502	tests/test_numpy_dtypes.cpp	/^    m.def("create_complex_array", [](size_t n) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t n) 
__anon0719fd281602	tests/test_numpy_dtypes.cpp	/^    m.def("compare_buffer_info", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd281702	tests/test_numpy_dtypes.cpp	/^    m.def("buffer_to_dtype", [](py::buffer &buf) { return py::dtype(buf.request()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::buffer &buf) 
__anon0719fd281802	tests/test_numpy_dtypes.cpp	/^    auto f_simple = [](SimpleStruct s) { return s.uint_ * 10; };$/;"	f	function:TEST_SUBMODULE	file:	signature:(SimpleStruct s) 
__anon0719fd281902	tests/test_numpy_dtypes.cpp	/^    m.def("f_packed", [](PackedStruct s) { return s.uint_ * 10; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(PackedStruct s) 
__anon0719fd281a02	tests/test_numpy_dtypes.cpp	/^    m.def("f_nested", [](NestedStruct s) { return s.a.uint_ * 10; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(NestedStruct s) 
__anon0719fd281b02	tests/test_numpy_dtypes.cpp	/^    auto f_simple_pass_thru = [](SimpleStruct s) { return s; };$/;"	f	function:TEST_SUBMODULE	file:	signature:(SimpleStruct s) 
__anon0719fd281c02	tests/test_numpy_dtypes.cpp	/^          []() { PYBIND11_NUMPY_DTYPE(SimpleStruct, bool_, uint_, float_, ldbl_); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0719fd281d02	tests/test_numpy_dtypes.cpp	/^    m.def("dtype_wrapper", [](const py::object &d) { return py::dtype::from_args(d); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &d) 
__anon0aa025b50102	tests/test_pytypes.cpp	/^    m.def("obj_class_name", [](py::handle obj) { return py::detail::obj_class_name(obj.ptr()); }/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle obj) 
__anon0aa025b50202	tests/test_pytypes.cpp	/^    m.def("get_bool", [] { return py::bool_(false); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b50302	tests/test_pytypes.cpp	/^    m.def("get_int", [] { return py::int_(0); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b50402	tests/test_pytypes.cpp	/^    m.def("get_iterator", [] { return py::iterator(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b50502	tests/test_pytypes.cpp	/^    m.def("get_iterable", [] { return py::iterable(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b50602	tests/test_pytypes.cpp	/^          [](const py::iterable &iter) { return py::frozenset(iter); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::iterable &iter) 
__anon0aa025b50702	tests/test_pytypes.cpp	/^    m.def("get_list_from_iterable", [](const py::iterable &iter) { return py::list(iter); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::iterable &iter) 
__anon0aa025b50802	tests/test_pytypes.cpp	/^    m.def("get_set_from_iterable", [](const py::iterable &iter) { return py::set(iter); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::iterable &iter) 
__anon0aa025b50902	tests/test_pytypes.cpp	/^    m.def("get_tuple_from_iterable", [](const py::iterable &iter) { return py::tuple(iter); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::iterable &iter) 
__anon0aa025b50a02	tests/test_pytypes.cpp	/^    m.def("get_float", [] { return py::float_(0.0f); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b50b02	tests/test_pytypes.cpp	/^    m.def("list_no_args", []() { return py::list{}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b50c02	tests/test_pytypes.cpp	/^    m.def("list_ssize_t", []() { return py::list{(py::ssize_t) 0}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b50d02	tests/test_pytypes.cpp	/^    m.def("list_size_t", []() { return py::list{(py::size_t) 0}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b50e02	tests/test_pytypes.cpp	/^    m.def("list_insert_ssize_t", [](py::list *l) { return l->insert((py::ssize_t) 1, 83); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::list *l) 
__anon0aa025b50f02	tests/test_pytypes.cpp	/^    m.def("list_insert_size_t", [](py::list *l) { return l->insert((py::size_t) 3, 57); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::list *l) 
__anon0aa025b51002	tests/test_pytypes.cpp	/^    m.def("get_list", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b51102	tests/test_pytypes.cpp	/^    m.def("print_list", [](const py::list &list) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::list &list) 
__anon0aa025b51202	tests/test_pytypes.cpp	/^    m.def("get_none", [] { return py::none(); });$/;"	f	function:TEST_SUBMODULE	file:
__anon0aa025b51302	tests/test_pytypes.cpp	/^    m.def("print_none", [](const py::none &none) { py::print("none: {}"_s.format(none)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::none &none) 
__anon0aa025b51402	tests/test_pytypes.cpp	/^    m.def("get_set", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b51502	tests/test_pytypes.cpp	/^    m.def("get_frozenset", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b51602	tests/test_pytypes.cpp	/^    m.def("print_anyset", [](const py::anyset &set) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::anyset &set) 
__anon0aa025b51702	tests/test_pytypes.cpp	/^    m.def("anyset_size", [](const py::anyset &set) { return set.size(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::anyset &set) 
__anon0aa025b51802	tests/test_pytypes.cpp	/^    m.def("anyset_empty", [](const py::anyset &set) { return set.empty(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::anyset &set) 
__anon0aa025b51902	tests/test_pytypes.cpp	/^          [](const py::anyset &set, const py::object &key) { return set.contains(key); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::anyset &set, const py::object &key) 
__anon0aa025b51a02	tests/test_pytypes.cpp	/^          [](const py::anyset &set, const char *key) { return set.contains(key); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::anyset &set, const char *key) 
__anon0aa025b51b02	tests/test_pytypes.cpp	/^    m.def("set_add", [](py::set &set, const py::object &key) { set.add(key); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::set &set, const py::object &key) 
__anon0aa025b51c02	tests/test_pytypes.cpp	/^    m.def("set_clear", [](py::set &set) { set.clear(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::set &set) 
__anon0aa025b51d02	tests/test_pytypes.cpp	/^    m.def("get_dict", []() { return py::dict("key"_a = "value"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b51e02	tests/test_pytypes.cpp	/^    m.def("print_dict", [](const py::dict &dict) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &dict) 
__anon0aa025b51f02	tests/test_pytypes.cpp	/^    m.def("dict_keyword_constructor", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52002	tests/test_pytypes.cpp	/^          [](const py::dict &dict, const py::object &val) { return dict.contains(val); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &dict, const py::object &val) 
__anon0aa025b52102	tests/test_pytypes.cpp	/^          [](const py::dict &dict, const char *val) { return dict.contains(val); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &dict, const char *val) 
__anon0aa025b52202	tests/test_pytypes.cpp	/^    m.def("tuple_no_args", []() { return py::tuple{}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52302	tests/test_pytypes.cpp	/^    m.def("tuple_ssize_t", []() { return py::tuple{(py::ssize_t) 0}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52402	tests/test_pytypes.cpp	/^    m.def("tuple_size_t", []() { return py::tuple{(py::size_t) 0}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52502	tests/test_pytypes.cpp	/^    m.def("get_tuple", []() { return py::make_tuple(42, py::none(), "spam"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52602	tests/test_pytypes.cpp	/^    m.def("get_simple_namespace", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52702	tests/test_pytypes.cpp	/^    m.def("str_from_char_ssize_t", []() { return py::str{"red", (py::ssize_t) 3}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52802	tests/test_pytypes.cpp	/^    m.def("str_from_char_size_t", []() { return py::str{"blue", (py::size_t) 4}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52902	tests/test_pytypes.cpp	/^    m.def("str_from_string", []() { return py::str(std::string("baz")); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52a02	tests/test_pytypes.cpp	/^    m.def("str_from_std_string_input", [](const std::string &stri) { return py::str(stri); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &stri) 
__anon0aa025b52b02	tests/test_pytypes.cpp	/^    m.def("str_from_cstr_input", [](const char *c_str) { return py::str(c_str); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const char *c_str) 
__anon0aa025b52c02	tests/test_pytypes.cpp	/^    m.def("str_from_bytes", []() { return py::str(py::bytes("boo", 3)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b52d02	tests/test_pytypes.cpp	/^          [](const py::bytes &encoded_str) { return py::str(encoded_str); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::bytes &encoded_str) 
__anon0aa025b52e02	tests/test_pytypes.cpp	/^    m.def("str_from_object", [](const py::object &obj) { return py::str(obj); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &obj) 
__anon0aa025b52f02	tests/test_pytypes.cpp	/^    m.def("repr_from_object", [](const py::object &obj) { return py::repr(obj); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &obj) 
__anon0aa025b53002	tests/test_pytypes.cpp	/^    m.def("str_from_handle", [](py::handle h) { return py::str(h); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h) 
__anon0aa025b53102	tests/test_pytypes.cpp	/^          [](const py::str &obj) { return py::str(static_cast<std::string>(obj)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::str &obj) 
__anon0aa025b53202	tests/test_pytypes.cpp	/^    m.def("str_format", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53302	tests/test_pytypes.cpp	/^    m.def("bytes_from_char_ssize_t", []() { return py::bytes{"green", (py::ssize_t) 5}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53402	tests/test_pytypes.cpp	/^    m.def("bytes_from_char_size_t", []() { return py::bytes{"purple", (py::size_t) 6}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53502	tests/test_pytypes.cpp	/^    m.def("bytes_from_string", []() { return py::bytes(std::string("foo")); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53602	tests/test_pytypes.cpp	/^    m.def("bytes_from_str", []() { return py::bytes(py::str("bar", 3)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53702	tests/test_pytypes.cpp	/^    m.def("bytearray_from_char_ssize_t", []() { return py::bytearray{"$%", (py::ssize_t) 2}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53802	tests/test_pytypes.cpp	/^    m.def("bytearray_from_char_size_t", []() { return py::bytearray{"@$!", (py::size_t) 3}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53902	tests/test_pytypes.cpp	/^    m.def("bytearray_from_string", []() { return py::bytearray(std::string("foo")); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53a02	tests/test_pytypes.cpp	/^    m.def("bytearray_size", []() { return py::bytearray("foo").size(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53b02	tests/test_pytypes.cpp	/^    m.def("return_capsule_with_destructor", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53c02	tests/test_pytypes.cpp	/^        return py::capsule([]() { py::print("destructing capsule"); });$/;"	f	function:TEST_SUBMODULE::__anon0aa025b53b02	file:	signature:() 
__anon0aa025b53d02	tests/test_pytypes.cpp	/^    m.def("return_renamed_capsule_with_destructor", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b53e02	tests/test_pytypes.cpp	/^        auto cap = py::capsule([]() { py::print("destructing capsule"); });$/;"	f	function:TEST_SUBMODULE::__anon0aa025b53d02	file:	signature:() 
__anon0aa025b53f02	tests/test_pytypes.cpp	/^    m.def("return_capsule_with_destructor_2", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54002	tests/test_pytypes.cpp	/^        return py::capsule((void *) 1234, [](void *ptr) {$/;"	f	function:TEST_SUBMODULE::__anon0aa025b53f02	file:	signature:(void *ptr) 
__anon0aa025b54102	tests/test_pytypes.cpp	/^    m.def("return_renamed_capsule_with_destructor_2", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54202	tests/test_pytypes.cpp	/^        auto cap = py::capsule((void *) 1234, [](void *ptr) {$/;"	f	function:TEST_SUBMODULE::__anon0aa025b54102	file:	signature:(void *ptr) 
__anon0aa025b54302	tests/test_pytypes.cpp	/^    m.def("return_capsule_with_name_and_destructor", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54402	tests/test_pytypes.cpp	/^        auto capsule = py::capsule((void *) 12345, "pointer type description", [](PyObject *ptr)/;"	f	function:TEST_SUBMODULE::__anon0aa025b54302	file:	signature:(PyObject *ptr) 
__anon0aa025b54502	tests/test_pytypes.cpp	/^    m.def("return_capsule_with_explicit_nullptr_dtor", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54602	tests/test_pytypes.cpp	/^    m.def("accessor_api", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b54702	tests/test_pytypes.cpp	/^    m.def("tuple_accessor", [](const py::tuple &existing_t) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::tuple &existing_t) 
__anon0aa025b54802	tests/test_pytypes.cpp	/^    m.def("accessor_assignment", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54902	tests/test_pytypes.cpp	/^    m.def("accessor_moves", []() { \/\/ See PR #3970$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54a02	tests/test_pytypes.cpp	/^    m.def("default_constructors", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b54b02	tests/test_pytypes.cpp	/^    m.def("converting_constructors", [](const py::dict &d) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &d) 
__anon0aa025b54c02	tests/test_pytypes.cpp	/^    m.def("cast_functions", [](const py::dict &d) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &d) 
__anon0aa025b54d02	tests/test_pytypes.cpp	/^    m.def("convert_to_pybind11_str", [](const py::object &o) { return py::str(o); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b54e02	tests/test_pytypes.cpp	/^          [](const std::string &type, py::object value, bool move) -> py::object {$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::object	file:	signature:(const std::string &type, py::object value, bool move) 
__anon0aa025b54f02	tests/test_pytypes.cpp	/^    m.def("get_implicit_casting", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55002	tests/test_pytypes.cpp	/^    m.def("print_function", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55102	tests/test_pytypes.cpp	/^    m.def("print_failure", []() { py::print(42, UnregisteredType()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55202	tests/test_pytypes.cpp	/^    m.def("hash_function", [](py::object obj) { return py::hash(std::move(obj)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object obj) 
__anon0aa025b55302	tests/test_pytypes.cpp	/^          [](py::object &obj, const py::object &key) { return obj.contains(key); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &obj, const py::object &key) 
__anon0aa025b55402	tests/test_pytypes.cpp	/^    m.def("test_number_protocol", [](const py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &a, const py::object &b) 
__anon0aa025b55502	tests/test_pytypes.cpp	/^    m.def("test_list_slicing", [](const py::list &a) { return a[py::slice(0, -1, 2)]; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::list &a) 
__anon0aa025b55602	tests/test_pytypes.cpp	/^    m.def("issue2361_str_implicit_copy_none", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55702	tests/test_pytypes.cpp	/^    m.def("issue2361_dict_implicit_copy_none", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55802	tests/test_pytypes.cpp	/^    m.def("test_memoryview_object", [](const py::buffer &b) { return py::memoryview(b); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::buffer &b) 
__anon0aa025b55902	tests/test_pytypes.cpp	/^          [](const py::buffer &b) { return py::memoryview(b.request()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::buffer &b) 
__anon0aa025b55a02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_buffer", [](bool is_unsigned) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool is_unsigned) 
__anon0aa025b55b02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_buffer_nativeformat", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55c02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_buffer_empty_shape", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55d02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_buffer_invalid_strides", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55e02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_buffer_nullptr", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b55f02	tests/test_pytypes.cpp	/^    m.def("test_memoryview_from_memory", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b56002	tests/test_pytypes.cpp	/^    m.def("get_len", [](py::handle h) { return py::len(h); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h) 
__anon0aa025b56102	tests/test_pytypes.cpp	/^          [](py::object o) { return py::isinstance<py::bytes>(std::move(o)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object o) 
__anon0aa025b56202	tests/test_pytypes.cpp	/^          [](py::object o) { return py::isinstance<py::str>(std::move(o)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object o) 
__anon0aa025b56302	tests/test_pytypes.cpp	/^    m.def("pass_to_pybind11_bytes", [](py::bytes b) { return py::len(std::move(b)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::bytes b) 
__anon0aa025b56402	tests/test_pytypes.cpp	/^    m.def("pass_to_pybind11_str", [](py::str s) { return py::len(std::move(s)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::str s) 
__anon0aa025b56502	tests/test_pytypes.cpp	/^    m.def("pass_to_std_string", [](const std::string &s) { return s.size(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &s) 
__anon0aa025b56602	tests/test_pytypes.cpp	/^    m.def("weakref_from_handle", [](py::handle h) { return py::weakref(h); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h) 
__anon0aa025b56702	tests/test_pytypes.cpp	/^          [](py::handle h, py::function f) { return py::weakref(h, std::move(f)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h, py::function f) 
__anon0aa025b56802	tests/test_pytypes.cpp	/^    m.def("weakref_from_object", [](const py::object &o) { return py::weakref(o); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b56902	tests/test_pytypes.cpp	/^          [](py::object o, py::function f) { return py::weakref(std::move(o), std::move(f)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object o, py::function f) 
__anon0aa025b56a02	tests/test_pytypes.cpp	/^    m.def("tuple_iterator", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b56b02	tests/test_pytypes.cpp	/^    m.def("dict_iterator", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b56c02	tests/test_pytypes.cpp	/^    m.def("passed_iterator", [](const py::iterator &py_it) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::iterator &py_it) 
__anon0aa025b56d02	tests/test_pytypes.cpp	/^    m.def("sequence_item_get_ssize_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b56e02	tests/test_pytypes.cpp	/^    m.def("sequence_item_set_ssize_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b56f02	tests/test_pytypes.cpp	/^    m.def("sequence_item_get_size_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57002	tests/test_pytypes.cpp	/^    m.def("sequence_item_set_size_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57102	tests/test_pytypes.cpp	/^    m.def("list_item_get_ssize_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57202	tests/test_pytypes.cpp	/^    m.def("list_item_set_ssize_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57302	tests/test_pytypes.cpp	/^    m.def("list_item_get_size_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57402	tests/test_pytypes.cpp	/^    m.def("list_item_set_size_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57502	tests/test_pytypes.cpp	/^    m.def("tuple_item_get_ssize_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57602	tests/test_pytypes.cpp	/^    m.def("tuple_item_set_ssize_t", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b57702	tests/test_pytypes.cpp	/^    m.def("tuple_item_get_size_t", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon0aa025b57802	tests/test_pytypes.cpp	/^    m.def("tuple_item_set_size_t", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon0aa025b57902	tests/test_pytypes.cpp	/^    m.def("square_float_", [](const external::float_ &x) -> double {$/;"	f	function:TEST_SUBMODULE	typeref:typename:double	file:	signature:(const external::float_ &x) 
__anon0aa025b57a02	tests/test_pytypes.cpp	/^    m.def("tuple_rvalue_getter", [](const py::tuple &tup) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::tuple &tup) 
__anon0aa025b57b02	tests/test_pytypes.cpp	/^    m.def("list_rvalue_getter", [](const py::list &l) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::list &l) 
__anon0aa025b57c02	tests/test_pytypes.cpp	/^    m.def("populate_dict_rvalue", [](int population) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int population) 
__anon0aa025b57d02	tests/test_pytypes.cpp	/^    m.def("populate_obj_str_attrs", [](py::object &o, int population) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &o, int population) 
__anon0aa025b57e02	tests/test_pytypes.cpp	/^    m.def("inplace_append", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b57f02	tests/test_pytypes.cpp	/^    m.def("inplace_subtract", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58002	tests/test_pytypes.cpp	/^    m.def("inplace_multiply", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58102	tests/test_pytypes.cpp	/^    m.def("inplace_divide", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58202	tests/test_pytypes.cpp	/^    m.def("inplace_or", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58302	tests/test_pytypes.cpp	/^    m.def("inplace_and", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58402	tests/test_pytypes.cpp	/^    m.def("inplace_lshift", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon0aa025b58502	tests/test_pytypes.cpp	/^    m.def("inplace_rshift", [](py::object &a, const py::object &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &a, const py::object &b) 
__anon10a0f82e0111	tests/test_type_caster_pyobject_ptr.cpp	/^namespace {$/;"	n	file:
__anon10a0f82e0111::make_vector_pyobject_ptr	tests/test_type_caster_pyobject_ptr.cpp	/^std::vector<PyObject *> make_vector_pyobject_ptr(const py::object &ValueHolder) {$/;"	f	namespace:__anon10a0f82e0111	typeref:typename:std::vector<PyObject * >	signature:(const py::object & ValueHolder)
__anon10a0f82e0202	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_from_pyobject_ptr", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon10a0f82e0302	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_handle_to_pyobject_ptr", [](py::handle obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle obj) 
__anon10a0f82e0402	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_object_to_pyobject_ptr", [](py::object obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object obj) 
__anon10a0f82e0502	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_list_to_pyobject_ptr", [](py::list lst) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::list lst) 
__anon10a0f82e0602	tests/test_type_caster_pyobject_ptr.cpp	/^        []() { return PyLong_FromLongLong(2314L); },$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon10a0f82e0702	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("pass_pyobject_ptr", [](PyObject *ptr) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(PyObject *ptr) 
__anon10a0f82e0802	tests/test_type_caster_pyobject_ptr.cpp	/^          [](const std::function<py::object(int)> &cb, int value) { return cb(value); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<py::object(int)> &cb, int value) 
__anon10a0f82e0902	tests/test_type_caster_pyobject_ptr.cpp	/^        [](const std::function<PyObject *(int)> &cb, int value) { return cb(value); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<PyObject *(int)> &cb, int value) 
__anon10a0f82e0a02	tests/test_type_caster_pyobject_ptr.cpp	/^        [](const std::function<int(PyObject *)> &cb, py::handle obj) { return cb(obj.ptr()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<int(PyObject *)> &cb, py::handle obj) 
__anon10a0f82e0b02	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_to_pyobject_ptr_nullptr", [](bool set_error) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool set_error) 
__anon10a0f82e0c02	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("cast_to_pyobject_ptr_non_nullptr_with_error_set", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon10a0f82e0d02	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("pass_list_pyobject_ptr", [](const std::vector<PyObject *> &vec_obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<PyObject *> &vec_obj) 
__anon10a0f82e0e02	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("dec_ref_each_pyobject_ptr", [](const std::vector<PyObject *> &vec_obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<PyObject *> &vec_obj) 
__anon10a0f82e0f02	tests/test_type_caster_pyobject_ptr.cpp	/^    m.def("pass_pyobject_ptr_and_int", [](PyObject *, int) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(PyObject *, int) 
__anon161d455e0102	tests/test_constants_and_functions.cpp	/^    m.def("register_large_capture_with_invalid_arguments", [](py::module_ m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::module_ m) 
__anon161d455e0202	tests/test_constants_and_functions.cpp	/^            "should_raise", [capture](int) { return capture[9] + 33; }, py::kw_only(), py::arg()/;"	f	function:TEST_SUBMODULE::__anon161d455e0102	file:	signature:(int) 
__anon161d455e0302	tests/test_constants_and_functions.cpp	/^    m.def("register_with_raising_repr", [](py::module_ m, const py::object &default_value) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::module_ m, const py::object &default_value) 
__anon161d455e0402	tests/test_constants_and_functions.cpp	/^            [](int, int, const py::object &) { return 42; },$/;"	f	function:TEST_SUBMODULE::__anon161d455e0302	file:	signature:(int, int, const py::object &) 
__anon179b49e40102	include/pybind11/detail/type_caster_base.h	/^        return [](const void *arg) -> void * { return new T(*reinterpret_cast<const T *>(arg)); /;"	f	function:type_caster_base::make_copy_constructor	typeref:typename:void *	file:	signature:(const void *arg) 
__anon179b49e40202	include/pybind11/detail/type_caster_base.h	/^        return [](const void *arg) -> void * {$/;"	f	function:type_caster_base::make_move_constructor	typeref:typename:void *	file:	signature:(const void *arg) 
__anon18e0f6ef0102	tests/test_docstring_options.cpp	/^            "test_function1", [](int, int) {}, py::arg("a"), py::arg("b"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0202	tests/test_docstring_options.cpp	/^            "test_function2", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring")/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0302	tests/test_docstring_options.cpp	/^            "test_overloaded1", [](int) {}, py::arg("i"), "Overload docstring");$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anon18e0f6ef0402	tests/test_docstring_options.cpp	/^            "test_overloaded1", [](double) {}, py::arg("d"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(double) 
__anon18e0f6ef0502	tests/test_docstring_options.cpp	/^            "test_overloaded2", [](int) {}, py::arg("i"), "overload docstring 1");$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anon18e0f6ef0602	tests/test_docstring_options.cpp	/^            "test_overloaded2", [](double) {}, py::arg("d"), "overload docstring 2");$/;"	f	function:TEST_SUBMODULE	file:	signature:(double) 
__anon18e0f6ef0702	tests/test_docstring_options.cpp	/^            "test_overloaded3", [](int) {}, py::arg("i"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anon18e0f6ef0802	tests/test_docstring_options.cpp	/^            "test_overloaded3", [](double) {}, py::arg("d"), "Overload docstr");$/;"	f	function:TEST_SUBMODULE	file:	signature:(double) 
__anon18e0f6ef0902	tests/test_docstring_options.cpp	/^            "test_function3", [](int, int) {}, py::arg("a"), py::arg("b"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0a02	tests/test_docstring_options.cpp	/^            "test_function4", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring")/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0b02	tests/test_docstring_options.cpp	/^            "test_function5", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring")/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0c02	tests/test_docstring_options.cpp	/^                [](int, int) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0d02	tests/test_docstring_options.cpp	/^        "test_function7", [](int, int) {}, py::arg("a"), py::arg("b"), "A custom docstring");$/;"	f	function:TEST_SUBMODULE	file:	signature:(int, int) 
__anon18e0f6ef0e02	tests/test_docstring_options.cpp	/^        m.def("test_function8", []() {});$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon1a95b65c0102	tests/test_operator_overloading.cpp	/^        .def("__abs__", [](const Vector2 &v) { return abs(v); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Vector2 &v) 
__anon1a95b65c0202	tests/test_operator_overloading.cpp	/^        .def("__add__", [](const C2 &c2, const C1 &c1) { return c2 + c1; })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const C2 &c2, const C1 &c1) 
__anon1a95b65c0302	tests/test_operator_overloading.cpp	/^        .def("__radd__", [](const C2 &c2, const C1 &c1) { return c1 + c2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const C2 &c2, const C1 &c1) 
__anon1a95b65c0402	tests/test_operator_overloading.cpp	/^            [](NestA &a) -> NestABase & { return (NestABase &) a; },$/;"	f	function:TEST_SUBMODULE	typeref:typename:NestABase &	file:	signature:(NestA &a) 
__anon1a95b65c0502	tests/test_operator_overloading.cpp	/^    m.def("get_NestA", [](const NestA &a) { return a.value; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const NestA &a) 
__anon1a95b65c0602	tests/test_operator_overloading.cpp	/^    m.def("get_NestB", [](const NestB &b) { return b.value; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const NestB &b) 
__anon1a95b65c0702	tests/test_operator_overloading.cpp	/^    m.def("get_NestC", [](const NestC &c) { return c.value; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const NestC &c) 
__anon1a95b65c0802	tests/test_operator_overloading.cpp	/^    m.def("get_unhashable_HashMe_set", []() { return std::unordered_set<HashMe>{{"one"}}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon1eddb0430102	include/pybind11/pytypes.h	/^        m_ptr = PyCapsule_New(const_cast<void *>(value), nullptr, [](PyObject *o) {$/;"	f	function:capsule::capsule	file:	signature:(PyObject *o) 
__anon1eddb0430202	include/pybind11/pytypes.h	/^        m_ptr = PyCapsule_New(reinterpret_cast<void *>(destructor), nullptr, [](PyObject *o) {$/;"	f	function:capsule::capsule	file:	signature:(PyObject *o) 
__anon256904100102	tests/test_modules.cpp	/^    m_sub.def("submodule_func", []() { return "submodule_func()"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon256904100202	tests/test_modules.cpp	/^    m.def("duplicate_registration", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon256904100302	tests/test_modules.cpp	/^        dm.def("dupe1_factory", []() { return Dupe1(); });$/;"	f	function:TEST_SUBMODULE::__anon256904100202	file:	signature:() 
__anon256904100402	tests/test_modules.cpp	/^            dm.def("Dupe1", []() { return Dupe1(); });$/;"	f	function:TEST_SUBMODULE::__anon256904100202	file:	signature:() 
__anon256904100502	tests/test_modules.cpp	/^            dm.def("DupeException", []() { return 30; });$/;"	f	function:TEST_SUBMODULE::__anon256904100202	file:	signature:() 
__anon256904100602	tests/test_modules.cpp	/^    m.def("def_submodule", [](py::module_ m, const char *name) { return m.def_submodule(name); }/;"	f	function:TEST_SUBMODULE	file:	signature:(py::module_ m, const char *name) 
__anon2cb2d09b0102	include/pybind11/detail/init.h	/^            [](value_and_holder &v_h, Args... args) {$/;"	f	function:constructor::execute	file:	signature:(value_and_holder &v_h, Args... args) 
__anon2cb2d09b0202	include/pybind11/detail/init.h	/^            [](value_and_holder &v_h, Args... args) {$/;"	f	function:constructor::execute	file:	signature:(value_and_holder &v_h, Args... args) 
__anon2cb2d09b0302	include/pybind11/detail/init.h	/^            [](value_and_holder &v_h, Args... args) {$/;"	f	function:constructor::execute	file:	signature:(value_and_holder &v_h, Args... args) 
__anon2cb2d09b0402	include/pybind11/detail/init.h	/^            [](value_and_holder &v_h, Args... args) {$/;"	f	function:alias_constructor::execute	file:	signature:(value_and_holder &v_h, Args... args) 
__anon2cb2d09b0502	include/pybind11/detail/init.h	/^            (value_and_holder &v_h, Args... args) {$/;"	f	function:factory::execute	file:	signature:(value_and_holder &v_h, Args... args) 
__anon2cb2d09b0602	include/pybind11/detail/init.h	/^            (value_and_holder &v_h, CArgs... args) {$/;"	f	function:factory::execute	file:	signature:(value_and_holder &v_h, CArgs... args) 
__anon2cb2d09b0702	include/pybind11/detail/init.h	/^            (value_and_holder &v_h, ArgState state) {$/;"	f	function:pickle_factory::execute	file:	signature:(value_and_holder &v_h, ArgState state) 
__anon2f17430f0102	tests/test_kwargs_and_defaults.cpp	/^        = [](int x, int y) { return "x=" + std::to_string(x) + ", y=" + std::to_string(y); };$/;"	f	function:TEST_SUBMODULE	file:	signature:(int x, int y) 
__anon2f17430f0202	tests/test_kwargs_and_defaults.cpp	/^        "kw_func3", [](const char *) {}, py::arg("data") = std::string("Hello world!"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(const char *) 
__anon2f17430f0302	tests/test_kwargs_and_defaults.cpp	/^        [](const std::vector<int> &entries) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<int> &entries) 
__anon2f17430f0402	tests/test_kwargs_and_defaults.cpp	/^    m.def("args_function", [](py::args args) -> py::tuple {$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::tuple	file:	signature:(py::args args) 
__anon2f17430f0502	tests/test_kwargs_and_defaults.cpp	/^    m.def("args_kwargs_function", [](const py::args &args, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::args &args, const py::kwargs &kwargs) 
__anon2f17430f0602	tests/test_kwargs_and_defaults.cpp	/^          [](int i, double j, const py::args &args) { return py::make_tuple(i, j, args); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args) 
__anon2f17430f0702	tests/test_kwargs_and_defaults.cpp	/^          [](int i, double j, const py::kwargs &kwargs) { return py::make_tuple(i, j, kwargs); }/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::kwargs &kwargs) 
__anon2f17430f0802	tests/test_kwargs_and_defaults.cpp	/^    auto mixed_plus_both = [](int i, double j, const py::args &args, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args, const py::kwargs &kwargs) 
__anon2f17430f0902	tests/test_kwargs_and_defaults.cpp	/^        [](int i, double j, const py::args &args, int z) { return py::make_tuple(i, j, args, z);/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args, int z) 
__anon2f17430f0a02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, double j, const py::args &args, int z, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args, int z, const py::kwargs &kwargs) 
__anon2f17430f0b02	tests/test_kwargs_and_defaults.cpp	/^        py::kw_only{},$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args, int z, const py::kwargs &kwargs) 
__anon2f17430f0c02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, double j, const py::args &args, int z, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double j, const py::args &args, int z, const py::kwargs &kwargs) 
__anon2f17430f0d02	tests/test_kwargs_and_defaults.cpp	/^        [](int h, int i, double j, const py::args &args, int z, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int h, int i, double j, const py::args &args, int z, const py::kwargs &kwargs) 
__anon2f17430f0e02	tests/test_kwargs_and_defaults.cpp	/^    m.def("arg_refcount_h", [](py::handle h) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h) 
__anon2f17430f0f02	tests/test_kwargs_and_defaults.cpp	/^    m.def("arg_refcount_h", [](py::handle h, py::handle, py::handle) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h, py::handle, py::handle) 
__anon2f17430f1002	tests/test_kwargs_and_defaults.cpp	/^    m.def("arg_refcount_o", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon2f17430f1102	tests/test_kwargs_and_defaults.cpp	/^    m.def("args_refcount", [](py::args a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::args a) 
__anon2f17430f1202	tests/test_kwargs_and_defaults.cpp	/^    m.def("mixed_args_refcount", [](const py::object &o, py::args a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o, py::args a) 
__anon2f17430f1302	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j) { return py::make_tuple(i, j); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anon2f17430f1402	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j, int k) { return py::make_tuple(i, j, k); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j, int k) 
__anon2f17430f1502	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j, int k, int z) { return py::make_tuple(i, j, k, z); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j, int k, int z) 
__anon2f17430f1602	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j) { return py::make_tuple(i, j); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anon2f17430f1702	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j, int k, const py::kwargs &kwargs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j, int k, const py::kwargs &kwargs) 
__anon2f17430f1802	tests/test_kwargs_and_defaults.cpp	/^    m.def("register_invalid_kw_only", [](py::module_ m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::module_ m) 
__anon2f17430f1902	tests/test_kwargs_and_defaults.cpp	/^            [](int i, int j) { return py::make_tuple(i, j); },$/;"	f	function:TEST_SUBMODULE::__anon2f17430f1802	file:	signature:(int i, int j) 
__anon2f17430f1a02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j) { return py::make_tuple(i, j); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anon2f17430f1b02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j) { return py::make_tuple(i, j); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anon2f17430f1c02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j, int k) { return py::make_tuple(i, j, k); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j, int k) 
__anon2f17430f1d02	tests/test_kwargs_and_defaults.cpp	/^        [](int i, int j, int k) { return py::make_tuple(i, j, k); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j, int k) 
__anon2f17430f1e02	tests/test_kwargs_and_defaults.cpp	/^        "bad_kw_only1", [](int) {}, py::kw_only());$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anon2f17430f1f02	tests/test_kwargs_and_defaults.cpp	/^        "bad_kw_only2", [](int i, py::args) {}, py::kw_only(), "i"_a);$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, py::args) 
__anon2f17430f2002	tests/test_kwargs_and_defaults.cpp	/^        [](py::object a) { return py::repr(std::move(a)); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object a) 
__anon2f17430f2102	tests/test_kwargs_and_defaults.cpp	/^        .def(py::init([](int) { return first_arg_kw_only(); }),$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anon2f17430f2202	tests/test_kwargs_and_defaults.cpp	/^            [](first_arg_kw_only &, int, int) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(first_arg_kw_only &, int, int) 
__anon2f17430f2302	tests/test_kwargs_and_defaults.cpp	/^            [](first_arg_kw_only &, int, int) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(first_arg_kw_only &, int, int) 
__anon2f17430f2402	tests/test_kwargs_and_defaults.cpp	/^            py::pos_only{},$/;"	f	function:TEST_SUBMODULE	file:	signature:(first_arg_kw_only &, int, int) 
__anon30d077c00102	tests/pybind11_cross_module_tests.cpp	/^    m.def("raise_runtime_error", []() {$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00202	tests/pybind11_cross_module_tests.cpp	/^    m.def("raise_value_error", []() {$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00302	tests/pybind11_cross_module_tests.cpp	/^    m.def("throw_pybind_value_error", []() { throw py::value_error("pybind11 value error"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00402	tests/pybind11_cross_module_tests.cpp	/^    m.def("throw_pybind_type_error", []() { throw py::type_error("pybind11 type error"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00502	tests/pybind11_cross_module_tests.cpp	/^    m.def("throw_stop_iteration", []() { throw py::stop_iteration(); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00602	tests/pybind11_cross_module_tests.cpp	/^    m.def("throw_local_error", []() { throw LocalException("just local"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00702	tests/pybind11_cross_module_tests.cpp	/^    m.def("throw_local_simple_error", []() { throw LocalSimpleException("external mod"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00802	tests/pybind11_cross_module_tests.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:PYBIND11_MODULE	file:	signature:(std::exception_ptr p) 
__anon30d077c00902	tests/pybind11_cross_module_tests.cpp	/^    py::register_local_exception_translator([](std::exception_ptr p) {$/;"	f	function:PYBIND11_MODULE	file:	signature:(std::exception_ptr p) 
__anon30d077c00a02	tests/pybind11_cross_module_tests.cpp	/^    bind_local<LocalType, 1>(m, "LocalType", py::module_local()).def("get2", [](LocalType &t) {$/;"	f	function:PYBIND11_MODULE	file:	signature:(LocalType &t) 
__anon30d077c00b02	tests/pybind11_cross_module_tests.cpp	/^    m.def("local_value", [](LocalType &l) { return l.i; });$/;"	f	function:PYBIND11_MODULE	file:	signature:(LocalType &l) 
__anon30d077c00c02	tests/pybind11_cross_module_tests.cpp	/^    m.def("register_nonlocal", [m]() { bind_local<NonLocalType, 0>(m, "NonLocalType"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00d02	tests/pybind11_cross_module_tests.cpp	/^    m.def("register_nonlocal_vec", [m]() { py::bind_vector<NonLocalVec>(m, "NonLocalVec"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00e02	tests/pybind11_cross_module_tests.cpp	/^    m.def("register_nonlocal_map", [m]() { py::bind_map<NonLocalMap>(m, "NonLocalMap"); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c00f02	tests/pybind11_cross_module_tests.cpp	/^          [m]() { py::bind_map<NonLocalMap2>(m, "NonLocalMap2", py::module_local(false)); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c01002	tests/pybind11_cross_module_tests.cpp	/^          [m]() { bind_local<MixedGlobalLocal, 200>(m, "MixedGlobalLocal", py::module_local()); /;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c01102	tests/pybind11_cross_module_tests.cpp	/^    m.def("register_mixed_local_global", [m]() {$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c01202	tests/pybind11_cross_module_tests.cpp	/^    m.def("get_mixed_gl", [](int i) { return MixedGlobalLocal(i); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(int i) 
__anon30d077c01302	tests/pybind11_cross_module_tests.cpp	/^    m.def("get_mixed_lg", [](int i) { return MixedLocalGlobal(i); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(int i) 
__anon30d077c01402	tests/pybind11_cross_module_tests.cpp	/^          []() { return (uintptr_t) &py::detail::get_local_internals().registered_types_cpp; });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon30d077c01502	tests/pybind11_cross_module_tests.cpp	/^          [](std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(std::vector<int> &v) 
__anon30d077c01602	tests/pybind11_cross_module_tests.cpp	/^    m.def("return_self", [](LocalVec *v) { return v; });$/;"	f	function:PYBIND11_MODULE	file:	signature:(LocalVec *v) 
__anon30d077c01702	tests/pybind11_cross_module_tests.cpp	/^    m.def("return_copy", [](const LocalVec &v) { return LocalVec(v); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(const LocalVec &v) 
__anon30d077c01802	tests/pybind11_cross_module_tests.cpp	/^    m.def("pet_name", [](pets::Pet &p) { return p.name(); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(pets::Pet &p) 
__anon30d077c01902	tests/pybind11_cross_module_tests.cpp	/^    m.def("get_gl_value", [](MixGL &o) { return o.i + 100; });$/;"	f	function:PYBIND11_MODULE	file:	signature:(MixGL &o) 
__anon30d077c01a02	tests/pybind11_cross_module_tests.cpp	/^    m.def("missing_header_arg", [](const std::vector<float> &) {});$/;"	f	function:PYBIND11_MODULE	file:	signature:(const std::vector<float> &) 
__anon30d077c01b02	tests/pybind11_cross_module_tests.cpp	/^    m.def("missing_header_return", []() { return std::vector<float>(); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anon39e9e6a30111	tests/test_custom_type_setup.cpp	/^namespace {$/;"	n	file:
__anon39e9e6a30111::OwnsPythonObjects	tests/test_custom_type_setup.cpp	/^struct OwnsPythonObjects {$/;"	s	namespace:__anon39e9e6a30111	file:
__anon39e9e6a30111::OwnsPythonObjects::value	tests/test_custom_type_setup.cpp	/^    py::object value = py::none();$/;"	m	struct:__anon39e9e6a30111::OwnsPythonObjects	typeref:typename:py::object	file:	access:public
__anon39e9e6a30202	tests/test_custom_type_setup.cpp	/^        m, "OwnsPythonObjects", py::custom_type_setup([](PyHeapTypeObject *heap_type) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(PyHeapTypeObject *heap_type) 
__anon39e9e6a30302	tests/test_custom_type_setup.cpp	/^            type->tp_traverse = [](PyObject *self_base, visitproc visit, void *arg) {$/;"	f	function:TEST_SUBMODULE::__anon39e9e6a30202	file:	signature:(PyObject *self_base, visitproc visit, void *arg) 
__anon39e9e6a30402	tests/test_custom_type_setup.cpp	/^            type->tp_clear = [](PyObject *self_base) {$/;"	f	function:TEST_SUBMODULE::__anon39e9e6a30202	file:	signature:(PyObject *self_base) 
__anon3aa036b30102	tests/test_cmake_build/embed.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_EMBEDDED_MODULE	file:	signature:(int i, int j) 
__anon3ac3033b0102	tests/test_iostream.cpp	/^        auto thread_f = [this] {$/;"	f	function:TestThread::TestThread	file:
__anon3ac3033b0202	tests/test_iostream.cpp	/^    m.def("captured_output_default", [](const std::string &msg) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg) 
__anon3ac3033b0302	tests/test_iostream.cpp	/^    m.def("captured_output", [](const std::string &msg) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg) 
__anon3ac3033b0402	tests/test_iostream.cpp	/^    m.def("captured_err", [](const std::string &msg) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg) 
__anon3ac3033b0502	tests/test_iostream.cpp	/^    m.def("raw_output", [](const std::string &msg) { std::cout << msg << std::flush; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg) 
__anon3ac3033b0602	tests/test_iostream.cpp	/^    m.def("raw_err", [](const std::string &msg) { std::cerr << msg << std::flush; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg) 
__anon3ac3033b0702	tests/test_iostream.cpp	/^    m.def("captured_dual", [](const std::string &msg, const std::string &emsg) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &msg, const std::string &emsg) 
__anon4212d7b20102	tests/pybind11_tests.cpp	/^    initializers().emplace_back([=](py::module_ &parent) {$/;"	f	function:test_initializer::test_initializer	file:	signature:(py::module_ &parent) 
__anon4212d7b20202	tests/pybind11_tests.cpp	/^        .def_static("detail_reg_inst", []() {$/;"	f	function:bind_ConstructorStats	file:	signature:() 
__anon4212d7b20302	tests/pybind11_tests.cpp	/^        .def("__repr__", [](const UserType &u) { return "UserType({})"_s.format(u.value()); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(const UserType &u) 
__anon4212d7b20402	tests/pybind11_tests.cpp	/^        .def("__repr__", [](const IncType &u) { return "IncType({})"_s.format(u.value()); });$/;"	f	function:PYBIND11_MODULE	file:	signature:(const IncType &u) 
__anon464de8680102	tests/test_copy_move.cpp	/^    m.def("move_and_copy_casts", [](const py::object &o) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(const py::object &o) 
__anon464de8680202	tests/test_copy_move.cpp	/^    m.def("move_only", [](MoveOnlyInt m) { return m.value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(MoveOnlyInt m) 
__anon464de8680302	tests/test_copy_move.cpp	/^    m.def("move_or_copy", [](MoveOrCopyInt m) { return m.value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(MoveOrCopyInt m) 
__anon464de8680402	tests/test_copy_move.cpp	/^    m.def("copy_only", [](CopyOnlyInt m) { return m.value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(CopyOnlyInt m) 
__anon464de8680502	tests/test_copy_move.cpp	/^          [](std::pair<MoveOnlyInt, MoveOrCopyInt> p) { return p.first.value + p.second.value; }/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::pair<MoveOnlyInt, MoveOrCopyInt> p) 
__anon464de8680602	tests/test_copy_move.cpp	/^    m.def("move_tuple", [](std::tuple<MoveOnlyInt, MoveOrCopyInt, MoveOnlyInt> t) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::tuple<MoveOnlyInt, MoveOrCopyInt, MoveOnlyInt> t) 
__anon464de8680702	tests/test_copy_move.cpp	/^    m.def("copy_tuple", [](std::tuple<CopyOnlyInt, CopyOnlyInt> t) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::tuple<CopyOnlyInt, CopyOnlyInt> t) 
__anon464de8680802	tests/test_copy_move.cpp	/^                                 MoveOrCopyInt>> x) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::pair<MoveOnlyInt, std::pair<std::tuple<MoveOrCopyInt, CopyOnlyInt, std::tuple<MoveOnlyInt>>, MoveOrCopyInt>> x) 
__anon464de8680902	tests/test_copy_move.cpp	/^    m.def("move_and_copy_cstats", []() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon464de8680a02	tests/test_copy_move.cpp	/^    m.def("move_optional", [](std::optional<MoveOnlyInt> o) { return o->value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::optional<MoveOnlyInt> o) 
__anon464de8680b02	tests/test_copy_move.cpp	/^    m.def("move_or_copy_optional", [](std::optional<MoveOrCopyInt> o) { return o->value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::optional<MoveOrCopyInt> o) 
__anon464de8680c02	tests/test_copy_move.cpp	/^    m.def("copy_optional", [](std::optional<CopyOnlyInt> o) { return o->value; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::optional<CopyOnlyInt> o) 
__anon464de8680d02	tests/test_copy_move.cpp	/^          [](std::optional<std::tuple<MoveOrCopyInt, MoveOnlyInt, CopyOnlyInt>> x) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(std::optional<std::tuple<MoveOrCopyInt, MoveOnlyInt, CopyOnlyInt>> x) 
__anon464de8680e02	tests/test_copy_move.cpp	/^    m.def("private_op_new_value", []() { return PrivateOpNew(); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon464de8680f02	tests/test_copy_move.cpp	/^        []() -> const PrivateOpNew & {$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:const PrivateOpNew &	file:	signature:() 
__anon464de8681002	tests/test_copy_move.cpp	/^        [](int i) { return std::unique_ptr<MoveIssue1>(new MoveIssue1(i)); },$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(int i) 
__anon464de8681102	tests/test_copy_move.cpp	/^        "get_moveissue2", [](int i) { return MoveIssue2(i); }, py::return_value_policy::move);$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(int i) 
__anon464de8681202	tests/test_copy_move.cpp	/^    m.def("get_pytype_rvalue_castissue", [](double i) { return py::float_(i).cast<py::int_>(); }/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(double i) 
__anon465868900102	tests/test_stl_binders.cpp	/^    m.def("get_nvnc", [](int n) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int n) 
__anon465868900202	tests/test_stl_binders.cpp	/^    m.def("create_undeclstruct", [m]() mutable {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon465868900302	tests/test_stl_binders.cpp	/^    m.def("get_vectorstruct", [] {$/;"	f	function:TEST_SUBMODULE	file:
__anon4f9158590102	tests/test_eigen_tensor.inl	/^    m.def("setup", []() {$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590202	tests/test_eigen_tensor.inl	/^    m.def("is_ok", []() {$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590302	tests/test_eigen_tensor.inl	/^        []() { return &get_fixed_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590402	tests/test_eigen_tensor.inl	/^        "copy_tensor", []() { return &get_tensor<Options>(); }, py::return_value_policy::copy);$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590502	tests/test_eigen_tensor.inl	/^        []() { return &get_const_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590602	tests/test_eigen_tensor.inl	/^        []() -> Eigen::TensorFixedSize<double, Eigen::Sizes<3, 5, 2>, Options> {$/;"	f	function:init_tensor_module	typeref:typename:Eigen::TensorFixedSize<double,Eigen::Sizes<3,5,2>,Options>	file:	signature:() 
__anon4f9158590702	tests/test_eigen_tensor.inl	/^        []() -> Eigen::Tensor<double, 3, Options> { return get_tensor<Options>(); },$/;"	f	function:init_tensor_module	typeref:typename:Eigen::Tensor<double,3,Options>	file:	signature:() 
__anon4f9158590802	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::Tensor<double, 3, Options> & { return get_const_tensor<Options>(); /;"	f	function:init_tensor_module	typeref:typename:const Eigen::Tensor<double,3,Options> &	file:	signature:() 
__anon4f9158590902	tests/test_eigen_tensor.inl	/^        []() {$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590a02	tests/test_eigen_tensor.inl	/^        []() { return new Eigen::Tensor<double, 3, Options>(get_tensor<Options>()); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590b02	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::Tensor<double, 3, Options> * {$/;"	f	function:init_tensor_module	typeref:typename:const Eigen::Tensor<double,3,Options> *	file:	signature:() 
__anon4f9158590c02	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> * {$/;"	f	function:init_tensor_module	typeref:typename:const Eigen::TensorMap<Eigen::Tensor<double,3,Options>> *	file:	signature:() 
__anon4f9158590d02	tests/test_eigen_tensor.inl	/^        []() { return &get_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158590e02	tests/test_eigen_tensor.inl	/^        []() -> Eigen::Tensor<double, 3, Options> & { return get_tensor<Options>(); },$/;"	f	function:init_tensor_module	typeref:typename:Eigen::Tensor<double,3,Options> &	file:	signature:() 
__anon4f9158590f02	tests/test_eigen_tensor.inl	/^        []() { return &get_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158591002	tests/test_eigen_tensor.inl	/^        []() { return &get_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158591102	tests/test_eigen_tensor.inl	/^        []() { return &get_const_tensor<Options>(); },$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158591202	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::Tensor<double, 3, Options> & { return get_const_tensor<Options>(); /;"	f	function:init_tensor_module	typeref:typename:const Eigen::Tensor<double,3,Options> &	file:	signature:() 
__anon4f9158591302	tests/test_eigen_tensor.inl	/^        []() -> Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> {$/;"	f	function:init_tensor_module	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>>	file:	signature:() 
__anon4f9158591402	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> {$/;"	f	function:init_tensor_module	typeref:typename:const Eigen::TensorMap<Eigen::Tensor<double,3,Options>>	file:	signature:() 
__anon4f9158591502	tests/test_eigen_tensor.inl	/^        []() -> Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> * {$/;"	f	function:init_tensor_module	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>> *	file:	signature:() 
__anon4f9158591602	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> * {$/;"	f	function:init_tensor_module	typeref:typename:const Eigen::TensorMap<Eigen::Tensor<double,3,Options>> *	file:	signature:() 
__anon4f9158591702	tests/test_eigen_tensor.inl	/^        []() -> Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> & {$/;"	f	function:init_tensor_module	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>> &	file:	signature:() 
__anon4f9158591802	tests/test_eigen_tensor.inl	/^        []() -> const Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> & {$/;"	f	function:init_tensor_module	typeref:typename:const Eigen::TensorMap<Eigen::Tensor<double,3,Options>> &	file:	signature:() 
__anon4f9158591902	tests/test_eigen_tensor.inl	/^        []() {$/;"	f	function:init_tensor_module	file:	signature:() 
__anon4f9158591a02	tests/test_eigen_tensor.inl	/^          [](const Eigen::Tensor<double, 3, Options> &tensor) { return tensor; });$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::Tensor<double, 3, Options> &tensor) 
__anon4f9158591b02	tests/test_eigen_tensor.inl	/^        [](const Eigen::Tensor<double, 3, Options> &tensor) { return tensor; },$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::Tensor<double, 3, Options> &tensor) 
__anon4f9158591c02	tests/test_eigen_tensor.inl	/^          [](const Eigen::Tensor<int32_t, 3, Options> &tensor) { return tensor; });$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::Tensor<int32_t, 3, Options> &tensor) 
__anon4f9158591d02	tests/test_eigen_tensor.inl	/^          [](const Eigen::TensorFixedSize<double, Eigen::Sizes<3, 5, 2>, Options> &tensor) {$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::TensorFixedSize<double, Eigen::Sizes<3, 5, 2>, Options> &tensor) 
__anon4f9158591e02	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> view) { return view; },$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> view) 
__anon4f9158591f02	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> &view) { return view; },$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> &view) 
__anon4f9158592002	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> *view) { return view; },$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> *view) 
__anon4f9158592102	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<Eigen::Tensor<double, 3, Options>, Eigen::Aligned> view) {$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<Eigen::Tensor<double, 3, Options>, Eigen::Aligned> view) 
__anon4f9158592202	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<const Eigen::Tensor<double, 3, Options>> view) {$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<const Eigen::Tensor<double, 3, Options>> view) 
__anon4f9158592302	tests/test_eigen_tensor.inl	/^        [](const Eigen::Tensor<double, 0, Options> &tensor) { return tensor; },$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::Tensor<double, 0, Options> &tensor) 
__anon4f9158592402	tests/test_eigen_tensor.inl	/^        [](const Eigen::Tensor<double, 0, Options> &tensor) { return tensor; },$/;"	f	function:init_tensor_module	file:	signature:(const Eigen::Tensor<double, 0, Options> &tensor) 
__anon4f9158592502	tests/test_eigen_tensor.inl	/^        [](Eigen::TensorMap<Eigen::Tensor<double, 0, Options>> &tensor) { return tensor; },$/;"	f	function:init_tensor_module	file:	signature:(Eigen::TensorMap<Eigen::Tensor<double, 0, Options>> &tensor) 
__anon52c2ac590102	tests/test_exceptions.cpp	/^          []() { throw std::runtime_error("This exception was intentionally thrown."); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590202	tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::exception_ptr p) 
__anon52c2ac590302	tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::exception_ptr p) 
__anon52c2ac590402	tests/test_exceptions.cpp	/^    py::register_exception_translator([](std::exception_ptr p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::exception_ptr p) 
__anon52c2ac590502	tests/test_exceptions.cpp	/^    py::register_local_exception_translator([](std::exception_ptr p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::exception_ptr p) 
__anon52c2ac590602	tests/test_exceptions.cpp	/^    m.def("throws1", []() { throw MyException("this error should go to a custom type"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590702	tests/test_exceptions.cpp	/^          []() { throw MyException2("this error should go to a standard Python exception"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590802	tests/test_exceptions.cpp	/^    m.def("throws3", []() { throw MyException3("this error cannot be translated"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590902	tests/test_exceptions.cpp	/^    m.def("throws4", []() { throw MyException4("this error is rethrown"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590a02	tests/test_exceptions.cpp	/^          []() { throw MyException5("this is a helper-defined translated exception"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590b02	tests/test_exceptions.cpp	/^    m.def("throws5_1", []() { throw MyException5_1("MyException5 subclass"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590c02	tests/test_exceptions.cpp	/^    m.def("throws6", []() { throw MyException6("MyException6 only handled in this module"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590d02	tests/test_exceptions.cpp	/^    m.def("throws_logic_error", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590e02	tests/test_exceptions.cpp	/^    m.def("throws_overflow_error", []() { throw std::overflow_error(""); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac590f02	tests/test_exceptions.cpp	/^    m.def("throws_local_error", []() { throw LocalException("never caught"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591002	tests/test_exceptions.cpp	/^    m.def("throws_local_simple_error", []() { throw LocalSimpleException("this mod"); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591102	tests/test_exceptions.cpp	/^    m.def("exception_matches", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591202	tests/test_exceptions.cpp	/^    m.def("exception_matches_base", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591302	tests/test_exceptions.cpp	/^    m.def("modulenotfound_exception_matches_base", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591402	tests/test_exceptions.cpp	/^    m.def("throw_already_set", [](bool err) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool err) 
__anon52c2ac591502	tests/test_exceptions.cpp	/^    m.def("python_call_in_destructor", [](const py::dict &d) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &d) 
__anon52c2ac591602	tests/test_exceptions.cpp	/^    m.def("python_alreadyset_in_destructor", [](const py::str &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::str &s) 
__anon52c2ac591702	tests/test_exceptions.cpp	/^          [m](const py::object &exc_type, const py::function &f, const py::args &args) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &exc_type, const py::function &f, const py::args &args) 
__anon52c2ac591802	tests/test_exceptions.cpp	/^    m.def("simple_bool_passthrough", [](bool x) { return x; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool x) 
__anon52c2ac591902	tests/test_exceptions.cpp	/^    m.def("throw_should_be_translated_to_key_error", []() { throw shared_exception(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591a02	tests/test_exceptions.cpp	/^    m.def("raise_from", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591b02	tests/test_exceptions.cpp	/^    m.def("raise_from_already_set", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591c02	tests/test_exceptions.cpp	/^    m.def("throw_nested_exception", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591d02	tests/test_exceptions.cpp	/^    m.def("error_already_set_what", [](const py::object &exc_type, const py::object &exc_value) /;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &exc_type, const py::object &exc_value) 
__anon52c2ac591e02	tests/test_exceptions.cpp	/^    m.def("test_cross_module_interleaved_error_already_set", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac591f02	tests/test_exceptions.cpp	/^    m.def("test_error_already_set_double_restore", [](bool dry_run) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(bool dry_run) 
__anon52c2ac592002	tests/test_exceptions.cpp	/^    m.def("test_pypy_oserror_normalization", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon52c2ac592102	tests/test_exceptions.cpp	/^    m.def("test_fn_cast_int", [](const py::function &fn) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &fn) 
__anon5facd8600102	tests/test_chrono.cpp	/^    m.def("test_chrono1", []() { return std::chrono::system_clock::now(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon5facd8600202	tests/test_chrono.cpp	/^    m.def("test_chrono2", [](system_time t) { return t; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(system_time t) 
__anon5facd8600302	tests/test_chrono.cpp	/^    m.def("test_chrono3", [](std::chrono::system_clock::duration d) { return d; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::chrono::system_clock::duration d) 
__anon5facd8600402	tests/test_chrono.cpp	/^    m.def("test_chrono4", [](system_time a, system_time b) { return a - b; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(system_time a, system_time b) 
__anon5facd8600502	tests/test_chrono.cpp	/^    m.def("test_chrono5", []() { return std::chrono::steady_clock::now(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon5facd8600602	tests/test_chrono.cpp	/^    m.def("test_chrono6", [](steady_time t) { return t; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(steady_time t) 
__anon5facd8600702	tests/test_chrono.cpp	/^    m.def("test_chrono7", [](std::chrono::microseconds t) { return t; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::chrono::microseconds t) 
__anon5facd8600802	tests/test_chrono.cpp	/^          [](std::chrono::duration<float> a, std::chrono::duration<float> b) { return a - b; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::chrono::duration<float> a, std::chrono::duration<float> b) 
__anon5facd8600902	tests/test_chrono.cpp	/^          [](timestamp start, timespan delta) -> timestamp { return start + delta; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:timestamp	file:	signature:(timestamp start, timespan delta) 
__anon6c6aae540102	include/pybind11/stl_bind.h	/^        [](const Vector &v, const T &x) { return std::count(v.begin(), v.end(), x); },$/;"	f	function:vector_if_equal_operator	file:	signature:(const Vector &v, const T &x) 
__anon6c6aae540202	include/pybind11/stl_bind.h	/^        [](Vector &v, const T &x) {$/;"	f	function:vector_if_equal_operator	file:	signature:(Vector &v, const T &x) 
__anon6c6aae540302	include/pybind11/stl_bind.h	/^        [](const Vector &v, const T &x) { return std::find(v.begin(), v.end(), x) != v.end(); },$/;"	f	function:vector_if_equal_operator	file:	signature:(const Vector &v, const T &x) 
__anon6c6aae540402	include/pybind11/stl_bind.h	/^    auto wrap_i = [](DiffType i, SizeType n) {$/;"	f	function:vector_modifiers	file:	signature:(DiffType i, SizeType n) 
__anon6c6aae540502	include/pybind11/stl_bind.h	/^        [](Vector &v, const T &value) { v.push_back(value); },$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, const T &value) 
__anon6c6aae540602	include/pybind11/stl_bind.h	/^    cl.def(init([](const iterable &it) {$/;"	f	function:vector_modifiers	file:	signature:(const iterable &it) 
__anon6c6aae540702	include/pybind11/stl_bind.h	/^        "clear", [](Vector &v) { v.clear(); }, "Clear the contents");$/;"	f	function:vector_modifiers	file:	signature:(Vector &v) 
__anon6c6aae540802	include/pybind11/stl_bind.h	/^        [](Vector &v, const Vector &src) { v.insert(v.end(), src.begin(), src.end()); },$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, const Vector &src) 
__anon6c6aae540902	include/pybind11/stl_bind.h	/^        [](Vector &v, const iterable &it) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, const iterable &it) 
__anon6c6aae540a02	include/pybind11/stl_bind.h	/^        [](Vector &v, DiffType i, const T &x) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, DiffType i, const T &x) 
__anon6c6aae540b02	include/pybind11/stl_bind.h	/^        [](Vector &v) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v) 
__anon6c6aae540c02	include/pybind11/stl_bind.h	/^        [wrap_i](Vector &v, DiffType i) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, DiffType i) 
__anon6c6aae540d02	include/pybind11/stl_bind.h	/^    cl.def("__setitem__", [wrap_i](Vector &v, DiffType i, const T &t) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, DiffType i, const T &t) 
__anon6c6aae540e02	include/pybind11/stl_bind.h	/^        [](const Vector &v, const slice &slice) -> Vector * {$/;"	f	function:vector_modifiers	typeref:typename:Vector *	file:	signature:(const Vector &v, const slice &slice) 
__anon6c6aae540f02	include/pybind11/stl_bind.h	/^        [](Vector &v, const slice &slice, const Vector &value) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, const slice &slice, const Vector &value) 
__anon6c6aae541002	include/pybind11/stl_bind.h	/^        [wrap_i](Vector &v, DiffType i) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, DiffType i) 
__anon6c6aae541102	include/pybind11/stl_bind.h	/^        [](Vector &v, const slice &slice) {$/;"	f	function:vector_modifiers	file:	signature:(Vector &v, const slice &slice) 
__anon6c6aae541202	include/pybind11/stl_bind.h	/^    auto wrap_i = [](DiffType i, SizeType n) {$/;"	f	function:vector_accessor	file:	signature:(DiffType i, SizeType n) 
__anon6c6aae541302	include/pybind11/stl_bind.h	/^        [wrap_i](Vector &v, DiffType i) -> T & {$/;"	f	function:vector_accessor	typeref:typename:T &	file:	signature:(Vector &v, DiffType i) 
__anon6c6aae541402	include/pybind11/stl_bind.h	/^        [](Vector &v) {$/;"	f	function:vector_accessor	file:	signature:(Vector &v) 
__anon6c6aae541502	include/pybind11/stl_bind.h	/^    cl.def("__getitem__", [](const Vector &v, DiffType i) -> T {$/;"	f	function:vector_accessor	typeref:typename:T	file:	signature:(const Vector &v, DiffType i) 
__anon6c6aae541602	include/pybind11/stl_bind.h	/^        [](Vector &v) {$/;"	f	function:vector_accessor	file:	signature:(Vector &v) 
__anon6c6aae541702	include/pybind11/stl_bind.h	/^        [name](Vector &v) {$/;"	f	function:vector_if_insertion_operator	file:	signature:(Vector &v) 
__anon6c6aae541802	include/pybind11/stl_bind.h	/^    cl.def_buffer([](Vector &v) -> buffer_info {$/;"	f	function:vector_buffer_impl	typeref:typename:buffer_info	file:	signature:(Vector &v) 
__anon6c6aae541902	include/pybind11/stl_bind.h	/^    cl.def(init([](const buffer &buf) {$/;"	f	function:vector_buffer_impl	file:	signature:(const buffer &buf) 
__anon6c6aae541a02	include/pybind11/stl_bind.h	/^        [](const Vector &v) -> bool { return !v.empty(); },$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:bool	file:	signature:(const Vector &v) 
__anon6c6aae541b02	include/pybind11/stl_bind.h	/^    cl.def("__setitem__", [](Map &m, const KeyType &k, const MappedType &v) {$/;"	f	function:map_assignment	file:	signature:(Map &m, const KeyType &k, const MappedType &v) 
__anon6c6aae541c02	include/pybind11/stl_bind.h	/^    cl.def("__setitem__", [](Map &m, const KeyType &k, const MappedType &v) {$/;"	f	function:map_assignment	file:	signature:(Map &m, const KeyType &k, const MappedType &v) 
__anon6c6aae541d02	include/pybind11/stl_bind.h	/^        [name](Map &m) {$/;"	f	function:map_if_insertion_operator	file:	signature:(Map &m) 
__anon6c6aae541e02	include/pybind11/stl_bind.h	/^        [](const Map &m) -> bool { return !m.empty(); },$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:bool	file:	signature:(const Map &m) 
__anon6c6aae541f02	include/pybind11/stl_bind.h	/^        [](Map &m) { return make_key_iterator(m.begin(), m.end()); },$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(Map &m) 
__anon6c6aae542002	include/pybind11/stl_bind.h	/^        [](Map &m) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(Map &m) 
__anon6c6aae542102	include/pybind11/stl_bind.h	/^        [](Map &m) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(Map &m) 
__anon6c6aae542202	include/pybind11/stl_bind.h	/^        [](Map &m) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(Map &m) 
__anon6c6aae542302	include/pybind11/stl_bind.h	/^        [](Map &m, const KeyType &k) -> MappedType & {$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:MappedType &	file:	signature:(Map &m, const KeyType &k) 
__anon6c6aae542402	include/pybind11/stl_bind.h	/^    cl.def("__contains__", [](Map &m, const KeyType &k) -> bool {$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:bool	file:	signature:(Map &m, const KeyType &k) 
__anon6c6aae542502	include/pybind11/stl_bind.h	/^    cl.def("__contains__", [](Map &, const object &) -> bool { return false; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:bool	file:	signature:(Map &, const object &) 
__anon6c6aae542602	include/pybind11/stl_bind.h	/^    cl.def("__delitem__", [](Map &m, const KeyType &k) {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(Map &m, const KeyType &k) 
__anon6d3ce4900102	include/pybind11/cast.h	/^        auto index_check = [](PyObject *o) { return PyIndex_Check(o); };$/;"	f	function:type_caster::load	file:	signature:(PyObject *o) 
__anon6d3ce4900202	include/pybind11/cast.h	/^        auto index_check = [](PyObject *o) { return hasattr(o, "__index__"); };$/;"	f	function:type_caster::load	file:	signature:(PyObject *o) 
__anon7668354e0102	tests/test_numpy_array.cpp	/^        .def("__repr__", [](const DtypeCheck &self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const DtypeCheck &self) 
__anon7668354e0202	tests/test_numpy_array.cpp	/^        .def("__repr__", [](const DtypeSizeCheck &self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const DtypeSizeCheck &self) 
__anon7668354e0302	tests/test_numpy_array.cpp	/^    sm.def("ndim", [](const arr &a) { return a.ndim(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0402	tests/test_numpy_array.cpp	/^    sm.def("shape", [](const arr &a) { return arr(a.ndim(), a.shape()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0502	tests/test_numpy_array.cpp	/^    sm.def("shape", [](const arr &a, py::ssize_t dim) { return a.shape(dim); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a, py::ssize_t dim) 
__anon7668354e0602	tests/test_numpy_array.cpp	/^    sm.def("strides", [](const arr &a) { return arr(a.ndim(), a.strides()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0702	tests/test_numpy_array.cpp	/^    sm.def("strides", [](const arr &a, py::ssize_t dim) { return a.strides(dim); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a, py::ssize_t dim) 
__anon7668354e0802	tests/test_numpy_array.cpp	/^    sm.def("writeable", [](const arr &a) { return a.writeable(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0902	tests/test_numpy_array.cpp	/^    sm.def("size", [](const arr &a) { return a.size(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0a02	tests/test_numpy_array.cpp	/^    sm.def("itemsize", [](const arr &a) { return a.itemsize(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0b02	tests/test_numpy_array.cpp	/^    sm.def("nbytes", [](const arr &a) { return a.nbytes(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0c02	tests/test_numpy_array.cpp	/^    sm.def("owndata", [](const arr &a) { return a.owndata(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const arr &a) 
__anon7668354e0d02	tests/test_numpy_array.cpp	/^    sm.def("make_f_array", [] { return py::array_t<float>({2, 2}, {4, 8}); });$/;"	f	function:TEST_SUBMODULE	file:
__anon7668354e0e02	tests/test_numpy_array.cpp	/^    sm.def("make_c_array", [] { return py::array_t<float>({2, 2}, {8, 4}); });$/;"	f	function:TEST_SUBMODULE	file:
__anon7668354e0f02	tests/test_numpy_array.cpp	/^    sm.def("make_empty_shaped_array", [] { return py::array(py::dtype("f"), {}, {}); });$/;"	f	function:TEST_SUBMODULE	file:
__anon7668354e1002	tests/test_numpy_array.cpp	/^    sm.def("scalar_int", []() { return py::array(py::dtype("i"), {}, {}, &data_i); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e1102	tests/test_numpy_array.cpp	/^    sm.def("wrap", [](const py::array &a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array &a) 
__anon7668354e1202	tests/test_numpy_array.cpp	/^        .def("numpy_view", [](py::object &obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &obj) 
__anon7668354e1302	tests/test_numpy_array.cpp	/^    sm.def("function_taking_uint64", [](uint64_t) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(uint64_t) 
__anon7668354e1402	tests/test_numpy_array.cpp	/^    sm.def("isinstance_untyped", [](py::object yes, py::object no) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object yes, py::object no) 
__anon7668354e1502	tests/test_numpy_array.cpp	/^    sm.def("isinstance_typed", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon7668354e1602	tests/test_numpy_array.cpp	/^    sm.def("default_constructors", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e1702	tests/test_numpy_array.cpp	/^    sm.def("converting_constructors", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon7668354e1802	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<double> &) { return "double"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e1902	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<float> &) { return "float"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<float> &) 
__anon7668354e1a02	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<int> &) { return "int"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<int> &) 
__anon7668354e1b02	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<unsigned short> &) { return "unsigned short"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<unsigned short> &) 
__anon7668354e1c02	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<long long> &) { return "long long"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<long long> &) 
__anon7668354e1d02	tests/test_numpy_array.cpp	/^           [](const py::array_t<std::complex<double>> &) { return "double complex"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<std::complex<double>> &) 
__anon7668354e1e02	tests/test_numpy_array.cpp	/^    sm.def("overloaded", [](const py::array_t<std::complex<float>> &) { return "float complex"; /;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<std::complex<float>> &) 
__anon7668354e1f02	tests/test_numpy_array.cpp	/^           [](const py::array_t<std::complex<double>> &) { return "double complex"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<std::complex<double>> &) 
__anon7668354e2002	tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](const py::array_t<double> &) { return "double"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e2102	tests/test_numpy_array.cpp	/^           [](const py::array_t<std::complex<float>> &) { return "float complex"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<std::complex<float>> &) 
__anon7668354e2202	tests/test_numpy_array.cpp	/^    sm.def("overloaded2", [](const py::array_t<float> &) { return "float"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<float> &) 
__anon7668354e2302	tests/test_numpy_array.cpp	/^        "overloaded3", [](const py::array_t<int> &) { return "int"; }, py::arg{}.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<int> &) 
__anon7668354e2402	tests/test_numpy_array.cpp	/^        "overloaded3", [](const py::array_t<int> &) { return "int"; }, py::arg{}.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<int> &) 
__anon7668354e2502	tests/test_numpy_array.cpp	/^        [](const py::array_t<double> &) { return "double"; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e2602	tests/test_numpy_array.cpp	/^        py::arg{}.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e2702	tests/test_numpy_array.cpp	/^    sm.def("overloaded4", [](const py::array_t<long long, 0> &) { return "long long"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<long long, 0> &) 
__anon7668354e2802	tests/test_numpy_array.cpp	/^    sm.def("overloaded4", [](const py::array_t<double, 0> &) { return "double"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, 0> &) 
__anon7668354e2902	tests/test_numpy_array.cpp	/^    sm.def("overloaded5", [](const py::array_t<unsigned int> &) { return "unsigned int"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<unsigned int> &) 
__anon7668354e2a02	tests/test_numpy_array.cpp	/^    sm.def("overloaded5", [](const py::array_t<double> &) { return "double"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e2b02	tests/test_numpy_array.cpp	/^    sm.def("issue685", [](const std::string &) { return "string"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &) 
__anon7668354e2c02	tests/test_numpy_array.cpp	/^    sm.def("issue685", [](const py::array &) { return "array"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array &) 
__anon7668354e2d02	tests/test_numpy_array.cpp	/^    sm.def("issue685", [](const py::object &) { return "other"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anon7668354e2e02	tests/test_numpy_array.cpp	/^        [](py::array_t<double> a, double v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a, double v) 
__anon7668354e2f02	tests/test_numpy_array.cpp	/^        py::arg{}.noconvert(),$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a, double v) 
__anon7668354e3002	tests/test_numpy_array.cpp	/^    sm.def("proxy_init3", [](double start) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(double start) 
__anon7668354e3102	tests/test_numpy_array.cpp	/^    sm.def("proxy_init3F", [](double start) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(double start) 
__anon7668354e3202	tests/test_numpy_array.cpp	/^    sm.def("proxy_squared_L2_norm", [](const py::array_t<double> &a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &a) 
__anon7668354e3302	tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries2", [](py::array_t<double> a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e3402	tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries1_const_ref", [](py::array_t<double> a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e3502	tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries2_const_ref", [](py::array_t<double> a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e3602	tests/test_numpy_array.cpp	/^        [](py::array_t<double> a, double v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a, double v) 
__anon7668354e3702	tests/test_numpy_array.cpp	/^        py::arg{}.noconvert(),$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a, double v) 
__anon7668354e3802	tests/test_numpy_array.cpp	/^    sm.def("proxy_init3_dyn", [](double start) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(double start) 
__anon7668354e3902	tests/test_numpy_array.cpp	/^    sm.def("proxy_auxiliaries2_dyn", [](py::array_t<double> a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e3a02	tests/test_numpy_array.cpp	/^    sm.def("array_auxiliaries2", [](py::array_t<double> a) { return auxiliaries(a, a); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e3b02	tests/test_numpy_array.cpp	/^    sm.def("array_fail_test", []() { return py::array(py::object()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e3c02	tests/test_numpy_array.cpp	/^    sm.def("array_t_fail_test", []() { return py::array_t<double>(py::object()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e3d02	tests/test_numpy_array.cpp	/^    sm.def("array_fail_test_negative_size", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e3e02	tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list1", []() { return py::array_t<float>(1); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e3f02	tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list2", []() { return py::array_t<float>({1, 2}); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e4002	tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list3", []() { return py::array_t<float>({1, 2, 3}); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e4102	tests/test_numpy_array.cpp	/^    sm.def("array_initializer_list4", []() { return py::array_t<float>({1, 2, 3, 4}); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon7668354e4202	tests/test_numpy_array.cpp	/^    sm.def("array_reshape2", [](py::array_t<double> a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a) 
__anon7668354e4302	tests/test_numpy_array.cpp	/^    sm.def("array_resize3", [](py::array_t<double> a, size_t N, bool refcheck) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<double> a, size_t N, bool refcheck) 
__anon7668354e4402	tests/test_numpy_array.cpp	/^    sm.def("create_and_resize", [](size_t N) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(size_t N) 
__anon7668354e4502	tests/test_numpy_array.cpp	/^           [](py::array_t<uint8_t> a, const std::string &dtype) { return a.view(dtype); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<uint8_t> a, const std::string &dtype) 
__anon7668354e4602	tests/test_numpy_array.cpp	/^    sm.def("reshape_initializer_list", [](py::array_t<int> a, size_t N, size_t M, size_t O) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<int> a, size_t N, size_t M, size_t O) 
__anon7668354e4702	tests/test_numpy_array.cpp	/^    sm.def("reshape_tuple", [](py::array_t<int> a, const std::vector<int> &new_shape) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<int> a, const std::vector<int> &new_shape) 
__anon7668354e4802	tests/test_numpy_array.cpp	/^           [](const py::array &a) { return a[py::make_tuple(0, py::ellipsis(), 0)]; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array &a) 
__anon7668354e4902	tests/test_numpy_array.cpp	/^        "accept_double", [](const py::array_t<double, 0> &) {}, py::arg("a"));$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, 0> &) 
__anon7668354e4a02	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast> &) 
__anon7668354e4b02	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::c_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::c_style> &) 
__anon7668354e4c02	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast | py::array::c_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast | py::array::c_style> &) 
__anon7668354e4d02	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::f_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::f_style> &) 
__anon7668354e4e02	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast | py::array::f_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast | py::array::f_style> &) 
__anon7668354e4f02	tests/test_numpy_array.cpp	/^        "accept_double_noconvert", [](const py::array_t<double, 0> &) {}, "a"_a.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, 0> &) 
__anon7668354e5002	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast> &) 
__anon7668354e5102	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::c_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::c_style> &) 
__anon7668354e5202	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast | py::array::c_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast | py::array::c_style> &) 
__anon7668354e5302	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::f_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::f_style> &) 
__anon7668354e5402	tests/test_numpy_array.cpp	/^        [](const py::array_t<double, py::array::forcecast | py::array::f_style> &) {},$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double, py::array::forcecast | py::array::f_style> &) 
__anon7668354e5502	tests/test_numpy_array.cpp	/^    sm.def("test_fmt_desc_float", [](const py::array_t<float> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<float> &) 
__anon7668354e5602	tests/test_numpy_array.cpp	/^    sm.def("test_fmt_desc_double", [](const py::array_t<double> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<double> &) 
__anon7668354e5702	tests/test_numpy_array.cpp	/^    sm.def("test_fmt_desc_const_float", [](const py::array_t<const float> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<const float> &) 
__anon7668354e5802	tests/test_numpy_array.cpp	/^    sm.def("test_fmt_desc_const_double", [](const py::array_t<const double> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<const double> &) 
__anon7668354e5902	tests/test_numpy_array.cpp	/^    sm.def("round_trip_float", [](double d) { return d; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(double d) 
__anon7668354e5a02	tests/test_numpy_array.cpp	/^           [](const py::array_t<PyObject *> &objs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<PyObject *> &objs) 
__anon7668354e5b02	tests/test_numpy_array.cpp	/^           [](const py::array_t<PyObject *> &objs) -> py::list { return objs; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::list	file:	signature:(const py::array_t<PyObject *> &objs) 
__anon7668354e5c02	tests/test_numpy_array.cpp	/^    sm.def("return_array_pyobject_ptr_cpp_loop", [](const py::list &objs) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::list &objs) 
__anon7668354e5d02	tests/test_numpy_array.cpp	/^           [](const py::list &objs) -> py::array_t<PyObject *> { return objs; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::array_t<PyObject * >	file:	signature:(const py::list &objs) 
__anon837ffe4f0111	tests/test_thread.cpp	/^namespace {$/;"	n	file:
__anon837ffe4f0111::IntStruct	tests/test_thread.cpp	/^struct IntStruct {$/;"	s	namespace:__anon837ffe4f0111	file:
__anon837ffe4f0111::IntStruct::IntStruct	tests/test_thread.cpp	/^    IntStruct(const IntStruct &) = default;$/;"	p	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:(const IntStruct &)
__anon837ffe4f0111::IntStruct::IntStruct	tests/test_thread.cpp	/^    explicit IntStruct(int v) : value(v){};$/;"	f	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:(int v)
__anon837ffe4f0111::IntStruct::operator =	tests/test_thread.cpp	/^    IntStruct &operator=(const IntStruct &) = default;$/;"	p	struct:__anon837ffe4f0111::IntStruct	typeref:typename:IntStruct &	file:	access:public	signature:(const IntStruct &)
__anon837ffe4f0111::IntStruct::value	tests/test_thread.cpp	/^    int value;$/;"	m	struct:__anon837ffe4f0111::IntStruct	typeref:typename:int	file:	access:public
__anon837ffe4f0111::IntStruct::~IntStruct	tests/test_thread.cpp	/^    ~IntStruct() { value = -value; }$/;"	f	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:()
__anon837ffe4f0202	tests/test_thread.cpp	/^    py::class_<IntStruct>(m, "IntStruct").def(py::init([](const int i) { return IntStruct(i); })/;"	f	function:TEST_SUBMODULE	file:	signature:(const int i) 
__anon837ffe4f0302	tests/test_thread.cpp	/^    m.def("test", [](int expected, const IntStruct &in) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int expected, const IntStruct &in) 
__anon837ffe4f0402	tests/test_thread.cpp	/^        [](int expected, const IntStruct &in) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int expected, const IntStruct &in) 
__anon83ce96ce0111	tests/cross_module_interleaved_error_already_set.cpp	/^namespace {$/;"	n	file:
__anon83ce96ce0111::interleaved_error_already_set	tests/cross_module_interleaved_error_already_set.cpp	/^void interleaved_error_already_set() {$/;"	f	namespace:__anon83ce96ce0111	typeref:typename:void	signature:()
__anon83ce96ce0111::kModuleName	tests/cross_module_interleaved_error_already_set.cpp	/^constexpr char kModuleName[] = "cross_module_interleaved_error_already_set";$/;"	v	namespace:__anon83ce96ce0111	typeref:typename:char[]
__anon83ce96ce0111::moduledef	tests/cross_module_interleaved_error_already_set.cpp	/^struct PyModuleDef moduledef = {$/;"	v	namespace:__anon83ce96ce0111	typeref:struct:PyModuleDef
__anon896e5fad0102	include/pybind11/pybind11.h	/^            [f](Class *c, Arg... args) -> Return { return (c->*f)(std::forward<Arg>(args)...); }/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:	signature:(Class *c, Arg... args) 
__anon896e5fad0202	include/pybind11/pybind11.h	/^            [f](Class *c, Arg... args) -> Return { return (c->*f)(std::forward<Arg>(args)...); }/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:	signature:(Class *c, Arg... args) 
__anon896e5fad0302	include/pybind11/pybind11.h	/^                       Arg... args) -> Return { return (c->*f)(std::forward<Arg>(args)...); },$/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:	signature:(const Class *c, Arg... args) 
__anon896e5fad0402	include/pybind11/pybind11.h	/^                       Arg... args) -> Return { return (c->*f)(std::forward<Arg>(args)...); },$/;"	f	function:cpp_function::cpp_function	typeref:typename:Return	file:	signature:(const Class *c, Arg... args) 
__anon896e5fad0502	include/pybind11/pybind11.h	/^                rec->free_data = [](function_record *r) {$/;"	f	function:cpp_function::initialize	file:	signature:(function_record *r) 
__anon896e5fad0602	include/pybind11/pybind11.h	/^            rec->free_data = [](function_record *r) { delete ((capture *) r->data[0]); };$/;"	f	function:cpp_function::initialize	file:	signature:(function_record *r) 
__anon896e5fad0702	include/pybind11/pybind11.h	/^        rec->impl = [](function_call &call) -> handle {$/;"	f	function:cpp_function::initialize	typeref:typename:handle	file:	signature:(function_call &call) 
__anon896e5fad0802	include/pybind11/pybind11.h	/^                                [](void *ptr) { destruct((detail::function_record *) ptr); });$/;"	f	function:cpp_function::initialize_generic	file:	signature:(void *ptr) 
__anon896e5fad0902	include/pybind11/pybind11.h	/^        auto append_note_if_missing_header_is_suspected = [](std::string &msg) {$/;"	f	function:cpp_function::dispatcher	file:	signature:(std::string &msg) 
__anon896e5fad0a02	include/pybind11/pybind11.h	/^        rec.add_base(typeid(Base), [](void *src) -> void * {$/;"	f	function:class_::add_base	typeref:typename:void *	file:	signature:(void *src) 
__anon896e5fad0b02	include/pybind11/pybind11.h	/^            [](PyObject *obj, void *ptr) -> buffer_info * {$/;"	f	function:class_::def_buffer	typeref:typename:buffer_info *	file:	signature:(PyObject *obj, void *ptr) 
__anon896e5fad0c02	include/pybind11/pybind11.h	/^        weakref(m_ptr, cpp_function([ptr](handle wr) {$/;"	f	function:class_::def_buffer	file:	signature:(handle wr) 
__anon896e5fad0d02	include/pybind11/pybind11.h	/^        return def_buffer([func](type &obj) { return (obj.*func)(); });$/;"	f	function:class_::def_buffer	file:	signature:(type &obj) 
__anon896e5fad0e02	include/pybind11/pybind11.h	/^        return def_buffer([func](const type &obj) { return (obj.*func)(); });$/;"	f	function:class_::def_buffer	file:	signature:(const type &obj) 
__anon896e5fad0f02	include/pybind11/pybind11.h	/^        cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this)),$/;"	f	function:class_::def_readwrite	typeref:typename:const D &	file:	signature:(const type &c) 
__anon896e5fad1002	include/pybind11/pybind11.h	/^            fset([pm](type &c, const D &value) { c.*pm = value; }, is_method(*this));$/;"	f	function:class_::def_readwrite	file:	signature:(type &c, const D &value) 
__anon896e5fad1102	include/pybind11/pybind11.h	/^        cpp_function fget([pm](const type &c) -> const D & { return c.*pm; }, is_method(*this));$/;"	f	function:class_::def_readonly	typeref:typename:const D &	file:	signature:(const type &c) 
__anon896e5fad1202	include/pybind11/pybind11.h	/^        cpp_function fget([pm](const object &) -> const D & { return *pm; }, scope(*this)),$/;"	f	function:class_::def_readwrite_static	typeref:typename:const D &	file:	signature:(const object &) 
__anon896e5fad1302	include/pybind11/pybind11.h	/^            fset([pm](const object &, const D &value) { *pm = value; }, scope(*this));$/;"	f	function:class_::def_readwrite_static	file:	signature:(const object &, const D &value) 
__anon896e5fad1402	include/pybind11/pybind11.h	/^        cpp_function fget([pm](const object &) -> const D & { return *pm; }, scope(*this));$/;"	f	function:class_::def_readonly_static	typeref:typename:const D &	file:	signature:(const object &) 
__anon896e5fad1502	include/pybind11/pybind11.h	/^            [](const object &arg) -> str {$/;"	f	function:enum_base::init	typeref:typename:str	file:	signature:(const object &arg) 
__anon896e5fad1602	include/pybind11/pybind11.h	/^            [](handle arg) -> str {$/;"	f	function:enum_base::init	typeref:typename:str	file:	signature:(handle arg) 
__anon896e5fad1702	include/pybind11/pybind11.h	/^                    [](handle arg) -> std::string {$/;"	f	function:enum_base::init	typeref:typename:std::string	file:	signature:(handle arg) 
__anon896e5fad1802	include/pybind11/pybind11.h	/^                                                         [](handle arg) -> dict {$/;"	f	function:enum_base::init	typeref:typename:dict	file:	signature:(handle arg) 
__anon896e5fad1902	include/pybind11/pybind11.h	/^                    = cpp_function([](const object &arg) { return ~(int_(arg)); },$/;"	f	function:enum_base::init	file:	signature:(const object &arg) 
__anon896e5fad1a02	include/pybind11/pybind11.h	/^            [](const object &arg) { return int_(arg); }, name("__getstate__"), is_method(m_base)/;"	f	function:enum_base::init	file:	signature:(const object &arg) 
__anon896e5fad1b02	include/pybind11/pybind11.h	/^            [](const object &arg) { return int_(arg); }, name("__hash__"), is_method(m_base));$/;"	f	function:enum_base::init	file:	signature:(const object &arg) 
__anon896e5fad1c02	include/pybind11/pybind11.h	/^        def(init([](Scalar i) { return static_cast<Type>(i); }), arg("value"));$/;"	f	function:enum_::enum_	file:	signature:(Scalar i) 
__anon896e5fad1d02	include/pybind11/pybind11.h	/^        def_property_readonly("value", [](Type value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:	signature:(Type value) 
__anon896e5fad1e02	include/pybind11/pybind11.h	/^        def("__int__", [](Type value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:	signature:(Type value) 
__anon896e5fad1f02	include/pybind11/pybind11.h	/^        def("__index__", [](Type value) { return (Scalar) value; });$/;"	f	function:enum_::enum_	file:	signature:(Type value) 
__anon896e5fad2002	include/pybind11/pybind11.h	/^            [](detail::value_and_holder &v_h, Scalar arg) {$/;"	f	function:enum_::enum_	file:	signature:(detail::value_and_holder &v_h, Scalar arg) 
__anon896e5fad2102	include/pybind11/pybind11.h	/^        cpp_function disable_lifesupport([patient](handle weakref) {$/;"	f	function:PYBIND11_NAMESPACE_BEGIN	file:	signature:(handle weakref) 
__anon896e5fad2202	include/pybind11/pybind11.h	/^    auto get_arg = [&](size_t n) {$/;"	f	function:keep_alive_impl	file:	signature:(size_t n) 
__anon896e5fad2302	include/pybind11/pybind11.h	/^        weakref((PyObject *) type, cpp_function([type](handle wr) {$/;"	f	function:all_type_info_get_cache	file:	signature:(handle wr) 
__anon896e5fad2402	include/pybind11/pybind11.h	/^            .def("__iter__", [](state &s) -> state & { return s; })$/;"	f	function:make_iterator_impl	typeref:typename:state &	file:	signature:(state &s) 
__anon896e5fad2502	include/pybind11/pybind11.h	/^                [](state &s) -> ValueType {$/;"	f	function:make_iterator_impl	typeref:typename:ValueType	file:	signature:(state &s) 
__anon896e5fad2602	include/pybind11/pybind11.h	/^    auto implicit_caster = [](PyObject *obj, PyTypeObject *type) -> PyObject * {$/;"	f	function:implicitly_convertible	typeref:typename:PyObject *	file:	signature:(PyObject *obj, PyTypeObject *type) 
__anon896e5fad2702	include/pybind11/pybind11.h	/^    register_func([](std::exception_ptr p) {$/;"	f	function:register_exception_impl	file:	signature:(std::exception_ptr p) 
__anon9053e2f30102	tests/test_eigen_matrix.cpp	/^    m.def("double_col", [](const Eigen::VectorXf &x) -> Eigen::VectorXf { return 2.0f * x; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::VectorXf	file:	signature:(const Eigen::VectorXf &x) 
__anon9053e2f30202	tests/test_eigen_matrix.cpp	/^          [](const Eigen::RowVectorXf &x) -> Eigen::RowVectorXf { return 2.0f * x; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::RowVectorXf	file:	signature:(const Eigen::RowVectorXf &x) 
__anon9053e2f30302	tests/test_eigen_matrix.cpp	/^          [](const Eigen::VectorXcf &x) -> Eigen::VectorXcf { return 2.0f * x; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::VectorXcf	file:	signature:(const Eigen::VectorXcf &x) 
__anon9053e2f30402	tests/test_eigen_matrix.cpp	/^    m.def("double_threec", [](py::EigenDRef<Eigen::Vector3f> x) { x *= 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::Vector3f> x) 
__anon9053e2f30502	tests/test_eigen_matrix.cpp	/^    m.def("double_threer", [](py::EigenDRef<Eigen::RowVector3f> x) { x *= 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::RowVector3f> x) 
__anon9053e2f30602	tests/test_eigen_matrix.cpp	/^    m.def("double_mat_cm", [](const Eigen::MatrixXf &x) -> Eigen::MatrixXf { return 2.0f * x; })/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXf	file:	signature:(const Eigen::MatrixXf &x) 
__anon9053e2f30702	tests/test_eigen_matrix.cpp	/^    m.def("double_mat_rm", [](const DenseMatrixR &x) -> DenseMatrixR { return 2.0f * x; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:DenseMatrixR	file:	signature:(const DenseMatrixR &x) 
__anon9053e2f30802	tests/test_eigen_matrix.cpp	/^          [](const Eigen::Ref<MatrixXdR> &x) -> Eigen::MatrixXd { return x.llt().matrixL(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXd	file:	signature:(const Eigen::Ref<MatrixXdR> &x) 
__anon9053e2f30902	tests/test_eigen_matrix.cpp	/^    m.def("cholesky2", [](const Eigen::Ref<const MatrixXdR> &x) -> Eigen::MatrixXd {$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXd	file:	signature:(const Eigen::Ref<const MatrixXdR> &x) 
__anon9053e2f30a02	tests/test_eigen_matrix.cpp	/^          [](const Eigen::Ref<MatrixXdR> &x) -> Eigen::MatrixXd { return x.llt().matrixL(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXd	file:	signature:(const Eigen::Ref<MatrixXdR> &x) 
__anon9053e2f30b02	tests/test_eigen_matrix.cpp	/^    m.def("cholesky4", [](const Eigen::Ref<const MatrixXdR> &x) -> Eigen::MatrixXd {$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXd	file:	signature:(const Eigen::Ref<const MatrixXdR> &x) 
__anon9053e2f30c02	tests/test_eigen_matrix.cpp	/^    auto add_rm = [](Eigen::Ref<MatrixXdR> x, int r, int c, double v) { x(r, c) += v; };$/;"	f	function:TEST_SUBMODULE	file:	signature:(Eigen::Ref<MatrixXdR> x, int r, int c, double v) 
__anon9053e2f30d02	tests/test_eigen_matrix.cpp	/^    auto add_cm = [](Eigen::Ref<Eigen::MatrixXd> x, int r, int c, double v) { x(r, c) += v; };$/;"	f	function:TEST_SUBMODULE	file:	signature:(Eigen::Ref<Eigen::MatrixXd> x, int r, int c, double v) 
__anon9053e2f30e02	tests/test_eigen_matrix.cpp	/^          [](py::EigenDRef<Eigen::MatrixXd> x, int r, int c, double v) { x(r, c) += v; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::MatrixXd> x, int r, int c, double v) 
__anon9053e2f30f02	tests/test_eigen_matrix.cpp	/^    m.def("get_cm_ref", []() { return Eigen::Ref<Eigen::MatrixXd>(get_cm()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9053e2f31002	tests/test_eigen_matrix.cpp	/^    m.def("get_rm_ref", []() { return Eigen::Ref<MatrixXdR>(get_rm()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9053e2f31102	tests/test_eigen_matrix.cpp	/^    m.def("get_cm_const_ref", []() { return Eigen::Ref<const Eigen::MatrixXd>(get_cm()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9053e2f31202	tests/test_eigen_matrix.cpp	/^    m.def("get_rm_const_ref", []() { return Eigen::Ref<const MatrixXdR>(get_rm()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9053e2f31302	tests/test_eigen_matrix.cpp	/^        [](Eigen::Ref<Eigen::MatrixXd> m, double v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(Eigen::Ref<Eigen::MatrixXd> m, double v) 
__anon9053e2f31402	tests/test_eigen_matrix.cpp	/^        [](py::EigenDRef<Eigen::MatrixXd> m, double v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::MatrixXd> m, double v) 
__anon9053e2f31502	tests/test_eigen_matrix.cpp	/^        [](py::EigenDRef<Eigen::MatrixXd> m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::MatrixXd> m) 
__anon9053e2f31602	tests/test_eigen_matrix.cpp	/^        [](py::EigenDRef<Eigen::MatrixXd> m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::EigenDRef<Eigen::MatrixXd> m) 
__anon9053e2f31702	tests/test_eigen_matrix.cpp	/^    m.def("diagonal", [](const Eigen::Ref<const Eigen::MatrixXd> &x) { return x.diagonal(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<const Eigen::MatrixXd> &x) 
__anon9053e2f31802	tests/test_eigen_matrix.cpp	/^          [](const Eigen::Ref<const Eigen::MatrixXd> &x) { return x.diagonal<1>(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<const Eigen::MatrixXd> &x) 
__anon9053e2f31902	tests/test_eigen_matrix.cpp	/^          [](const Eigen::Ref<const Eigen::MatrixXd> &x, int index) { return x.diagonal(index); /;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<const Eigen::MatrixXd> &x, int index) 
__anon9053e2f31a02	tests/test_eigen_matrix.cpp	/^              int block_cols) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &x_obj, int start_row, int start_col, int block_rows, int block_cols) 
__anon9053e2f31b02	tests/test_eigen_matrix.cpp	/^           int block_cols) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &x_obj, const Eigen::Ref<const Eigen::MatrixXd> &x, int start_row, int start_col, int block_rows, int block_cols) 
__anon9053e2f31c02	tests/test_eigen_matrix.cpp	/^    m.def("incr_diag", [](int k) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int k) 
__anon9053e2f31d02	tests/test_eigen_matrix.cpp	/^          [](const Eigen::MatrixXi &m) { return m.selfadjointView<Eigen::Lower>(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::MatrixXi &m) 
__anon9053e2f31e02	tests/test_eigen_matrix.cpp	/^          [](const Eigen::MatrixXi &m) { return m.selfadjointView<Eigen::Upper>(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::MatrixXi &m) 
__anon9053e2f31f02	tests/test_eigen_matrix.cpp	/^    m.def("fixed_r", [mat]() -> FixedMatrixR { return FixedMatrixR(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:FixedMatrixR	file:	signature:() 
__anon9053e2f32002	tests/test_eigen_matrix.cpp	/^    m.def("fixed_r_const", [mat]() -> const FixedMatrixR { return FixedMatrixR(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const FixedMatrixR	file:	signature:() 
__anon9053e2f32102	tests/test_eigen_matrix.cpp	/^    m.def("fixed_c", [mat]() -> FixedMatrixC { return FixedMatrixC(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:FixedMatrixC	file:	signature:() 
__anon9053e2f32202	tests/test_eigen_matrix.cpp	/^    m.def("fixed_copy_r", [](const FixedMatrixR &m) -> FixedMatrixR { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:FixedMatrixR	file:	signature:(const FixedMatrixR &m) 
__anon9053e2f32302	tests/test_eigen_matrix.cpp	/^    m.def("fixed_copy_c", [](const FixedMatrixC &m) -> FixedMatrixC { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:FixedMatrixC	file:	signature:(const FixedMatrixC &m) 
__anon9053e2f32402	tests/test_eigen_matrix.cpp	/^    m.def("fixed_mutator_r", [](const Eigen::Ref<FixedMatrixR> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<FixedMatrixR> &) 
__anon9053e2f32502	tests/test_eigen_matrix.cpp	/^    m.def("fixed_mutator_c", [](const Eigen::Ref<FixedMatrixC> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<FixedMatrixC> &) 
__anon9053e2f32602	tests/test_eigen_matrix.cpp	/^    m.def("fixed_mutator_a", [](const py::EigenDRef<FixedMatrixC> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::EigenDRef<FixedMatrixC> &) 
__anon9053e2f32702	tests/test_eigen_matrix.cpp	/^    m.def("dense_r", [mat]() -> DenseMatrixR { return DenseMatrixR(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:DenseMatrixR	file:	signature:() 
__anon9053e2f32802	tests/test_eigen_matrix.cpp	/^    m.def("dense_c", [mat]() -> DenseMatrixC { return DenseMatrixC(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:DenseMatrixC	file:	signature:() 
__anon9053e2f32902	tests/test_eigen_matrix.cpp	/^    m.def("dense_copy_r", [](const DenseMatrixR &m) -> DenseMatrixR { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:DenseMatrixR	file:	signature:(const DenseMatrixR &m) 
__anon9053e2f32a02	tests/test_eigen_matrix.cpp	/^    m.def("dense_copy_c", [](const DenseMatrixC &m) -> DenseMatrixC { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:DenseMatrixC	file:	signature:(const DenseMatrixC &m) 
__anon9053e2f32b02	tests/test_eigen_matrix.cpp	/^    m.def("sparse_r", [mat]() -> SparseMatrixR {$/;"	f	function:TEST_SUBMODULE	typeref:typename:SparseMatrixR	file:	signature:() 
__anon9053e2f32c02	tests/test_eigen_matrix.cpp	/^          [mat]() -> SparseMatrixC { return Eigen::SparseView<Eigen::MatrixXf>(mat); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:SparseMatrixC	file:	signature:() 
__anon9053e2f32d02	tests/test_eigen_matrix.cpp	/^    m.def("sparse_copy_r", [](const SparseMatrixR &m) -> SparseMatrixR { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:SparseMatrixR	file:	signature:(const SparseMatrixR &m) 
__anon9053e2f32e02	tests/test_eigen_matrix.cpp	/^    m.def("sparse_copy_c", [](const SparseMatrixC &m) -> SparseMatrixC { return m; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:SparseMatrixC	file:	signature:(const SparseMatrixC &m) 
__anon9053e2f32f02	tests/test_eigen_matrix.cpp	/^    m.def("partial_copy_four_rm_r", [](const FourRowMatrixR &m) -> FourRowMatrixR { return m; })/;"	f	function:TEST_SUBMODULE	typeref:typename:FourRowMatrixR	file:	signature:(const FourRowMatrixR &m) 
__anon9053e2f33002	tests/test_eigen_matrix.cpp	/^    m.def("partial_copy_four_rm_c", [](const FourColMatrixR &m) -> FourColMatrixR { return m; })/;"	f	function:TEST_SUBMODULE	typeref:typename:FourColMatrixR	file:	signature:(const FourColMatrixR &m) 
__anon9053e2f33102	tests/test_eigen_matrix.cpp	/^    m.def("partial_copy_four_cm_r", [](const FourRowMatrixC &m) -> FourRowMatrixC { return m; })/;"	f	function:TEST_SUBMODULE	typeref:typename:FourRowMatrixC	file:	signature:(const FourRowMatrixC &m) 
__anon9053e2f33202	tests/test_eigen_matrix.cpp	/^    m.def("partial_copy_four_cm_c", [](const FourColMatrixC &m) -> FourColMatrixC { return m; })/;"	f	function:TEST_SUBMODULE	typeref:typename:FourColMatrixC	file:	signature:(const FourColMatrixC &m) 
__anon9053e2f33302	tests/test_eigen_matrix.cpp	/^    m.def("cpp_copy", [](py::handle m) { return m.cast<Eigen::MatrixXd>()(1, 0); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle m) 
__anon9053e2f33402	tests/test_eigen_matrix.cpp	/^    m.def("cpp_ref_c", [](py::handle m) { return m.cast<Eigen::Ref<Eigen::MatrixXd>>()(1, 0); })/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle m) 
__anon9053e2f33502	tests/test_eigen_matrix.cpp	/^    m.def("cpp_ref_r", [](py::handle m) { return m.cast<Eigen::Ref<MatrixXdR>>()(1, 0); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle m) 
__anon9053e2f33602	tests/test_eigen_matrix.cpp	/^          [](py::handle m) { return m.cast<py::EigenDRef<Eigen::MatrixXd>>()(1, 0); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle m) 
__anon9053e2f33702	tests/test_eigen_matrix.cpp	/^        [](const Eigen::Ref<const Eigen::MatrixXd> &m) -> double { return get_elem(m); },$/;"	f	function:TEST_SUBMODULE	typeref:typename:double	file:	signature:(const Eigen::Ref<const Eigen::MatrixXd> &m) 
__anon9053e2f33802	tests/test_eigen_matrix.cpp	/^        py::arg{}.noconvert());$/;"	f	function:TEST_SUBMODULE	typeref:typename:double{},py::arg	file:	signature:(const Eigen::Ref<const Eigen::MatrixXd> &m) 
__anon9053e2f33902	tests/test_eigen_matrix.cpp	/^        [](Eigen::Ref<const Eigen::Matrix<long, -1, -1, Eigen::RowMajor>> &m) -> long {$/;"	f	function:TEST_SUBMODULE	typeref:typename:long	file:	signature:(Eigen::Ref<const Eigen::Matrix<long, -1, -1, Eigen::RowMajor>> &m) 
__anon9053e2f33a02	tests/test_eigen_matrix.cpp	/^        py::arg{}.noconvert());$/;"	f	function:TEST_SUBMODULE	typeref:typename:long{},py::arg	file:	signature:(Eigen::Ref<const Eigen::Matrix<long, -1, -1, Eigen::RowMajor>> &m) 
__anon9053e2f33b02	tests/test_eigen_matrix.cpp	/^    m.def("iss1105_col", [](const Eigen::VectorXd &) { return true; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::VectorXd &) 
__anon9053e2f33c02	tests/test_eigen_matrix.cpp	/^    m.def("iss1105_row", [](const Eigen::RowVectorXd &) { return true; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::RowVectorXd &) 
__anon9053e2f33d02	tests/test_eigen_matrix.cpp	/^           const py::EigenDRef<const Eigen::MatrixXd> &B) -> Eigen::MatrixXd {$/;"	f	function:TEST_SUBMODULE	typeref:typename:Eigen::MatrixXd	file:	signature:(const py::EigenDRef<const Eigen::MatrixXd> &A, const py::EigenDRef<const Eigen::MatrixXd> &B) 
__anon9053e2f33e02	tests/test_eigen_matrix.cpp	/^    m.def("get_elem_direct", [](const Eigen::Ref<const Eigen::VectorXd> &v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Eigen::Ref<const Eigen::VectorXd> &v) 
__anon9053e2f33f02	tests/test_eigen_matrix.cpp	/^    m.def("get_elem_indirect", [](std::vector<Eigen::Ref<const Eigen::VectorXd>> v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<Eigen::Ref<const Eigen::VectorXd>> v) 
__anon91d3b2de0102	include/pybind11/numpy.h	/^                  [](const field_descr &a, const field_descr &b) {$/;"	f	function:dtype::strip_padding	file:	signature:(const field_descr &a, const field_descr &b) 
__anon91d3b2de0203	include/pybind11/numpy.h	/^    enum {$/;"	g	class:array	access:public
__anon91d3b2de0302	include/pybind11/numpy.h	/^        [](const field_descriptor &a, const field_descriptor &b) { return a.offset < b.offset; }/;"	f	function:register_structured_dtype	file:	signature:(const field_descriptor &a, const field_descriptor &b) 
__anon91d3b2de0402	include/pybind11/numpy.h	/^        buffers.begin(), buffers.end(), ssize_t(0), [](ssize_t res, const buffer_info &buf) {$/;"	f	function:broadcast	file:	signature:(ssize_t res, const buffer_info &buf) 
__anon92a2e8710102	tests/test_sequences_and_iterators.cpp	/^    auto assert_equal = [&checks](py::handle a, py::handle b) {$/;"	f	function:test_random_access_iterator	file:	signature:(py::handle a, py::handle b) 
__anon92a2e8710202	tests/test_sequences_and_iterators.cpp	/^        .def("__getitem__", [](const Sliceable &s, const py::slice &slice) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Sliceable &s, const py::slice &slice) 
__anon92a2e8710302	tests/test_sequences_and_iterators.cpp	/^    m.def("make_forward_slice_size_t", []() { return py::slice(0, -1, 1); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8710402	tests/test_sequences_and_iterators.cpp	/^          []() { return py::slice(py::none(), py::none(), py::int_(-1)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8710502	tests/test_sequences_and_iterators.cpp	/^          []() { return py::slice(std::nullopt, std::nullopt, -1); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8710602	tests/test_sequences_and_iterators.cpp	/^    m.def("make_reversed_slice_size_t_optional", []() { return py::slice({}, {}, -1); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8710702	tests/test_sequences_and_iterators.cpp	/^             [](const Sequence &s, size_t i) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Sequence &s, size_t i) 
__anon92a2e8710802	tests/test_sequences_and_iterators.cpp	/^             [](Sequence &s, size_t i, float v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(Sequence &s, size_t i, float v) 
__anon92a2e8710902	tests/test_sequences_and_iterators.cpp	/^            [](const Sequence &s) { return py::make_iterator(s.begin(), s.end()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Sequence &s) 
__anon92a2e8710a02	tests/test_sequences_and_iterators.cpp	/^        .def("__contains__", [](const Sequence &s, float v) { return s.contains(v); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Sequence &s, float v) 
__anon92a2e8710b02	tests/test_sequences_and_iterators.cpp	/^        .def("__reversed__", [](const Sequence &s) -> Sequence { return s.reversed(); })$/;"	f	function:TEST_SUBMODULE	typeref:typename:Sequence	file:	signature:(const Sequence &s) 
__anon92a2e8710c02	tests/test_sequences_and_iterators.cpp	/^             [](const Sequence &s, const py::slice &slice) -> Sequence * {$/;"	f	function:TEST_SUBMODULE	typeref:typename:Sequence *	file:	signature:(const Sequence &s, const py::slice &slice) 
__anon92a2e8710d02	tests/test_sequences_and_iterators.cpp	/^             [](Sequence &s, const py::slice &slice, const Sequence &value) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(Sequence &s, const py::slice &slice, const Sequence &value) 
__anon92a2e8710e02	tests/test_sequences_and_iterators.cpp	/^             [](const StringMap &map, const std::string &key) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringMap &map, const std::string &key) 
__anon92a2e8710f02	tests/test_sequences_and_iterators.cpp	/^            [](const StringMap &map) { return py::make_key_iterator(map.begin(), map.end()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringMap &map) 
__anon92a2e8711002	tests/test_sequences_and_iterators.cpp	/^            [](const StringMap &map) { return py::make_iterator(map.begin(), map.end()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringMap &map) 
__anon92a2e8711102	tests/test_sequences_and_iterators.cpp	/^            [](const StringMap &map) { return py::make_value_iterator(map.begin(), map.end()); }/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringMap &map) 
__anon92a2e8711202	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711302	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711402	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711502	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711602	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711702	tests/test_sequences_and_iterators.cpp	/^            [](const IntPairs &s) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const IntPairs &s) 
__anon92a2e8711802	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_iterator(self); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711902	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_key_iterator(self); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711a02	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_value_iterator(self); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711b02	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_iterator(self, py::call_guard<int>()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711c02	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_key_iterator(self, py::call_guard<int>()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711d02	tests/test_sequences_and_iterators.cpp	/^            [](IntPairs &self) { return py::make_value_iterator(self, py::call_guard<int>()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(IntPairs &self) 
__anon92a2e8711e02	tests/test_sequences_and_iterators.cpp	/^             [](std::vector<NonCopyableInt> &vec, int value) { vec.emplace_back(value); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<NonCopyableInt> &vec, int value) 
__anon92a2e8711f02	tests/test_sequences_and_iterators.cpp	/^        .def("__iter__", [](std::vector<NonCopyableInt> &vec) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<NonCopyableInt> &vec) 
__anon92a2e8712002	tests/test_sequences_and_iterators.cpp	/^             [](std::vector<NonCopyableIntPair> &vec, const std::pair<int, int> &value) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<NonCopyableIntPair> &vec, const std::pair<int, int> &value) 
__anon92a2e8712102	tests/test_sequences_and_iterators.cpp	/^             [](std::vector<NonCopyableIntPair> &vec) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<NonCopyableIntPair> &vec) 
__anon92a2e8712202	tests/test_sequences_and_iterators.cpp	/^        .def("values", [](std::vector<NonCopyableIntPair> &vec) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<NonCopyableIntPair> &vec) 
__anon92a2e8712302	tests/test_sequences_and_iterators.cpp	/^    m.def("object_to_list", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon92a2e8712402	tests/test_sequences_and_iterators.cpp	/^    m.def("iterator_to_list", [](py::iterator it) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::iterator it) 
__anon92a2e8712502	tests/test_sequences_and_iterators.cpp	/^    m.def("sequence_length", [](const py::sequence &seq) { return seq.size(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::sequence &seq) 
__anon92a2e8712602	tests/test_sequences_and_iterators.cpp	/^    m.def("count_none", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon92a2e8712702	tests/test_sequences_and_iterators.cpp	/^        return std::count_if(o.begin(), o.end(), [](py::handle h) { return h.is_none(); });$/;"	f	function:TEST_SUBMODULE::__anon92a2e8712602	file:	signature:(py::handle h) 
__anon92a2e8712802	tests/test_sequences_and_iterators.cpp	/^    m.def("find_none", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anon92a2e8712902	tests/test_sequences_and_iterators.cpp	/^        auto it = std::find_if(o.begin(), o.end(), [](py::handle h) { return h.is_none(); });$/;"	f	function:TEST_SUBMODULE::__anon92a2e8712802	file:	signature:(py::handle h) 
__anon92a2e8712a02	tests/test_sequences_and_iterators.cpp	/^    m.def("count_nonzeros", [](const py::dict &d) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::dict &d) 
__anon92a2e8712b02	tests/test_sequences_and_iterators.cpp	/^        return std::count_if(d.begin(), d.end(), [](std::pair<py::handle, py::handle> p) {$/;"	f	function:TEST_SUBMODULE::__anon92a2e8712a02	file:	signature:(std::pair<py::handle, py::handle> p) 
__anon92a2e8712c02	tests/test_sequences_and_iterators.cpp	/^    m.def("iterator_passthrough", [](py::iterator s) -> py::iterator {$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::iterator	file:	signature:(py::iterator s) 
__anon92a2e8712d02	tests/test_sequences_and_iterators.cpp	/^          []() { return py::make_iterator<py::return_value_policy::copy>(list); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8712e02	tests/test_sequences_and_iterators.cpp	/^          []() { return py::make_iterator<py::return_value_policy::automatic>(list); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon92a2e8712f02	tests/test_sequences_and_iterators.cpp	/^            [](const CArrayHolder &v) { return py::make_iterator(v.values, v.values + 3); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const CArrayHolder &v) 
__anon9556870a0102	tests/test_stl.cpp	/^    m.def("cast_vector", []() { return std::vector<int>{1}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0202	tests/test_stl.cpp	/^    m.def("load_vector", [](const std::vector<int> &v) { return v.at(0) == 1 && v.at(1) == 2; })/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<int> &v) 
__anon9556870a0302	tests/test_stl.cpp	/^    m.def("cast_bool_vector", []() { return std::vector<bool>{true, false}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0402	tests/test_stl.cpp	/^          [](const std::vector<bool> &v) { return v.at(0) == true && v.at(1) == false; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<bool> &v) 
__anon9556870a0502	tests/test_stl.cpp	/^        []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0602	tests/test_stl.cpp	/^    m.def("cast_deque", []() { return std::deque<int>{1}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0702	tests/test_stl.cpp	/^    m.def("load_deque", [](const std::deque<int> &v) { return v.at(0) == 1 && v.at(1) == 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::deque<int> &v) 
__anon9556870a0802	tests/test_stl.cpp	/^    m.def("cast_array", []() { return std::array<int, 2>{{1, 2}}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0902	tests/test_stl.cpp	/^    m.def("load_array", [](const std::array<int, 2> &a) { return a[0] == 1 && a[1] == 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::array<int, 2> &a) 
__anon9556870a0a02	tests/test_stl.cpp	/^    m.def("cast_valarray", []() { return std::valarray<int>{1, 4, 9}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0b02	tests/test_stl.cpp	/^    m.def("load_valarray", [](const std::valarray<int> &v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::valarray<int> &v) 
__anon9556870a0c02	tests/test_stl.cpp	/^    m.def("cast_map", []() { return std::map<std::string, std::string>{{"key", "value"}}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0d02	tests/test_stl.cpp	/^    m.def("load_map", [](const std::map<std::string, std::string> &map) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::map<std::string, std::string> &map) 
__anon9556870a0e02	tests/test_stl.cpp	/^    m.def("cast_set", []() { return std::set<std::string>{"key1", "key2"}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a0f02	tests/test_stl.cpp	/^    m.def("load_set", [](const std::set<std::string> &set) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::set<std::string> &set) 
__anon9556870a1002	tests/test_stl.cpp	/^    m.def("cast_rv_vector", []() { return std::vector<RValueCaster>{2}; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a1102	tests/test_stl.cpp	/^    m.def("cast_rv_array", []() { return std::array<RValueCaster, 3>(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a1202	tests/test_stl.cpp	/^    m.def("cast_rv_map", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a1302	tests/test_stl.cpp	/^    m.def("cast_rv_nested", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a1402	tests/test_stl.cpp	/^    m.def("cast_lv_vector", []() -> const decltype(lvv) & { return lvv; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype(lvv)&	file:	signature:() 
__anon9556870a1502	tests/test_stl.cpp	/^    m.def("cast_lv_array", []() -> const decltype(lva) & { return lva; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype(lva)&	file:	signature:() 
__anon9556870a1602	tests/test_stl.cpp	/^    m.def("cast_lv_map", []() -> const decltype(lvm) & { return lvm; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype(lvm)&	file:	signature:() 
__anon9556870a1702	tests/test_stl.cpp	/^    m.def("cast_lv_nested", []() -> const decltype(lvn) & { return lvn; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:const decltype(lvn)&	file:	signature:() 
__anon9556870a1802	tests/test_stl.cpp	/^    m.def("cast_unique_ptr_vector", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a1902	tests/test_stl.cpp	/^    m.def("double_or_zero", [](const opt_int &x) -> int { return x.value_or(0) * 2; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:	signature:(const opt_int &x) 
__anon9556870a1a02	tests/test_stl.cpp	/^    m.def("half_or_none", [](int x) -> opt_int { return x != 0 ? opt_int(x \/ 2) : opt_int(); })/;"	f	function:TEST_SUBMODULE	typeref:typename:opt_int	file:	signature:(int x) 
__anon9556870a1b02	tests/test_stl.cpp	/^        [](opt_int x) { return x.value_or(42); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(opt_int x) 
__anon9556870a1c02	tests/test_stl.cpp	/^        [](const opt_no_assign &x) { return x ? x->value : 42; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const opt_no_assign &x) 
__anon9556870a1d02	tests/test_stl.cpp	/^    m.def("nodefer_none_optional", [](std::optional<int>) { return true; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::optional<int>) 
__anon9556870a1e02	tests/test_stl.cpp	/^    m.def("nodefer_none_optional", [](const py::none &) { return false; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::none &) 
__anon9556870a1f02	tests/test_stl.cpp	/^    m.def("double_or_zero_exp", [](const exp_opt_int &x) -> int { return x.value_or(0) * 2; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:	signature:(const exp_opt_int &x) 
__anon9556870a2002	tests/test_stl.cpp	/^          [](int x) -> exp_opt_int { return x ? exp_opt_int(x \/ 2) : exp_opt_int(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:exp_opt_int	file:	signature:(int x) 
__anon9556870a2102	tests/test_stl.cpp	/^        [](exp_opt_int x) { return x.value_or(42); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(exp_opt_int x) 
__anon9556870a2202	tests/test_stl.cpp	/^        [](const exp_opt_no_assign &x) { return x ? x->value : 42; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const exp_opt_no_assign &x) 
__anon9556870a2302	tests/test_stl.cpp	/^    m.def("double_or_zero_boost", [](const boost_opt_int &x) -> int { return x.value_or(0) * 2; /;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:	signature:(const boost_opt_int &x) 
__anon9556870a2402	tests/test_stl.cpp	/^          [](int x) -> boost_opt_int { return x != 0 ? boost_opt_int(x \/ 2) : boost_opt_int(); /;"	f	function:TEST_SUBMODULE	typeref:typename:boost_opt_int	file:	signature:(int x) 
__anon9556870a2502	tests/test_stl.cpp	/^        [](boost_opt_int x) { return x.value_or(42); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(boost_opt_int x) 
__anon9556870a2602	tests/test_stl.cpp	/^        [](const boost_opt_no_assign &x) { return x ? x->value : 42; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const boost_opt_no_assign &x) 
__anon9556870a2702	tests/test_stl.cpp	/^          [](const refsensitive_opt_int &x) -> int { return (x ? x.value() : 0) * 2; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:int	file:	signature:(const refsensitive_opt_int &x) 
__anon9556870a2802	tests/test_stl.cpp	/^    m.def("half_or_none_refsensitive", [](int x) -> refsensitive_opt_int {$/;"	f	function:TEST_SUBMODULE	typeref:typename:refsensitive_opt_int	file:	signature:(int x) 
__anon9556870a2902	tests/test_stl.cpp	/^        [](refsensitive_opt_int x) { return x ? x.value() : 42; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(refsensitive_opt_int x) 
__anon9556870a2a02	tests/test_stl.cpp	/^        [](const refsensitive_opt_no_assign &x) { return x ? x->value : 42; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const refsensitive_opt_no_assign &x) 
__anon9556870a2b02	tests/test_stl.cpp	/^    m.def("parent_path", [](const std::filesystem::path &p) { return p.parent_path(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::filesystem::path &p) 
__anon9556870a2c02	tests/test_stl.cpp	/^    m.def("load_variant", [](const variant<int, std::string, double, std::nullptr_t> &v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const variant<int, std::string, double, std::nullptr_t> &v) 
__anon9556870a2d02	tests/test_stl.cpp	/^    m.def("load_variant_2pass", [](variant<double, int> v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(variant<double, int> v) 
__anon9556870a2e02	tests/test_stl.cpp	/^    m.def("cast_variant", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a2f02	tests/test_stl.cpp	/^          [](const variant<std::monostate, int, std::string> &v) -> const char * {$/;"	f	function:TEST_SUBMODULE	typeref:typename:const char *	file:	signature:(const variant<std::monostate, int, std::string> &v) 
__anon9556870a3002	tests/test_stl.cpp	/^    m.def("cast_monostate_variant", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a3102	tests/test_stl.cpp	/^    m.def("tpl_ctor_vector", [](std::vector<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<TplCtorClass> &) 
__anon9556870a3202	tests/test_stl.cpp	/^    m.def("tpl_ctor_map", [](std::unordered_map<TplCtorClass, TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::unordered_map<TplCtorClass, TplCtorClass> &) 
__anon9556870a3302	tests/test_stl.cpp	/^    m.def("tpl_ctor_set", [](std::unordered_set<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::unordered_set<TplCtorClass> &) 
__anon9556870a3402	tests/test_stl.cpp	/^    m.def("tpl_constr_optional", [](std::optional<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::optional<TplCtorClass> &) 
__anon9556870a3502	tests/test_stl.cpp	/^    m.def("tpl_constr_optional_exp", [](std::experimental::optional<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::experimental::optional<TplCtorClass> &) 
__anon9556870a3602	tests/test_stl.cpp	/^    m.def("tpl_constr_optional_boost", [](boost::optional<TplCtorClass> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(boost::optional<TplCtorClass> &) 
__anon9556870a3702	tests/test_stl.cpp	/^    m.def("return_vec_of_reference_wrapper", [](std::reference_wrapper<UserType> p4) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::reference_wrapper<UserType> p4) 
__anon9556870a3802	tests/test_stl.cpp	/^        "stl_pass_by_pointer", [](std::vector<int> *v) { return *v; }, "v"_a = nullptr);$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<int> *v) 
__anon9556870a3902	tests/test_stl.cpp	/^          [](const std::vector<std::string> &) { return 1; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::vector<std::string> &) 
__anon9556870a3a02	tests/test_stl.cpp	/^          [](const std::list<std::string> &) { return 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::list<std::string> &) 
__anon9556870a3b02	tests/test_stl.cpp	/^    m.def("func_with_string_or_vector_string_arg_overload", [](const std::string &) { return 3; /;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &) 
__anon9556870a3c02	tests/test_stl.cpp	/^        []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon9556870a3d02	tests/test_stl.cpp	/^    m.def("array_cast_sequence", [](std::array<int, 3> x) { return x; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::array<int, 3> x) 
__anon9556870a3e02	tests/test_stl.cpp	/^        []() { return new std::vector<bool>(4513); },$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anon974570c40102	tests/test_buffers.cpp	/^          [](const std::string &cpp_name, const py::buffer &buffer) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &cpp_name, const py::buffer &buffer) 
__anon974570c40202	tests/test_buffers.cpp	/^        .def(py::init([](const py::buffer &b) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::buffer &b) 
__anon974570c40302	tests/test_buffers.cpp	/^             [](const Matrix &m, std::pair<py::ssize_t, py::ssize_t> i) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Matrix &m, std::pair<py::ssize_t, py::ssize_t> i) 
__anon974570c40402	tests/test_buffers.cpp	/^             [](Matrix &m, std::pair<py::ssize_t, py::ssize_t> i, float v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(Matrix &m, std::pair<py::ssize_t, py::ssize_t> i, float v) 
__anon974570c40502	tests/test_buffers.cpp	/^        .def_buffer([](Matrix &m) -> py::buffer_info {$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::buffer_info	file:	signature:(Matrix &m) 
__anon974570c40602	tests/test_buffers.cpp	/^        .def("__repr__", [](py::handle self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle self) 
__anon974570c40702	tests/test_buffers.cpp	/^    m.def("get_buffer_info", [](const py::buffer &buffer) { return buffer.request(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::buffer &buffer) 
__anon9bfcdd026b02	tests/test_builtin_casters.cpp	/^    m.def("string_roundtrip", [](const char *s) { return s; });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(const char *s) 
__anon9bfcdd026c02	tests/test_builtin_casters.cpp	/^    m.def("good_utf8_string", []() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd026d02	tests/test_builtin_casters.cpp	/^    m.def("good_utf16_string", [=]() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd026e02	tests/test_builtin_casters.cpp	/^    m.def("good_utf32_string", [=]() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd026f02	tests/test_builtin_casters.cpp	/^    m.def("good_wchar_string", [=]() { return wstr; }); \/\/ a‽𝐀z$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd027002	tests/test_builtin_casters.cpp	/^    m.def("bad_utf8_string", []() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd027102	tests/test_builtin_casters.cpp	/^    m.def("bad_utf16_string", [=]() { return std::u16string({b16, char16_t(0xd800), z16}); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd027202	tests/test_builtin_casters.cpp	/^    m.def("bad_utf32_string", [=]() { return std::u32string({a32, char32_t(0xd800), z32}); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd027302	tests/test_builtin_casters.cpp	/^        m.def("bad_wchar_string", [=]() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd027402	tests/test_builtin_casters.cpp	/^    m.def("u8_Z", []() -> char { return 'Z'; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:char	file:	signature:() 
__anon9bfcdd027502	tests/test_builtin_casters.cpp	/^    m.def("u8_eacute", []() -> char { return '\\xe9'; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:char	file:	signature:() 
__anon9bfcdd027602	tests/test_builtin_casters.cpp	/^    m.def("u16_ibang", [=]() -> char16_t { return ib16; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:char16_t	file:	signature:() 
__anon9bfcdd027702	tests/test_builtin_casters.cpp	/^    m.def("u32_mathbfA", [=]() -> char32_t { return mathbfA32; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:char32_t	file:	signature:() 
__anon9bfcdd027802	tests/test_builtin_casters.cpp	/^    m.def("wchar_heart", []() -> wchar_t { return 0x2665; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:wchar_t	file:	signature:() 
__anon9bfcdd027902	tests/test_builtin_casters.cpp	/^    m.def("ord_char", [](char c) -> int { return static_cast<unsigned char>(c); });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:int	file:	signature:(char c) 
__anon9bfcdd027a02	tests/test_builtin_casters.cpp	/^    m.def("ord_char_lv", [](char &c) -> int { return static_cast<unsigned char>(c); });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:int	file:	signature:(char &c) 
__anon9bfcdd027b02	tests/test_builtin_casters.cpp	/^    m.def("ord_char16", [](char16_t c) -> uint16_t { return c; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:uint16_t	file:	signature:(char16_t c) 
__anon9bfcdd027c02	tests/test_builtin_casters.cpp	/^    m.def("ord_char16_lv", [](char16_t &c) -> uint16_t { return c; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:uint16_t	file:	signature:(char16_t &c) 
__anon9bfcdd027d02	tests/test_builtin_casters.cpp	/^    m.def("ord_char32", [](char32_t c) -> uint32_t { return c; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:uint32_t	file:	signature:(char32_t c) 
__anon9bfcdd027e02	tests/test_builtin_casters.cpp	/^    m.def("ord_wchar", [](wchar_t c) -> int { return c; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:int	file:	signature:(wchar_t c) 
__anon9bfcdd027f02	tests/test_builtin_casters.cpp	/^    m.def("strlen", [](char *s) { return strlen(s); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(char *s) 
__anon9bfcdd028002	tests/test_builtin_casters.cpp	/^    m.def("string_length", [](const std::string &s) { return s.length(); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(const std::string &s) 
__anon9bfcdd028102	tests/test_builtin_casters.cpp	/^    m.def("good_utf8_u8string", []() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd028202	tests/test_builtin_casters.cpp	/^    m.def("bad_utf8_u8string", []() {$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:() 
__anon9bfcdd028302	tests/test_builtin_casters.cpp	/^    m.def("u8_char8_Z", []() -> char8_t { return u8'Z'; });$/;"	f	function:PYBIND11_NAMESPACE_END	typeref:typename:char8_t	file:	signature:() 
__anon9bfcdd028402	tests/test_builtin_casters.cpp	/^    m.def("ord_char8", [](char8_t c) -> int { return static_cast<unsigned char>(c); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:int	file:	signature:(char8_t c) 
__anon9bfcdd028502	tests/test_builtin_casters.cpp	/^    m.def("ord_char8_lv", [](char8_t &c) -> int { return static_cast<unsigned char>(c); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:int	file:	signature:(char8_t &c) 
__anon9bfcdd028602	tests/test_builtin_casters.cpp	/^    m.def("string_view_print", [](std::string_view s) { py::print(s, s.size()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::string_view s) 
__anon9bfcdd028702	tests/test_builtin_casters.cpp	/^    m.def("string_view16_print", [](std::u16string_view s) { py::print(s, s.size()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u16string_view s) 
__anon9bfcdd028802	tests/test_builtin_casters.cpp	/^    m.def("string_view32_print", [](std::u32string_view s) { py::print(s, s.size()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u32string_view s) 
__anon9bfcdd028902	tests/test_builtin_casters.cpp	/^    m.def("string_view_chars", [](std::string_view s) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::string_view s) 
__anon9bfcdd028a02	tests/test_builtin_casters.cpp	/^    m.def("string_view16_chars", [](std::u16string_view s) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u16string_view s) 
__anon9bfcdd028b02	tests/test_builtin_casters.cpp	/^    m.def("string_view32_chars", [](std::u32string_view s) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u32string_view s) 
__anon9bfcdd028c02	tests/test_builtin_casters.cpp	/^          []() { return std::string_view((const char *) u8"utf8 secret \\U0001f382"); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd028d02	tests/test_builtin_casters.cpp	/^          []() { return std::u16string_view(u"utf16 secret \\U0001f382"); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd028e02	tests/test_builtin_casters.cpp	/^          []() { return std::u32string_view(U"utf32 secret \\U0001f382"); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd028f02	tests/test_builtin_casters.cpp	/^          []() { return [](py::bytes b) { return b; }("abc \\x80\\x80 def"sv); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029002	tests/test_builtin_casters.cpp	/^          []() { return [](py::bytes b) { return b; }("abc \\x80\\x80 def"sv); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::__anon9bfcdd028f02	file:	signature:(py::bytes b) 
__anon9bfcdd029102	tests/test_builtin_casters.cpp	/^          []() { return [](py::str s) { return s; }("abc \\342\\200\\275 def"sv); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029202	tests/test_builtin_casters.cpp	/^          []() { return [](py::str s) { return s; }("abc \\342\\200\\275 def"sv); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::__anon9bfcdd029102	file:	signature:(py::str s) 
__anon9bfcdd029302	tests/test_builtin_casters.cpp	/^          [](const py::bytes &b) { return [](std::string_view s) { return s; }(b); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const py::bytes &b) 
__anon9bfcdd029402	tests/test_builtin_casters.cpp	/^          [](const py::bytes &b) { return [](std::string_view s) { return s; }(b); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::__anon9bfcdd029302	file:	signature:(std::string_view s) 
__anon9bfcdd029502	tests/test_builtin_casters.cpp	/^    m.def("string_view_memoryview", []() {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029602	tests/test_builtin_casters.cpp	/^    m.def("string_view8_print", [](std::u8string_view s) { py::print(s, s.size()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u8string_view s) 
__anon9bfcdd029702	tests/test_builtin_casters.cpp	/^    m.def("string_view8_chars", [](std::u8string_view s) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::u8string_view s) 
__anon9bfcdd029802	tests/test_builtin_casters.cpp	/^    m.def("string_view8_return", []() { return std::u8string_view(u8"utf8 secret \\U0001f382"); /;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029902	tests/test_builtin_casters.cpp	/^    m.def("string_view8_str", []() { return py::str{std::u8string_view{u8"abc ‽ def"}}; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029a02	tests/test_builtin_casters.cpp	/^          []() { return py::bytes(TypeWithBothOperatorStringAndStringView()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029b02	tests/test_builtin_casters.cpp	/^          []() { return py::str(TypeWithBothOperatorStringAndStringView()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd029c02	tests/test_builtin_casters.cpp	/^    m.def("i32_str", [](std::int32_t v) { return std::to_string(v); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::int32_t v) 
__anon9bfcdd029d02	tests/test_builtin_casters.cpp	/^    m.def("u32_str", [](std::uint32_t v) { return std::to_string(v); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::uint32_t v) 
__anon9bfcdd029e02	tests/test_builtin_casters.cpp	/^    m.def("i64_str", [](std::int64_t v) { return std::to_string(v); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::int64_t v) 
__anon9bfcdd029f02	tests/test_builtin_casters.cpp	/^    m.def("u64_str", [](std::uint64_t v) { return std::to_string(v); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::uint64_t v) 
__anon9bfcdd02a002	tests/test_builtin_casters.cpp	/^    m.def("int_passthrough", [](int arg) { return arg; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(int arg) 
__anon9bfcdd02a102	tests/test_builtin_casters.cpp	/^        "int_passthrough_noconvert", [](int arg) { return arg; }, py::arg{}.noconvert());$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(int arg) 
__anon9bfcdd02a202	tests/test_builtin_casters.cpp	/^        "int_passthrough_noconvert", [](int arg) { return arg; }, py::arg{}.noconvert());$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(int arg) 
__anon9bfcdd02a302	tests/test_builtin_casters.cpp	/^        [](const std::pair<bool, std::string> &input) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const std::pair<bool, std::string> &input) 
__anon9bfcdd02a402	tests/test_builtin_casters.cpp	/^        [](std::tuple<bool, std::string, int> input) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::tuple<bool, std::string, int> input) 
__anon9bfcdd02a502	tests/test_builtin_casters.cpp	/^    m.def("empty_tuple", []() { return std::tuple<>(); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02a602	tests/test_builtin_casters.cpp	/^    m.def("rvalue_pair", []() { return std::make_pair(RValueCaster{}, RValueCaster{}); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02a702	tests/test_builtin_casters.cpp	/^    m.def("lvalue_pair", []() -> const decltype(lvpair) & { return lvpair; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:const decltype(lvpair)&	file:	signature:() 
__anon9bfcdd02a802	tests/test_builtin_casters.cpp	/^          []() { return std::make_tuple(RValueCaster{}, RValueCaster{}, RValueCaster{}); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02a902	tests/test_builtin_casters.cpp	/^    m.def("lvalue_tuple", []() -> const decltype(lvtuple) & { return lvtuple; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:const decltype(lvtuple)&	file:	signature:() 
__anon9bfcdd02aa02	tests/test_builtin_casters.cpp	/^    m.def("rvalue_nested", []() {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02ab02	tests/test_builtin_casters.cpp	/^    m.def("lvalue_nested", []() -> const decltype(lvnested) & { return lvnested; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:const decltype(lvnested)&	file:	signature:() 
__anon9bfcdd02ac02	tests/test_builtin_casters.cpp	/^        []() {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02ad02	tests/test_builtin_casters.cpp	/^    m.def("return_none_string", []() -> std::string * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:std::string *	file:	signature:() 
__anon9bfcdd02ae02	tests/test_builtin_casters.cpp	/^    m.def("return_none_char", []() -> const char * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:const char *	file:	signature:() 
__anon9bfcdd02af02	tests/test_builtin_casters.cpp	/^    m.def("return_none_bool", []() -> bool * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:bool *	file:	signature:() 
__anon9bfcdd02b002	tests/test_builtin_casters.cpp	/^    m.def("return_none_int", []() -> int * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:int *	file:	signature:() 
__anon9bfcdd02b102	tests/test_builtin_casters.cpp	/^    m.def("return_none_float", []() -> float * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:float *	file:	signature:() 
__anon9bfcdd02b202	tests/test_builtin_casters.cpp	/^    m.def("return_none_pair", []() -> std::pair<int, int> * { return nullptr; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:std::pair<int,int> *	file:	signature:() 
__anon9bfcdd02b302	tests/test_builtin_casters.cpp	/^    m.def("defer_none_cstring", [](char *) { return false; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(char *) 
__anon9bfcdd02b402	tests/test_builtin_casters.cpp	/^    m.def("defer_none_cstring", [](const py::none &) { return true; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const py::none &) 
__anon9bfcdd02b502	tests/test_builtin_casters.cpp	/^    m.def("defer_none_custom", [](UserType *) { return false; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(UserType *) 
__anon9bfcdd02b602	tests/test_builtin_casters.cpp	/^    m.def("defer_none_custom", [](const py::none &) { return true; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const py::none &) 
__anon9bfcdd02b702	tests/test_builtin_casters.cpp	/^    m.def("nodefer_none_void", [](void *) { return true; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(void *) 
__anon9bfcdd02b802	tests/test_builtin_casters.cpp	/^    m.def("nodefer_none_void", [](const py::none &) { return false; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const py::none &) 
__anon9bfcdd02b902	tests/test_builtin_casters.cpp	/^    m.def("load_nullptr_t", [](std::nullptr_t) {}); \/\/ not useful, but it should still compile$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::nullptr_t) 
__anon9bfcdd02ba02	tests/test_builtin_casters.cpp	/^    m.def("cast_nullptr_t", []() { return std::nullptr_t{}; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02bb02	tests/test_builtin_casters.cpp	/^    m.def("bool_passthrough", [](bool arg) { return arg; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(bool arg) 
__anon9bfcdd02bc02	tests/test_builtin_casters.cpp	/^        "bool_passthrough_noconvert", [](bool arg) { return arg; }, py::arg{}.noconvert());$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(bool arg) 
__anon9bfcdd02bd02	tests/test_builtin_casters.cpp	/^        "bool_passthrough_noconvert", [](bool arg) { return arg; }, py::arg{}.noconvert());$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(bool arg) 
__anon9bfcdd02be02	tests/test_builtin_casters.cpp	/^        "bool_passthrough_noconvert2", [](bool arg) { return arg; }, py::arg().noconvert());$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(bool arg) 
__anon9bfcdd02bf02	tests/test_builtin_casters.cpp	/^    m.def("refwrap_builtin", [](std::reference_wrapper<int> p) { return 10 * p.get(); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::reference_wrapper<int> p) 
__anon9bfcdd02c002	tests/test_builtin_casters.cpp	/^    m.def("refwrap_usertype", [](std::reference_wrapper<UserType> p) { return p.get().value(); }/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::reference_wrapper<UserType> p) 
__anon9bfcdd02c102	tests/test_builtin_casters.cpp	/^          [](std::reference_wrapper<const UserType> p) { return p.get().value(); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::reference_wrapper<const UserType> p) 
__anon9bfcdd02c202	tests/test_builtin_casters.cpp	/^    m.def("refwrap_lvalue", []() -> std::reference_wrapper<UserType> {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:std::reference_wrapper<UserType>	file:	signature:() 
__anon9bfcdd02c302	tests/test_builtin_casters.cpp	/^    m.def("refwrap_lvalue_const", []() -> std::reference_wrapper<const UserType> {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:std::reference_wrapper<const UserType>	file:	signature:() 
__anon9bfcdd02c402	tests/test_builtin_casters.cpp	/^        [](bool copy) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(bool copy) 
__anon9bfcdd02c502	tests/test_builtin_casters.cpp	/^    m.def("refwrap_iiw", [](const IncType &w) { return w.value(); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const IncType &w) 
__anon9bfcdd02c602	tests/test_builtin_casters.cpp	/^    m.def("refwrap_call_iiw", [](IncType &w, const py::function &f) {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(IncType &w, const py::function &f) 
__anon9bfcdd02c702	tests/test_builtin_casters.cpp	/^    m.def("complex_cast", [](float x) { return "{}"_s.format(x); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(float x) 
__anon9bfcdd02c802	tests/test_builtin_casters.cpp	/^          [](std::complex<float> x) { return "({}, {})"_s.format(x.real(), x.imag()); });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::complex<float> x) 
__anon9bfcdd02c902	tests/test_builtin_casters.cpp	/^    m.def("int_cast", []() { return (int) 42; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02ca02	tests/test_builtin_casters.cpp	/^    m.def("long_cast", []() { return (long) 42; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02cb02	tests/test_builtin_casters.cpp	/^    m.def("longlong_cast", []() { return ULLONG_MAX; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:() 
__anon9bfcdd02cc02	tests/test_builtin_casters.cpp	/^    m.def("test_void_caster", []() -> bool {$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	typeref:typename:bool	file:	signature:() 
__anon9bfcdd02cd02	tests/test_builtin_casters.cpp	/^    m.def("takes", [](ConstRefCasted x) { return x.tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(ConstRefCasted x) 
__anon9bfcdd02ce02	tests/test_builtin_casters.cpp	/^    m.def("takes_move", [](ConstRefCasted &&x) { return x.tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(ConstRefCasted &&x) 
__anon9bfcdd02cf02	tests/test_builtin_casters.cpp	/^    m.def("takes_ptr", [](ConstRefCasted *x) { return x->tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(ConstRefCasted *x) 
__anon9bfcdd02d002	tests/test_builtin_casters.cpp	/^    m.def("takes_ref", [](ConstRefCasted &x) { return x.tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(ConstRefCasted &x) 
__anon9bfcdd02d102	tests/test_builtin_casters.cpp	/^    m.def("takes_ref_wrap", [](std::reference_wrapper<ConstRefCasted> x) { return x.get().tag; }/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::reference_wrapper<ConstRefCasted> x) 
__anon9bfcdd02d202	tests/test_builtin_casters.cpp	/^    m.def("takes_const_ptr", [](const ConstRefCasted *x) { return x->tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const ConstRefCasted *x) 
__anon9bfcdd02d302	tests/test_builtin_casters.cpp	/^    m.def("takes_const_ref", [](const ConstRefCasted &x) { return x.tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(const ConstRefCasted &x) 
__anon9bfcdd02d402	tests/test_builtin_casters.cpp	/^          [](std::reference_wrapper<const ConstRefCasted> x) { return x.get().tag; });$/;"	f	function:PYBIND11_NAMESPACE_END::__anon9bfcdd028302	file:	signature:(std::reference_wrapper<const ConstRefCasted> x) 
__anon9ca8d76c0111	tests/test_multiple_inheritance.cpp	/^namespace {$/;"	n	file:
__anon9ca8d76c0111::Base12a	tests/test_multiple_inheritance.cpp	/^struct Base12a : Base1a, Base2a {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:Base1a,Base2a
__anon9ca8d76c0111::Base12a::Base12a	tests/test_multiple_inheritance.cpp	/^    Base12a(int i, int j) : Base1a(i), Base2a(j) {}$/;"	f	struct:__anon9ca8d76c0111::Base12a	file:	access:public	signature:(int i,int j)
__anon9ca8d76c0111::Base1a	tests/test_multiple_inheritance.cpp	/^struct Base1a {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::Base1a::Base1a	tests/test_multiple_inheritance.cpp	/^    explicit Base1a(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::Base1a	file:	access:public	signature:(int i)
__anon9ca8d76c0111::Base1a::foo	tests/test_multiple_inheritance.cpp	/^    int foo() const { return i; }$/;"	f	struct:__anon9ca8d76c0111::Base1a	typeref:typename:int	file:	access:public	signature:() const
__anon9ca8d76c0111::Base1a::i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::Base1a	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::Base2a	tests/test_multiple_inheritance.cpp	/^struct Base2a {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::Base2a::Base2a	tests/test_multiple_inheritance.cpp	/^    explicit Base2a(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::Base2a	file:	access:public	signature:(int i)
__anon9ca8d76c0111::Base2a::bar	tests/test_multiple_inheritance.cpp	/^    int bar() const { return i; }$/;"	f	struct:__anon9ca8d76c0111::Base2a	typeref:typename:int	file:	access:public	signature:() const
__anon9ca8d76c0111::Base2a::i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::Base2a	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::BaseN	tests/test_multiple_inheritance.cpp	/^struct BaseN {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::BaseN::BaseN	tests/test_multiple_inheritance.cpp	/^    explicit BaseN(int i) : i(i) {}$/;"	f	struct:__anon9ca8d76c0111::BaseN	file:	access:public	signature:(int i)
__anon9ca8d76c0111::BaseN::i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::BaseN	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::I801B1	tests/test_multiple_inheritance.cpp	/^struct I801B1 {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::I801B1::I801B1	tests/test_multiple_inheritance.cpp	/^    I801B1() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:()
__anon9ca8d76c0111::I801B1::I801B1	tests/test_multiple_inheritance.cpp	/^    I801B1(const I801B1 &) = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:(const I801B1 &)
__anon9ca8d76c0111::I801B1::a	tests/test_multiple_inheritance.cpp	/^    int a = 1;$/;"	m	struct:__anon9ca8d76c0111::I801B1	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::I801B1::~I801B1	tests/test_multiple_inheritance.cpp	/^    virtual ~I801B1() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:()
__anon9ca8d76c0111::I801B2	tests/test_multiple_inheritance.cpp	/^struct I801B2 {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::I801B2::I801B2	tests/test_multiple_inheritance.cpp	/^    I801B2() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:()
__anon9ca8d76c0111::I801B2::I801B2	tests/test_multiple_inheritance.cpp	/^    I801B2(const I801B2 &) = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:(const I801B2 &)
__anon9ca8d76c0111::I801B2::b	tests/test_multiple_inheritance.cpp	/^    int b = 2;$/;"	m	struct:__anon9ca8d76c0111::I801B2	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::I801B2::~I801B2	tests/test_multiple_inheritance.cpp	/^    virtual ~I801B2() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:()
__anon9ca8d76c0111::I801C	tests/test_multiple_inheritance.cpp	/^struct I801C : I801B1, I801B2 {};$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:I801B1,I801B2
__anon9ca8d76c0111::I801D	tests/test_multiple_inheritance.cpp	/^struct I801D : I801C {}; \/\/ Indirect MI$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:I801C
__anon9ca8d76c0111::Vanilla	tests/test_multiple_inheritance.cpp	/^struct Vanilla {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::Vanilla::vanilla	tests/test_multiple_inheritance.cpp	/^    std::string vanilla() { return "Vanilla"; };$/;"	f	struct:__anon9ca8d76c0111::Vanilla	typeref:typename:std::string	file:	access:public	signature:()
__anon9ca8d76c0111::VanillaStaticMix1	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix1 : Vanilla, WithStatic1, WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:Vanilla,WithStatic1,WithStatic2
__anon9ca8d76c0111::VanillaStaticMix1::static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix1"; }$/;"	f	struct:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:std::string	file:	access:public	signature:()
__anon9ca8d76c0111::VanillaStaticMix1::static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::VanillaStaticMix1::static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix1::static_value = 12;$/;"	m	class:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:int
__anon9ca8d76c0111::VanillaStaticMix2	tests/test_multiple_inheritance.cpp	/^struct VanillaStaticMix2 : WithStatic1, Vanilla, WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:	inherits:WithStatic1,Vanilla,WithStatic2
__anon9ca8d76c0111::VanillaStaticMix2::static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix2"; }$/;"	f	struct:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:std::string	file:	access:public	signature:()
__anon9ca8d76c0111::VanillaStaticMix2::static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::VanillaStaticMix2::static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix2::static_value = 12;$/;"	m	class:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:int
__anon9ca8d76c0111::WithStatic1	tests/test_multiple_inheritance.cpp	/^struct WithStatic1 {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::WithStatic1::static_func1	tests/test_multiple_inheritance.cpp	/^    static std::string static_func1() { return "WithStatic1"; };$/;"	f	struct:__anon9ca8d76c0111::WithStatic1	typeref:typename:std::string	file:	access:public	signature:()
__anon9ca8d76c0111::WithStatic1::static_value1	tests/test_multiple_inheritance.cpp	/^    static int static_value1;$/;"	m	struct:__anon9ca8d76c0111::WithStatic1	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::WithStatic1::static_value1	tests/test_multiple_inheritance.cpp	/^int WithStatic1::static_value1 = 1;$/;"	m	class:__anon9ca8d76c0111::WithStatic1	typeref:typename:int
__anon9ca8d76c0111::WithStatic2	tests/test_multiple_inheritance.cpp	/^struct WithStatic2 {$/;"	s	namespace:__anon9ca8d76c0111	file:
__anon9ca8d76c0111::WithStatic2::static_func2	tests/test_multiple_inheritance.cpp	/^    static std::string static_func2() { return "WithStatic2"; };$/;"	f	struct:__anon9ca8d76c0111::WithStatic2	typeref:typename:std::string	file:	access:public	signature:()
__anon9ca8d76c0111::WithStatic2::static_value2	tests/test_multiple_inheritance.cpp	/^    static int static_value2;$/;"	m	struct:__anon9ca8d76c0111::WithStatic2	typeref:typename:int	file:	access:public
__anon9ca8d76c0111::WithStatic2::static_value2	tests/test_multiple_inheritance.cpp	/^int WithStatic2::static_value2 = 2;$/;"	m	class:__anon9ca8d76c0111::WithStatic2	typeref:typename:int
__anon9ca8d76c0202	tests/test_multiple_inheritance.cpp	/^    m.def("bar_base2a", [](Base2a *b) { return b->bar(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(Base2a *b) 
__anon9ca8d76c0302	tests/test_multiple_inheritance.cpp	/^    m.def("bar_base2a_sharedptr", [](const std::shared_ptr<Base2a> &b) { return b->bar(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::shared_ptr<Base2a> &b) 
__anon9ca8d76c0402	tests/test_multiple_inheritance.cpp	/^    m.def("i801b1_c", [](I801C *c) { return static_cast<I801B1 *>(c); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(I801C *c) 
__anon9ca8d76c0502	tests/test_multiple_inheritance.cpp	/^    m.def("i801b2_c", [](I801C *c) { return static_cast<I801B2 *>(c); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(I801C *c) 
__anon9ca8d76c0602	tests/test_multiple_inheritance.cpp	/^    m.def("i801b1_d", [](I801D *d) { return static_cast<I801B1 *>(d); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(I801D *d) 
__anon9ca8d76c0702	tests/test_multiple_inheritance.cpp	/^    m.def("i801b2_d", [](I801D *d) { return static_cast<I801B2 *>(d); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(I801D *d) 
__anon9ca8d76c0802	tests/test_multiple_inheritance.cpp	/^    m.def("i801c_b1", []() -> I801B1 * { return new I801C(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801B1 *	file:	signature:() 
__anon9ca8d76c0902	tests/test_multiple_inheritance.cpp	/^    m.def("i801c_b2", []() -> I801B2 * { return new I801C(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801B2 *	file:	signature:() 
__anon9ca8d76c0a02	tests/test_multiple_inheritance.cpp	/^    m.def("i801d_b1", []() -> I801B1 * { return new I801D(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801B1 *	file:	signature:() 
__anon9ca8d76c0b02	tests/test_multiple_inheritance.cpp	/^    m.def("i801d_b2", []() -> I801B2 * { return new I801D(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801B2 *	file:	signature:() 
__anon9ca8d76c0c02	tests/test_multiple_inheritance.cpp	/^    m.def("i801e_c", []() -> I801C * { return new I801E(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801C *	file:	signature:() 
__anon9ca8d76c0d02	tests/test_multiple_inheritance.cpp	/^    m.def("i801e_b2", []() -> I801B2 * { return new I801E(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:I801B2 *	file:	signature:() 
__anon9ca8d76c0e02	tests/test_multiple_inheritance.cpp	/^    py::class_<B>(m, "B").def("b", [](B *self) { return self; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(B *self) 
__anon9ca8d76c0f02	tests/test_multiple_inheritance.cpp	/^    py::class_<C0, B>(m, "C0").def("c0", [](C0 *self) { return self; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(C0 *self) 
__anon9ca8d76c1002	tests/test_multiple_inheritance.cpp	/^    py::class_<C1, B>(m, "C1").def("c1", [](C1 *self) { return self; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(C1 *self) 
__anona00585ec0102	tests/test_enum.cpp	/^    m.def("test_scoped_enum", [](ScopedEnum z) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(ScopedEnum z) 
__anona00585ec0202	tests/test_enum.cpp	/^    m.def("test_enum_to_int", [](int) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anona00585ec0302	tests/test_enum.cpp	/^    m.def("test_enum_to_uint", [](uint32_t) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(uint32_t) 
__anona00585ec0402	tests/test_enum.cpp	/^    m.def("test_enum_to_long_long", [](long long) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(long long) 
__anona00585ec0502	tests/test_enum.cpp	/^    m.def("register_bad_enum", [m]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anona04423630102	tests/test_methods_and_attributes.cpp	/^                    []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anona04423630202	tests/test_methods_and_attributes.cpp	/^                    []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anona04423630302	tests/test_methods_and_attributes.cpp	/^        .def_property("def_writeonly", nullptr, [](TestProperties &s, int v) { s.value = v; })$/;"	f	function:TEST_SUBMODULE	file:	signature:(TestProperties &s, int v) 
__anona04423630402	tests/test_methods_and_attributes.cpp	/^                             [](const py::object &, int v) { TestProperties::static_value = v; }/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &, int v) 
__anona04423630502	tests/test_methods_and_attributes.cpp	/^            [](const py::object &) { return TestProperties::static_get(); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anona04423630602	tests/test_methods_and_attributes.cpp	/^            [](const py::object &, int v) { return TestProperties::static_set(v); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &, int v) 
__anona04423630702	tests/test_methods_and_attributes.cpp	/^            [](const py::object &) { return TestProperties::static_get(); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anona04423630802	tests/test_methods_and_attributes.cpp	/^            [](const py::object &, int v) { TestProperties::static_set(v); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &, int v) 
__anona04423630902	tests/test_methods_and_attributes.cpp	/^            [](py::object cls) { return cls; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object cls) 
__anona04423630a02	tests/test_methods_and_attributes.cpp	/^            [](const py::object &cls, const py::function &f) { f(cls); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &cls, const py::function &f) 
__anona04423630b02	tests/test_methods_and_attributes.cpp	/^    auto static_get1 = [](const py::object &) -> const UserType & { return TestPropRVP::sv1; };$/;"	f	function:TEST_SUBMODULE	typeref:typename:const UserType &	file:	signature:(const py::object &) 
__anona04423630c02	tests/test_methods_and_attributes.cpp	/^    auto static_get2 = [](const py::object &) -> const UserType & { return TestPropRVP::sv2; };$/;"	f	function:TEST_SUBMODULE	typeref:typename:const UserType &	file:	signature:(const py::object &) 
__anona04423630d02	tests/test_methods_and_attributes.cpp	/^    auto static_set1 = [](const py::object &, int v) { TestPropRVP::sv1.set(v); };$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &, int v) 
__anona04423630e02	tests/test_methods_and_attributes.cpp	/^    auto static_set2 = [](const py::object &, int v) { TestPropRVP::sv2.set(v); };$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &, int v) 
__anona04423630f02	tests/test_methods_and_attributes.cpp	/^                                      [](const py::object &) { return UserType(1); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anona04423631002	tests/test_methods_and_attributes.cpp	/^        .def_property_readonly_static("readonly", [](const py::object &) { return 1; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anona04423631102	tests/test_methods_and_attributes.cpp	/^    m.def("overload_order", [](const std::string &) { return 1; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &) 
__anona04423631202	tests/test_methods_and_attributes.cpp	/^    m.def("overload_order", [](const std::string &) { return 2; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::string &) 
__anona04423631302	tests/test_methods_and_attributes.cpp	/^    m.def("overload_order", [](int) { return 3; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anona04423631402	tests/test_methods_and_attributes.cpp	/^        "overload_order", [](int) { return 4; }, py::prepend{});$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anona04423631502	tests/test_methods_and_attributes.cpp	/^        "overload_order", [](int) { return 4; }, py::prepend{});$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anona04423631602	tests/test_methods_and_attributes.cpp	/^    m.def("bad_arg_def_named", [] {$/;"	f	function:TEST_SUBMODULE	file:
__anona04423631702	tests/test_methods_and_attributes.cpp	/^            [](int, UnregisteredType) {},$/;"	f	function:TEST_SUBMODULE::__anona04423631602	file:	signature:(int, UnregisteredType) 
__anona04423631802	tests/test_methods_and_attributes.cpp	/^    m.def("bad_arg_def_unnamed", [] {$/;"	f	function:TEST_SUBMODULE	file:
__anona04423631902	tests/test_methods_and_attributes.cpp	/^            [](int, UnregisteredType) {},$/;"	f	function:TEST_SUBMODULE::__anona04423631802	file:	signature:(int, UnregisteredType) 
__anona04423631a02	tests/test_methods_and_attributes.cpp	/^        .def(py::init([](py::none const &) { return NoneCastTester{}; }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::none const &) 
__anona04423631b02	tests/test_methods_and_attributes.cpp	/^    m.def("ok_obj_or_none", [](NoneCastTester const &foo) { return foo.answer; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(NoneCastTester const &foo) 
__anona04423631c02	tests/test_methods_and_attributes.cpp	/^             [](const StrIssue &si) { return "StrIssue[" + std::to_string(si.val) + "]"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StrIssue &si) 
__anona1f702170102	include/pybind11/eigen/tensor.h	/^                    = capsule(src, [](void *ptr) { Helper::free(reinterpret_cast<Type *>(ptr)); /;"	f	function:type_caster::cast_impl	file:	signature:(void *ptr) 
__anona1f702170202	include/pybind11/eigen/tensor.h	/^                    = capsule(src, [](void *ptr) { Helper::free(reinterpret_cast<Type *>(ptr)); /;"	f	function:type_caster::cast_impl	file:	signature:(void *ptr) 
__anona5ed8f350102	tests/test_async.cpp	/^        .def("__await__", [](const SupportsAsync &self) -> py::object {$/;"	f	function:TEST_SUBMODULE	typeref:typename:py::object	file:	signature:(const SupportsAsync &self) 
__anonadcbcd760102	tests/test_virtual_functions.cpp	/^    m.def("runExampleVirt", [](ExampleVirt *ex, int value) { return ex->run(value); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ExampleVirt *ex, int value) 
__anonadcbcd760202	tests/test_virtual_functions.cpp	/^    m.def("runExampleVirtBool", [](ExampleVirt *ex) { return ex->run_bool(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ExampleVirt *ex) 
__anonadcbcd760302	tests/test_virtual_functions.cpp	/^    m.def("runExampleVirtVirtual", [](ExampleVirt *ex) { ex->pure_virtual(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ExampleVirt *ex) 
__anonadcbcd760402	tests/test_virtual_functions.cpp	/^    m.def("call_f", [](A *a) { a->f(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(A *a) 
__anonadcbcd760502	tests/test_virtual_functions.cpp	/^        .def(py::init([](int) { return new PyA2(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anonadcbcd760602	tests/test_virtual_functions.cpp	/^    m.def("call_f", [](A2 *a2) { a2->f(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(A2 *a2) 
__anonadcbcd760702	tests/test_virtual_functions.cpp	/^    m.def("dispatch_issue_go", [](const Base *b) { return b->dispatch(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Base *b) 
__anonadcbcd760802	tests/test_virtual_functions.cpp	/^             const AdderBase::DataVisitor &visitor) { adder(first, second, visitor); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const AdderBase::Data &first, const AdderBase::Data &second, const AdderBase &adder, const AdderBase::DataVisitor &visitor) 
__anonadcbcd760902	tests/test_virtual_functions.cpp	/^             const AdderBase::DataVisitor &visitor) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const AdderBase::Data &first, const AdderBase::Data &second, const AdderBase::Data &third, const AdderBase &adder, const AdderBase::DataVisitor &visitor) 
__anonadcbcd760a02	tests/test_virtual_functions.cpp	/^              adder(first, second, [&](const AdderBase::Data &first_plus_second) {$/;"	f	function:TEST_SUBMODULE::__anonadcbcd760902	file:	signature:(const AdderBase::Data &first_plus_second) 
__anonb29c4dea0102	tests/test_call_policies.cpp	/^        .def(py::init([](Child *) { return new Parent(); }), py::keep_alive<1, 2>())$/;"	f	function:TEST_SUBMODULE	file:	signature:(Child *) 
__anonb29c4dea0202	tests/test_call_policies.cpp	/^        "free_function", [](Parent *, Child *) {}, py::keep_alive<1, 2>());$/;"	f	function:TEST_SUBMODULE	file:	signature:(Parent *, Child *) 
__anonb29c4dea0302	tests/test_call_policies.cpp	/^        "invalid_arg_index", [] {}, py::keep_alive<0, 1>());$/;"	f	function:TEST_SUBMODULE	file:
__anonb29c4dea0402	tests/test_call_policies.cpp	/^        []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonb29c4dea0502	tests/test_call_policies.cpp	/^        []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonb29c4dea0602	tests/test_call_policies.cpp	/^    auto report_gil_status = []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonb37048960102	tests/test_opaque_types.cpp	/^        .def("__len__", [](const StringList &v) { return v.size(); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringList &v) 
__anonb37048960202	tests/test_opaque_types.cpp	/^            [](StringList &v) { return py::make_iterator(v.begin(), v.end()); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(StringList &v) 
__anonb37048960302	tests/test_opaque_types.cpp	/^    m.def("print_opaque_list", [](const StringList &l) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const StringList &l) 
__anonb37048960402	tests/test_opaque_types.cpp	/^    m.def("return_void_ptr", []() { return (void *) 0x1234; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonb37048960502	tests/test_opaque_types.cpp	/^    m.def("get_void_ptr_value", [](void *ptr) { return reinterpret_cast<std::intptr_t>(ptr); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(void *ptr) 
__anonb37048960602	tests/test_opaque_types.cpp	/^    m.def("return_null_str", []() { return (char *) nullptr; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonb37048960702	tests/test_opaque_types.cpp	/^    m.def("get_null_str_value", [](char *ptr) { return reinterpret_cast<std::intptr_t>(ptr); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(char *ptr) 
__anonb37048960802	tests/test_opaque_types.cpp	/^    m.def("return_unique_ptr", []() -> std::unique_ptr<StringList> {$/;"	f	function:TEST_SUBMODULE	typeref:typename:std::unique_ptr<StringList>	file:	signature:() 
__anonc1af077b0102	tests/test_cmake_build/main.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_MODULE	file:	signature:(int i, int j) 
__anoncaed610a0102	tests/test_numpy_vectorize.cpp	/^    m.def("vectorized_func2", [](py::array_t<int> x, py::array_t<float> y, float z) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::array_t<int> x, py::array_t<float> y, float z) 
__anoncaed610a0202	tests/test_numpy_vectorize.cpp	/^        return py::vectorize([z](int x, float y) { return my_func(x, y, z); })(std::move(x),$/;"	f	function:TEST_SUBMODULE::__anoncaed610a0102	file:	signature:(int x, float y) 
__anoncaed610a0302	tests/test_numpy_vectorize.cpp	/^          py::vectorize([](std::complex<double> c) { return c * std::complex<double>(2.f); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::complex<double> c) 
__anoncaed610a0402	tests/test_numpy_vectorize.cpp	/^          [](const py::array_t<int, py::array::c_style> &) { return "Int branch taken."; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<int, py::array::c_style> &) 
__anoncaed610a0502	tests/test_numpy_vectorize.cpp	/^          [](const py::array_t<float, py::array::c_style> &) { return "Float branch taken."; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<float, py::array::c_style> &) 
__anoncaed610a0602	tests/test_numpy_vectorize.cpp	/^    m.def("selective_func", [](const py::array_t<std::complex<float>, py::array::c_style> &) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<std::complex<float>, py::array::c_style> &) 
__anoncaed610a0702	tests/test_numpy_vectorize.cpp	/^                           const double g) { return *a + b + c.at(0) + d + e + f.value + g; }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(const double *a, double b, py::array_t<double> c, const int &d, int &e, NonPODClass f, const double g) 
__anoncaed610a0802	tests/test_numpy_vectorize.cpp	/^             const py::array_t<double, py::array::forcecast> &arg3) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::array_t<int, py::array::forcecast> &arg1, const py::array_t<float, py::array::forcecast> &arg2, const py::array_t<double, py::array::forcecast> &arg3) 
__anoncaed610a0902	tests/test_numpy_vectorize.cpp	/^    m.def("add_to", py::vectorize([](NonPODClass &x, int a) { x.value += a; }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(NonPODClass &x, int a) 
__anoncb6729100102	tests/test_gil_scoped.cpp	/^          []() { std::thread([]() { py::gil_scoped_acquire gil_acquired; }).join(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100202	tests/test_gil_scoped.cpp	/^          []() { std::thread([]() { py::gil_scoped_acquire gil_acquired; }).join(); });$/;"	f	function:TEST_SUBMODULE::__anoncb6729100102	file:	signature:() 
__anoncb6729100302	tests/test_gil_scoped.cpp	/^    m.def("test_callback_py_obj", [](py::object &func) { func(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object &func) 
__anoncb6729100402	tests/test_gil_scoped.cpp	/^    m.def("test_callback_std_func", [](const std::function<void()> &func) { func(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<void()> &func) 
__anoncb6729100502	tests/test_gil_scoped.cpp	/^    m.def("test_callback_virtual_func", [](VirtClass &virt) { virt.virtual_func(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(VirtClass &virt) 
__anoncb6729100602	tests/test_gil_scoped.cpp	/^    m.def("test_callback_pure_virtual_func", [](VirtClass &virt) { virt.pure_virtual_func(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(VirtClass &virt) 
__anoncb6729100702	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_released", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100802	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_acquired", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100902	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_inner_custom_released", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100a02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_inner_custom_acquired", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100b02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_inner_pybind11_released", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100c02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_inner_pybind11_acquired", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100d02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_nested_custom_released", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100e02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_nested_custom_acquired", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729100f02	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_nested_pybind11_released", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729101002	tests/test_gil_scoped.cpp	/^    m.def("test_cross_module_gil_nested_pybind11_acquired", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anoncb6729101102	tests/test_gil_scoped.cpp	/^    m.def("test_release_acquire", [](const py::object &obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &obj) 
__anoncb6729101202	tests/test_gil_scoped.cpp	/^    m.def("test_nested_acquire", [](const py::object &obj) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &obj) 
__anoncb6729101302	tests/test_gil_scoped.cpp	/^    m.def("test_multi_acquire_release_cross_module", [](unsigned bits) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(unsigned bits) 
__anoncb6729101402	tests/test_gil_scoped.cpp	/^            auto thread_f = [bits, &internals_ids]() {$/;"	f	function:TEST_SUBMODULE::__anoncb6729101302	file:	signature:() 
__anonce153c0b0111	tests/test_unnamed_namespace_a.cpp	/^namespace {$/;"	n	file:
__anonce153c0b0111::any_struct	tests/test_unnamed_namespace_a.cpp	/^struct any_struct {};$/;"	s	namespace:__anonce153c0b0111	file:
__anonce27548c0111	tests/test_unnamed_namespace_b.cpp	/^namespace {$/;"	n	file:
__anonce27548c0111::any_struct	tests/test_unnamed_namespace_b.cpp	/^struct any_struct {};$/;"	s	namespace:__anonce27548c0111	file:
__anond1abd1cf0102	tests/test_local_bindings.cpp	/^    m.def("load_external1", [](ExternalType1 &e) { return e.i; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ExternalType1 &e) 
__anond1abd1cf0202	tests/test_local_bindings.cpp	/^    m.def("load_external2", [](ExternalType2 &e) { return e.i; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ExternalType2 &e) 
__anond1abd1cf0302	tests/test_local_bindings.cpp	/^    bind_local<LocalType, -1>(m, "LocalType", py::module_local()).def("get3", [](LocalType &t) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(LocalType &t) 
__anond1abd1cf0402	tests/test_local_bindings.cpp	/^    m.def("local_value", [](LocalType &l) { return l.i; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(LocalType &l) 
__anond1abd1cf0502	tests/test_local_bindings.cpp	/^        .def("get", [](LocalType &i) { return i.i; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(LocalType &i) 
__anond1abd1cf0602	tests/test_local_bindings.cpp	/^    m.def("register_local_external", [m]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond1abd1cf0702	tests/test_local_bindings.cpp	/^    m.def("register_mixed_global", [m]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond1abd1cf0802	tests/test_local_bindings.cpp	/^    m.def("register_mixed_local", [m]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond1abd1cf0902	tests/test_local_bindings.cpp	/^    m.def("get_mixed_gl", [](int i) { return MixedGlobalLocal(i); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anond1abd1cf0a02	tests/test_local_bindings.cpp	/^    m.def("get_mixed_lg", [](int i) { return MixedLocalGlobal(i); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anond1abd1cf0b02	tests/test_local_bindings.cpp	/^          []() { return (uintptr_t) &py::detail::get_local_internals().registered_types_cpp; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond1abd1cf0c02	tests/test_local_bindings.cpp	/^          [](std::vector<int> v) { return std::accumulate(v.begin(), v.end(), 0); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::vector<int> v) 
__anond1abd1cf0d02	tests/test_local_bindings.cpp	/^    m.def("return_self", [](LocalVec *v) { return v; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(LocalVec *v) 
__anond1abd1cf0e02	tests/test_local_bindings.cpp	/^    m.def("return_copy", [](const LocalVec &v) { return LocalVec(v); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const LocalVec &v) 
__anond1abd1cf0f02	tests/test_local_bindings.cpp	/^    m.def("pet_name", [](pets::Pet &p) { return p.name(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(pets::Pet &p) 
__anond1abd1cf1002	tests/test_local_bindings.cpp	/^    m.def("get_gl_value", [](MixGL &o) { return o.i + 10; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(MixGL &o) 
__anond297fca70102	tests/test_factory_constructors.cpp	/^        .def(py::init([](unique_ptr_tag, int v) { return TestFactoryHelper::construct1(v); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(unique_ptr_tag, int v) 
__anond297fca70202	tests/test_factory_constructors.cpp	/^        .def(py::init([](pointer_tag) { return TestFactoryHelper::construct1(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag) 
__anond297fca70302	tests/test_factory_constructors.cpp	/^            [](py::handle, int v, py::handle) { return TestFactoryHelper::construct1(v); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle, int v, py::handle) 
__anond297fca70402	tests/test_factory_constructors.cpp	/^        .def(py::init([](pointer_tag, int v) { return TestFactoryHelper::construct2(v); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, int v) 
__anond297fca70502	tests/test_factory_constructors.cpp	/^        .def(py::init([](unique_ptr_tag, std::string v) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(unique_ptr_tag, std::string v) 
__anond297fca70602	tests/test_factory_constructors.cpp	/^        .def(py::init([](move_tag) { return TestFactoryHelper::construct2(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(move_tag) 
__anond297fca70702	tests/test_factory_constructors.cpp	/^    auto c4a = [c](pointer_tag, TF4_tag, int a) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, TF4_tag, int a) 
__anond297fca70802	tests/test_factory_constructors.cpp	/^        .def(py::init([](pointer_tag, int v) { return TestFactoryHelper::construct3(v); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, int v) 
__anond297fca70902	tests/test_factory_constructors.cpp	/^        .def(py::init([](shared_ptr_tag) { return TestFactoryHelper::construct3(); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag) 
__anond297fca70a02	tests/test_factory_constructors.cpp	/^    ignoreOldStyleInitWarnings([&pyTestFactory3]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond297fca70b02	tests/test_factory_constructors.cpp	/^        pyTestFactory3.def("__init__", [](TestFactory3 &self, std::string v) {$/;"	f	function:TEST_SUBMODULE::__anond297fca70a02	file:	signature:(TestFactory3 &self, std::string v) 
__anond297fca70c02	tests/test_factory_constructors.cpp	/^        .def(py::init([](pointer_tag, TF5_tag, int a) { return new TestFactory5(a); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, TF5_tag, int a) 
__anond297fca70d02	tests/test_factory_constructors.cpp	/^            [](shared_ptr_tag, TF4_tag, int a) { return std::make_shared<TestFactory4>(a); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, TF4_tag, int a) 
__anond297fca70e02	tests/test_factory_constructors.cpp	/^            [](shared_ptr_tag, TF5_tag, int a) { return std::make_shared<TestFactory5>(a); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, TF5_tag, int a) 
__anond297fca70f02	tests/test_factory_constructors.cpp	/^        .def(py::init([](null_ptr_tag) { return (TestFactory3 *) nullptr; }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(null_ptr_tag) 
__anond297fca71002	tests/test_factory_constructors.cpp	/^        .def(py::init([](null_unique_ptr_tag) { return std::unique_ptr<TestFactory3>(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(null_unique_ptr_tag) 
__anond297fca71102	tests/test_factory_constructors.cpp	/^        .def(py::init([](null_shared_ptr_tag) { return std::shared_ptr<TestFactory3>(); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(null_shared_ptr_tag) 
__anond297fca71202	tests/test_factory_constructors.cpp	/^        .def(py::init([](base_tag, int i) { return TestFactory6(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(base_tag, int i) 
__anond297fca71302	tests/test_factory_constructors.cpp	/^        .def(py::init([](alias_tag, int i) { return PyTF6(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(alias_tag, int i) 
__anond297fca71402	tests/test_factory_constructors.cpp	/^        .def(py::init([](alias_tag, std::string s) { return PyTF6(std::move(s)); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(alias_tag, std::string s) 
__anond297fca71502	tests/test_factory_constructors.cpp	/^        .def(py::init([](alias_tag, pointer_tag, int i) { return new PyTF6(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(alias_tag, pointer_tag, int i) 
__anond297fca71602	tests/test_factory_constructors.cpp	/^        .def(py::init([](base_tag, pointer_tag, int i) { return new TestFactory6(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(base_tag, pointer_tag, int i) 
__anond297fca71702	tests/test_factory_constructors.cpp	/^            [](base_tag, alias_tag, pointer_tag, int i) { return (TestFactory6 *) new PyTF6(i); /;"	f	function:TEST_SUBMODULE	file:	signature:(base_tag, alias_tag, pointer_tag, int i) 
__anond297fca71802	tests/test_factory_constructors.cpp	/^        .def(py::init([](int i) { return TestFactory7(i); }, [](int i) { return PyTF7(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anond297fca71902	tests/test_factory_constructors.cpp	/^        .def(py::init([](int i) { return TestFactory7(i); }, [](int i) { return PyTF7(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anond297fca71a02	tests/test_factory_constructors.cpp	/^        .def(py::init([](pointer_tag, int i) { return new TestFactory7(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, int i) 
__anond297fca71b02	tests/test_factory_constructors.cpp	/^                      [](pointer_tag, int i) { return new PyTF7(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(pointer_tag, int i) 
__anond297fca71c02	tests/test_factory_constructors.cpp	/^        .def(py::init([](mixed_tag, int i) { return new TestFactory7(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(mixed_tag, int i) 
__anond297fca71d02	tests/test_factory_constructors.cpp	/^                      [](mixed_tag, int i) { return PyTF7(i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(mixed_tag, int i) 
__anond297fca71e02	tests/test_factory_constructors.cpp	/^        .def(py::init([](mixed_tag, const std::string &s) { return TestFactory7((int) s.size());/;"	f	function:TEST_SUBMODULE	file:	signature:(mixed_tag, const std::string &s) 
__anond297fca71f02	tests/test_factory_constructors.cpp	/^                      [](mixed_tag, const std::string &s) { return new PyTF7((int) s.size()); })/;"	f	function:TEST_SUBMODULE	file:	signature:(mixed_tag, const std::string &s) 
__anond297fca72002	tests/test_factory_constructors.cpp	/^        .def(py::init([](base_tag, pointer_tag, int i) { return new TestFactory7(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(base_tag, pointer_tag, int i) 
__anond297fca72102	tests/test_factory_constructors.cpp	/^                      [](base_tag, pointer_tag, int i) { return (TestFactory7 *) new PyTF7(i); }/;"	f	function:TEST_SUBMODULE	file:	signature:(base_tag, pointer_tag, int i) 
__anond297fca72202	tests/test_factory_constructors.cpp	/^        .def(py::init([](alias_tag, pointer_tag, int i) { return new PyTF7(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(alias_tag, pointer_tag, int i) 
__anond297fca72302	tests/test_factory_constructors.cpp	/^                      [](alias_tag, pointer_tag, int i) { return new PyTF7(10 * i); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:(alias_tag, pointer_tag, int i) 
__anond297fca72402	tests/test_factory_constructors.cpp	/^            [](shared_ptr_tag, base_tag, int i) { return std::make_shared<TestFactory7>(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, base_tag, int i) 
__anond297fca72502	tests/test_factory_constructors.cpp	/^            [](shared_ptr_tag, base_tag, int i) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, base_tag, int i) 
__anond297fca72602	tests/test_factory_constructors.cpp	/^                         int i) { return std::make_shared<TestFactory7>(i); },$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, invalid_base_tag, int i) 
__anond297fca72702	tests/test_factory_constructors.cpp	/^                      [](shared_ptr_tag, invalid_base_tag, int i) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(shared_ptr_tag, invalid_base_tag, int i) 
__anond297fca72802	tests/test_factory_constructors.cpp	/^        .def(py::init([]() { return new NoPlacementNew(100); }))$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond297fca72902	tests/test_factory_constructors.cpp	/^    ignoreOldStyleInitWarnings([&pyNoisyAlloc]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond297fca72a02	tests/test_factory_constructors.cpp	/^        pyNoisyAlloc.def("__init__", [](NoisyAlloc *a, int i) {$/;"	f	function:TEST_SUBMODULE::__anond297fca72902	file:	signature:(NoisyAlloc *a, int i) 
__anond297fca72b02	tests/test_factory_constructors.cpp	/^    pyNoisyAlloc.def(py::init([](double d) { return new NoisyAlloc(d); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(double d) 
__anond297fca72c02	tests/test_factory_constructors.cpp	/^    pyNoisyAlloc.def(py::init([](int i, int) { return new NoisyAlloc(i); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int) 
__anond297fca72d02	tests/test_factory_constructors.cpp	/^    pyNoisyAlloc.def(py::init([](double d, int) { return NoisyAlloc(d); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(double d, int) 
__anond297fca72e02	tests/test_factory_constructors.cpp	/^    ignoreOldStyleInitWarnings([&pyNoisyAlloc]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond297fca72f02	tests/test_factory_constructors.cpp	/^                         [](NoisyAlloc &a, double d, double) { new (&a) NoisyAlloc(d); });$/;"	f	function:TEST_SUBMODULE::__anond297fca72e02	file:	signature:(NoisyAlloc &a, double d, double) 
__anond297fca73002	tests/test_factory_constructors.cpp	/^    pyNoisyAlloc.def(py::init([](int i, double) { return new NoisyAlloc(i); }));$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, double) 
__anond297fca73102	tests/test_factory_constructors.cpp	/^    ignoreOldStyleInitWarnings([&pyNoisyAlloc]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond297fca73202	tests/test_factory_constructors.cpp	/^            "__init__", [](NoisyAlloc &a, int i, const std::string &) { new (&a) NoisyAlloc(i); /;"	f	function:TEST_SUBMODULE::__anond297fca73102	file:	signature:(NoisyAlloc &a, int i, const std::string &) 
__anond91e26df0102	tests/test_eval.cpp	/^    m.def("test_eval_statements", [global]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond91e26df0202	tests/test_eval.cpp	/^        local["call_test"] = py::cpp_function([&]() -> int { return 42; });$/;"	f	function:TEST_SUBMODULE::__anond91e26df0102	typeref:typename:int	file:	signature:() 
__anond91e26df0302	tests/test_eval.cpp	/^    m.def("test_eval", [global]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond91e26df0402	tests/test_eval.cpp	/^    m.def("test_eval_single_statement", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond91e26df0502	tests/test_eval.cpp	/^        local["call_test"] = py::cpp_function([&]() -> int { return 42; });$/;"	f	function:TEST_SUBMODULE::__anond91e26df0402	typeref:typename:int	file:	signature:() 
__anond91e26df0602	tests/test_eval.cpp	/^    m.def("test_eval_file", [global](py::str filename) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::str filename) 
__anond91e26df0702	tests/test_eval.cpp	/^        local["call_test2"] = py::cpp_function([&](int value) { val_out = value; });$/;"	f	function:TEST_SUBMODULE::__anond91e26df0602	file:	signature:(int value) 
__anond91e26df0802	tests/test_eval.cpp	/^    m.def("test_eval_failure", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond91e26df0902	tests/test_eval.cpp	/^    m.def("test_eval_file_failure", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond91e26df0a02	tests/test_eval.cpp	/^    m.def("eval_empty_globals", [](py::object global) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object global) 
__anond91e26df0b02	tests/test_eval.cpp	/^    m.def("test_eval_closure", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d30111	tests/test_smart_ptr.cpp	/^namespace {$/;"	n	file:
__anond975f9d30111::C	tests/test_smart_ptr.cpp	/^struct C {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::C::C	tests/test_smart_ptr.cpp	/^    C() { print_created(this); }$/;"	f	struct:__anond975f9d30111::C	file:	access:public	signature:()
__anond975f9d30111::C::~C	tests/test_smart_ptr.cpp	/^    ~C() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::C	file:	access:public	signature:()
__anond975f9d30111::ElementA	tests/test_smart_ptr.cpp	/^struct ElementA : ElementBase {$/;"	s	namespace:__anond975f9d30111	file:	inherits:ElementBase
__anond975f9d30111::ElementA::ElementA	tests/test_smart_ptr.cpp	/^    explicit ElementA(int v) : v(v) {}$/;"	f	struct:__anond975f9d30111::ElementA	file:	access:public	signature:(int v)
__anond975f9d30111::ElementA::v	tests/test_smart_ptr.cpp	/^    int v;$/;"	m	struct:__anond975f9d30111::ElementA	typeref:typename:int	file:	access:public
__anond975f9d30111::ElementA::value	tests/test_smart_ptr.cpp	/^    int value() const { return v; }$/;"	f	struct:__anond975f9d30111::ElementA	typeref:typename:int	file:	access:public	signature:() const
__anond975f9d30111::ElementBase	tests/test_smart_ptr.cpp	/^struct ElementBase {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::ElementBase::ElementBase	tests/test_smart_ptr.cpp	/^    ElementBase() = default;$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:()
__anond975f9d30111::ElementBase::ElementBase	tests/test_smart_ptr.cpp	/^    ElementBase(const ElementBase &) = delete;$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:(const ElementBase &)
__anond975f9d30111::ElementBase::~ElementBase	tests/test_smart_ptr.cpp	/^    virtual ~ElementBase() = default; \/* Force creation of virtual table *\/$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:()
__anond975f9d30111::ElementList	tests/test_smart_ptr.cpp	/^struct ElementList {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::ElementList::add	tests/test_smart_ptr.cpp	/^    void add(const std::shared_ptr<ElementBase> &e) { l.push_back(e); }$/;"	f	struct:__anond975f9d30111::ElementList	typeref:typename:void	file:	access:public	signature:(const std::shared_ptr<ElementBase> & e)
__anond975f9d30111::ElementList::l	tests/test_smart_ptr.cpp	/^    std::vector<std::shared_ptr<ElementBase>> l;$/;"	m	struct:__anond975f9d30111::ElementList	typeref:typename:std::vector<std::shared_ptr<ElementBase>>	file:	access:public
__anond975f9d30111::HeldByDefaultHolder	tests/test_smart_ptr.cpp	/^struct HeldByDefaultHolder {};$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::MyObject1	tests/test_smart_ptr.cpp	/^class MyObject1 : public Object {$/;"	c	namespace:__anond975f9d30111	file:	inherits:Object
__anond975f9d30111::MyObject1::MyObject1	tests/test_smart_ptr.cpp	/^    explicit MyObject1(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject1	file:	access:public	signature:(int value)
__anond975f9d30111::MyObject1::toString	tests/test_smart_ptr.cpp	/^    std::string toString() const override { return "MyObject1[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject1	typeref:typename:std::string	file:	access:public	signature:() const
__anond975f9d30111::MyObject1::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject1	typeref:typename:int	file:	access:private
__anond975f9d30111::MyObject1::~MyObject1	tests/test_smart_ptr.cpp	/^    ~MyObject1() override { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject1	file:	access:protected	signature:()
__anond975f9d30111::MyObject2	tests/test_smart_ptr.cpp	/^class MyObject2 {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::MyObject2::MyObject2	tests/test_smart_ptr.cpp	/^    MyObject2(const MyObject2 &) = default;$/;"	p	class:__anond975f9d30111::MyObject2	file:	access:public	signature:(const MyObject2 &)
__anond975f9d30111::MyObject2::MyObject2	tests/test_smart_ptr.cpp	/^    explicit MyObject2(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject2	file:	access:public	signature:(int value)
__anond975f9d30111::MyObject2::toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject2[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject2	typeref:typename:std::string	file:	access:public	signature:() const
__anond975f9d30111::MyObject2::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject2	typeref:typename:int	file:	access:private
__anond975f9d30111::MyObject2::~MyObject2	tests/test_smart_ptr.cpp	/^    virtual ~MyObject2() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject2	file:	access:public	signature:()
__anond975f9d30111::MyObject3	tests/test_smart_ptr.cpp	/^class MyObject3 : public std::enable_shared_from_this<MyObject3> {$/;"	c	namespace:__anond975f9d30111	file:	inherits:std::enable_shared_from_this<MyObject3>
__anond975f9d30111::MyObject3::MyObject3	tests/test_smart_ptr.cpp	/^    MyObject3(const MyObject3 &) = default;$/;"	p	class:__anond975f9d30111::MyObject3	file:	access:public	signature:(const MyObject3 &)
__anond975f9d30111::MyObject3::MyObject3	tests/test_smart_ptr.cpp	/^    explicit MyObject3(int value) : value(value) { print_created(this, toString()); }$/;"	f	class:__anond975f9d30111::MyObject3	file:	access:public	signature:(int value)
__anond975f9d30111::MyObject3::toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject3[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject3	typeref:typename:std::string	file:	access:public	signature:() const
__anond975f9d30111::MyObject3::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject3	typeref:typename:int	file:	access:private
__anond975f9d30111::MyObject3::~MyObject3	tests/test_smart_ptr.cpp	/^    virtual ~MyObject3() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject3	file:	access:public	signature:()
__anond975f9d30111::MyObject4	tests/test_smart_ptr.cpp	/^class MyObject4 {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::MyObject4::MyObject4	tests/test_smart_ptr.cpp	/^    explicit MyObject4(int value) : value{value} {$/;"	f	class:__anond975f9d30111::MyObject4	file:	access:public	signature:(int value)
__anond975f9d30111::MyObject4::cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anond975f9d30111::MyObject4	typeref:typename:void	file:	access:public	signature:()
__anond975f9d30111::MyObject4::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject4	typeref:typename:int	file:	access:public
__anond975f9d30111::MyObject4::~MyObject4	tests/test_smart_ptr.cpp	/^    ~MyObject4() {$/;"	f	class:__anond975f9d30111::MyObject4	file:	access:private	signature:()
__anond975f9d30111::MyObject4a	tests/test_smart_ptr.cpp	/^class MyObject4a {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::MyObject4a::MyObject4a	tests/test_smart_ptr.cpp	/^    explicit MyObject4a(int i) : value{i} {$/;"	f	class:__anond975f9d30111::MyObject4a	file:	access:public	signature:(int i)
__anond975f9d30111::MyObject4a::cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anond975f9d30111::MyObject4a	typeref:typename:void	file:	access:public	signature:()
__anond975f9d30111::MyObject4a::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject4a	typeref:typename:int	file:	access:public
__anond975f9d30111::MyObject4a::~MyObject4a	tests/test_smart_ptr.cpp	/^    virtual ~MyObject4a() {$/;"	f	class:__anond975f9d30111::MyObject4a	file:	access:protected	signature:()
__anond975f9d30111::MyObject4b	tests/test_smart_ptr.cpp	/^class MyObject4b : public MyObject4a {$/;"	c	namespace:__anond975f9d30111	file:	inherits:MyObject4a
__anond975f9d30111::MyObject4b::MyObject4b	tests/test_smart_ptr.cpp	/^    explicit MyObject4b(int i) : MyObject4a(i) { print_created(this); }$/;"	f	class:__anond975f9d30111::MyObject4b	file:	access:public	signature:(int i)
__anond975f9d30111::MyObject4b::~MyObject4b	tests/test_smart_ptr.cpp	/^    ~MyObject4b() override { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject4b	file:	access:public	signature:()
__anond975f9d30111::MyObject5	tests/test_smart_ptr.cpp	/^class MyObject5 { \/\/ managed by huge_unique_ptr$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::MyObject5::MyObject5	tests/test_smart_ptr.cpp	/^    explicit MyObject5(int value) : value{value} { print_created(this); }$/;"	f	class:__anond975f9d30111::MyObject5	file:	access:public	signature:(int value)
__anond975f9d30111::MyObject5::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject5	typeref:typename:int	file:	access:public
__anond975f9d30111::MyObject5::~MyObject5	tests/test_smart_ptr.cpp	/^    ~MyObject5() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject5	file:	access:public	signature:()
__anond975f9d30111::SharedFromThisRef	tests/test_smart_ptr.cpp	/^struct SharedFromThisRef {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::SharedFromThisRef::B	tests/test_smart_ptr.cpp	/^    struct B : std::enable_shared_from_this<B> {$/;"	s	struct:__anond975f9d30111::SharedFromThisRef	file:	inherits:std::enable_shared_from_this<B>	access:public
__anond975f9d30111::SharedFromThisRef::B::B	tests/test_smart_ptr.cpp	/^        B() { print_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:()
__anond975f9d30111::SharedFromThisRef::B::B	tests/test_smart_ptr.cpp	/^        B(B &&) noexcept : std::enable_shared_from_this<B>() { print_move_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:(B &&)
__anond975f9d30111::SharedFromThisRef::B::B	tests/test_smart_ptr.cpp	/^        B(const B &) : std::enable_shared_from_this<B>() { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:(const B &)
__anond975f9d30111::SharedFromThisRef::B::~B	tests/test_smart_ptr.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:()
__anond975f9d30111::SharedFromThisRef::shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<B> shared = std::make_shared<B>();$/;"	m	struct:__anond975f9d30111::SharedFromThisRef	typeref:typename:std::shared_ptr<B>	file:	access:public
__anond975f9d30111::SharedFromThisRef::value	tests/test_smart_ptr.cpp	/^    B value = {};$/;"	m	struct:__anond975f9d30111::SharedFromThisRef	typeref:typename:B	file:	access:public
__anond975f9d30111::SharedFromThisVBase	tests/test_smart_ptr.cpp	/^struct SharedFromThisVBase : std::enable_shared_from_this<SharedFromThisVBase> {$/;"	s	namespace:__anond975f9d30111	file:	inherits:std::enable_shared_from_this<SharedFromThisVBase>
__anond975f9d30111::SharedFromThisVBase::SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    SharedFromThisVBase() = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:()
__anond975f9d30111::SharedFromThisVBase::SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    SharedFromThisVBase(const SharedFromThisVBase &) = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:(const SharedFromThisVBase &)
__anond975f9d30111::SharedFromThisVBase::~SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    virtual ~SharedFromThisVBase() = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:()
__anond975f9d30111::SharedFromThisVirt	tests/test_smart_ptr.cpp	/^struct SharedFromThisVirt : virtual SharedFromThisVBase {};$/;"	s	namespace:__anond975f9d30111	file:	inherits:SharedFromThisVBase
__anond975f9d30111::SharedPtrRef	tests/test_smart_ptr.cpp	/^struct SharedPtrRef {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::SharedPtrRef::A	tests/test_smart_ptr.cpp	/^    struct A {$/;"	s	struct:__anond975f9d30111::SharedPtrRef	file:	access:public
__anond975f9d30111::SharedPtrRef::A::A	tests/test_smart_ptr.cpp	/^        A() { print_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:()
__anond975f9d30111::SharedPtrRef::A::A	tests/test_smart_ptr.cpp	/^        A(A &&) noexcept { print_move_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:(A &&)
__anond975f9d30111::SharedPtrRef::A::A	tests/test_smart_ptr.cpp	/^        A(const A &) { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:(const A &)
__anond975f9d30111::SharedPtrRef::A::~A	tests/test_smart_ptr.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:()
__anond975f9d30111::SharedPtrRef::shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<A> shared = std::make_shared<A>();$/;"	m	struct:__anond975f9d30111::SharedPtrRef	typeref:typename:std::shared_ptr<A>	file:	access:public
__anond975f9d30111::SharedPtrRef::value	tests/test_smart_ptr.cpp	/^    A value = {};$/;"	m	struct:__anond975f9d30111::SharedPtrRef	typeref:typename:A	file:	access:public
__anond975f9d30111::TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForHolderWithAddressOf {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::TypeForHolderWithAddressOf::TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf() { print_created(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:()
__anond975f9d30111::TypeForHolderWithAddressOf::TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf(TypeForHolderWithAddressOf &&) noexcept {$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:(TypeForHolderWithAddressOf &&)
__anond975f9d30111::TypeForHolderWithAddressOf::TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    TypeForHolderWithAddressOf(const TypeForHolderWithAddressOf &) { print_copy_created(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:(const TypeForHolderWithAddressOf &)
__anond975f9d30111::TypeForHolderWithAddressOf::toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	typeref:typename:std::string	file:	access:public	signature:() const
__anond975f9d30111::TypeForHolderWithAddressOf::value	tests/test_smart_ptr.cpp	/^    int value = 42;$/;"	m	struct:__anond975f9d30111::TypeForHolderWithAddressOf	typeref:typename:int	file:	access:public
__anond975f9d30111::TypeForHolderWithAddressOf::~TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:()
__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^struct TypeForMoveOnlyHolderWithAddressOf {$/;"	s	namespace:__anond975f9d30111	file:
__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf::TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    explicit TypeForMoveOnlyHolderWithAddressOf(int value) : value{value} { print_created(this);/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	file:	access:public	signature:(int value)
__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf::toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	typeref:typename:std::string	file:	access:public	signature:() const
__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf::value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	typeref:typename:int	file:	access:public
__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf::~TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForMoveOnlyHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	file:	access:public	signature:()
__anond975f9d30111::custom_unique_ptr	tests/test_smart_ptr.cpp	/^class custom_unique_ptr {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::custom_unique_ptr::custom_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit custom_unique_ptr(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::custom_unique_ptr	file:	access:public	signature:(T * p)
__anond975f9d30111::custom_unique_ptr::get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:T *	file:	access:public	signature:() const
__anond975f9d30111::custom_unique_ptr::impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:std::unique_ptr<T>	file:	access:private
__anond975f9d30111::custom_unique_ptr::release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:T *	file:	access:public	signature:()
__anond975f9d30111::huge_unique_ptr	tests/test_smart_ptr.cpp	/^class huge_unique_ptr {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::huge_unique_ptr::get	tests/test_smart_ptr.cpp	/^    T *get() { return ptr.get(); }$/;"	f	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:T *	file:	access:public	signature:()
__anond975f9d30111::huge_unique_ptr::huge_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit huge_unique_ptr(T *p) : ptr(p) {}$/;"	f	class:__anond975f9d30111::huge_unique_ptr	file:	access:public	signature:(T * p)
__anond975f9d30111::huge_unique_ptr::padding	tests/test_smart_ptr.cpp	/^    uint64_t padding[10];$/;"	m	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:uint64_t[10]	file:	access:private
__anond975f9d30111::huge_unique_ptr::ptr	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> ptr;$/;"	m	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:std::unique_ptr<T>	file:	access:private
__anond975f9d30111::myobject4_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4 *> myobject4_instances;$/;"	v	namespace:__anond975f9d30111	typeref:typename:std::unordered_set<MyObject4 * >
__anond975f9d30111::myobject4a_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4a *> myobject4a_instances;$/;"	v	namespace:__anond975f9d30111	typeref:typename:std::unordered_set<MyObject4a * >
__anond975f9d30111::shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class shared_ptr_with_addressof_operator {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::shared_ptr_with_addressof_operator::get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:() const
__anond975f9d30111::shared_ptr_with_addressof_operator::impl	tests/test_smart_ptr.cpp	/^    std::shared_ptr<T> impl;$/;"	m	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:std::shared_ptr<T>	file:	access:private
__anond975f9d30111::shared_ptr_with_addressof_operator::operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:T **	file:	access:public	signature:()
__anond975f9d30111::shared_ptr_with_addressof_operator::shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit shared_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	file:	access:public	signature:(T * p)
__anond975f9d30111::shared_ptr_with_addressof_operator::shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    shared_ptr_with_addressof_operator() = default;$/;"	p	class:__anond975f9d30111::shared_ptr_with_addressof_operator	file:	access:public	signature:()
__anond975f9d30111::unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class unique_ptr_with_addressof_operator {$/;"	c	namespace:__anond975f9d30111	file:
__anond975f9d30111::unique_ptr_with_addressof_operator::get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:() const
__anond975f9d30111::unique_ptr_with_addressof_operator::impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:std::unique_ptr<T>	file:	access:private
__anond975f9d30111::unique_ptr_with_addressof_operator::operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T **	file:	access:public	signature:()
__anond975f9d30111::unique_ptr_with_addressof_operator::release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:()
__anond975f9d30111::unique_ptr_with_addressof_operator::unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit unique_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	file:	access:public	signature:(T * p)
__anond975f9d30111::unique_ptr_with_addressof_operator::unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    unique_ptr_with_addressof_operator() = default;$/;"	p	class:__anond975f9d30111::unique_ptr_with_addressof_operator	file:	access:public	signature:()
__anond975f9d30202	tests/test_smart_ptr.cpp	/^    m.def("make_object_1", []() -> Object * { return new MyObject1(1); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:Object *	file:	signature:() 
__anond975f9d30302	tests/test_smart_ptr.cpp	/^    m.def("make_object_2", []() -> ref<Object> { return ref<Object>(new MyObject1(2)); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:ref<Object>	file:	signature:() 
__anond975f9d30402	tests/test_smart_ptr.cpp	/^    m.def("make_myobject1_1", []() -> MyObject1 * { return new MyObject1(4); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:MyObject1 *	file:	signature:() 
__anond975f9d30502	tests/test_smart_ptr.cpp	/^    m.def("make_myobject1_2", []() -> ref<MyObject1> { return ref<MyObject1>(new MyObject1(5)); /;"	f	function:TEST_SUBMODULE	typeref:typename:ref<MyObject1>	file:	signature:() 
__anond975f9d30602	tests/test_smart_ptr.cpp	/^    m.def("print_object_1", [](const Object *obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Object *obj) 
__anond975f9d30702	tests/test_smart_ptr.cpp	/^    m.def("print_object_2", [](ref<Object> obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ref<Object> obj) 
__anond975f9d30802	tests/test_smart_ptr.cpp	/^    m.def("print_object_3", [](const ref<Object> &obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ref<Object> &obj) 
__anond975f9d30902	tests/test_smart_ptr.cpp	/^    m.def("print_object_4", [](const ref<Object> *obj) { py::print((*obj)->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ref<Object> *obj) 
__anond975f9d30a02	tests/test_smart_ptr.cpp	/^    m.def("print_myobject1_1", [](const MyObject1 *obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const MyObject1 *obj) 
__anond975f9d30b02	tests/test_smart_ptr.cpp	/^    m.def("print_myobject1_2", [](ref<MyObject1> obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(ref<MyObject1> obj) 
__anond975f9d30c02	tests/test_smart_ptr.cpp	/^    m.def("print_myobject1_3", [](const ref<MyObject1> &obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ref<MyObject1> &obj) 
__anond975f9d30d02	tests/test_smart_ptr.cpp	/^    m.def("print_myobject1_4", [](const ref<MyObject1> *obj) { py::print((*obj)->toString()); })/;"	f	function:TEST_SUBMODULE	file:	signature:(const ref<MyObject1> *obj) 
__anond975f9d30e02	tests/test_smart_ptr.cpp	/^    m.def("make_myobject2_1", []() { return new MyObject2(6); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d30f02	tests/test_smart_ptr.cpp	/^    m.def("make_myobject2_2", []() { return std::make_shared<MyObject2>(7); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d31002	tests/test_smart_ptr.cpp	/^    m.def("print_myobject2_1", [](const MyObject2 *obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const MyObject2 *obj) 
__anond975f9d31102	tests/test_smart_ptr.cpp	/^    m.def("print_myobject2_2", [](std::shared_ptr<MyObject2> obj) { py::print(obj->toString()); /;"	f	function:TEST_SUBMODULE	file:	signature:(std::shared_ptr<MyObject2> obj) 
__anond975f9d31202	tests/test_smart_ptr.cpp	/^          [](const std::shared_ptr<MyObject2> &obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::shared_ptr<MyObject2> &obj) 
__anond975f9d31302	tests/test_smart_ptr.cpp	/^          [](const std::shared_ptr<MyObject2> *obj) { py::print((*obj)->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::shared_ptr<MyObject2> *obj) 
__anond975f9d31402	tests/test_smart_ptr.cpp	/^    m.def("make_myobject3_1", []() { return new MyObject3(8); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d31502	tests/test_smart_ptr.cpp	/^    m.def("make_myobject3_2", []() { return std::make_shared<MyObject3>(9); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d31602	tests/test_smart_ptr.cpp	/^    m.def("print_myobject3_1", [](const MyObject3 *obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const MyObject3 *obj) 
__anond975f9d31702	tests/test_smart_ptr.cpp	/^    m.def("print_myobject3_2", [](std::shared_ptr<MyObject3> obj) { py::print(obj->toString()); /;"	f	function:TEST_SUBMODULE	file:	signature:(std::shared_ptr<MyObject3> obj) 
__anond975f9d31802	tests/test_smart_ptr.cpp	/^          [](const std::shared_ptr<MyObject3> &obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::shared_ptr<MyObject3> &obj) 
__anond975f9d31902	tests/test_smart_ptr.cpp	/^          [](const std::shared_ptr<MyObject3> *obj) { py::print((*obj)->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::shared_ptr<MyObject3> *obj) 
__anond975f9d31a02	tests/test_smart_ptr.cpp	/^    m.def("test_object1_refcounting", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d31b02	tests/test_smart_ptr.cpp	/^            "copy", [](const SharedPtrRef &s) { return s.value; }, py::return_value_policy::copy/;"	f	function:TEST_SUBMODULE	file:	signature:(const SharedPtrRef &s) 
__anond975f9d31c02	tests/test_smart_ptr.cpp	/^            [](const SharedPtrRef &s) { return s.shared; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const SharedPtrRef &s) 
__anond975f9d31d02	tests/test_smart_ptr.cpp	/^        .def("set_ref", [](SharedPtrRef &, const A &) { return true; })$/;"	f	function:TEST_SUBMODULE	file:	signature:(SharedPtrRef &, const A &) 
__anond975f9d31e02	tests/test_smart_ptr.cpp	/^        .def("set_holder", [](SharedPtrRef &, std::shared_ptr<A>) { return true; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(SharedPtrRef &, std::shared_ptr<A>) 
__anond975f9d31f02	tests/test_smart_ptr.cpp	/^                               [](const SharedFromThisRef &s) -> const B & { return *s.shared; }/;"	f	function:TEST_SUBMODULE	typeref:typename:const B &	file:	signature:(const SharedFromThisRef &s) 
__anond975f9d32002	tests/test_smart_ptr.cpp	/^            [](const SharedFromThisRef &s) { return s.value; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const SharedFromThisRef &s) 
__anond975f9d32102	tests/test_smart_ptr.cpp	/^            [](const SharedFromThisRef &s) { return s.shared; },$/;"	f	function:TEST_SUBMODULE	file:	signature:(const SharedFromThisRef &s) 
__anond975f9d32202	tests/test_smart_ptr.cpp	/^        .def("set_ref", [](SharedFromThisRef &, const B &) { return true; })$/;"	f	function:TEST_SUBMODULE	file:	signature:(SharedFromThisRef &, const B &) 
__anond975f9d32302	tests/test_smart_ptr.cpp	/^        .def("set_holder", [](SharedFromThisRef &, std::shared_ptr<B>) { return true; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(SharedFromThisRef &, std::shared_ptr<B>) 
__anond975f9d32402	tests/test_smart_ptr.cpp	/^        .def_static("get", []() { return sft.get(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d32502	tests/test_smart_ptr.cpp	/^        .def_static("make", []() { return custom_unique_ptr<C>(new C); })$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d32602	tests/test_smart_ptr.cpp	/^        .def_static("make_as_object", []() { return py::cast(custom_unique_ptr<C>(new C)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d32702	tests/test_smart_ptr.cpp	/^        .def_static("make", []() { return HolderWithAddressOf(new TypeForHolderWithAddressOf); }/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d32802	tests/test_smart_ptr.cpp	/^        .def("get", [](const HolderWithAddressOf &self) { return self.get(); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const HolderWithAddressOf &self) 
__anond975f9d32902	tests/test_smart_ptr.cpp	/^             [](const TypeForHolderWithAddressOf *obj) { py::print(obj->toString()); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const TypeForHolderWithAddressOf *obj) 
__anond975f9d32a02	tests/test_smart_ptr.cpp	/^        .def("print_object_2", [](HolderWithAddressOf obj) { py::print(obj.get()->toString()); }/;"	f	function:TEST_SUBMODULE	file:	signature:(HolderWithAddressOf obj) 
__anond975f9d32b02	tests/test_smart_ptr.cpp	/^             [](const HolderWithAddressOf &obj) { py::print(obj.get()->toString()); })$/;"	f	function:TEST_SUBMODULE	file:	signature:(const HolderWithAddressOf &obj) 
__anond975f9d32c02	tests/test_smart_ptr.cpp	/^             [](const HolderWithAddressOf *obj) { py::print((*obj).get()->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const HolderWithAddressOf *obj) 
__anond975f9d32d02	tests/test_smart_ptr.cpp	/^                    []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anond975f9d32e02	tests/test_smart_ptr.cpp	/^             [](const TypeForMoveOnlyHolderWithAddressOf *obj) { py::print(obj->toString()); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const TypeForMoveOnlyHolderWithAddressOf *obj) 
__anond975f9d32f02	tests/test_smart_ptr.cpp	/^        .def_static("load_shared_ptr", [](std::shared_ptr<HeldByDefaultHolder>) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::shared_ptr<HeldByDefaultHolder>) 
__anond975f9d33002	tests/test_smart_ptr.cpp	/^        .def("get", [](ElementList &el) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(ElementList &el) 
__anone079b9280102	tests/test_pickling.cpp	/^            [](const py::object &self) {$/;"	f	function:exercise_trampoline::wrap	file:	signature:(const py::object &self) 
__anone079b9280202	tests/test_pickling.cpp	/^            [](const py::tuple &t) {$/;"	f	function:exercise_trampoline::wrap	file:	signature:(const py::tuple &t) 
__anone079b9280302	tests/test_pickling.cpp	/^          []() { return std::unique_ptr<SimpleBase>(new SimpleCppDerived); });$/;"	f	function:exercise_trampoline::wrap	file:	signature:() 
__anone079b9280402	tests/test_pickling.cpp	/^    m.def("check_dynamic_cast_SimpleCppDerived", [](const SimpleBase *base_ptr) {$/;"	f	function:exercise_trampoline::wrap	file:	signature:(const SimpleBase *base_ptr) 
__anone079b9280502	tests/test_pickling.cpp	/^    m.def("simple_callable", []() { return 20220426; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone079b9280602	tests/test_pickling.cpp	/^        .def("__getstate__", [](const Pickleable &p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Pickleable &p) 
__anone079b9280702	tests/test_pickling.cpp	/^    ignoreOldStyleInitWarnings([&pyPickleable]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone079b9280802	tests/test_pickling.cpp	/^        pyPickleable.def("__setstate__", [](Pickleable &p, const py::tuple &t) {$/;"	f	function:TEST_SUBMODULE::__anone079b9280702	file:	signature:(Pickleable &p, const py::tuple &t) 
__anone079b9280902	tests/test_pickling.cpp	/^            [](const PickleableNew &p) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const PickleableNew &p) 
__anone079b9280a02	tests/test_pickling.cpp	/^            [](const py::tuple &t) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::tuple &t) 
__anone079b9280b02	tests/test_pickling.cpp	/^        .def("__getstate__", [](const py::object &self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &self) 
__anone079b9280c02	tests/test_pickling.cpp	/^    ignoreOldStyleInitWarnings([&pyPickleableWithDict]() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone079b9280d02	tests/test_pickling.cpp	/^        pyPickleableWithDict.def("__setstate__", [](const py::object &self, const py::tuple &t) /;"	f	function:TEST_SUBMODULE::__anone079b9280c02	file:	signature:(const py::object &self, const py::tuple &t) 
__anone079b9280e02	tests/test_pickling.cpp	/^            [](const py::object &self) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &self) 
__anone079b9280f02	tests/test_pickling.cpp	/^            [](const py::tuple &t) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::tuple &t) 
__anone4fbb0f70102	tests/test_callbacks.cpp	/^    m.def("test_callback1", [](const py::object &func) { return func(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &func) 
__anone4fbb0f70202	tests/test_callbacks.cpp	/^    m.def("test_callback2", [](const py::object &func) { return func("Hello", 'x', true, 5); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &func) 
__anone4fbb0f70302	tests/test_callbacks.cpp	/^    m.def("test_callback3", [](const std::function<int(int)> &func) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<int(int)> &func) 
__anone4fbb0f70402	tests/test_callbacks.cpp	/^          []() -> std::function<int(int)> { return [](int i) { return i + 1; }; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:std::function<int (int)>	file:	signature:() 
__anone4fbb0f70502	tests/test_callbacks.cpp	/^          []() -> std::function<int(int)> { return [](int i) { return i + 1; }; });$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f70402	file:	signature:(int i) 
__anone4fbb0f70602	tests/test_callbacks.cpp	/^          []() { return py::cpp_function([](int i) { return i + 1; }, py::arg("number")); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone4fbb0f70702	tests/test_callbacks.cpp	/^          []() { return py::cpp_function([](int i) { return i + 1; }, py::arg("number")); });$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f70602	file:	signature:(int i) 
__anone4fbb0f70802	tests/test_callbacks.cpp	/^    m.def("test_tuple_unpacking", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70902	tests/test_callbacks.cpp	/^    m.def("test_dict_unpacking", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70a02	tests/test_callbacks.cpp	/^    m.def("test_keyword_args", [](const py::function &f) { return f("x"_a = 10, "y"_a = 20); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70b02	tests/test_callbacks.cpp	/^    m.def("test_unpacking_and_keywords1", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70c02	tests/test_callbacks.cpp	/^    m.def("test_unpacking_and_keywords2", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70d02	tests/test_callbacks.cpp	/^    m.def("test_unpacking_error1", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70e02	tests/test_callbacks.cpp	/^    m.def("test_unpacking_error2", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f70f02	tests/test_callbacks.cpp	/^          [](const py::function &f) { f(234, UnregisteredType(), "kw"_a = 567); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f71002	tests/test_callbacks.cpp	/^    m.def("test_arg_conversion_error2", [](const py::function &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f) 
__anone4fbb0f71102	tests/test_callbacks.cpp	/^    m.def("test_lambda_closure_cleanup", []() -> std::function<void()> {$/;"	f	function:TEST_SUBMODULE	typeref:typename:std::function<void ()>	file:	signature:() 
__anone4fbb0f71202	tests/test_callbacks.cpp	/^        return [p]() {$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f71102	file:	signature:() 
__anone4fbb0f71302	tests/test_callbacks.cpp	/^    m.def("test_cpp_callable_cleanup", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone4fbb0f71402	tests/test_callbacks.cpp	/^    m.def("dummy_function_overloaded", [](int i, int j) { return i + j; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anone4fbb0f71502	tests/test_callbacks.cpp	/^    m.def("dummy_function2", [](int i, int j) { return i + j; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i, int j) 
__anone4fbb0f71602	tests/test_callbacks.cpp	/^        [](std::function<int(int)> f, bool expect_none = false) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(std::function<int(int)> f, bool expect_none = false) 
__anone4fbb0f71702	tests/test_callbacks.cpp	/^    m.def("test_dummy_function", [](const std::function<int(int)> &f) -> std::string {$/;"	f	function:TEST_SUBMODULE	typeref:typename:std::string	file:	signature:(const std::function<int(int)> &f) 
__anone4fbb0f71802	tests/test_callbacks.cpp	/^          [](const std::function<double(AbstractBase &)> &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<double(AbstractBase &)> &) 
__anone4fbb0f71902	tests/test_callbacks.cpp	/^    m.def("callback_with_movable", [](const std::function<void(MovableObject &)> &f) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<void(MovableObject &)> &f) 
__anone4fbb0f71a02	tests/test_callbacks.cpp	/^        .def("triple", [](CppBoundMethodTest &, int val) { return 3 * val; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(CppBoundMethodTest &, int val) 
__anone4fbb0f71b02	tests/test_callbacks.cpp	/^          [](const std::function<double(py::iterable)> &sum_builtin, const py::iterable &i) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const std::function<double(py::iterable)> &sum_builtin, const py::iterable &i) 
__anone4fbb0f71c02	tests/test_callbacks.cpp	/^    m.def("test_async_callback", [](const callback_f &f, const py::list &work) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const callback_f &f, const py::list &work) 
__anone4fbb0f71d02	tests/test_callbacks.cpp	/^        auto start_f = [f](int j) {$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f71c02	file:	signature:(int j) 
__anone4fbb0f71e02	tests/test_callbacks.cpp	/^            auto invoke_f = [f, j] {$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f71c02::__anone4fbb0f71d02	file:
__anone4fbb0f71f02	tests/test_callbacks.cpp	/^    m.def("callback_num_times", [](const py::function &f, std::size_t num) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::function &f, std::size_t num) 
__anone4fbb0f72002	tests/test_callbacks.cpp	/^    auto *custom_def = []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone4fbb0f72102	tests/test_callbacks.cpp	/^        def.ml_meth = [](PyObject *, PyObject *args) -> PyObject * {$/;"	f	function:TEST_SUBMODULE::__anone4fbb0f72002	typeref:typename:PyObject *	file:	signature:(PyObject *, PyObject *args) 
__anone4fbb0f72202	tests/test_callbacks.cpp	/^    py::capsule rec_capsule(std::malloc(1), [](void *data) { std::free(data); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(void *data) 
__anone4fbb0f72302	tests/test_callbacks.cpp	/^    py::capsule rec_capsule2(std::malloc(1), [](void *data) { std::free(data); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(void *data) 
__anone6259a070102	tests/test_custom_type_casters.cpp	/^        [](const ArgInspector2 &a, const ArgInspector1 &b, ArgAlwaysConverts) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ArgInspector2 &a, const ArgInspector1 &b, ArgAlwaysConverts) 
__anone6259a070202	tests/test_custom_type_casters.cpp	/^        py::arg{}.noconvert(false),$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ArgInspector2 &a, const ArgInspector1 &b, ArgAlwaysConverts) 
__anone6259a070302	tests/test_custom_type_casters.cpp	/^        "floats_preferred", [](double f) { return 0.5 * f; }, "f"_a);$/;"	f	function:TEST_SUBMODULE	file:	signature:(double f) 
__anone6259a070402	tests/test_custom_type_casters.cpp	/^        "floats_only", [](double f) { return 0.5 * f; }, "f"_a.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(double f) 
__anone6259a070502	tests/test_custom_type_casters.cpp	/^        "ints_preferred", [](int i) { return i \/ 2; }, "i"_a);$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anone6259a070602	tests/test_custom_type_casters.cpp	/^        "ints_only", [](int i) { return i \/ 2; }, "i"_a.noconvert());$/;"	f	function:TEST_SUBMODULE	file:	signature:(int i) 
__anone6259a070702	tests/test_custom_type_casters.cpp	/^    m.def("custom_caster_no_destroy", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone6259a070802	tests/test_custom_type_casters.cpp	/^        []() { return new DestructionTester(); },$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anone6259a070902	tests/test_custom_type_casters.cpp	/^        []() -> const DestructionTester * { return new DestructionTester(); },$/;"	f	function:TEST_SUBMODULE	typeref:typename:const DestructionTester *	file:	signature:() 
__anone6259a070a02	tests/test_custom_type_casters.cpp	/^    m.def("other_lib_type", [](other_lib::MyType x) { return x; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(other_lib::MyType x) 
__anone8e9c9690102	include/pybind11/iostream.h	/^        auto is_ascii = [](char c) { return (static_cast<unsigned char>(c) & 0x80) == 0x00; };$/;"	f	function:pythonbuf::utf8_remainder	file:	signature:(char c) 
__anone8e9c9690202	include/pybind11/iostream.h	/^        auto is_leading = [](char c) { return (static_cast<unsigned char>(c) & 0xC0) == 0xC0; };$/;"	f	function:pythonbuf::utf8_remainder	file:	signature:(char c) 
__anone8e9c9690302	include/pybind11/iostream.h	/^        auto is_leading_2b = [](char c) { return static_cast<unsigned char>(c) <= 0xDF; };$/;"	f	function:pythonbuf::utf8_remainder	file:	signature:(char c) 
__anone8e9c9690402	include/pybind11/iostream.h	/^        auto is_leading_3b = [](char c) { return static_cast<unsigned char>(c) <= 0xEF; };$/;"	f	function:pythonbuf::utf8_remainder	file:	signature:(char c) 
__anone8e9c9690502	include/pybind11/iostream.h	/^        .def("__exit__", [](detail::OstreamRedirect &self_, const args &) { self_.exit(); });$/;"	f	function:PYBIND11_NAMESPACE_END	file:	signature:(detail::OstreamRedirect &self_, const args &) 
__anonee6f402d0102	tests/test_class.cpp	/^    m.def("obj_class_name", [](py::handle obj) { return py::detail::obj_class_name(obj.ptr()); }/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle obj) 
__anonee6f402d0202	tests/test_class.cpp	/^        .def(py::init([](const NoConstructorNew &self) { return self; })) \/\/ Need a NOOP __ini/;"	f	function:TEST_SUBMODULE	file:	signature:(const NoConstructorNew &self) 
__anonee6f402d0302	tests/test_class.cpp	/^                    [](const py::object &) { return NoConstructorNew::new_instance(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &) 
__anonee6f402d0402	tests/test_class.cpp	/^          [](const Pet &pet) { return pet.name() + " is a " + pet.species(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Pet &pet) 
__anonee6f402d0502	tests/test_class.cpp	/^    m.def("dog_bark", [](const Dog &dog) { return dog.bark(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const Dog &dog) 
__anonee6f402d0602	tests/test_class.cpp	/^    m.def("return_class_1", []() -> BaseClass * { return new DerivedClass1(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:	signature:() 
__anonee6f402d0702	tests/test_class.cpp	/^    m.def("return_class_2", []() -> BaseClass * { return new DerivedClass2(); });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:	signature:() 
__anonee6f402d0802	tests/test_class.cpp	/^    m.def("return_class_n", [](int n) -> BaseClass * {$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:	signature:(int n) 
__anonee6f402d0902	tests/test_class.cpp	/^    m.def("return_none", []() -> BaseClass * { return nullptr; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:BaseClass *	file:	signature:() 
__anonee6f402d0a02	tests/test_class.cpp	/^    m.def("check_instances", [](const py::list &l) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::list &l) 
__anonee6f402d0b02	tests/test_class.cpp	/^    m.def("check_type", [](int category) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(int category) 
__anonee6f402d0c02	tests/test_class.cpp	/^    m.def("get_type_of", [](py::object ob) { return py::type::of(std::move(ob)); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::object ob) 
__anonee6f402d0d02	tests/test_class.cpp	/^    m.def("get_type_classic", [](py::handle h) { return h.get_type(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(py::handle h) 
__anonee6f402d0e02	tests/test_class.cpp	/^    m.def("as_type", [](const py::object &ob) { return py::type(ob); });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &ob) 
__anonee6f402d0f02	tests/test_class.cpp	/^    m.def("mismatched_holder_1", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d1002	tests/test_class.cpp	/^    m.def("mismatched_holder_2", []() {$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d1102	tests/test_class.cpp	/^    m.def("implicitly_convert_argument", [](const ConvertibleFromUserType &r) { return r.i; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const ConvertibleFromUserType &r) 
__anonee6f402d1202	tests/test_class.cpp	/^    m.def("implicitly_convert_variable", [](const py::object &o) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &o) 
__anonee6f402d1302	tests/test_class.cpp	/^    m.add_object("implicitly_convert_variable_fail", [&] {$/;"	f	function:TEST_SUBMODULE	file:
__anonee6f402d1402	tests/test_class.cpp	/^        auto f = [](PyObject *, PyObject *args) -> PyObject * {$/;"	f	function:TEST_SUBMODULE::__anonee6f402d1302	typeref:typename:PyObject *	file:	signature:(PyObject *, PyObject *args) 
__anonee6f402d1502	tests/test_class.cpp	/^                                [](void *ptr) { delete reinterpret_cast<PyMethodDef *>(ptr); });$/;"	f	function:TEST_SUBMODULE::__anonee6f402d1302	file:	signature:(void *ptr) 
__anonee6f402d1602	tests/test_class.cpp	/^    m.def("read_foo", [](const void *original) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const void *original) 
__anonee6f402d1702	tests/test_class.cpp	/^          [](const void *original, const void *comparison) { return original == comparison; });$/;"	f	function:TEST_SUBMODULE	file:	signature:(const void *original, const void *comparison) 
__anonee6f402d1802	tests/test_class.cpp	/^        .def("fn", [](Nested &, int, NestBase &, Nested &) {})$/;"	f	function:TEST_SUBMODULE	file:	signature:(Nested &, int, NestBase &, Nested &) 
__anonee6f402d1902	tests/test_class.cpp	/^            "fa", [](Nested &, int, NestBase &, Nested &) {}, "a"_a, "b"_a, "c"_a);$/;"	f	function:TEST_SUBMODULE	file:	signature:(Nested &, int, NestBase &, Nested &) 
__anonee6f402d1a02	tests/test_class.cpp	/^    base.def("g", [](NestBase &, Nested &) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(NestBase &, Nested &) 
__anonee6f402d1b02	tests/test_class.cpp	/^    base.def("h", []() { return NestBase(); });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d1c02	tests/test_class.cpp	/^    m.def("test_error_after_conversions", [](int) {});$/;"	f	function:TEST_SUBMODULE	file:	signature:(int) 
__anonee6f402d1d02	tests/test_class.cpp	/^          [](const StringWrapper &) -> NotRegistered { return {}; });$/;"	f	function:TEST_SUBMODULE	typeref:typename:NotRegistered	file:	signature:(const StringWrapper &) 
__anonee6f402d1e02	tests/test_class.cpp	/^        .def(py::init([]() { return &samePointer; }));$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d1f02	tests/test_class.cpp	/^        .def_static("get_name", []() { return "BaseWithNested::Nested"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d2002	tests/test_class.cpp	/^        .def_static("get_name", []() { return "DerivedWithNested::Nested"; });$/;"	f	function:TEST_SUBMODULE	file:	signature:() 
__anonee6f402d2102	tests/test_class.cpp	/^    m.def("register_duplicate_class_name", [](const py::module_ &m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::module_ &m) 
__anonee6f402d2202	tests/test_class.cpp	/^    m.def("register_duplicate_class_type", [](const py::module_ &m) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::module_ &m) 
__anonee6f402d2302	tests/test_class.cpp	/^    m.def("register_duplicate_nested_class_name", [](const py::object &gt) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &gt) 
__anonee6f402d2402	tests/test_class.cpp	/^    m.def("register_duplicate_nested_class_type", [](const py::object &gt) {$/;"	f	function:TEST_SUBMODULE	file:	signature:(const py::object &gt) 
__anonf105cff20111	tests/cross_module_gil_utils.cpp	/^namespace {$/;"	n	file:
__anonf105cff20111::CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoGIL {$/;"	s	namespace:__anonf105cff20111	file:
__anonf105cff20111::CustomAutoGIL::CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoGIL() : gstate(PyGILState_Ensure()) {}$/;"	f	struct:__anonf105cff20111::CustomAutoGIL	file:	access:public	signature:()
__anonf105cff20111::CustomAutoGIL::gstate	tests/cross_module_gil_utils.cpp	/^    PyGILState_STATE gstate;$/;"	m	struct:__anonf105cff20111::CustomAutoGIL	typeref:typename:PyGILState_STATE	file:	access:public
__anonf105cff20111::CustomAutoGIL::~CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoGIL() { PyGILState_Release(gstate); }$/;"	f	struct:__anonf105cff20111::CustomAutoGIL	file:	access:public	signature:()
__anonf105cff20111::CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^struct CustomAutoNoGIL {$/;"	s	namespace:__anonf105cff20111	file:
__anonf105cff20111::CustomAutoNoGIL::CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    CustomAutoNoGIL() : save(PyEval_SaveThread()) {}$/;"	f	struct:__anonf105cff20111::CustomAutoNoGIL	file:	access:public	signature:()
__anonf105cff20111::CustomAutoNoGIL::save	tests/cross_module_gil_utils.cpp	/^    PyThreadState *save;$/;"	m	struct:__anonf105cff20111::CustomAutoNoGIL	typeref:typename:PyThreadState *	file:	access:public
__anonf105cff20111::CustomAutoNoGIL::~CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoNoGIL() { PyEval_RestoreThread(save); }$/;"	f	struct:__anonf105cff20111::CustomAutoNoGIL	file:	access:public	signature:()
__anonf105cff20111::gil_acquire	tests/cross_module_gil_utils.cpp	/^void gil_acquire() { py::gil_scoped_acquire gil; }$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
__anonf105cff20111::gil_acquire_inner	tests/cross_module_gil_utils.cpp	/^void gil_acquire_inner() {$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
__anonf105cff20111::gil_acquire_nested	tests/cross_module_gil_utils.cpp	/^void gil_acquire_nested() {$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
__anonf105cff20111::gil_multi_acquire_release	tests/cross_module_gil_utils.cpp	/^std::string gil_multi_acquire_release(unsigned bits) {$/;"	f	namespace:__anonf105cff20111	typeref:typename:std::string	signature:(unsigned bits)
__anonf105cff20111::kModuleName	tests/cross_module_gil_utils.cpp	/^constexpr char kModuleName[] = "cross_module_gil_utils";$/;"	v	namespace:__anonf105cff20111	typeref:typename:char[]
__anonf105cff20111::moduledef	tests/cross_module_gil_utils.cpp	/^struct PyModuleDef moduledef = {$/;"	v	namespace:__anonf105cff20111	typeref:struct:PyModuleDef
__anonf1125e50010a	include/pybind11/detail/common.h	/^    union {$/;"	u	struct:instance	access:public
__anonf27bd10b0102	tests/test_embed/external_module.cpp	/^          []() { return reinterpret_cast<uintptr_t>(&py::detail::get_internals()); });$/;"	f	function:PYBIND11_MODULE	file:	signature:() 
__anonf560c0f60102	tests/test_embed/test_interpreter.cpp	/^    m.def("add", [](int i, int j) { return i + j; });$/;"	f	function:PYBIND11_EMBEDDED_MODULE	file:	signature:(int i, int j) 
__anonf560c0f60202	tests/test_embed/test_interpreter.cpp	/^        = py::capsule(&ran, [](void *ran) {$/;"	f	file:	signature:(void *ran) 
__anonf560c0f60302	tests/test_embed/test_interpreter.cpp	/^            threads.emplace_back([&]() {$/;"	f	file:	signature:() 
__anonf560c0f60402	tests/test_embed/test_interpreter.cpp	/^        [&]() { sys.attr("dont_write_bytecode") = dont_write_bytecode; });$/;"	f	file:	signature:() 
__anonf560c0f60502	tests/test_embed/test_interpreter.cpp	/^    scope_exit delete_module_file([&]() { std::remove(module_file.c_str()); });$/;"	f	file:	signature:() 
__anonf560c0f60602	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_NOTHROW([&]() {$/;"	f	file:	signature:() 
__anonfb2267950102	tests/local_bindings.h	/^    return py::class_<T>(std::forward<Args>(args)...).def(py::init<int>()).def("get", [](T &i) {$/;"	f	function:bind_local	file:	signature:(T &i) 
__bool__	tests/test_builtin_casters.py	/^        def __bool__(self):$/;"	m	class:test_bool_caster.A	access:public	signature:(self)
__call__	tests/conftest.py	/^    def __call__(self, thing):$/;"	m	class:SanitizedString	access:public	signature:(self, thing)
__call__	tests/test_virtual_functions.py	/^        def __call__(self, data):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor	access:public	signature:(self, data)
__call__	tests/test_virtual_functions.py	/^        def __call__(self, first, second, visitor):$/;"	m	class:test_recursive_dispatch_issue.Adder	access:public	signature:(self, first, second, visitor)
__contains__	tests/conftest.py	/^    def __contains__(self, item):$/;"	m	class:Capture	access:public	signature:(self, item)
__contains__	tests/test_pytypes.py	/^    def __contains__(self, m):$/;"	m	class:CustomContains	access:public	signature:(self, m)
__enter__	pybind11/setup_helpers.py	/^    def __enter__(self: S) -> S:$/;"	m	class:ParallelCompile	typeref:typename:S	access:public	signature:(self: S)
__enter__	tests/conftest.py	/^    def __enter__(self):$/;"	m	class:Capture	access:public	signature:(self)
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Capture	access:public	signature:(self, other)
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Output	access:public	signature:(self, other)
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:SanitizedString	access:public	signature:(self, other)
__eq__	tests/conftest.py	/^    def __eq__(self, other):$/;"	m	class:Unordered	access:public	signature:(self, other)
__exit__	pybind11/setup_helpers.py	/^    def __exit__(self, *args: Any) -> None:$/;"	m	class:ParallelCompile	typeref:typename:None	access:public	signature:(self, *args: Any)
__exit__	tests/conftest.py	/^    def __exit__(self, *args):$/;"	m	class:Capture	access:public	signature:(self, *args)
__float__	tests/test_builtin_casters.py	/^        def __float__(self):$/;"	m	class:test_int_convert.Float	access:public	signature:(self)
__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoBytesPath	access:public	signature:(self)
__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoStrPath	access:public	signature:(self)
__getitem__	tests/test_sequences_and_iterators.py	/^        def __getitem__(self, i):$/;"	m	class:test_sequence_length.SequenceLike	access:public	signature:(self, i)
__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_hash.Unhashable	file:	access:private
__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_unhashable_exceptions.Unhashable	file:	access:private
__hash__	tests/test_pytypes.py	/^        def __hash__(self):$/;"	m	class:test_hash.Hashable	access:public	signature:(self)
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.Index	access:public	signature:(self)
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.IntAndIndex	access:public	signature:(self)
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	access:public	signature:(self)
__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	access:public	signature:(self)
__init__	pybind11/setup_helpers.py	/^    def __init__($/;"	m	class:ParallelCompile	typeref:typename:None	access:public	signature:( self, envvar: Optional[str] = None, default: int = 0, max: int = 0, needs_recompile: Callable[[str, str], bool] = no_recompile, )
__init__	pybind11/setup_helpers.py	/^    def __init__(self, *args: Any, **kwargs: Any) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:public	signature:(self, *args: Any, **kwargs: Any)
__init__	tests/conftest.py	/^    def __init__(self, capfd):$/;"	m	class:Capture	access:public	signature:(self, capfd)
__init__	tests/conftest.py	/^    def __init__(self, sanitizer):$/;"	m	class:SanitizedString	access:public	signature:(self, sanitizer)
__init__	tests/conftest.py	/^    def __init__(self, string):$/;"	m	class:Output	access:public	signature:(self, string)
__init__	tests/test_builtin_casters.py	/^        def __init__(self, x):$/;"	m	class:test_bool_caster.A	access:public	signature:(self, x)
__init__	tests/test_call_policies.py	/^        def __init__(self):$/;"	m	class:test_alive_gc_multi_derived.Derived	access:public	signature:(self)
__init__	tests/test_callbacks.py	/^        def __init__(self, value):$/;"	m	class:test_async_callbacks.Item	access:public	signature:(self, value)
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_bind_protected_functions.C	access:public	signature:(self)
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.Python	access:public	signature:(self)
__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.RabbitHamster	access:public	signature:(self)
__init__	tests/test_embed/test_interpreter.py	/^    def __init__(self, message):$/;"	m	class:DerivedWidget	access:public	signature:(self, message)
__init__	tests/test_exceptions.py	/^    def __init__(self, failure_point):$/;"	m	class:FlakyException	access:public	signature:(self, failure_point)
__init__	tests/test_factory_constructors.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance.MITest	access:public	signature:(self)
__init__	tests/test_factory_constructors.py	/^        def __init__(self, *args):$/;"	m	class:test_init_factory_alias.MyTest	access:public	signature:(self, *args)
__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF1	access:public	signature:(self, bad)
__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF6	access:public	signature:(self, bad)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany117	access:public	signature:(self)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany14	access:public	signature:(self)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany19	access:public	signature:(self)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany58	access:public	signature:(self)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany916	access:public	signature:(self)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix1.Base1	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix2.Base2	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI6	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI7	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8b	access:public	signature:(self, i)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix1.MITypePy	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix2.MITypePy	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI1	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI2	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI3	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI4	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI5	access:public	signature:(self, i, j)
__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_virtbase.MITypePy	access:public	signature:(self, i, j)
__init__	tests/test_numpy_array.py	/^    def __init__(self, value):$/;"	m	class:PyValueHolder	access:public	signature:(self, value)
__init__	tests/test_pytypes.py	/^        def __init__(self, value):$/;"	m	class:test_hash.Hashable	access:public	signature:(self, value)
__init__	tests/test_thread.py	/^    def __init__(self, fn):$/;"	m	class:Thread	access:public	signature:(self, fn)
__init__	tests/test_type_caster_pyobject_ptr.py	/^    def __init__(self, value):$/;"	m	class:ValueHolder	access:public	signature:(self, value)
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization1.B	access:public	signature:(self)
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization2.B2	access:public	signature:(self)
__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor	access:public	signature:(self)
__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self, state)
__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt2	access:public	signature:(self, state)
__init__	tests/test_virtual_functions.py	/^        def __init__(self, value):$/;"	m	class:test_recursive_dispatch_issue.Data	access:public	signature:(self, value)
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.Int	access:public	signature:(self)
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.IntAndIndex	access:public	signature:(self)
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	access:public	signature:(self)
__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	access:public	signature:(self)
__len__	tests/test_sequences_and_iterators.py	/^        def __len__(self):$/;"	m	class:test_sequence_length.SequenceLike	access:public	signature:(self)
__nonzero__	tests/test_builtin_casters.py	/^        def __nonzero__(self):$/;"	m	class:test_bool_caster.A	access:public	signature:(self)
__repr__	tests/test_constants_and_functions.py	/^        def __repr__(self):$/;"	m	class:test_function_record_leaks.RaisingRepr	access:public	signature:(self)
__repr__	tests/test_exceptions.py	/^        def __repr__(self):$/;"	m	class:test_invalid_repr.MyRepr	access:public	signature:(self)
__repr__	tests/test_pytypes.py	/^        def __repr__(self):$/;"	m	class:test_str.A	access:public	signature:(self)
__self	include/pybind11/operators.h	/^inline self_t __self() { return self; }$/;"	f	typeref:typename:self_t	signature:()
__slots__	pybind11/setup_helpers.py	/^    __slots__ = ("envvar", "default", "max", "_old", "needs_recompile")$/;"	v	class:ParallelCompile	file:	access:private
__slots__	tests/test_pytypes.py	/^        __slots__ = []$/;"	v	class:test_weakref_err.C	file:	access:private
__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Capture	access:public	signature:(self)
__str__	tests/conftest.py	/^    def __str__(self):$/;"	m	class:Output	access:public	signature:(self)
__str__	tests/test_exceptions.py	/^    def __str__(self):$/;"	m	class:FlakyException	access:public	signature:(self)
__str__	tests/test_pytypes.py	/^        def __str__(self):$/;"	m	class:test_str.A	access:public	signature:(self)
__version__	pybind11/_version.py	/^__version__ = "2.11.0.dev1"$/;"	v	access:protected
_add_cflags	pybind11/setup_helpers.py	/^    def _add_cflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:protected	signature:(self, flags: List[str])
_add_ldflags	pybind11/setup_helpers.py	/^    def _add_ldflags(self, flags: List[str]) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:protected	signature:(self, flags: List[str])
_build_ext	pybind11/setup_helpers.py	/^    from distutils.command.build_ext import build_ext as _build_ext$/;"	Y	access:protected	nameref:unknown:build_ext
_build_ext	pybind11/setup_helpers.py	/^    from setuptools.command.build_ext import build_ext as _build_ext$/;"	Y	access:protected	nameref:unknown:build_ext
_download_catch	tools/FindCatch.cmake	/^function(_download_catch version destination_dir)$/;"	f
_dtype_from_pep3118	include/pybind11/numpy.h	/^    static object _dtype_from_pep3118() {$/;"	f	class:dtype	typeref:typename:object	access:private	signature:()
_eigen3_check_version	tools/FindEigen3.cmake	/^macro(_eigen3_check_version)$/;"	m
_get_catch_version	tools/FindCatch.cmake	/^function(_get_catch_version)$/;"	f
_hexadecimal	tests/conftest.py	/^_hexadecimal = re.compile(r"0x[0-9a-fA-F]+")$/;"	v	access:protected
_instances	tests/constructor_stats.h	/^    std::unordered_map<void *, int> _instances; \/\/ Need a map rather than set because members /;"	m	class:ConstructorStats	typeref:typename:std::unordered_map<void *,int>	access:protected
_intentional_deadlock	tests/test_gil_scoped.py	/^def _intentional_deadlock():$/;"	f	access:protected	signature:()
_long_marker	tests/conftest.py	/^_long_marker = re.compile(r"([0-9])L")$/;"	v	access:protected
_make_explanation	tests/conftest.py	/^def _make_explanation(a, b):$/;"	f	access:protected	signature:(a, b)
_py_type_0	include/pybind11/cast.h	/^    using _py_type_0 = conditional_t<sizeof(T) <= sizeof(long), long, long long>;$/;"	t	struct:type_caster	access:public
_py_type_1	include/pybind11/cast.h	/^    using _py_type_1 = conditional_t<std::is_signed<T>::value,$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_signed<T>::value,_py_type_0,typename std::make_unsigned<_py_type_0>::type>	access:public
_pybind11_disk_only	CMakeLists.txt	/^  set(_pybind11_disk_only ${_pybind11_header_check})$/;"	v
_pybind11_generate_lto	tools/pybind11Common.cmake	/^function(_pybind11_generate_lto target prefer_thin_lto)$/;"	f
_pybind11_here_only	CMakeLists.txt	/^  set(_pybind11_here_only ${PYBIND11_HEADERS})$/;"	v
_pybind11_nopython	tools/pybind11Common.cmake	/^  set(_pybind11_nopython ON)$/;"	v
_pybind11_quiet	tools/pybind11NewTools.cmake	/^  set(_pybind11_quiet "")$/;"	v
_pybind11_quiet	tools/pybind11NewTools.cmake	/^  set(_pybind11_quiet QUIET)$/;"	v
_pybind11_quiet	tools/pybind11Tools.cmake	/^  set(_pybind11_quiet "")$/;"	v
_pybind11_quiet	tools/pybind11Tools.cmake	/^  set(_pybind11_quiet QUIET)$/;"	v
_pybind11_return_if_cxx_and_linker_flags_work	tools/pybind11Common.cmake	/^function(_pybind11_return_if_cxx_and_linker_flags_work result cxxflags linkerflags cxxflags_out$/;"	f
_pythonlibs_quiet	tools/FindPythonLibsNew.cmake	/^  set(_pythonlibs_quiet "")$/;"	v
_pythonlibs_quiet	tools/FindPythonLibsNew.cmake	/^  set(_pythonlibs_quiet QUIET)$/;"	v
_pythonlibs_required	tools/FindPythonLibsNew.cmake	/^  set(_pythonlibs_required REQUIRED)$/;"	v
_run_in_process	tests/test_gil_scoped.py	/^def _run_in_process(target, *args, **kwargs):$/;"	f	access:protected	signature:(target, *args, **kwargs)
_run_in_threads	tests/test_gil_scoped.py	/^def _run_in_threads(test_fn, num_threads, parallel):$/;"	f	access:protected	signature:(test_fn, num_threads, parallel)
_sanitize_docstring	tests/conftest.py	/^def _sanitize_docstring(thing):$/;"	f	access:protected	signature:(thing)
_sanitize_general	tests/conftest.py	/^def _sanitize_general(s):$/;"	f	access:protected	signature:(s)
_sanitize_message	tests/conftest.py	/^def _sanitize_message(thing):$/;"	f	access:protected	signature:(thing)
_single_compile	pybind11/setup_helpers.py	/^            def _single_compile(obj: Any) -> None:$/;"	f	function:ParallelCompile.function.compile_function	typeref:typename:None	file:	access:private	signature:(obj: Any)
_split_and_sort	tests/conftest.py	/^def _split_and_sort(s):$/;"	f	access:protected	signature:(s)
_strip_and_dedent	tests/conftest.py	/^def _strip_and_dedent(s):$/;"	f	access:protected	signature:(s)
_suppress_unused_variable_warning	tests/test_embed/CMakeLists.txt	/^  set(_suppress_unused_variable_warning "${DOWNLOAD_CATCH}")$/;"	v
_sync	include/pybind11/iostream.h	/^    int _sync() {$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:()
_test_flaky_exception_failure_point_init_before_py_3_12	tests/test_exceptions.py	/^def _test_flaky_exception_failure_point_init_before_py_3_12():$/;"	f	access:protected	signature:()
_test_flaky_exception_failure_point_init_py_3_12	tests/test_exceptions.py	/^def _test_flaky_exception_failure_point_init_py_3_12():$/;"	f	access:protected	signature:()
_tmp	tests/test_virtual_functions.cpp	/^        std::string _tmp;$/;"	m	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:private
_tmp_ptc	tools/pybind11Tools.cmake	/^  set(_tmp_ptc "${${NAME}}")$/;"	v
_to_int	pybind11/_version.py	/^def _to_int(s: str) -> Union[int, str]:$/;"	f	typeref:typename:Union[int,str]	access:protected	signature:(s: str)
_values	tests/constructor_stats.h	/^    std::list<std::string> _values;             \/\/ Used to track values$/;"	m	class:ConstructorStats	typeref:typename:std::list<std::string>	access:protected
a	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d a = Eigen::Matrix4d::Zero();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:	access:public
a	tests/test_multiple_inheritance.cpp	/^    int a = 1;$/;"	m	struct:__anon9ca8d76c0111::I801B1	typeref:typename:int	file:	access:public
a	tests/test_numpy_dtypes.cpp	/^        int32_t a;$/;"	m	struct:TEST_SUBMODULE::TrailingPaddingStruct	typeref:typename:int32_t	file:	access:public
a	tests/test_numpy_dtypes.cpp	/^    PartialStruct a;$/;"	m	struct:PartialNestedStruct	typeref:typename:PartialStruct	file:	access:public
a	tests/test_numpy_dtypes.cpp	/^    char a[3];$/;"	m	struct:StringStruct	typeref:typename:char[3]	file:	access:public
a	tests/test_numpy_dtypes.cpp	/^    char a[3][4];$/;"	m	struct:ArrayStruct	typeref:typename:char[3][4]	file:	access:public
a	tests/test_operator_overloading.cpp	/^        NestA a;$/;"	m	struct:TEST_SUBMODULE::NestB	typeref:typename:NestA	file:	access:public
a	tests/test_stl_binders.cpp	/^    int a;$/;"	m	class:El	typeref:typename:int	file:	access:public
a	tests/test_virtual_functions.cpp	/^        A a;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:A	file:	access:public
a1	tests/test_modules.cpp	/^        A a1{1};$/;"	m	class:TEST_SUBMODULE::B	typeref:typename:A	file:	access:public
a2	tests/test_modules.cpp	/^        A a2{2};$/;"	m	class:TEST_SUBMODULE::B	typeref:typename:A	file:	access:public
abs	tests/test_operator_overloading.cpp	/^std::string abs(const Vector2 &) { return "abs(Vector2)"; }$/;"	f	typeref:typename:std::string	signature:(const Vector2 &)
access_by_copy	tests/test_stl.cpp	/^    OptionalEnumValue access_by_copy() { return value; }$/;"	f	class:OptionalProperties	typeref:typename:OptionalEnumValue	file:	access:public	signature:()
access_by_ref	tests/test_stl.cpp	/^    OptionalEnumValue &access_by_ref() { return value; }$/;"	f	class:OptionalProperties	typeref:typename:OptionalEnumValue &	file:	access:public	signature:()
accessor	include/pybind11/pytypes.h	/^    accessor(accessor &&) noexcept = default;$/;"	p	class:accessor	access:public	signature:(accessor &&)
accessor	include/pybind11/pytypes.h	/^    accessor(const accessor &) = default;$/;"	p	class:accessor	access:public	signature:(const accessor &)
accessor	include/pybind11/pytypes.h	/^    accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}$/;"	f	class:accessor	access:public	signature:(handle obj,key_type key)
accessor	include/pybind11/pytypes.h	/^class accessor : public object_api<accessor<Policy>> {$/;"	c	inherits:object_api<accessor<Policy>>
accessor::accessor	include/pybind11/pytypes.h	/^    accessor(accessor &&) noexcept = default;$/;"	p	class:accessor	access:public	signature:(accessor &&)
accessor::accessor	include/pybind11/pytypes.h	/^    accessor(const accessor &) = default;$/;"	p	class:accessor	access:public	signature:(const accessor &)
accessor::accessor	include/pybind11/pytypes.h	/^    accessor(handle obj, key_type key) : obj(obj), key(std::move(key)) {}$/;"	f	class:accessor	access:public	signature:(handle obj,key_type key)
accessor::cache	include/pybind11/pytypes.h	/^    mutable object cache;$/;"	m	class:accessor	typeref:typename:object	access:private
accessor::cast	include/pybind11/pytypes.h	/^    T cast() const {$/;"	f	class:accessor	typeref:typename:T	access:public	signature:() const
accessor::ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(handle h) { return reinterpret_borrow<object>(h); }$/;"	f	class:accessor	typeref:typename:object	access:private	signature:(handle h)
accessor::ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(object &&o) { return std::move(o); }$/;"	f	class:accessor	typeref:typename:object	access:private	signature:(object && o)
accessor::get_cache	include/pybind11/pytypes.h	/^    object &get_cache() const {$/;"	f	class:accessor	typeref:typename:object &	access:private	signature:() const
accessor::key	include/pybind11/pytypes.h	/^    key_type key;$/;"	m	class:accessor	typeref:typename:key_type	access:private
accessor::key_type	include/pybind11/pytypes.h	/^    using key_type = typename Policy::key_type;$/;"	t	class:accessor	typeref:typename:Policy::key_type	access:private
accessor::obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:accessor	typeref:typename:handle	access:private
accessor::operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) & {$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(T && value)
accessor::operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) && {$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(T && value)
accessor::operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) & { operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(const accessor & a)
accessor::operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(const accessor & a)
accessor::operator enable_if_t<std::is_same<T,accessor_policies::generic_item>::value,bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>() const /;"	f	class:accessor	access:public	signature:() const
accessor::operator enable_if_t<std::is_same<T,accessor_policies::str_attr>::value||std::is_same<T,accessor_policies::obj_attr>::value,bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value$/;"	f	class:accessor	access:public	signature:() const
accessor::operator object	include/pybind11/pytypes.h	/^    operator object() const { return get_cache(); }$/;"	f	class:accessor	access:public	signature:() const
accessor::ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return get_cache().ptr(); }$/;"	f	class:accessor	typeref:typename:PyObject *	access:public	signature:() const
accessor_policies	include/pybind11/pytypes.h	/^namespace accessor_policies {$/;"	n
active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_acquire	typeref:typename:bool	access:private
active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_release	typeref:typename:bool	access:private
add	include/pybind11/pytypes.h	/^    bool add(T &&val) \/* py-non-const *\/ {$/;"	f	class:set	typeref:typename:bool	access:public	signature:(T && val)
add	tests/test_smart_ptr.cpp	/^    void add(const std::shared_ptr<ElementBase> &e) { l.push_back(e); }$/;"	f	struct:__anond975f9d30111::ElementList	typeref:typename:void	file:	access:public	signature:(const std::shared_ptr<ElementBase> & e)
add1	tests/test_methods_and_attributes.cpp	/^    void add1(ExampleMandA other) { value += other.value; }         \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA other)
add10	tests/test_methods_and_attributes.cpp	/^    void add10(const int *other) { value += *other; } \/\/ passing by const pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const int * other)
add2	tests/test_methods_and_attributes.cpp	/^    void add2(ExampleMandA &other) { value += other.value; }        \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA & other)
add3	tests/test_methods_and_attributes.cpp	/^    void add3(const ExampleMandA &other) { value += other.value; }  \/\/ passing by const refere/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA & other)
add4	tests/test_methods_and_attributes.cpp	/^    void add4(ExampleMandA *other) { value += other->value; }       \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA * other)
add5	tests/test_methods_and_attributes.cpp	/^    void add5(const ExampleMandA *other) { value += other->value; } \/\/ passing by const pointe/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA * other)
add6	tests/test_methods_and_attributes.cpp	/^    void add6(int other) { value += other; }        \/\/ passing by value$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int other)
add7	tests/test_methods_and_attributes.cpp	/^    void add7(int &other) { value += other; }       \/\/ passing by reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int & other)
add8	tests/test_methods_and_attributes.cpp	/^    void add8(const int &other) { value += other; } \/\/ passing by const reference$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const int & other)
add9	tests/test_methods_and_attributes.cpp	/^    void add9(int *other) { value += *other; }        \/\/ passing by pointer$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(int * other)
addChild	tests/test_call_policies.cpp	/^        void addChild(Child *) {}$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:void	file:	access:public	signature:(Child *)
add_base	include/pybind11/attr.h	/^    PYBIND11_NOINLINE void add_base(const std::type_info &base, void *(*caster)(void *) ) {$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(const std::type_info & base,void * (* caster)(void *))
add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &) {}$/;"	f	class:class_	typeref:typename:void	access:public	signature:(detail::type_record &)
add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &rec) {$/;"	f	class:class_	typeref:typename:void	access:public	signature:(detail::type_record & rec)
add_bindings	tests/test_methods_and_attributes.cpp	/^void add_bindings(py::module &m) {$/;"	f	namespace:pybind11_tests::exercise_is_setter	typeref:typename:void	signature:(py::module & m)
add_class_method	include/pybind11/pybind11.h	/^inline void add_class_method(object &cls, const char *name_, const cpp_function &cf) {$/;"	f	typeref:typename:void	signature:(object & cls,const char * name_,const cpp_function & cf)
add_object	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void add_object(const char *name, handle obj, bool overwrite = false) {$/;"	f	class:module_	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(const char * name,handle obj,bool overwrite=false)
add_patient	include/pybind11/detail/class.h	/^inline void add_patient(PyObject *nurse, PyObject *patient) {$/;"	f	typeref:typename:void	signature:(PyObject * nurse,PyObject * patient)
add_patient	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void add_patient(handle h) {$/;"	f	class:loader_life_support	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(handle h)
add_ref	tests/test_custom_type_setup.py	/^    def add_ref(obj):$/;"	f	function:gc_tester	file:	access:private	signature:(obj)
addopts	tests/pytest.ini	/^addopts =$/;"	k	section:pytest
adjust_matrix	tests/test_eigen_matrix.cpp	/^Eigen::MatrixXd adjust_matrix(MatrixArgType m) {$/;"	f	typeref:typename:Eigen::MatrixXd	signature:(MatrixArgType m)
advance	include/pybind11/pytypes.h	/^        advance();$/;"	p	class:iterator	access:public	signature:()
advance	include/pybind11/pytypes.h	/^    void advance() {$/;"	f	class:iterator	typeref:typename:void	access:private	signature:()
advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { index += n; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:(ssize_t n)
advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { ptr += n; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:(ssize_t n)
alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory6	typeref:typename:bool	file:	access:protected
alias	tests/test_factory_constructors.cpp	/^    bool alias = false;$/;"	m	class:TestFactory7	typeref:typename:bool	file:	access:protected
alias_constructor	include/pybind11/detail/init.h	/^struct alias_constructor {$/;"	s
alias_constructor::execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:alias_constructor	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
alias_factory	include/pybind11/detail/init.h	/^    remove_reference_t<AFunc> alias_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<AFunc>	access:public
alignment	include/pybind11/numpy.h	/^    int alignment() const { return detail::array_descriptor_proxy(m_ptr)->alignment; }$/;"	f	class:dtype	typeref:typename:int	access:public	signature:() const
alignment	include/pybind11/numpy.h	/^    int alignment;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
alive	tests/constructor_stats.h	/^    int alive() {$/;"	f	class:ConstructorStats	typeref:typename:int	access:public	signature:()
all_files	tests/extra_python_package/test_files.py	/^all_files = src_files | py_files$/;"	v	access:public
all_of	include/pybind11/detail/common.h	/^using all_of = bool_constant<(Ts::value && ...)>;$/;"	t
all_of	include/pybind11/detail/common.h	/^using all_of = std::conjunction<Ts...>;$/;"	t	typeref:typename:std::conjunction<Ts...>
all_of	include/pybind11/detail/common.h	/^using all_of = std::is_same<bools<Ts::value..., true>, bools<true, Ts::value...>>;$/;"	t	typeref:typename:std::is_same<bools<Ts::value...,true>,bools<true,Ts::value...>>
all_type_info	include/pybind11/detail/type_caster_base.h	/^inline const std::vector<detail::type_info *> &all_type_info(PyTypeObject *type) {$/;"	f	typeref:typename:const std::vector<detail::type_info * > &	signature:(PyTypeObject * type)
all_type_info_get_cache	include/pybind11/detail/type_caster_base.h	/^all_type_info_get_cache(PyTypeObject *type);$/;"	p	typeref:typename:std::pair<decltype(internals::registered_types_py)::iterator,bool>	signature:(PyTypeObject * type)
all_type_info_get_cache	include/pybind11/pybind11.h	/^all_type_info_get_cache(PyTypeObject *type) {$/;"	f	typeref:typename:std::pair<decltype(internals::registered_types_py)::iterator,bool>	signature:(PyTypeObject * type)
all_type_info_populate	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void all_type_info_populate(PyTypeObject *t, std::vector<type_info *> &bases) /;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(PyTypeObject * t,std::vector<type_info * > & bases)
alloc	include/pybind11/eigen/tensor.h	/^    static Type *alloc(Args &&...args) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Type *	access:public	signature:(Args &&...args)
allocate_layout	include/pybind11/detail/common.h	/^    void allocate_layout();$/;"	p	struct:instance	typeref:typename:void	access:public	signature:()
allocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::allocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void	signature:()
always_construct_holder	include/pybind11/cast.h	/^struct always_construct_holder {$/;"	s
always_construct_holder::value	include/pybind11/cast.h	/^    static constexpr bool value = Value;$/;"	m	struct:always_construct_holder	typeref:typename:bool	access:public
answer	tests/test_methods_and_attributes.cpp	/^    int answer = -1;$/;"	m	class:NoneCastTester	typeref:typename:int	file:	access:public
answer	tests/test_methods_and_attributes.cpp	/^    int answer = 42;$/;"	m	class:NoneTester	typeref:typename:int	file:	access:public
any_container	include/pybind11/detail/common.h	/^    any_container() = default;$/;"	p	class:any_container	access:public	signature:()
any_container	include/pybind11/detail/common.h	/^    any_container(It first, It last) : v(first, last) {}$/;"	f	class:any_container	access:public	signature:(It first,It last)
any_container	include/pybind11/detail/common.h	/^    any_container(const Container &c) : any_container(std::begin(c), std::end(c)) {}$/;"	f	class:any_container	access:public	signature:(const Container & c)
any_container	include/pybind11/detail/common.h	/^    any_container(const std::initializer_list<TIn> &c) : any_container(c.begin(), c.end()) {}$/;"	f	class:any_container	access:public	signature:(const std::initializer_list<TIn> & c)
any_container	include/pybind11/detail/common.h	/^    any_container(std::vector<T> &&v) : v(std::move(v)) {}$/;"	f	class:any_container	access:public	signature:(std::vector<T> && v)
any_container	include/pybind11/detail/common.h	/^class any_container {$/;"	c
any_container::any_container	include/pybind11/detail/common.h	/^    any_container() = default;$/;"	p	class:any_container	access:public	signature:()
any_container::any_container	include/pybind11/detail/common.h	/^    any_container(It first, It last) : v(first, last) {}$/;"	f	class:any_container	access:public	signature:(It first,It last)
any_container::any_container	include/pybind11/detail/common.h	/^    any_container(const Container &c) : any_container(std::begin(c), std::end(c)) {}$/;"	f	class:any_container	access:public	signature:(const Container & c)
any_container::any_container	include/pybind11/detail/common.h	/^    any_container(const std::initializer_list<TIn> &c) : any_container(c.begin(), c.end()) {}$/;"	f	class:any_container	access:public	signature:(const std::initializer_list<TIn> & c)
any_container::any_container	include/pybind11/detail/common.h	/^    any_container(std::vector<T> &&v) : v(std::move(v)) {}$/;"	f	class:any_container	access:public	signature:(std::vector<T> && v)
any_container::operator *	include/pybind11/detail/common.h	/^    const std::vector<T> &operator*() const { return v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> &	access:public	signature:() const
any_container::operator *	include/pybind11/detail/common.h	/^    std::vector<T> &operator*() { return v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> &	access:public	signature:()
any_container::operator ->	include/pybind11/detail/common.h	/^    const std::vector<T> *operator->() const { return &v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> *	access:public	signature:() const
any_container::operator ->	include/pybind11/detail/common.h	/^    std::vector<T> *operator->() { return &v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> *	access:public	signature:()
any_container::operator std::vector<T>&&	include/pybind11/detail/common.h	/^    operator std::vector<T> &&() && { return std::move(v); }$/;"	f	class:any_container	access:public	signature:()
any_container::v	include/pybind11/detail/common.h	/^    std::vector<T> v;$/;"	m	class:any_container	typeref:typename:std::vector<T>	access:private
any_of	include/pybind11/detail/common.h	/^using any_of = bool_constant<(Ts::value || ...)>;$/;"	t
any_of	include/pybind11/detail/common.h	/^using any_of = negation<all_of<negation<Ts>...>>;$/;"	t	typeref:typename:negation<all_of<negation<Ts>...>>
any_of	include/pybind11/detail/common.h	/^using any_of = std::disjunction<Ts...>;$/;"	t	typeref:typename:std::disjunction<Ts...>
any_struct	tests/test_unnamed_namespace_a.cpp	/^struct any_struct {};$/;"	s	namespace:__anonce153c0b0111	file:
any_struct	tests/test_unnamed_namespace_b.cpp	/^struct any_struct {};$/;"	s	namespace:__anonce27548c0111	file:
anyset	include/pybind11/pytypes.h	/^class anyset : public object {$/;"	c	inherits:object
anyset::PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(anyset, object, PyAnySet_Check)$/;"	f	class:anyset	access:public	signature:(anyset,object,PyAnySet_Check)
anyset::contains	include/pybind11/pytypes.h	/^    bool contains(T &&val) const {$/;"	f	class:anyset	typeref:typename:bool	access:public	signature:(T && val) const
anyset::empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:anyset	typeref:typename:bool	access:public	signature:() const
api	tools/make_changelog.py	/^api = ghapi.all.GhApi(owner="pybind", repo="pybind11")$/;"	v	access:public
append	include/pybind11/pytypes.h	/^    void append(T &&val) \/* py-non-const *\/ {$/;"	f	class:list	typeref:typename:void	access:public	signature:(T && val)
append_extents	include/pybind11/numpy.h	/^    static void append_extents(list & \/* shape *\/) {}$/;"	f	struct:array_info_scalar	typeref:typename:void	access:public	signature:(list &)
append_extents	include/pybind11/numpy.h	/^    static void append_extents(list &shape) {$/;"	f	struct:array_info	typeref:typename:void	access:public	signature:(list & shape)
append_self_arg_if_needed	include/pybind11/attr.h	/^inline void append_self_arg_if_needed(function_record *r) {$/;"	f	typeref:typename:void	signature:(function_record * r)
applehelp	docs/Makefile	/^applehelp:$/;"	t
apply_broadcast	include/pybind11/numpy.h	/^    void apply_broadcast(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void	access:private	signature:(std::array<buffer_info,NVectorized> & buffers,std::array<void *,N> & params,Return * out,size_t size,const std::vector<ssize_t> & output_shape,index_sequence<Index...>,index_sequence<VIndex...>,index_sequence<BIndex...>)
apply_trivial	include/pybind11/numpy.h	/^    void apply_trivial(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void	access:private	signature:(std::array<buffer_info,NVectorized> & buffers,std::array<void *,N> & params,Return * out,size_t size,index_sequence<Index...>,index_sequence<VIndex...>,index_sequence<BIndex...>)
arg	include/pybind11/cast.h	/^    constexpr explicit arg(const char *name = nullptr)$/;"	f	struct:arg	access:public	signature:(const char * name=nullptr)
arg	include/pybind11/cast.h	/^struct arg {$/;"	s
arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 1)";$/;"	m	class:ArgInspector1	typeref:typename:std::string	file:	access:public
arg	tests/test_custom_type_casters.cpp	/^    std::string arg = "(default arg inspector 2)";$/;"	m	class:ArgInspector2	typeref:typename:std::string	file:	access:public
arg::arg	include/pybind11/cast.h	/^    constexpr explicit arg(const char *name = nullptr)$/;"	f	struct:arg	access:public	signature:(const char * name=nullptr)
arg::flag_noconvert	include/pybind11/cast.h	/^    bool flag_noconvert : 1; \/\/\/< If set, do not allow conversion (requires a supporting type$/;"	m	struct:arg	typeref:typename:bool:1	access:public
arg::flag_none	include/pybind11/cast.h	/^    bool flag_none : 1;      \/\/\/< If set (the default), allow None to be passed to this argum/;"	m	struct:arg	typeref:typename:bool:1	access:public
arg::name	include/pybind11/cast.h	/^    const char *name;        \/\/\/< If non-null, this is a named kwargs argument$/;"	m	struct:arg	typeref:typename:const char *	access:public
arg::noconvert	include/pybind11/cast.h	/^    arg &noconvert(bool flag = true) {$/;"	f	struct:arg	typeref:typename:arg &	access:public	signature:(bool flag=true)
arg::none	include/pybind11/cast.h	/^    arg &none(bool flag = true) {$/;"	f	struct:arg	typeref:typename:arg &	access:public	signature:(bool flag=true)
arg::operator =	include/pybind11/cast.h	/^    arg_v operator=(T &&value) const;$/;"	p	struct:arg	typeref:typename:arg_v	access:public	signature:(T && value) const
arg::operator =	include/pybind11/cast.h	/^arg_v arg::operator=(T &&value) const {$/;"	f	class:arg	typeref:typename:arg_v	signature:(T && value) const
arg_call_types	include/pybind11/numpy.h	/^    using arg_call_types = std::tuple<typename vectorize_arg<Args>::call_type...>;$/;"	t	struct:vectorize_helper	typeref:typename:std::tuple<typename vectorize_arg<Args>::call_type...>	access:private
arg_names	include/pybind11/cast.h	/^    static constexpr auto arg_names = concat(type_descr(make_caster<Args>::name)...);$/;"	m	class:argument_loader	typeref:typename:auto	access:public
arg_t	include/pybind11/cast.h	/^using arg_t = arg_v;$/;"	t	typeref:typename:arg_v
arg_v	include/pybind11/cast.h	/^    arg_v(arg &&base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:private	signature:(arg && base,T && x,const char * descr=nullptr)
arg_v	include/pybind11/cast.h	/^    arg_v(const arg &base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:public	signature:(const arg & base,T && x,const char * descr=nullptr)
arg_v	include/pybind11/cast.h	/^    arg_v(const char *name, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:public	signature:(const char * name,T && x,const char * descr=nullptr)
arg_v	include/pybind11/cast.h	/^struct arg_v : arg {$/;"	s	inherits:arg
arg_v::arg_v	include/pybind11/cast.h	/^    arg_v(arg &&base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:private	signature:(arg && base,T && x,const char * descr=nullptr)
arg_v::arg_v	include/pybind11/cast.h	/^    arg_v(const arg &base, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:public	signature:(const arg & base,T && x,const char * descr=nullptr)
arg_v::arg_v	include/pybind11/cast.h	/^    arg_v(const char *name, T &&x, const char *descr = nullptr)$/;"	f	struct:arg_v	access:public	signature:(const char * name,T && x,const char * descr=nullptr)
arg_v::descr	include/pybind11/cast.h	/^    const char *descr;$/;"	m	struct:arg_v	typeref:typename:const char *	access:public
arg_v::noconvert	include/pybind11/cast.h	/^    arg_v &noconvert(bool flag = true) {$/;"	f	struct:arg_v	typeref:typename:arg_v &	access:public	signature:(bool flag=true)
arg_v::none	include/pybind11/cast.h	/^    arg_v &none(bool flag = true) {$/;"	f	struct:arg_v	typeref:typename:arg_v &	access:public	signature:(bool flag=true)
arg_v::type	include/pybind11/cast.h	/^    std::string type;$/;"	m	struct:arg_v	typeref:typename:std::string	access:public
arg_v::value	include/pybind11/cast.h	/^    object value;$/;"	m	struct:arg_v	typeref:typename:object	access:public
argcasters	include/pybind11/cast.h	/^    std::tuple<make_caster<Args>...> argcasters;$/;"	m	class:argument_loader	typeref:typename:std::tuple<make_caster<Args>...>	access:private
args	include/pybind11/attr.h	/^    std::vector<argument_record> args;$/;"	m	struct:function_record	typeref:typename:std::vector<argument_record>	access:public
args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:simple_collector	typeref:typename:const tuple &	access:public	signature:() const
args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:unpacking_collector	typeref:typename:const tuple &	access:public	signature:() const
args	include/pybind11/cast.h	/^    std::vector<handle> args;$/;"	m	struct:function_call	typeref:typename:std::vector<handle>	access:public
args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:simple_collector	typeref:typename:tuple	access:public	signature:()
args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:unpacking_collector	typeref:typename:tuple	access:public	signature:()
args	include/pybind11/pytypes.h	/^class args : public tuple {$/;"	c	inherits:tuple
args_any_are_buffer	include/pybind11/stl_bind.h	/^constexpr bool args_any_are_buffer() {$/;"	f	typeref:typename:bool	signature:()
args_are_all_keyword_or_ds	include/pybind11/pytypes.h	/^constexpr bool args_are_all_keyword_or_ds() {$/;"	f	typeref:typename:bool	signature:()
args_are_all_positional	include/pybind11/cast.h	/^constexpr bool args_are_all_positional() {$/;"	f	typeref:typename:bool	signature:()
args_convert	include/pybind11/cast.h	/^    std::vector<bool> args_convert;$/;"	m	struct:function_call	typeref:typename:std::vector<bool>	access:public
args_pos	include/pybind11/cast.h	/^    static constexpr int args_pos = constexpr_last<argument_is_args, Args...>();$/;"	m	class:argument_loader	typeref:typename:int	access:public
args_proxy	include/pybind11/pytypes.h	/^    explicit args_proxy(handle h) : handle(h) {}$/;"	f	class:args_proxy	access:public	signature:(handle h)
args_proxy	include/pybind11/pytypes.h	/^class args_proxy : public handle {$/;"	c	inherits:handle
args_proxy::args_proxy	include/pybind11/pytypes.h	/^    explicit args_proxy(handle h) : handle(h) {}$/;"	f	class:args_proxy	access:public	signature:(handle h)
args_proxy::operator *	include/pybind11/pytypes.h	/^    kwargs_proxy operator*() const { return kwargs_proxy(*this); }$/;"	f	class:args_proxy	typeref:typename:kwargs_proxy	access:public	signature:() const
args_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call	typeref:typename:object	access:public
argument_is_args	include/pybind11/cast.h	/^    using argument_is_args = std::is_same<intrinsic_t<Arg>, args>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,args>	access:private
argument_is_kwargs	include/pybind11/cast.h	/^    using argument_is_kwargs = std::is_same<intrinsic_t<Arg>, kwargs>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,kwargs>	access:private
argument_loader	include/pybind11/cast.h	/^class argument_loader {$/;"	c
argument_loader::arg_names	include/pybind11/cast.h	/^    static constexpr auto arg_names = concat(type_descr(make_caster<Args>::name)...);$/;"	m	class:argument_loader	typeref:typename:auto	access:public
argument_loader::argcasters	include/pybind11/cast.h	/^    std::tuple<make_caster<Args>...> argcasters;$/;"	m	class:argument_loader	typeref:typename:std::tuple<make_caster<Args>...>	access:private
argument_loader::args_pos	include/pybind11/cast.h	/^    static constexpr int args_pos = constexpr_last<argument_is_args, Args...>();$/;"	m	class:argument_loader	typeref:typename:int	access:public
argument_loader::argument_is_args	include/pybind11/cast.h	/^    using argument_is_args = std::is_same<intrinsic_t<Arg>, args>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,args>	access:private
argument_loader::argument_is_kwargs	include/pybind11/cast.h	/^    using argument_is_kwargs = std::is_same<intrinsic_t<Arg>, kwargs>;$/;"	t	class:argument_loader	typeref:typename:std::is_same<intrinsic_t<Arg>,kwargs>	access:private
argument_loader::call	include/pybind11/cast.h	/^    enable_if_t<!std::is_void<Return>::value, Return> call(Func &&f) && {$/;"	f	class:argument_loader	typeref:typename:enable_if_t<!std::is_void<Return>::value,Return>	access:public	signature:(Func && f)
argument_loader::call	include/pybind11/cast.h	/^    enable_if_t<std::is_void<Return>::value, void_type> call(Func &&f) && {$/;"	f	class:argument_loader	typeref:typename:enable_if_t<std::is_void<Return>::value,void_type>	access:public	signature:(Func && f)
argument_loader::call_impl	include/pybind11/cast.h	/^    Return call_impl(Func &&f, index_sequence<Is...>, Guard &&) && {$/;"	f	class:argument_loader	typeref:typename:Return	access:private	signature:(Func && f,index_sequence<Is...>,Guard &&)
argument_loader::has_kwargs	include/pybind11/cast.h	/^    static constexpr bool has_kwargs = kwargs_pos != -1;$/;"	m	class:argument_loader	typeref:typename:bool	access:public
argument_loader::indices	include/pybind11/cast.h	/^    using indices = make_index_sequence<sizeof...(Args)>;$/;"	t	class:argument_loader	access:private
argument_loader::kwargs_pos	include/pybind11/cast.h	/^    static constexpr auto kwargs_pos = constexpr_last<argument_is_kwargs, Args...>();$/;"	m	class:argument_loader	typeref:typename:auto	access:private
argument_loader::load_args	include/pybind11/cast.h	/^    bool load_args(function_call &call) { return load_impl_sequence(call, indices{}); }$/;"	f	class:argument_loader	typeref:typename:bool	access:public	signature:(function_call & call)
argument_loader::load_impl_sequence	include/pybind11/cast.h	/^    bool load_impl_sequence(function_call &call, index_sequence<Is...>) {$/;"	f	class:argument_loader	typeref:typename:bool	access:private	signature:(function_call & call,index_sequence<Is...>)
argument_loader::load_impl_sequence	include/pybind11/cast.h	/^    static bool load_impl_sequence(function_call &, index_sequence<>) { return true; }$/;"	f	class:argument_loader	typeref:typename:bool	access:private	signature:(function_call &,index_sequence<>)
argument_record	include/pybind11/attr.h	/^    argument_record(const char *name, const char *descr, handle value, bool convert, bool none)$/;"	f	struct:argument_record	access:public	signature:(const char * name,const char * descr,handle value,bool convert,bool none)
argument_record	include/pybind11/attr.h	/^struct argument_record {$/;"	s
argument_record::argument_record	include/pybind11/attr.h	/^    argument_record(const char *name, const char *descr, handle value, bool convert, bool none)$/;"	f	struct:argument_record	access:public	signature:(const char * name,const char * descr,handle value,bool convert,bool none)
argument_record::convert	include/pybind11/attr.h	/^    bool convert : 1;  \/\/\/< True if the argument is allowed to convert when loading$/;"	m	struct:argument_record	typeref:typename:bool:1	access:public
argument_record::descr	include/pybind11/attr.h	/^    const char *descr; \/\/\/< Human-readable version of the argument value$/;"	m	struct:argument_record	typeref:typename:const char *	access:public
argument_record::name	include/pybind11/attr.h	/^    const char *name;  \/\/\/< Argument name$/;"	m	struct:argument_record	typeref:typename:const char *	access:public
argument_record::none	include/pybind11/attr.h	/^    bool none : 1;     \/\/\/< True if None is allowed when loading$/;"	m	struct:argument_record	typeref:typename:bool:1	access:public
argument_record::value	include/pybind11/attr.h	/^    handle value;      \/\/\/< Associated Python object$/;"	m	struct:argument_record	typeref:typename:handle	access:public
argv	tests/test_embed/test_interpreter.cpp	/^        char *argv[] = {strdup("a.out"), strdup("arg1")};$/;"	v	typeref:typename:char * []
argv	tests/test_embed/test_interpreter.cpp	/^        char *argv[] = {strdup("a.out")};$/;"	v	typeref:typename:char * []
argv0	tests/test_embed/test_interpreter.cpp	/^    std::string argv0() const override { PYBIND11_OVERRIDE_PURE(std::string, Widget, argv0); }$/;"	f	class:PyWidget	typeref:typename:std::string	file:	access:private	signature:() const
argv0	tests/test_embed/test_interpreter.cpp	/^    virtual std::string argv0() const = 0;$/;"	p	class:Widget	typeref:typename:std::string	file:	access:public	signature:() const
argv0	tests/test_embed/test_interpreter.py	/^    def argv0(self):$/;"	m	class:DerivedWidget	access:public	signature:(self)
argv_scope	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter argv_scope(&config, 2, argv);$/;"	v	typeref:typename:py::scoped_interpreter
argv_scope	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter argv_scope(true, 1, argv);$/;"	v	typeref:typename:py::scoped_interpreter
argv_scope	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter argv_scope{&config, 1, argv};$/;"	v	typeref:typename:py::scoped_interpreter
arithmetic	include/pybind11/attr.h	/^struct arithmetic {};$/;"	s
arr	tests/test_numpy_array.cpp	/^using arr = py::array;$/;"	t	typeref:typename:py::array	file:
arr	tests/test_numpy_array.py	/^def arr():$/;"	f	access:public	signature:()
arr_t	tests/test_numpy_array.cpp	/^using arr_t = py::array_t<uint16_t, 0>;$/;"	t	typeref:typename:py::array_t<uint16_t,0>	file:
arr_t	tests/test_numpy_dtypes.cpp	/^    using arr_t = py::array_t<int32_t, 0>;$/;"	t	function:test_array_ctors	typeref:typename:py::array_t<int32_t,0>	file:
array	include/pybind11/numpy.h	/^    array() : array(0, static_cast<const double *>(nullptr)) {}$/;"	f	class:array	access:public	signature:()
array	include/pybind11/numpy.h	/^    array(ShapeContainer shape, StridesContainer strides, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ShapeContainer shape,StridesContainer strides,const T * ptr,handle base=handle ())
array	include/pybind11/numpy.h	/^    array(ShapeContainer shape, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ShapeContainer shape,const T * ptr,handle base=handle ())
array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt, T count, const void *ptr = nullptr, handle base = handle())$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,T count,const void * ptr=nullptr,handle base=handle ())
array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt,$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,ShapeContainer shape,StridesContainer strides,const void * ptr=nullptr,handle base=handle ())
array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt,$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,ShapeContainer shape,const void * ptr=nullptr,handle base=handle ())
array	include/pybind11/numpy.h	/^    explicit array(const buffer_info &info, handle base = handle())$/;"	f	class:array	access:public	signature:(const buffer_info & info,handle base=handle ())
array	include/pybind11/numpy.h	/^    explicit array(ssize_t count, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ssize_t count,const T * ptr,handle base=handle ())
array	include/pybind11/numpy.h	/^class array : public buffer {$/;"	c	inherits:buffer
array::ShapeContainer	include/pybind11/numpy.h	/^    using ShapeContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>	access:public
array::StridesContainer	include/pybind11/numpy.h	/^    using StridesContainer = detail::any_container<ssize_t>;$/;"	t	class:array	typeref:typename:detail::any_container<ssize_t>	access:public
array::__anon91d3b2de0203	include/pybind11/numpy.h	/^    enum {$/;"	g	class:array	access:public
array::array	include/pybind11/numpy.h	/^    array() : array(0, static_cast<const double *>(nullptr)) {}$/;"	f	class:array	access:public	signature:()
array::array	include/pybind11/numpy.h	/^    array(ShapeContainer shape, StridesContainer strides, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ShapeContainer shape,StridesContainer strides,const T * ptr,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    array(ShapeContainer shape, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ShapeContainer shape,const T * ptr,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt, T count, const void *ptr = nullptr, handle base = handle())$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,T count,const void * ptr=nullptr,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt,$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,ShapeContainer shape,StridesContainer strides,const void * ptr=nullptr,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    array(const pybind11::dtype &dt,$/;"	f	class:array	access:public	signature:(const pybind11::dtype & dt,ShapeContainer shape,const void * ptr=nullptr,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    explicit array(const buffer_info &info, handle base = handle())$/;"	f	class:array	access:public	signature:(const buffer_info & info,handle base=handle ())
array::array	include/pybind11/numpy.h	/^    explicit array(ssize_t count, const T *ptr, handle base = handle())$/;"	f	class:array	access:public	signature:(ssize_t count,const T * ptr,handle base=handle ())
array::base	include/pybind11/numpy.h	/^    object base() const { return reinterpret_borrow<object>(detail::array_proxy(m_ptr)->base); }$/;"	f	class:array	typeref:typename:object	access:public	signature:() const
array::byte_offset	include/pybind11/numpy.h	/^    ssize_t byte_offset(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:protected	signature:(Ix...index) const
array::c_style	include/pybind11/numpy.h	/^        c_style = detail::npy_api::NPY_ARRAY_C_CONTIGUOUS_,$/;"	e	enum:array::__anon91d3b2de0203	access:public
array::check_dimensions	include/pybind11/numpy.h	/^    void check_dimensions(Ix... index) const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:(Ix...index) const
array::check_dimensions_impl	include/pybind11/numpy.h	/^    void check_dimensions_impl(ssize_t axis, const ssize_t *shape, ssize_t i, Ix... index) const/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t axis,const ssize_t * shape,ssize_t i,Ix...index) const
array::check_dimensions_impl	include/pybind11/numpy.h	/^    void check_dimensions_impl(ssize_t, const ssize_t *) const {}$/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t,const ssize_t *) const
array::check_writeable	include/pybind11/numpy.h	/^    void check_writeable() const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:() const
array::data	include/pybind11/numpy.h	/^    const void *data(Ix... index) const {$/;"	f	class:array	typeref:typename:const void *	access:public	signature:(Ix...index) const
array::dtype	include/pybind11/numpy.h	/^    pybind11::dtype dtype() const {$/;"	f	class:array	typeref:typename:pybind11::dtype	access:public	signature:() const
array::ensure	include/pybind11/numpy.h	/^    static array ensure(handle h, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(handle h,int ExtraFlags=0)
array::f_style	include/pybind11/numpy.h	/^        f_style = detail::npy_api::NPY_ARRAY_F_CONTIGUOUS_,$/;"	e	enum:array::__anon91d3b2de0203	access:public
array::fail_dim_check	include/pybind11/numpy.h	/^    void fail_dim_check(ssize_t dim, const std::string &msg) const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t dim,const std::string & msg) const
array::flags	include/pybind11/numpy.h	/^    int flags() const { return detail::array_proxy(m_ptr)->flags; }$/;"	f	class:array	typeref:typename:int	access:public	signature:() const
array::forcecast	include/pybind11/numpy.h	/^        forcecast = detail::npy_api::NPY_ARRAY_FORCECAST_$/;"	e	enum:array::__anon91d3b2de0203	access:public
array::index_at	include/pybind11/numpy.h	/^    ssize_t index_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
array::itemsize	include/pybind11/numpy.h	/^    ssize_t itemsize() const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
array::mutable_data	include/pybind11/numpy.h	/^    void *mutable_data(Ix... index) {$/;"	f	class:array	typeref:typename:void *	access:public	signature:(Ix...index)
array::mutable_unchecked	include/pybind11/numpy.h	/^    detail::unchecked_mutable_reference<T, Dims> mutable_unchecked() & {$/;"	f	class:array	typeref:typename:detail::unchecked_mutable_reference<T,Dims>	access:public	signature:()
array::nbytes	include/pybind11/numpy.h	/^    ssize_t nbytes() const { return size() * itemsize(); }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
array::ndim	include/pybind11/numpy.h	/^    ssize_t ndim() const { return detail::array_proxy(m_ptr)->nd; }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
array::offset_at	include/pybind11/numpy.h	/^    ssize_t offset_at() const { return 0; }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
array::offset_at	include/pybind11/numpy.h	/^    ssize_t offset_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
array::owndata	include/pybind11/numpy.h	/^    bool owndata() const {$/;"	f	class:array	typeref:typename:bool	access:public	signature:() const
array::raw_array	include/pybind11/numpy.h	/^    static PyObject *raw_array(PyObject *ptr, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:PyObject *	access:protected	signature:(PyObject * ptr,int ExtraFlags=0)
array::reshape	include/pybind11/numpy.h	/^    array reshape(ShapeContainer new_shape) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(ShapeContainer new_shape)
array::resize	include/pybind11/numpy.h	/^    void resize(ShapeContainer new_shape, bool refcheck = true) {$/;"	f	class:array	typeref:typename:void	access:public	signature:(ShapeContainer new_shape,bool refcheck=true)
array::shape	include/pybind11/numpy.h	/^    const ssize_t *shape() const { return detail::array_proxy(m_ptr)->dimensions; }$/;"	f	class:array	typeref:typename:const ssize_t *	access:public	signature:() const
array::shape	include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
array::size	include/pybind11/numpy.h	/^    ssize_t size() const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
array::squeeze	include/pybind11/numpy.h	/^    array squeeze() {$/;"	f	class:array	typeref:typename:array	access:public	signature:()
array::strides	include/pybind11/numpy.h	/^    const ssize_t *strides() const { return detail::array_proxy(m_ptr)->strides; }$/;"	f	class:array	typeref:typename:const ssize_t *	access:public	signature:() const
array::strides	include/pybind11/numpy.h	/^    ssize_t strides(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
array::unchecked	include/pybind11/numpy.h	/^    detail::unchecked_reference<T, Dims> unchecked() const & {$/;"	f	class:array	typeref:typename:detail::unchecked_reference<T,Dims>	access:public	signature:() const
array::view	include/pybind11/numpy.h	/^    array view(const std::string &dtype) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(const std::string & dtype)
array::writeable	include/pybind11/numpy.h	/^    bool writeable() const {$/;"	f	class:array	typeref:typename:bool	access:public	signature:() const
array_caster	include/pybind11/stl.h	/^struct array_caster {$/;"	s
array_caster::cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:array_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
array_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:array_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
array_caster::require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<!R, size_t> size) {$/;"	f	struct:array_caster	typeref:typename:bool	access:private	signature:(enable_if_t<!R,size_t> size)
array_caster::require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<R, size_t> size) {$/;"	f	struct:array_caster	typeref:typename:bool	access:private	signature:(enable_if_t<R,size_t> size)
array_caster::value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:array_caster	typeref:typename:make_caster<Value>	access:public
array_copy_but_one	tests/test_eigen_matrix.py	/^def array_copy_but_one(a, r, c, v):$/;"	f	access:public	signature:(a, r, c, v)
array_descriptor_proxy	include/pybind11/numpy.h	/^inline PyArrayDescr_Proxy *array_descriptor_proxy(PyObject *ptr) {$/;"	f	typeref:typename:PyArrayDescr_Proxy *	signature:(PyObject * ptr)
array_descriptor_proxy	include/pybind11/numpy.h	/^inline const PyArrayDescr_Proxy *array_descriptor_proxy(const PyObject *ptr) {$/;"	f	typeref:typename:const PyArrayDescr_Proxy *	signature:(const PyObject * ptr)
array_info	include/pybind11/numpy.h	/^struct array_info : array_info_scalar<T> {};$/;"	s	inherits:array_info_scalar<T>
array_info	include/pybind11/numpy.h	/^struct array_info<T[N]> : array_info<std::array<T, N>> {};$/;"	s	inherits:array_info<std::array<T,N>>
array_info	include/pybind11/numpy.h	/^struct array_info<char[N]> : array_info_scalar<char[N]> {};$/;"	s	inherits:array_info_scalar<char[N]>
array_info	include/pybind11/numpy.h	/^struct array_info<std::array<T, N>> {$/;"	s
array_info	include/pybind11/numpy.h	/^struct array_info<std::array<char, N>> : array_info_scalar<std::array<char, N>> {};$/;"	s	inherits:array_info_scalar<std::array<char,N>>
array_info::append_extents	include/pybind11/numpy.h	/^    static void append_extents(list &shape) {$/;"	f	struct:array_info	typeref:typename:void	access:public	signature:(list & shape)
array_info::extent	include/pybind11/numpy.h	/^    static constexpr size_t extent = N;$/;"	m	struct:array_info	typeref:typename:size_t	access:public
array_info::extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name<array_info<T>::is_array>($/;"	m	struct:array_info	typeref:typename:auto	access:public
array_info::is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = true;$/;"	m	struct:array_info	typeref:typename:bool	access:public
array_info::is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = (N == 0) || array_info<T>::is_empty;$/;"	m	struct:array_info	typeref:typename:bool	access:public
array_info::type	include/pybind11/numpy.h	/^    using type = typename array_info<T>::type;$/;"	t	struct:array_info	typeref:typename:array_info<T>::type	access:public
array_info_scalar	include/pybind11/numpy.h	/^struct array_info_scalar {$/;"	s
array_info_scalar::append_extents	include/pybind11/numpy.h	/^    static void append_extents(list & \/* shape *\/) {}$/;"	f	struct:array_info_scalar	typeref:typename:void	access:public	signature:(list &)
array_info_scalar::extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name("");$/;"	m	struct:array_info_scalar	typeref:typename:auto	access:public
array_info_scalar::is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = false;$/;"	m	struct:array_info_scalar	typeref:typename:bool	access:public
array_info_scalar::is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = false;$/;"	m	struct:array_info_scalar	typeref:typename:bool	access:public
array_info_scalar::type	include/pybind11/numpy.h	/^    using type = T;$/;"	t	struct:array_info_scalar	typeref:typename:T	access:public
array_proxy	include/pybind11/numpy.h	/^inline PyArray_Proxy *array_proxy(void *ptr) { return reinterpret_cast<PyArray_Proxy *>(ptr); }$/;"	f	typeref:typename:PyArray_Proxy *	signature:(void * ptr)
array_proxy	include/pybind11/numpy.h	/^inline const PyArray_Proxy *array_proxy(const void *ptr) {$/;"	f	typeref:typename:const PyArray_Proxy *	signature:(const void * ptr)
array_t	include/pybind11/numpy.h	/^    array_t() : array(0, static_cast<const T *>(nullptr)) {}$/;"	f	class:array_t	access:public	signature:()
array_t	include/pybind11/numpy.h	/^    array_t(ShapeContainer shape,$/;"	f	class:array_t	access:public	signature:(ShapeContainer shape,StridesContainer strides,const T * ptr=nullptr,handle base=handle ())
array_t	include/pybind11/numpy.h	/^    array_t(const object &o) : array(raw_array_t(o.ptr()), stolen_t{}) {$/;"	f	class:array_t	access:public	signature:(const object & o)
array_t	include/pybind11/numpy.h	/^    array_t(handle h, bool is_borrowed) : array(raw_array_t(h.ptr()), stolen_t{}) {$/;"	f	class:array_t	access:public	signature:(handle h,bool is_borrowed)
array_t	include/pybind11/numpy.h	/^    array_t(handle h, borrowed_t) : array(h, borrowed_t{}) {}$/;"	f	class:array_t	access:public	signature:(handle h,borrowed_t)
array_t	include/pybind11/numpy.h	/^    array_t(handle h, stolen_t) : array(h, stolen_t{}) {}$/;"	f	class:array_t	access:public	signature:(handle h,stolen_t)
array_t	include/pybind11/numpy.h	/^    array_t(private_ctor,$/;"	f	class:array_t	access:private	signature:(private_ctor,ShapeContainer && shape,StridesContainer && strides,const T * ptr,handle base)
array_t	include/pybind11/numpy.h	/^    explicit array_t(ShapeContainer shape, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t	access:public	signature:(ShapeContainer shape,const T * ptr=nullptr,handle base=handle ())
array_t	include/pybind11/numpy.h	/^    explicit array_t(const buffer_info &info, handle base = handle()) : array(info, base) {}$/;"	f	class:array_t	access:public	signature:(const buffer_info & info,handle base=handle ())
array_t	include/pybind11/numpy.h	/^    explicit array_t(ssize_t count, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t	access:public	signature:(ssize_t count,const T * ptr=nullptr,handle base=handle ())
array_t	include/pybind11/numpy.h	/^class array_t : public array {$/;"	c	inherits:array
array_t::array_t	include/pybind11/numpy.h	/^    array_t() : array(0, static_cast<const T *>(nullptr)) {}$/;"	f	class:array_t	access:public	signature:()
array_t::array_t	include/pybind11/numpy.h	/^    array_t(ShapeContainer shape,$/;"	f	class:array_t	access:public	signature:(ShapeContainer shape,StridesContainer strides,const T * ptr=nullptr,handle base=handle ())
array_t::array_t	include/pybind11/numpy.h	/^    array_t(const object &o) : array(raw_array_t(o.ptr()), stolen_t{}) {$/;"	f	class:array_t	access:public	signature:(const object & o)
array_t::array_t	include/pybind11/numpy.h	/^    array_t(handle h, bool is_borrowed) : array(raw_array_t(h.ptr()), stolen_t{}) {$/;"	f	class:array_t	access:public	signature:(handle h,bool is_borrowed)
array_t::array_t	include/pybind11/numpy.h	/^    array_t(handle h, borrowed_t) : array(h, borrowed_t{}) {}$/;"	f	class:array_t	access:public	signature:(handle h,borrowed_t)
array_t::array_t	include/pybind11/numpy.h	/^    array_t(handle h, stolen_t) : array(h, stolen_t{}) {}$/;"	f	class:array_t	access:public	signature:(handle h,stolen_t)
array_t::array_t	include/pybind11/numpy.h	/^    array_t(private_ctor,$/;"	f	class:array_t	access:private	signature:(private_ctor,ShapeContainer && shape,StridesContainer && strides,const T * ptr,handle base)
array_t::array_t	include/pybind11/numpy.h	/^    explicit array_t(ShapeContainer shape, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t	access:public	signature:(ShapeContainer shape,const T * ptr=nullptr,handle base=handle ())
array_t::array_t	include/pybind11/numpy.h	/^    explicit array_t(const buffer_info &info, handle base = handle()) : array(info, base) {}$/;"	f	class:array_t	access:public	signature:(const buffer_info & info,handle base=handle ())
array_t::array_t	include/pybind11/numpy.h	/^    explicit array_t(ssize_t count, const T *ptr = nullptr, handle base = handle())$/;"	f	class:array_t	access:public	signature:(ssize_t count,const T * ptr=nullptr,handle base=handle ())
array_t::at	include/pybind11/numpy.h	/^    const T &at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T &	access:public	signature:(Ix...index) const
array_t::check_	include/pybind11/numpy.h	/^    static bool check_(handle h) {$/;"	f	class:array_t	typeref:typename:bool	access:public	signature:(handle h)
array_t::data	include/pybind11/numpy.h	/^    const T *data(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T *	access:public	signature:(Ix...index) const
array_t::ensure	include/pybind11/numpy.h	/^    static array_t ensure(handle h) {$/;"	f	class:array_t	typeref:typename:array_t	access:public	signature:(handle h)
array_t::index_at	include/pybind11/numpy.h	/^    ssize_t index_at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
array_t::itemsize	include/pybind11/numpy.h	/^    constexpr ssize_t itemsize() const { return sizeof(T); }$/;"	f	class:array_t	typeref:typename:ssize_t	access:public	signature:() const
array_t::mutable_at	include/pybind11/numpy.h	/^    T &mutable_at(Ix... index) {$/;"	f	class:array_t	typeref:typename:T &	access:public	signature:(Ix...index)
array_t::mutable_data	include/pybind11/numpy.h	/^    T *mutable_data(Ix... index) {$/;"	f	class:array_t	typeref:typename:T *	access:public	signature:(Ix...index)
array_t::mutable_unchecked	include/pybind11/numpy.h	/^    detail::unchecked_mutable_reference<T, Dims> mutable_unchecked() & {$/;"	f	class:array_t	typeref:typename:detail::unchecked_mutable_reference<T,Dims>	access:public	signature:()
array_t::private_ctor	include/pybind11/numpy.h	/^    struct private_ctor {};$/;"	s	class:array_t	access:private
array_t::raw_array_t	include/pybind11/numpy.h	/^    static PyObject *raw_array_t(PyObject *ptr) {$/;"	f	class:array_t	typeref:typename:PyObject *	access:protected	signature:(PyObject * ptr)
array_t::unchecked	include/pybind11/numpy.h	/^    detail::unchecked_reference<T, Dims> unchecked() const & {$/;"	f	class:array_t	typeref:typename:detail::unchecked_reference<T,Dims>	access:public	signature:() const
array_t::value_type	include/pybind11/numpy.h	/^    using value_type = T;$/;"	t	class:array_t	typeref:typename:T	access:public
arrow_proxy	include/pybind11/pytypes.h	/^    arrow_proxy(T &&value) noexcept : value(std::move(value)) {}$/;"	f	struct:arrow_proxy	access:public	signature:(T && value)
arrow_proxy	include/pybind11/pytypes.h	/^struct arrow_proxy {$/;"	s
arrow_proxy::arrow_proxy	include/pybind11/pytypes.h	/^    arrow_proxy(T &&value) noexcept : value(std::move(value)) {}$/;"	f	struct:arrow_proxy	access:public	signature:(T && value)
arrow_proxy::operator ->	include/pybind11/pytypes.h	/^    T *operator->() const { return &value; }$/;"	f	struct:arrow_proxy	typeref:typename:T *	access:public	signature:() const
arrow_proxy::value	include/pybind11/pytypes.h	/^    T value;$/;"	m	struct:arrow_proxy	typeref:typename:T	access:public
as	include/pybind11/numpy.h	/^    using as = bool_constant<sizeof(T) == sizeof(U)>;$/;"	t	struct:same_size	access:public
assert_equal	tests/test_numpy_dtypes.py	/^def assert_equal(actual, expected_data, expected_dtype):$/;"	f	access:public	signature:(actual, expected_data, expected_dtype)
assert_equal_const_funcs	tests/test_eigen_tensor.py	/^assert_equal_const_funcs = [$/;"	v	access:public
assert_equal_funcs	tests/test_eigen_tensor.py	/^assert_equal_funcs = [$/;"	v	access:public
assert_equal_ref	tests/test_eigen_matrix.py	/^def assert_equal_ref(mat):$/;"	f	access:public	signature:(mat)
assert_equal_tensor_ref	tests/test_eigen_tensor.py	/^def assert_equal_tensor_ref(mat, writeable=True, modified=None):$/;"	f	access:public	signature:(mat, writeable=True, modified=None)
assert_keeps_alive	tests/test_eigen_matrix.py	/^def assert_keeps_alive(cl, method, *args):$/;"	f	access:public	signature:(cl, method, *args)
assert_references	tests/test_numpy_array.py	/^    def assert_references(a, b, base=None):$/;"	f	function:test_wrap	file:	access:private	signature:(a, b, base=None)
assert_sparse_equal_ref	tests/test_eigen_matrix.py	/^def assert_sparse_equal_ref(sparse_mat):$/;"	f	access:public	signature:(sparse_mat)
assign_both	tests/test_eigen_matrix.py	/^def assign_both(a1, a2, r, c, v):$/;"	f	access:public	signature:(a1, a2, r, c, v)
asyncio	tests/test_async.py	/^asyncio = pytest.importorskip("asyncio")$/;"	v	access:public
at	include/pybind11/numpy.h	/^    const T &at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T &	access:public	signature:(Ix...index) const
at_t	tests/test_numpy_array.cpp	/^py::ssize_t at_t(const arr_t &a, Ix... idx) {$/;"	f	typeref:typename:py::ssize_t	signature:(const arr_t & a,Ix...idx)
attr	include/pybind11/pytypes.h	/^    obj_attr_accessor attr(handle key) const;$/;"	p	class:object_api	typeref:typename:obj_attr_accessor	access:public	signature:(handle key) const
attr	include/pybind11/pytypes.h	/^    obj_attr_accessor attr(object &&key) const;$/;"	p	class:object_api	typeref:typename:obj_attr_accessor	access:public	signature:(object && key) const
attr	include/pybind11/pytypes.h	/^    str_attr_accessor attr(const char *key) const;$/;"	p	class:object_api	typeref:typename:str_attr_accessor	access:public	signature:(const char * key) const
attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(handle key) const {$/;"	f	class:object_api	typeref:typename:obj_attr_accessor	signature:(handle key) const
attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(object &&key) const {$/;"	f	class:object_api	typeref:typename:obj_attr_accessor	signature:(object && key) const
attr	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::attr(const char *key) const {$/;"	f	class:object_api	typeref:typename:str_attr_accessor	signature:(const char * key) const
attr_char	tests/test_pytypes.py	/^        attr_char = 2$/;"	v	class:test_accessors.SubTestObject	access:public
attr_obj	tests/test_pytypes.py	/^        attr_obj = 1$/;"	v	class:test_accessors.SubTestObject	access:public
author	docs/conf.py	/^author = "Wenzel Jakob"$/;"	v	access:public
auto_cpp_level	pybind11/setup_helpers.py	/^def auto_cpp_level(compiler: Any) -> Union[str, int]:$/;"	f	typeref:typename:Union[str,int]	access:public	signature:(compiler: Any)
automatic	include/pybind11/detail/common.h	/^    automatic = 0,$/;"	e	enum:return_value_policy	access:public
automatic_reference	include/pybind11/detail/common.h	/^    automatic_reference,$/;"	e	enum:return_value_policy	access:public
auxiliaries	tests/test_numpy_array.cpp	/^py::handle auxiliaries(T &&r, T2 &&r2) {$/;"	f	typeref:typename:py::handle	signature:(T && r,T2 && r2)
avoid	tests/test_eigen_tensor.py	/^    import eigen_tensor_avoid_stl_array as avoid$/;"	I	access:public	nameref:module:eigen_tensor_avoid_stl_array
avoiding-cpp-types-in-docstrings	docs/advanced/misc.rst	/^.. _avoiding-cpp-types-in-docstrings:$/;"	T	chapter:Generating documentation using Sphinx
b	tests/test_eigen_matrix.cpp	/^    Eigen::Matrix4d b = Eigen::Matrix4d::Identity();$/;"	m	struct:CustomOperatorNew	typeref:typename:Eigen::Matrix4d	file:	access:public
b	tests/test_multiple_inheritance.cpp	/^        int b = 1;$/;"	m	struct:TEST_SUBMODULE::MVB	typeref:typename:int	file:	access:public
b	tests/test_multiple_inheritance.cpp	/^        int b;$/;"	m	struct:TEST_SUBMODULE::B	typeref:typename:int	file:	access:public
b	tests/test_multiple_inheritance.cpp	/^    int b = 2;$/;"	m	struct:__anon9ca8d76c0111::I801B2	typeref:typename:int	file:	access:public
b	tests/test_numpy_dtypes.cpp	/^        char b;$/;"	m	struct:TEST_SUBMODULE::TrailingPaddingStruct	typeref:typename:char	file:	access:public
b	tests/test_numpy_dtypes.cpp	/^    int32_t b[2];$/;"	m	struct:ArrayStruct	typeref:typename:int32_t[2]	file:	access:public
b	tests/test_numpy_dtypes.cpp	/^    std::array<char, 3> b;$/;"	m	struct:StringStruct	typeref:typename:std::array<char,3>	file:	access:public
b	tests/test_operator_overloading.cpp	/^        NestB b;$/;"	m	struct:TEST_SUBMODULE::NestC	typeref:typename:NestB	file:	access:public
bad_next_call	tests/test_sequences_and_iterators.py	/^    def bad_next_call():$/;"	f	function:test_python_iterator_in_cpp	file:	access:private	signature:()
bar	tests/test_multiple_inheritance.cpp	/^        int bar() const { return i; }$/;"	f	struct:TEST_SUBMODULE::Base2	typeref:typename:int	file:	access:public	signature:() const
bar	tests/test_multiple_inheritance.cpp	/^    int bar() const { return i; }$/;"	f	struct:__anon9ca8d76c0111::Base2a	typeref:typename:int	file:	access:public	signature:() const
bar	tests/test_multiple_inheritance.py	/^        def bar(self):$/;"	m	class:test_multiple_inheritance_mix2.Base2	access:public	signature:(self)
bark	tests/test_class.cpp	/^        std::string bark() const { return "Woof!"; }$/;"	f	class:TEST_SUBMODULE::Dog	typeref:typename:std::string	file:	access:public	signature:() const
bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return Dog::bark() + " and runs in circles"; }$/;"	f	struct:Chihuahua	typeref:typename:std::string	file:	access:public	signature:() const
bark	tests/test_tagbased_polymorphic.cpp	/^    std::string bark() const { return name_of_kind(kind) + " " + name + " goes " + sound; }$/;"	f	struct:Dog	typeref:typename:std::string	file:	access:public	signature:() const
base	include/pybind11/attr.h	/^    base() = default;$/;"	p	struct:base	access:public	signature:()
base	include/pybind11/attr.h	/^struct base {$/;"	s
base	include/pybind11/cast.h	/^    using base = type_caster_base<type>;$/;"	t	struct:copyable_holder_caster	typeref:typename:type_caster_base<type>	access:public
base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *	access:public
base	include/pybind11/numpy.h	/^    PyObject *base;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject *	access:public
base	include/pybind11/numpy.h	/^    object base() const { return reinterpret_borrow<object>(detail::array_proxy(m_ptr)->base); }$/;"	f	class:array	typeref:typename:object	access:public	signature:() const
base	tools/setup_global.py.in	/^base = os.environ.get("PYBIND11_GLOBAL_PREFIX", "")$/;"	v	access:public
base::base	include/pybind11/attr.h	/^    base() = default;$/;"	p	struct:base	access:public	signature:()
base_descr	include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename array_info<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename array_info<T>::type>	access:private
base_descr	include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename std::underlying_type<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename std::underlying_type<T>::type>	access:private
bases	include/pybind11/attr.h	/^    list bases;$/;"	m	struct:type_record	typeref:typename:list	access:public
basic_attr	tests/test_pytypes.py	/^        basic_attr = 1$/;"	v	class:test_accessors.TestObject	access:public
basics	docs/basics.rst	/^.. _basics:$/;"	T
begin	include/pybind11/detail/type_caster_base.h	/^    iterator begin() { return iterator(inst, &tinfo); }$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:()
begin	include/pybind11/pytypes.h	/^    detail::dict_iterator begin() const { return {*this, 0}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator	access:public	signature:() const
begin	include/pybind11/pytypes.h	/^    detail::list_iterator begin() const { return {*this, 0}; }$/;"	f	class:list	typeref:typename:detail::list_iterator	access:public	signature:() const
begin	include/pybind11/pytypes.h	/^    detail::sequence_iterator begin() const { return {*this, 0}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator	access:public	signature:() const
begin	include/pybind11/pytypes.h	/^    detail::tuple_iterator begin() const { return {*this, 0}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator	access:public	signature:() const
begin	include/pybind11/pytypes.h	/^    iterator begin() const;$/;"	p	class:object_api	typeref:typename:iterator	access:public	signature:() const
begin	tests/test_sequences_and_iterators.cpp	/^        const float *begin() const { return m_data; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:const float *	file:	access:public	signature:() const
begin	tests/test_sequences_and_iterators.cpp	/^        const std::pair<int, int> *begin() const { return data_.data(); }$/;"	f	class:TEST_SUBMODULE::IntPairs	typeref:typename:const std::pair<int,int> *	file:	access:public	signature:() const
begin	tests/test_sequences_and_iterators.cpp	/^        decltype(map.cbegin()) begin() const { return map.cbegin(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:decltype(map.cbegin ())	file:	access:public	signature:() const
begin_end	tests/test_pytypes.py	/^        begin_end = [1, 2, 3]$/;"	v	class:test_accessors.TestObject	access:public
bind_ConstructorStats	tests/pybind11_tests.cpp	/^void bind_ConstructorStats(py::module_ &m) {$/;"	f	typeref:typename:void	signature:(py::module_ & m)
bind_empty0	tests/test_class.cpp	/^void bind_empty0(py::module_ &m) {$/;"	f	namespace:test_class::pr4220_tripped_over_this	typeref:typename:void	signature:(py::module_ & m)
bind_local	tests/local_bindings.h	/^py::class_<T> bind_local(Args &&...args) {$/;"	f	typeref:typename:py::class_<T>	signature:(Args &&...args)
binder	docs/compiling.rst	/^.. [binder] http:\/\/cppbinder.readthedocs.io\/en\/latest\/about.html$/;"	C	chapter:Generating binding code automatically
block	tests/test_eigen_matrix.cpp	/^        Eigen::Block<Eigen::MatrixXd> block(int r, int c, int nrow, int ncol) {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Block<Eigen::MatrixXd>	file:	access:public	signature:(int r,int c,int nrow,int ncol)
blockConst	tests/test_eigen_matrix.cpp	/^        Eigen::Block<const Eigen::MatrixXd> blockConst(int r, int c, int nrow, int ncol) const {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Block<const Eigen::MatrixXd>	file:	access:public	signature:(int r,int c,int nrow,int ncol) const
bool_	include/pybind11/pytypes.h	/^    bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) {}$/;"	f	class:bool_	access:public	signature:(bool value)
bool_	include/pybind11/pytypes.h	/^class bool_ : public object {$/;"	c	inherits:object
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:PartialStruct	typeref:typename:bool	file:	access:public
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStruct	typeref:typename:bool	file:	access:public
bool_	tests/test_numpy_dtypes.cpp	/^    bool bool_;$/;"	m	struct:SimpleStructReordered	typeref:typename:bool	file:	access:public
bool_::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(bool_, object, PyBool_Check, raw_bool)$/;"	f	class:bool_	access:public	signature:(bool_,object,PyBool_Check,raw_bool)
bool_::bool_	include/pybind11/pytypes.h	/^    bool_(bool value) : object(value ? Py_True : Py_False, borrowed_t{}) {}$/;"	f	class:bool_	access:public	signature:(bool value)
bool_::operator bool	include/pybind11/pytypes.h	/^    operator bool() const { return (m_ptr != nullptr) && PyLong_AsLong(m_ptr) != 0; }$/;"	f	class:bool_	access:public	signature:() const
bool_::raw_bool	include/pybind11/pytypes.h	/^    static PyObject *raw_bool(PyObject *op) {$/;"	f	class:bool_	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
bool_constant	include/pybind11/detail/common.h	/^using bool_constant = std::integral_constant<bool, B>;$/;"	t	typeref:typename:std::integral_constant<bool,B>
bools	include/pybind11/detail/common.h	/^struct bools {};$/;"	s
boost_opt_int	tests/test_stl.cpp	/^    using boost_opt_int = boost::optional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:boost::optional<int>	file:
boost_opt_no_assign	tests/test_stl.cpp	/^    using boost_opt_no_assign = boost::optional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:boost::optional<NoAssign>	file:
borrowed_t	include/pybind11/pytypes.h	/^    struct borrowed_t {};$/;"	s	class:object	access:protected
breathe_default_project	docs/conf.py	/^breathe_default_project = "pybind11"$/;"	v	access:public
breathe_domain_by_extension	docs/conf.py	/^breathe_domain_by_extension = {"h": "cpp"}$/;"	v	access:public
breathe_projects	docs/conf.py	/^breathe_projects = {"pybind11": ".build\/doxygenxml\/"}$/;"	v	access:public
broadcast	include/pybind11/numpy.h	/^broadcast(const std::array<buffer_info, N> &buffers, ssize_t &ndim, std::vector<ssize_t> &shape)/;"	f	typeref:typename:broadcast_trivial	signature:(const std::array<buffer_info,N> & buffers,ssize_t & ndim,std::vector<ssize_t> & shape)
broadcast_trivial	include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	g
buf_size	include/pybind11/iostream.h	/^    const size_t buf_size;$/;"	m	class:pythonbuf	typeref:typename:const size_t	access:private
buffer	include/pybind11/iostream.h	/^    detail::pythonbuf buffer;$/;"	m	class:scoped_ostream_redirect	typeref:typename:detail::pythonbuf	access:protected
buffer	include/pybind11/pytypes.h	/^class buffer : public object {$/;"	c	inherits:object
buffer::PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(buffer, object, PyObject_CheckBuffer)$/;"	f	class:buffer	access:public	signature:(buffer,object,PyObject_CheckBuffer)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info() = default;$/;"	p	struct:buffer_info	access:public	signature:()
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, ssize_t size, bool readonly = false)$/;"	f	struct:buffer_info	access:public	signature:(T * ptr,ssize_t size,bool readonly=false)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr,$/;"	f	struct:buffer_info	access:public	signature:(T * ptr,detail::any_container<ssize_t> shape_in,detail::any_container<ssize_t> strides_in,bool readonly=false)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(buffer_info &&other) noexcept { (*this) = std::move(other); }$/;"	f	struct:buffer_info	access:public	signature:(buffer_info && other)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(const T *ptr, ssize_t size, bool readonly = true)$/;"	f	struct:buffer_info	access:public	signature:(const T * ptr,ssize_t size,bool readonly=true)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(const buffer_info &) = delete;$/;"	p	struct:buffer_info	access:public	signature:(const buffer_info &)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(private_ctr_tag,$/;"	f	struct:buffer_info	access:private	signature:(private_ctr_tag,void * ptr,ssize_t itemsize,const std::string & format,ssize_t ndim,detail::any_container<ssize_t> && shape_in,detail::any_container<ssize_t> && strides_in,bool readonly)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(void *ptr,$/;"	f	struct:buffer_info	access:public	signature:(void * ptr,ssize_t itemsize,const std::string & format,ssize_t ndim,detail::any_container<ssize_t> shape_in,detail::any_container<ssize_t> strides_in,bool readonly=false)
buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(void *ptr,$/;"	f	struct:buffer_info	access:public	signature:(void * ptr,ssize_t itemsize,const std::string & format,ssize_t size,bool readonly=false)
buffer_info	include/pybind11/buffer_info.h	/^    explicit buffer_info(Py_buffer *view, bool ownview = true)$/;"	f	struct:buffer_info	access:public	signature:(Py_buffer * view,bool ownview=true)
buffer_info	include/pybind11/buffer_info.h	/^struct buffer_info {$/;"	s
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info() = default;$/;"	p	struct:buffer_info	access:public	signature:()
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr, ssize_t size, bool readonly = false)$/;"	f	struct:buffer_info	access:public	signature:(T * ptr,ssize_t size,bool readonly=false)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(T *ptr,$/;"	f	struct:buffer_info	access:public	signature:(T * ptr,detail::any_container<ssize_t> shape_in,detail::any_container<ssize_t> strides_in,bool readonly=false)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(buffer_info &&other) noexcept { (*this) = std::move(other); }$/;"	f	struct:buffer_info	access:public	signature:(buffer_info && other)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(const T *ptr, ssize_t size, bool readonly = true)$/;"	f	struct:buffer_info	access:public	signature:(const T * ptr,ssize_t size,bool readonly=true)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(const buffer_info &) = delete;$/;"	p	struct:buffer_info	access:public	signature:(const buffer_info &)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(private_ctr_tag,$/;"	f	struct:buffer_info	access:private	signature:(private_ctr_tag,void * ptr,ssize_t itemsize,const std::string & format,ssize_t ndim,detail::any_container<ssize_t> && shape_in,detail::any_container<ssize_t> && strides_in,bool readonly)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(void *ptr,$/;"	f	struct:buffer_info	access:public	signature:(void * ptr,ssize_t itemsize,const std::string & format,ssize_t ndim,detail::any_container<ssize_t> shape_in,detail::any_container<ssize_t> strides_in,bool readonly=false)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    buffer_info(void *ptr,$/;"	f	struct:buffer_info	access:public	signature:(void * ptr,ssize_t itemsize,const std::string & format,ssize_t size,bool readonly=false)
buffer_info::buffer_info	include/pybind11/buffer_info.h	/^    explicit buffer_info(Py_buffer *view, bool ownview = true)$/;"	f	struct:buffer_info	access:public	signature:(Py_buffer * view,bool ownview=true)
buffer_info::format	include/pybind11/buffer_info.h	/^    std::string format;           \/\/ For homogeneous buffers, this should be set to$/;"	m	struct:buffer_info	typeref:typename:std::string	access:public
buffer_info::item_type_is_equivalent_to	include/pybind11/buffer_info.h	/^    bool item_type_is_equivalent_to() const {$/;"	f	struct:buffer_info	typeref:typename:bool	access:public	signature:() const
buffer_info::itemsize	include/pybind11/buffer_info.h	/^    ssize_t itemsize = 0;         \/\/ Size of individual items in bytes$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
buffer_info::m_view	include/pybind11/buffer_info.h	/^    Py_buffer *m_view = nullptr;$/;"	m	struct:buffer_info	typeref:typename:Py_buffer *	access:private
buffer_info::ndim	include/pybind11/buffer_info.h	/^    ssize_t ndim = 0;             \/\/ Number of dimensions$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
buffer_info::operator =	include/pybind11/buffer_info.h	/^    buffer_info &operator=(buffer_info &&rhs) noexcept {$/;"	f	struct:buffer_info	typeref:typename:buffer_info &	access:public	signature:(buffer_info && rhs)
buffer_info::operator =	include/pybind11/buffer_info.h	/^    buffer_info &operator=(const buffer_info &) = delete;$/;"	p	struct:buffer_info	typeref:typename:buffer_info &	access:public	signature:(const buffer_info &)
buffer_info::ownview	include/pybind11/buffer_info.h	/^    bool ownview = false;$/;"	m	struct:buffer_info	typeref:typename:bool	access:private
buffer_info::private_ctr_tag	include/pybind11/buffer_info.h	/^    struct private_ctr_tag {};$/;"	s	struct:buffer_info	access:private
buffer_info::ptr	include/pybind11/buffer_info.h	/^    void *ptr = nullptr;          \/\/ Pointer to the underlying storage$/;"	m	struct:buffer_info	typeref:typename:void *	access:public
buffer_info::readonly	include/pybind11/buffer_info.h	/^    bool readonly = false;        \/\/ flag to indicate if the underlying storage may be written/;"	m	struct:buffer_info	typeref:typename:bool	access:public
buffer_info::shape	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> shape;   \/\/ Shape of the tensor (1 entry per dimension)$/;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>	access:public
buffer_info::size	include/pybind11/buffer_info.h	/^    ssize_t size = 0;             \/\/ Total number of entries$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
buffer_info::strides	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> strides; \/\/ Number of bytes between adjacent entries$/;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>	access:public
buffer_info::view	include/pybind11/buffer_info.h	/^    Py_buffer *&view() { return m_view; }$/;"	f	struct:buffer_info	typeref:typename:Py_buffer * &	access:public	signature:()
buffer_info::view	include/pybind11/buffer_info.h	/^    Py_buffer *view() const { return m_view; }$/;"	f	struct:buffer_info	typeref:typename:Py_buffer *	access:public	signature:() const
buffer_info::~buffer_info	include/pybind11/buffer_info.h	/^    ~buffer_info() {$/;"	f	struct:buffer_info	access:public	signature:()
buffer_protocol	include/pybind11/attr.h	/^    bool buffer_protocol : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
buffer_protocol	include/pybind11/attr.h	/^struct buffer_protocol {};$/;"	s
build	noxfile.py	/^def build(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
build-setuptools	docs/compiling.rst	/^.. _build-setuptools:$/;"	T	title:Build systems
build_expected_version_hex	setup.py	/^def build_expected_version_hex(matches: Dict[str, str]) -> str:$/;"	f	typeref:typename:str	access:public	signature:(matches: Dict[str, str])
build_ext	pybind11/setup_helpers.py	/^class build_ext(_build_ext):  # type: ignore[misc] # noqa: N801$/;"	c	inherits:_build_ext	access:public
build_ext.build_extensions	pybind11/setup_helpers.py	/^    def build_extensions(self) -> None:$/;"	m	class:build_ext	typeref:typename:None	access:public	signature:(self)
build_extensions	pybind11/setup_helpers.py	/^    def build_extensions(self) -> None:$/;"	m	class:build_ext	typeref:typename:None	access:public	signature:(self)
build_options	tests/test_cmake_build/CMakeLists.txt	/^  set(build_options "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")$/;"	v	function:pybind11_add_build_test
building_manually	docs/compiling.rst	/^.. _building_manually:$/;"	T	section:Embedding the Python interpreter
builtin_exception	include/pybind11/detail/common.h	/^class PYBIND11_EXPORT_EXCEPTION builtin_exception : public std::runtime_error {$/;"	c	inherits:std::runtime_error
builtin_exception::set_error	include/pybind11/detail/common.h	/^    virtual void set_error() const = 0;$/;"	p	class:builtin_exception	typeref:typename:void	access:public	signature:() const
byte_offset	include/pybind11/numpy.h	/^    ssize_t byte_offset(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:protected	signature:(Ix...index) const
byte_offset_unsafe	include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &) {$/;"	f	typeref:typename:ssize_t	signature:(const Strides &)
byte_offset_unsafe	include/pybind11/numpy.h	/^ssize_t byte_offset_unsafe(const Strides &strides, ssize_t i, Ix... index) {$/;"	f	typeref:typename:ssize_t	signature:(const Strides & strides,ssize_t i,Ix...index)
bytearray	include/pybind11/pytypes.h	/^    bytearray() : bytearray("", 0) {}$/;"	f	class:bytearray	access:public	signature:()
bytearray	include/pybind11/pytypes.h	/^    explicit bytearray(const std::string &s) : bytearray(s.data(), s.size()) {}$/;"	f	class:bytearray	access:public	signature:(const std::string & s)
bytearray	include/pybind11/pytypes.h	/^class bytearray : public object {$/;"	c	inherits:object
bytearray::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(bytearray, object, PyByteArray_Check, PyByteArray_FromObject)$/;"	f	class:bytearray	access:public	signature:(bytearray,object,PyByteArray_Check,PyByteArray_FromObject)
bytearray::bytearray	include/pybind11/pytypes.h	/^    bytearray() : bytearray("", 0) {}$/;"	f	class:bytearray	access:public	signature:()
bytearray::bytearray	include/pybind11/pytypes.h	/^    explicit bytearray(const std::string &s) : bytearray(s.data(), s.size()) {}$/;"	f	class:bytearray	access:public	signature:(const std::string & s)
bytearray::operator std::string	include/pybind11/pytypes.h	/^    explicit operator std::string() const {$/;"	f	class:bytearray	access:public	signature:() const
bytearray::size	include/pybind11/pytypes.h	/^    size_t size() const { return static_cast<size_t>(PyByteArray_Size(m_ptr)); }$/;"	f	class:bytearray	typeref:typename:size_t	access:public	signature:() const
byteorder	include/pybind11/numpy.h	/^    char byteorder() const { return detail::array_descriptor_proxy(m_ptr)->byteorder; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
byteorder	include/pybind11/numpy.h	/^    char byteorder;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
bytes	include/pybind11/pytypes.h	/^    bytes(T s) : bytes(s.data(), s.size()) {}$/;"	f	class:bytes	access:public	signature:(T s)
bytes	include/pybind11/pytypes.h	/^    bytes(const char *c, const SzType &n)$/;"	f	class:bytes	access:public	signature:(const char * c,const SzType & n)
bytes	include/pybind11/pytypes.h	/^    bytes(const std::string &s) : bytes(s.data(), s.size()) {}$/;"	f	class:bytes	access:public	signature:(const std::string & s)
bytes	include/pybind11/pytypes.h	/^    explicit bytes(const pybind11::str &s);$/;"	p	class:bytes	access:public	signature:(const pybind11::str & s)
bytes	include/pybind11/pytypes.h	/^class bytes : public object {$/;"	c	inherits:object
bytes	include/pybind11/pytypes.h	/^inline bytes::bytes(const pybind11::str &s) {$/;"	f	class:bytes	signature:(const pybind11::str & s)
bytes::PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(bytes, object, PYBIND11_BYTES_CHECK)$/;"	f	class:bytes	access:public	signature:(bytes,object,PYBIND11_BYTES_CHECK)
bytes::bytes	include/pybind11/pytypes.h	/^    bytes(T s) : bytes(s.data(), s.size()) {}$/;"	f	class:bytes	access:public	signature:(T s)
bytes::bytes	include/pybind11/pytypes.h	/^    bytes(const char *c, const SzType &n)$/;"	f	class:bytes	access:public	signature:(const char * c,const SzType & n)
bytes::bytes	include/pybind11/pytypes.h	/^    bytes(const std::string &s) : bytes(s.data(), s.size()) {}$/;"	f	class:bytes	access:public	signature:(const std::string & s)
bytes::bytes	include/pybind11/pytypes.h	/^    explicit bytes(const pybind11::str &s);$/;"	p	class:bytes	access:public	signature:(const pybind11::str & s)
bytes::bytes	include/pybind11/pytypes.h	/^inline bytes::bytes(const pybind11::str &s) {$/;"	f	class:bytes	signature:(const pybind11::str & s)
bytes::operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const { return string_op<std::string>(); }$/;"	f	class:bytes	access:public	signature:() const
bytes::operator std::string_view	include/pybind11/pytypes.h	/^    operator std::string_view() const { return string_op<std::string_view>(); }$/;"	f	class:bytes	access:public	signature:() const
bytes::string_op	include/pybind11/pytypes.h	/^    T string_op() const {$/;"	f	class:bytes	typeref:typename:T	access:private	signature:() const
c	include/pybind11/complex.h	/^    static constexpr const char c = format_descriptor<T>::c;$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
c	include/pybind11/detail/common.h	/^    static constexpr const char c = "?bBhHiIqQfdg"[detail::is_fmt_numeric<T>::index];$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
c	include/pybind11/detail/common.h	/^    static constexpr const char c = 'O';$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
c	tests/test_multiple_inheritance.cpp	/^        int c = 2;$/;"	m	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public
c	tests/test_multiple_inheritance.cpp	/^        int c = 3;$/;"	m	struct:TEST_SUBMODULE::I801B3	typeref:typename:int	file:	access:public
c	tests/test_numpy_dtypes.cpp	/^    std::array<uint8_t, 3> c;$/;"	m	struct:ArrayStruct	typeref:typename:std::array<uint8_t,3>	file:	access:public
c0	tests/test_multiple_inheritance.cpp	/^        int c0;$/;"	m	struct:TEST_SUBMODULE::C0	typeref:typename:int	file:	access:public
c1	tests/test_multiple_inheritance.cpp	/^        int c1;$/;"	m	struct:TEST_SUBMODULE::C1	typeref:typename:int	file:	access:public
c_str	include/pybind11/detail/internals.h	/^const char *c_str(Args &&...args) {$/;"	f	typeref:typename:const char *	signature:(Args &&...args)
c_style	include/pybind11/numpy.h	/^        c_style = detail::npy_api::NPY_ARRAY_C_CONTIGUOUS_,$/;"	e	enum:array::__anon91d3b2de0203	access:public
c_trivial	include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial	access:public
cache	include/pybind11/pytypes.h	/^    mutable object cache;$/;"	m	class:accessor	typeref:typename:object	access:private
call	include/pybind11/cast.h	/^    enable_if_t<!std::is_void<Return>::value, Return> call(Func &&f) && {$/;"	f	class:argument_loader	typeref:typename:enable_if_t<!std::is_void<Return>::value,Return>	access:public	signature:(Func && f)
call	include/pybind11/cast.h	/^    enable_if_t<std::is_void<Return>::value, void_type> call(Func &&f) && {$/;"	f	class:argument_loader	typeref:typename:enable_if_t<std::is_void<Return>::value,void_type>	access:public	signature:(Func && f)
call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:simple_collector	typeref:typename:object	access:public	signature:(PyObject * ptr) const
call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:unpacking_collector	typeref:typename:object	access:public	signature:(PyObject * ptr) const
call	include/pybind11/cast.h	/^object object_api<Derived>::call(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object	signature:(Args &&...args) const
call	include/pybind11/numpy.h	/^    static Return call(Func &f, Args &...args) { return f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Return	access:public	signature:(Func & f,Args &...args)
call	include/pybind11/numpy.h	/^    static detail::void_type call(Func &f, Args &...args) {$/;"	f	struct:vectorize_returned_array	typeref:typename:detail::void_type	access:public	signature:(Func & f,Args &...args)
call	include/pybind11/numpy.h	/^    static void call(Return *out, size_t i, Func &f, Args &...args) { out[i] = f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:void	access:public	signature:(Return * out,size_t i,Func & f,Args &...args)
call	include/pybind11/numpy.h	/^    static void call(void *, size_t, Func &f, Args &...args) { f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:void	access:public	signature:(void *,size_t,Func & f,Args &...args)
call	include/pybind11/pytypes.h	/^    object call(Args &&...args) const;$/;"	p	class:object_api	access:public	signature:(Args &&...args) const
call	include/pybind11/stl.h	/^    static auto call(Args &&...args) -> decltype(visit(std::forward<Args>(args)...)) {$/;"	f	struct:visit_helper	typeref:typename:decltype(visit (std::forward<Args> (args)...))	access:public	signature:(Args &&...args)
call	tests/test_stl.cpp	/^    static auto call(Args &&...args) -> decltype(boost::apply_visitor(args...)) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::visit_helper	typeref:typename:decltype(boost::apply_visitor (args...))	file:	access:public	signature:(Args &&...args)
call_guard	include/pybind11/attr.h	/^struct call_guard<> {$/;"	s
call_guard	include/pybind11/attr.h	/^struct call_guard<T, Ts...> {$/;"	s
call_guard	include/pybind11/attr.h	/^struct call_guard<T> {$/;"	s
call_guard::type	include/pybind11/attr.h	/^    struct type {$/;"	s	struct:call_guard	access:public
call_guard::type	include/pybind11/attr.h	/^    using type = T;$/;"	t	struct:call_guard	typeref:typename:T	access:public
call_guard::type	include/pybind11/attr.h	/^    using type = detail::void_type;$/;"	t	struct:call_guard	typeref:typename:detail::void_type	access:public
call_guard::type::guard	include/pybind11/attr.h	/^        T guard{}; \/\/ Compose multiple guard types with left-to-right default-constructor orde/;"	m	struct:call_guard::type	typeref:typename:T	access:public
call_guard::type::next	include/pybind11/attr.h	/^        typename call_guard<Ts...>::type next{};$/;"	m	struct:call_guard::type	typeref:typename:call_guard<Ts...>::type	access:public
call_impl	include/pybind11/cast.h	/^    Return call_impl(Func &&f, index_sequence<Is...>, Guard &&) && {$/;"	f	class:argument_loader	typeref:typename:Return	access:private	signature:(Func && f,index_sequence<Is...>,Guard &&)
call_operator_delete	include/pybind11/pybind11.h	/^inline void call_operator_delete(void *p, size_t s, size_t a) {$/;"	f	typeref:typename:void	signature:(void * p,size_t s,size_t a)
call_operator_delete	include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t s, size_t) {$/;"	f	typeref:typename:void	signature:(T * p,size_t s,size_t)
call_operator_delete	include/pybind11/pybind11.h	/^void call_operator_delete(T *p, size_t, size_t) {$/;"	f	typeref:typename:void	signature:(T * p,size_t,size_t)
call_policies	docs/advanced/functions.rst	/^.. _call_policies:$/;"	T	chapter:Return value policies
call_type	include/pybind11/numpy.h	/^    using call_type = remove_reference_t<T>;$/;"	t	struct:vectorize_arg	typeref:typename:remove_reference_t<T>	access:public
callback	include/pybind11/attr.h	/^    using callback = std::function<void(PyHeapTypeObject *heap_type)>;$/;"	t	struct:custom_type_setup	access:public
callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref	file:	access:private	signature:(_)
callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref_err	file:	access:private	signature:(_)
callback_f	tests/test_callbacks.cpp	/^    using callback_f = std::function<void(int)>;$/;"	t	function:TEST_SUBMODULE	file:
calling_python_functions	docs/advanced/pycpp/object.rst	/^.. _calling_python_functions:$/;"	T	chapter:Accessing Python libraries from C++
calling_python_methods	docs/advanced/pycpp/object.rst	/^.. _calling_python_methods:$/;"	T	chapter:Calling Python functions
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_bool_caster	file:	access:private	signature:(v)
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_int_convert	file:	access:private	signature:(v)
cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_numpy_bool	file:	access:private	signature:(v)
capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, PyCapsule_Destructor destructor)$/;"	f	class:capsule	access:public	signature:(const void * value,PyCapsule_Destructor destructor)
capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destructor)(void *)) {$/;"	f	class:capsule	access:public	signature:(const void * value,void (* destructor)(void *))
capsule	include/pybind11/pytypes.h	/^    explicit capsule(const void *value,$/;"	f	class:capsule	access:public	signature:(const void * value,const char * name=nullptr,PyCapsule_Destructor destructor=nullptr)
capsule	include/pybind11/pytypes.h	/^    explicit capsule(void (*destructor)()) {$/;"	f	class:capsule	access:public	signature:(void (* destructor)())
capsule	include/pybind11/pytypes.h	/^class capsule : public object {$/;"	c	inherits:object
capsule::PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(capsule, object, PyCapsule_CheckExact)$/;"	f	class:capsule	access:public	signature:(capsule,object,PyCapsule_CheckExact)
capsule::capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, PyCapsule_Destructor destructor)$/;"	f	class:capsule	access:public	signature:(const void * value,PyCapsule_Destructor destructor)
capsule::capsule	include/pybind11/pytypes.h	/^    capsule(const void *value, void (*destructor)(void *)) {$/;"	f	class:capsule	access:public	signature:(const void * value,void (* destructor)(void *))
capsule::capsule	include/pybind11/pytypes.h	/^    explicit capsule(const void *value,$/;"	f	class:capsule	access:public	signature:(const void * value,const char * name=nullptr,PyCapsule_Destructor destructor=nullptr)
capsule::capsule	include/pybind11/pytypes.h	/^    explicit capsule(void (*destructor)()) {$/;"	f	class:capsule	access:public	signature:(void (* destructor)())
capsule::get_name_in_error_scope	include/pybind11/pytypes.h	/^    static const char *get_name_in_error_scope(PyObject *o) {$/;"	f	class:capsule	typeref:typename:const char *	access:private	signature:(PyObject * o)
capsule::get_pointer	include/pybind11/pytypes.h	/^    T *get_pointer() const {$/;"	f	class:capsule	typeref:typename:T *	access:public	signature:() const
capsule::name	include/pybind11/pytypes.h	/^    const char *name() const {$/;"	f	class:capsule	typeref:typename:const char *	access:public	signature:() const
capsule::operator T*	include/pybind11/pytypes.h	/^    operator T *() const { \/\/ NOLINT(google-explicit-constructor)$/;"	f	class:capsule	access:public	signature:() const
capsule::set_name	include/pybind11/pytypes.h	/^    void set_name(const char *new_name) {$/;"	f	class:capsule	typeref:typename:void	access:public	signature:(const char * new_name)
capsule::set_pointer	include/pybind11/pytypes.h	/^    void set_pointer(const void *value) {$/;"	f	class:capsule	typeref:typename:void	access:public	signature:(const void * value)
capture	include/pybind11/functional.h	/^                        struct capture {$/;"	s	function:type_caster::load
capture	include/pybind11/pybind11.h	/^        struct capture {$/;"	s	function:class_::def_buffer
capture	include/pybind11/pybind11.h	/^        struct capture {$/;"	s	function:cpp_function::initialize
capture	tests/conftest.py	/^def capture(capsys):$/;"	f	access:public	signature:(capsys)
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_signed<U>::value && (sizeof (U)<=sizeof (long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_signed<U>::value && (sizeof (U)> sizeof (long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_unsigned<U>::value && (sizeof (U)<=sizeof (unsigned long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_unsigned<U>::value && (sizeof (U)> sizeof (unsigned long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<std::is_floating_point<U>::value,handle>::type	access:public	signature:(U src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(const StringType &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:string_caster	typeref:typename:handle	access:public	signature:(const StringType & src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    cast(const std::reference_wrapper<type> &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::reference_wrapper<type> & src,return_value_policy policy,handle parent)
cast	include/pybind11/cast.h	/^    static handle cast(CharT src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(CharT src,return_value_policy policy,handle parent)
cast	include/pybind11/cast.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/cast.h	/^    static handle cast(T *src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:public	signature:(T * src,return_value_policy policy,handle parent)
cast	include/pybind11/cast.h	/^    static handle cast(T, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:void_caster	typeref:typename:handle	access:public	signature:(T,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    static handle cast(bool src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(bool src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    static handle cast(const CharT *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const CharT * src,return_value_policy policy,handle parent)
cast	include/pybind11/cast.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle	access:public	signature:(const handle & src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    static handle cast(const holder_type &src, return_value_policy, handle) {$/;"	f	struct:copyable_holder_caster	typeref:typename:handle	access:public	signature:(const holder_type & src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    static handle cast(const void *ptr, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const void * ptr,return_value_policy,handle)
cast	include/pybind11/cast.h	/^    static handle cast(holder_type &&src, return_value_policy, handle) {$/;"	f	struct:move_only_holder_caster	typeref:typename:handle	access:public	signature:(holder_type && src,return_value_policy,handle)
cast	include/pybind11/cast.h	/^T cast(Handle &&handle) {$/;"	f	typeref:typename:T	signature:(Handle && handle)
cast	include/pybind11/cast.h	/^T cast(Object &&obj) {$/;"	f	typeref:typename:T	signature:(Object && obj)
cast	include/pybind11/cast.h	/^T cast(const handle &handle) {$/;"	f	typeref:typename:T	signature:(const handle & handle)
cast	include/pybind11/cast.h	/^T handle::cast() const {$/;"	f	class:handle	typeref:typename:T	signature:() const
cast	include/pybind11/cast.h	/^T object::cast() && {$/;"	f	class:object	typeref:typename:T	signature:()
cast	include/pybind11/cast.h	/^T object::cast() const & {$/;"	f	class:object	typeref:typename:T	signature:() const
cast	include/pybind11/cast.h	/^cast(object &&object) {$/;"	f	typeref:typename:detail::enable_if_t<!detail::is_pyobject<T>::value && detail::move_always<T>::value,T>	signature:(object && object)
cast	include/pybind11/cast.h	/^cast(object &&object) {$/;"	f	typeref:typename:detail::enable_if_t<!detail::is_pyobject<T>::value && detail::move_if_unreferenced<T>::value,T>	signature:(object && object)
cast	include/pybind11/cast.h	/^cast(object &&object) {$/;"	f	typeref:typename:detail::enable_if_t<!detail::is_pyobject<T>::value && detail::move_never<T>::value,T>	signature:(object && object)
cast	include/pybind11/cast.h	/^detail::enable_if_t<detail::is_pyobject<T>::value, T> cast(object &&object) {$/;"	f	typeref:typename:detail::enable_if_t<detail::is_pyobject<T>::value,T>	signature:(object && object)
cast	include/pybind11/cast.h	/^inline void handle::cast() const {$/;"	f	class:handle	typeref:typename:void	signature:() const
cast	include/pybind11/cast.h	/^inline void object::cast() && {$/;"	f	class:object	typeref:typename:void	signature:()
cast	include/pybind11/cast.h	/^inline void object::cast() const & {$/;"	f	class:object	typeref:typename:void	signature:() const
cast	include/pybind11/cast.h	/^object cast(T &&value,$/;"	f	typeref:typename:object	signature:(T && value,return_value_policy policy=return_value_policy::automatic_reference,handle parent=handle ())
cast	include/pybind11/chrono.h	/^    static handle cast(const std::chrono::time_point<std::chrono::system_clock, Duration> &src,$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::chrono::time_point<std::chrono::system_clock,Duration> & src,return_value_policy,handle)
cast	include/pybind11/chrono.h	/^    static handle cast(const type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:duration_caster	typeref:typename:handle	access:public	signature:(const type & src,return_value_policy,handle)
cast	include/pybind11/complex.h	/^    cast(const std::complex<T> &src, return_value_policy \/* policy *\/, handle \/* parent *\/) /;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::complex<T> & src,return_value_policy,handle)
cast	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static handle cast(const void *_src,$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE handle	access:public	signature:(const void * _src,return_value_policy policy,handle parent,const detail::type_info * tinfo,void * (* copy_constructor)(const void *),void * (* move_constructor)(const void *),const void * existing_holder=nullptr)
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype & src,return_value_policy policy,handle parent)
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype *src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype * src,return_value_policy policy,handle parent)
cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(itype &&src, return_value_policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(itype && src,return_value_policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type && src,return_value_policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type * src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:eigen_map_caster	typeref:typename:handle	access:public	signature:(const MapType & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type && src,return_value_policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy,handle)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type * src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType && src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType * src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type && src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type * src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType && src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType * src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type && src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy policy,handle parent)
cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type * src,return_value_policy policy,handle parent)
cast	include/pybind11/functional.h	/^    static handle cast(Func &&f_, return_value_policy policy, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Func && f_,return_value_policy policy,handle)
cast	include/pybind11/numpy.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle	access:public	signature:(const handle & src,return_value_policy,handle)
cast	include/pybind11/pytypes.h	/^    T cast() &&;$/;"	p	class:object	typeref:typename:T	access:public	signature:()
cast	include/pybind11/pytypes.h	/^    T cast() const {$/;"	f	class:accessor	typeref:typename:T	access:public	signature:() const
cast	include/pybind11/pytypes.h	/^    T cast() const;$/;"	p	class:handle	typeref:typename:T	access:public	signature:() const
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:array_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:list_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:map_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:optional_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:set_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl.h	/^    static handle cast(Variant &&src, return_value_policy policy, handle parent) {$/;"	f	struct:variant_caster	typeref:typename:handle	access:public	signature:(Variant && src,return_value_policy policy,handle parent)
cast	include/pybind11/stl/filesystem.h	/^    static handle cast(const T &path, return_value_policy, handle) {$/;"	f	struct:path_caster	typeref:typename:handle	access:public	signature:(const T & path,return_value_policy,handle)
cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(PyObject *src, return_value_policy policy, handle \/*parent*\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(PyObject * src,return_value_policy policy,handle)
cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(T &&, return_value_policy, handle \/*parent*\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(T &&,return_value_policy,handle)
cast	tests/pybind11_tests.h	/^    static handle cast(RValueCaster &&, return_value_policy, handle) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(RValueCaster &&,return_value_policy,handle)
cast	tests/pybind11_tests.h	/^    static handle cast(const RValueCaster &, return_value_policy, handle) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const RValueCaster &,return_value_policy,handle)
cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const CopyOnlyInt & m,return_value_policy r,handle p)
cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const CopyOnlyInt * src,return_value_policy policy,handle parent)
cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const MoveOnlyInt & m,return_value_policy r,handle p)
cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOrCopyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const MoveOrCopyInt & m,return_value_policy r,handle p)
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgAlwaysConverts &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgAlwaysConverts &,return_value_policy,handle)
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector1 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgInspector1 & src,return_value_policy,handle)
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const ArgInspector2 &src, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const ArgInspector2 & src,return_value_policy,handle)
cast	tests/test_custom_type_casters.cpp	/^    static handle cast(const DestructionTester &, return_value_policy, handle) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:handle	file:	access:public	signature:(const DestructionTester &,return_value_policy,handle)
cast	tests/test_custom_type_casters.cpp	/^    static py_::handle cast(const MyType &, py_::return_value_policy, py_::handle) {$/;"	f	struct:other_lib::my_caster	typeref:typename:py_::handle	file:	access:public	signature:(const MyType &,py_::return_value_policy,py_::handle)
cast_holder	include/pybind11/detail/type_caster_base.h	/^    static handle cast_holder(const itype *src, const void *holder) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype * src,const void * holder)
cast_impl	include/pybind11/cast.h	/^    cast_impl(T &&src, return_value_policy policy, handle parent, index_sequence<Is...>) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:protected	signature:(T && src,return_value_policy policy,handle parent,index_sequence<Is...>)
cast_impl	include/pybind11/eigen/matrix.h	/^    static handle cast_impl(CType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:private	signature:(CType * src,return_value_policy policy,handle parent)
cast_impl	include/pybind11/eigen/tensor.h	/^    static handle cast_impl(C *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(C * src,return_value_policy policy,handle parent)
cast_in	include/pybind11/pybind11.h	/^        using cast_in = argument_loader<Args...>;$/;"	t	function:cpp_function::initialize	typeref:typename:argument_loader<Args...>
cast_is_temporary_value_reference	include/pybind11/cast.h	/^using cast_is_temporary_value_reference$/;"	t
cast_op	include/pybind11/cast.h	/^cast_op(make_caster<T> &&caster) {$/;"	f	typeref:typename:make_caster<T>::cast_op_type	signature:(make_caster<T> && caster)
cast_op	include/pybind11/cast.h	/^typename make_caster<T>::template cast_op_type<T> cast_op(make_caster<T> &caster) {$/;"	f	typeref:typename:make_caster<T>::cast_op_type	signature:(make_caster<T> & caster)
cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = pybind11::detail::cast_op_type<_T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<_T>	access:public
cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = std::reference_wrapper<type>;$/;"	t	class:type_caster	typeref:typename:std::reference_wrapper<type>	access:public
cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = type;$/;"	t	class:tuple_caster	typeref:typename:type	access:public
cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = void *&;$/;"	t	class:type_caster	typeref:typename:void * &	access:public
cast_op_type	include/pybind11/detail/init.h	/^    using cast_op_type = value_and_holder &;$/;"	t	class:type_caster	typeref:typename:value_and_holder &	access:public
cast_op_type	include/pybind11/detail/type_caster_base.h	/^    using cast_op_type = detail::cast_op_type<T>;$/;"	t	class:type_caster_base	typeref:typename:detail::cast_op_type<T>	access:public
cast_op_type	include/pybind11/detail/type_caster_base.h	/^using cast_op_type = conditional_t<std::is_pointer<remove_reference_t<T>>::value,$/;"	t
cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = MapType;$/;"	t	struct:eigen_map_caster	typeref:typename:MapType	access:public
cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = Type;$/;"	t	struct:type_caster	typeref:typename:Type	access:public
cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = movable_cast_op_type<T>;$/;"	t	struct:type_caster	typeref:typename:movable_cast_op_type<T>	access:public
cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = pybind11::detail::cast_op_type<_T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<_T>	access:public
cast_op_type	include/pybind11/eigen/tensor.h	/^    using cast_op_type = ::pybind11::detail::movable_cast_op_type<T_>;$/;"	t	struct:type_caster	typeref:typename:::pybind11::detail::movable_cast_op_type<T_>	access:public
cast_op_type	include/pybind11/type_caster_pyobject_ptr.h	/^    using cast_op_type = PyObject *;$/;"	t	class:type_caster	typeref:typename:PyObject *	access:public
cast_op_type	tests/test_builtin_casters.cpp	/^    using cast_op_type =$/;"	t	class:type_caster	file:	access:public
cast_op_type	tests/test_copy_move.cpp	/^    using cast_op_type = pybind11::detail::cast_op_type<T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<T>	file:	access:public
cast_out	include/pybind11/pybind11.h	/^        using cast_out$/;"	t	function:cpp_function::initialize	typeref:typename:make_caster<conditional_t<std::is_void<Return>::value,void_type,Return>>
cast_ref	include/pybind11/cast.h	/^enable_if_t<!cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&,$/;"	f	typeref:typename:enable_if_t<!cast_is_temporary_value_reference<T>::value,T>	signature:(object &&,override_unused &)
cast_ref	include/pybind11/cast.h	/^enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_ref(object &&o,$/;"	f	typeref:typename:enable_if_t<cast_is_temporary_value_reference<T>::value,T>	signature:(object && o,make_caster<T> & caster)
cast_safe	include/pybind11/cast.h	/^cast_safe(object &&o) {$/;"	f	typeref:typename:enable_if_t<detail::none_of<cast_is_temporary_value_reference<T>,std::is_void<T>>::value,T>	signature:(object && o)
cast_safe	include/pybind11/cast.h	/^enable_if_t<cast_is_temporary_value_reference<T>::value, T> cast_safe(object &&) {$/;"	f	typeref:typename:enable_if_t<cast_is_temporary_value_reference<T>::value,T>	signature:(object &&)
cast_safe	include/pybind11/cast.h	/^enable_if_t<std::is_void<T>::value, void> cast_safe(object &&) {}$/;"	f	typeref:typename:enable_if_t<std::is_void<T>::value,void>	signature:(object &&)
caster_t	include/pybind11/cast.h	/^    using caster_t = make_caster<type>;$/;"	t	class:type_caster	typeref:typename:make_caster<type>	access:private
casting_back_and_forth	docs/advanced/pycpp/object.rst	/^.. _casting_back_and_forth:$/;"	T	chapter:Instantiating compound Python types from C++
cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(obj):$/;"	f	function:test_call_callback_with_pyobject_ptr_arg	file:	access:private	signature:(obj)
cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(value):$/;"	f	function:test_call_callback_with_object_return	file:	access:private	signature:(value)
cdbl	tests/test_numpy_dtypes.cpp	/^    std::complex<double> cdbl;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<double>	file:	access:public
cflt	tests/test_numpy_dtypes.cpp	/^    std::complex<float> cflt;$/;"	m	struct:ComplexStruct	typeref:typename:std::complex<float>	file:	access:public
change	tools/libsize.py	/^        change = libsize - oldsize$/;"	v	access:public
changelog	docs/changelog.rst	/^.. _changelog:$/;"	T
changelog	tools/make_changelog.py	/^    changelog = ENTRY.findall(issue.body or "")$/;"	v	access:public
changes	docs/Makefile	/^changes:$/;"	t
char_	include/pybind11/numpy.h	/^    char char_() const {$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
check	include/pybind11/detail/common.h	/^    static std::false_type check(...);$/;"	p	struct:is_template_base_of_impl	typeref:typename:std::false_type	access:public	signature:(...)
check	include/pybind11/detail/common.h	/^    static std::true_type check(Base<Us...> *);$/;"	p	struct:is_template_base_of_impl	typeref:typename:std::true_type	access:public	signature:(Base<Us...> *)
check	include/pybind11/pytypes.h	/^    bool check() const { return m_ptr != nullptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use handle::operator bool() instead")bool	access:public	signature:() const
check	tests/CMakeLists.txt	/^add_custom_target(check DEPENDS pytest)$/;"	t
check	tests/test_pytypes.cpp	/^bool check(PyObject *o) { return PyFloat_Check(o) != 0; }$/;"	f	namespace:external::detail	typeref:typename:bool	signature:(PyObject * o)
check_	include/pybind11/numpy.h	/^    static bool check_(handle h) {$/;"	f	class:array_t	typeref:typename:bool	access:public	signature:(handle h)
check_dimensions	include/pybind11/numpy.h	/^    void check_dimensions(Ix... index) const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:(Ix...index) const
check_dimensions_impl	include/pybind11/numpy.h	/^    void check_dimensions_impl(ssize_t axis, const ssize_t *shape, ssize_t i, Ix... index) const/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t axis,const ssize_t * shape,ssize_t i,Ix...index) const
check_dimensions_impl	include/pybind11/numpy.h	/^    void check_dimensions_impl(ssize_t, const ssize_t *) const {}$/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t,const ssize_t *) const
check_flags	include/pybind11/numpy.h	/^inline bool check_flags(const void *ptr, int flag) {$/;"	f	typeref:typename:bool	signature:(const void * ptr,int flag)
check_holder_compat	include/pybind11/cast.h	/^    void check_holder_compat() {$/;"	f	struct:copyable_holder_caster	typeref:typename:void	access:protected	signature:()
check_holder_compat	include/pybind11/detail/type_caster_base.h	/^    void check_holder_compat() {}$/;"	f	class:type_caster_generic	typeref:typename:void	access:public	signature:()
check_installed_embed	tests/test_cmake_build/installed_embed/CMakeLists.txt	/^  check_installed_embed$/;"	t
check_installed_function	tests/test_cmake_build/installed_function/CMakeLists.txt	/^  check_installed_function$/;"	t
check_installed_target	tests/test_cmake_build/installed_target/CMakeLists.txt	/^  check_installed_target$/;"	t
check_kw_only_arg	include/pybind11/attr.h	/^inline void check_kw_only_arg(const arg &a, function_record *r) {$/;"	f	typeref:typename:void	signature:(const arg & a,function_record * r)
check_self	tests/test_methods_and_attributes.py	/^    def check_self(self):$/;"	f	function:test_static_cls	file:	access:private	signature:(self)
check_subdirectory_embed	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^  check_subdirectory_embed$/;"	t
check_subdirectory_function	tests/test_cmake_build/subdirectory_function/CMakeLists.txt	/^  check_subdirectory_function$/;"	t
check_subdirectory_target	tests/test_cmake_build/subdirectory_target/CMakeLists.txt	/^  check_subdirectory_target$/;"	t
check_tensor	tests/test_eigen_tensor.inl	/^bool check_tensor(M &x) {$/;"	f	typeref:typename:bool	signature:(M & x)
check_writeable	include/pybind11/numpy.h	/^    void check_writeable() const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:() const
cibuildwheel	docs/compiling.rst	/^.. _cibuildwheel: https:\/\/cibuildwheel.readthedocs.io$/;"	T	section:PEP 518 requirements (Pip 10+ required)
class_	include/pybind11/attr.h	/^    handle class_;$/;"	m	struct:is_method	typeref:typename:handle	access:public
class_	include/pybind11/pybind11.h	/^class class_ : public detail::generic_type {$/;"	c	inherits:detail::generic_type
class_::PYBIND11_OBJECT	include/pybind11/pybind11.h	/^    PYBIND11_OBJECT(class_, generic_type, PyType_Check)$/;"	f	class:class_	access:public	signature:(class_,generic_type,PyType_Check)
class_::add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &) {}$/;"	f	class:class_	typeref:typename:void	access:public	signature:(detail::type_record &)
class_::add_base	include/pybind11/pybind11.h	/^    static void add_base(detail::type_record &rec) {$/;"	f	class:class_	typeref:typename:void	access:public	signature:(detail::type_record & rec)
class_::dealloc	include/pybind11/pybind11.h	/^    static void dealloc(detail::value_and_holder &v_h) {$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::value_and_holder & v_h)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(const T &op, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const T & op,const Extra &...extra)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::alias_constructor<Args...> &init, const Extra &...extra)/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const detail::initimpl::alias_constructor<Args...> & init,const Extra &...extra)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::constructor<Args...> &init, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const detail::initimpl::constructor<Args...> & init,const Extra &...extra)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::factory<Args...> &&init, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(detail::initimpl::factory<Args...> && init,const Extra &...extra)
class_::def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::pickle_factory<Args...> &&pf, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(detail::initimpl::pickle_factory<Args...> && pf,const Extra &...extra)
class_::def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Func &&func) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Func && func)
class_::def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...) const) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Return (Class::* func)(Args...)const)
class_::def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...)) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Return (Class::* func)(Args...))
class_::def_buffer::capture::func	include/pybind11/pybind11.h	/^            Func func;$/;"	m	struct:class_::def_buffer::capture	typeref:typename:Func	access:public
class_::def_cast	include/pybind11/pybind11.h	/^    class_ &def_cast(const T &op, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const T & op,const Extra &...extra)
class_::def_property	include/pybind11/pybind11.h	/^    class_ &def_property(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const cpp_function & fset,const Extra &...extra)
class_::def_property	include/pybind11/pybind11.h	/^    class_ &def_property(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const cpp_function & fset,const Extra &...extra)
class_::def_property	include/pybind11/pybind11.h	/^    def_property(const char *name, const Getter &fget, const Setter &fset, const Extra &...extra/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Setter & fset,const Extra &...extra)
class_::def_property_readonly	include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Extra &...extra)
class_::def_property_readonly	include/pybind11/pybind11.h	/^    def_property_readonly(const char *name, const cpp_function &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const Extra &...extra)
class_::def_property_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const Extra &...extra)
class_::def_property_readonly_static	include/pybind11/pybind11.h	/^    def_property_readonly_static(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Extra &...extra)
class_::def_property_static	include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const cpp_function & fset,const Extra &...extra)
class_::def_property_static	include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const cpp_function & fset,const Extra &...extra)
class_::def_readonly	include/pybind11/pybind11.h	/^    class_ &def_readonly(const char *name, const D C::*pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const D C::* pm,const Extra &...extra)
class_::def_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_readonly_static(const char *name, const D *pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const D * pm,const Extra &...extra)
class_::def_readwrite	include/pybind11/pybind11.h	/^    class_ &def_readwrite(const char *name, D C::*pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,D C::* pm,const Extra &...extra)
class_::def_readwrite_static	include/pybind11/pybind11.h	/^    class_ &def_readwrite_static(const char *name, D *pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,D * pm,const Extra &...extra)
class_::def_static	include/pybind11/pybind11.h	/^    class_ &def_static(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
class_::get_function_record	include/pybind11/pybind11.h	/^    static detail::function_record *get_function_record(handle h) {$/;"	f	class:class_	typeref:typename:detail::function_record *	access:private	signature:(handle h)
class_::has_alias	include/pybind11/pybind11.h	/^    constexpr static bool has_alias = !std::is_void<type_alias>::value;$/;"	m	class:class_	typeref:typename:bool	access:public
class_::holder_type	include/pybind11/pybind11.h	/^    using holder_type = detail::exactly_one_t<is_holder, std::unique_ptr<type>, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_holder,std::unique_ptr<type>,options...>	access:public
class_::init_holder	include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,detail::value_and_holder & v_h,const holder_type * holder_ptr,const void *)
class_::init_holder	include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,detail::value_and_holder & v_h,const holder_type *,const std::enable_shared_from_this<T> *)
class_::init_holder_from_existing	include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(const detail::value_and_holder & v_h,const holder_type * holder_ptr,std::false_type)
class_::init_holder_from_existing	include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(const detail::value_and_holder & v_h,const holder_type * holder_ptr,std::true_type)
class_::init_instance	include/pybind11/pybind11.h	/^    static void init_instance(detail::instance *inst, const void *holder_ptr) {$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,const void * holder_ptr)
class_::is_base	include/pybind11/pybind11.h	/^    using is_base = detail::is_strict_base_of<T, type_>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<T,type_>	access:private
class_::is_holder	include/pybind11/pybind11.h	/^    using is_holder = detail::is_holder_type<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_holder_type<type_,T>	access:private
class_::is_subtype	include/pybind11/pybind11.h	/^    using is_subtype = detail::is_strict_base_of<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<type_,T>	access:private
class_::is_valid_class_option	include/pybind11/pybind11.h	/^    struct is_valid_class_option : detail::any_of<is_holder<T>, is_subtype<T>, is_base<T>> {};$/;"	s	class:class_	inherits:detail::any_of<is_holder<T>,is_subtype<T>,is_base<T>>	access:private
class_::type	include/pybind11/pybind11.h	/^    using type = type_;$/;"	t	class:class_	typeref:typename:type_	access:public
class_::type_alias	include/pybind11/pybind11.h	/^    using type_alias = detail::exactly_one_t<is_subtype, void, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_subtype,void,options...>	access:public
class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<CFunc> class_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<CFunc>	access:public
class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<Func> class_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<Func>	access:public
classes	docs/classes.rst	/^.. _classes:$/;"	T
classes_with_non_public_destructors	docs/advanced/classes.rst	/^.. _classes_with_non_public_destructors:$/;"	T	section:Brace initialization
clean	docs/Makefile	/^clean:$/;"	t
clean_type_id	include/pybind11/detail/typeid.h	/^PYBIND11_NOINLINE void clean_type_id(std::string &name) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(std::string & name)
clean_type_id	include/pybind11/detail/typeid.h	/^inline std::string clean_type_id(const char *typeid_name) {$/;"	f	typeref:typename:std::string	signature:(const char * typeid_name)
clean_up	docs/conf.py	/^def clean_up(app, exception):  # noqa: ARG001$/;"	f	access:public	signature:(app, exception)
cleanup	tests/test_eigen_tensor.py	/^def cleanup():$/;"	f	access:public	signature:()
cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anond975f9d30111::MyObject4	typeref:typename:void	file:	access:public	signature:()
cleanupAllInstances	tests/test_smart_ptr.cpp	/^    static void cleanupAllInstances() {$/;"	f	class:__anond975f9d30111::MyObject4a	typeref:typename:void	file:	access:public	signature:()
clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PyDict_Clear(ptr()); }$/;"	f	class:dict	typeref:typename:void	access:public	signature:()
clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PySet_Clear(m_ptr); }$/;"	f	class:set	typeref:typename:void	access:public	signature:()
clear	include/pybind11/pytypes.h	/^    void clear() {}$/;"	f	class:error_already_set	typeref:typename:PYBIND11_DEPRECATED ("Use of error_already_set.clear() is deprecated")void	access:public	signature:()
clear_instance	include/pybind11/detail/class.h	/^inline void clear_instance(PyObject *self) {$/;"	f	typeref:typename:void	signature:(PyObject * self)
clear_patients	include/pybind11/detail/class.h	/^inline void clear_patients(PyObject *self) {$/;"	f	typeref:typename:void	signature:(PyObject * self)
clip1	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip1">$/;"	d
clip1	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip1">$/;"	i
clip1	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip1">$/;"	d
clip1	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip1">$/;"	i
clip2	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip2">$/;"	d
clip2	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip2">$/;"	i
clip2	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip2">$/;"	d
clip2	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip2">$/;"	i
clip3	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip3">$/;"	d
clip3	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip3">$/;"	i
clip3	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip3">$/;"	d
clip3	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip3">$/;"	i
clip4	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip4">$/;"	d
clip4	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip4">$/;"	i
clip4	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip4">$/;"	d
clip4	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip4">$/;"	i
clip5	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip5">$/;"	d
clip5	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip5">$/;"	i
clip5	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip5">$/;"	d
clip5	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip5">$/;"	i
clip6	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip6">$/;"	d
clip6	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip6">$/;"	i
clip6	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip6">$/;"	d
clip6	docs/pybind11_vs_boost_python2.svg	/^<clipPath id="clip6">$/;"	i
clip7	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip7">$/;"	d
clip7	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip7">$/;"	i
clip8	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip8">$/;"	d
clip8	docs/pybind11_vs_boost_python1.svg	/^<clipPath id="clip8">$/;"	i
close	tests/test_embed/test_interpreter.cpp	/^    test_module.close();$/;"	p	typeref:typename:test_module.	file:	signature:()
cm	tests/test_exceptions.py	/^import pybind11_cross_module_tests as cm$/;"	I	access:public	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_cross_module_calls	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_internal_locals_differ	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_load_external	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_local_bindings	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_mixed_local_global	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_nonlocal_failure	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_bind_global	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_bind_local	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_caster_vs_stl_bind	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_stl.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_missing_header_message	file:	access:private	nameref:module:pybind11_cross_module_tests
cm	tests/test_stl_binders.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_vector_bool	file:	access:private	nameref:module:pybind11_cross_module_tests
cmake	docs/compiling.rst	/^.. _cmake:$/;"	T	chapter:Building with cppimport
cmake_example	docs/basics.rst	/^.. _cmake_example: https:\/\/github.com\/pybind\/cmake_example$/;"	T	chapter:Creating bindings for a simple function
cmake_example	docs/compiling.rst	/^.. [cmake_example] https:\/\/github.com\/pybind\/cmake_example$/;"	C	chapter:Building with CMake
cmake_files	tests/extra_python_package/test_files.py	/^cmake_files = {$/;"	v	access:public
cmake_files	tools/setup_global.py.in	/^cmake_files = glob.glob("pybind11\/share\/cmake\/pybind11\/*.cmake")$/;"	v	access:public
cmd	setup.py	/^        cmd = ["cmake", "-S", ".", "-B", tmpdir] + [$/;"	v	access:public
cmdclass	tools/setup_global.py.in	/^cmdclass = {"install_headers": InstallHeadersNested}$/;"	v	access:public
cmdclass	tools/setup_main.py.in	/^cmdclass = {}$/;"	v	access:public
code	.github/matchers/pylint.json	/^          "code": 4,$/;"	n	object:problemMatcher.0.pattern.0
code	.github/matchers/pylint.json	/^          "code": 4,$/;"	n	object:problemMatcher.1.pattern.0
code	docs/conf.py	/^    code = compile(f.read(), "..\/pybind11\/_version.py", "exec")$/;"	v	access:public
code	setup.py	/^    code = compile(txt, setup_py, "exec")$/;"	v	access:public
code	setup.py	/^code = compile(VERSION_FILE.read_text(encoding="utf-8"), "pybind11\/_version.py", "exec")$/;"	v	access:public
collect_arguments	include/pybind11/cast.h	/^simple_collector<policy> collect_arguments(Args &&...args) {$/;"	f	typeref:typename:simple_collector<policy>	signature:(Args &&...args)
collect_arguments	include/pybind11/cast.h	/^unpacking_collector<policy> collect_arguments(Args &&...args) {$/;"	f	typeref:typename:unpacking_collector<policy>	signature:(Args &&...args)
collect_ignore	tests/conftest.py	/^collect_ignore = []$/;"	v	access:public
cols	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex	access:public
cols	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
cols	tests/test_buffers.cpp	/^        py::ssize_t cols() const { return m_cols; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:public	signature:() const
column	.github/matchers/pylint.json	/^          "column": 3,$/;"	n	object:problemMatcher.0.pattern.0
column	.github/matchers/pylint.json	/^          "column": 3,$/;"	n	object:problemMatcher.1.pattern.0
common_iter	include/pybind11/numpy.h	/^    using common_iter = common_iterator;$/;"	t	class:multi_array_iterator	typeref:typename:common_iterator	access:private
common_iterator	include/pybind11/numpy.h	/^    common_iterator() : m_strides() {}$/;"	f	class:common_iterator	access:public	signature:()
common_iterator	include/pybind11/numpy.h	/^    common_iterator(void *ptr, const container_type &strides, const container_type &shape)$/;"	f	class:common_iterator	access:public	signature:(void * ptr,const container_type & strides,const container_type & shape)
common_iterator	include/pybind11/numpy.h	/^class common_iterator {$/;"	c
common_iterator::common_iterator	include/pybind11/numpy.h	/^    common_iterator() : m_strides() {}$/;"	f	class:common_iterator	access:public	signature:()
common_iterator::common_iterator	include/pybind11/numpy.h	/^    common_iterator(void *ptr, const container_type &strides, const container_type &shape)$/;"	f	class:common_iterator	access:public	signature:(void * ptr,const container_type & strides,const container_type & shape)
common_iterator::container_type	include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:common_iterator	typeref:typename:std::vector<ssize_t>	access:public
common_iterator::data	include/pybind11/numpy.h	/^    void *data() const { return p_ptr; }$/;"	f	class:common_iterator	typeref:typename:void *	access:public	signature:() const
common_iterator::increment	include/pybind11/numpy.h	/^    void increment(size_type dim) { p_ptr += m_strides[dim]; }$/;"	f	class:common_iterator	typeref:typename:void	access:public	signature:(size_type dim)
common_iterator::m_strides	include/pybind11/numpy.h	/^    container_type m_strides;$/;"	m	class:common_iterator	typeref:typename:container_type	access:private
common_iterator::p_ptr	include/pybind11/numpy.h	/^    char *p_ptr{nullptr};$/;"	m	class:common_iterator	typeref:typename:char *	access:private
common_iterator::size_type	include/pybind11/numpy.h	/^    using size_type = container_type::size_type;$/;"	t	class:common_iterator	typeref:typename:container_type::size_type	access:public
common_iterator::value_type	include/pybind11/numpy.h	/^    using value_type = container_type::value_type;$/;"	t	class:common_iterator	typeref:typename:container_type::value_type	access:public
compare	include/pybind11/buffer_info.h	/^    static bool compare(const buffer_info &b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool	access:public	signature:(const buffer_info & b)
compare	include/pybind11/numpy.h	/^    static bool compare(const buffer_info &b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool	access:public	signature:(const buffer_info & b)
compare_buffer_info	include/pybind11/buffer_info.h	/^struct compare_buffer_info {$/;"	s
compare_buffer_info	include/pybind11/buffer_info.h	/^struct compare_buffer_info<T, detail::enable_if_t<std::is_integral<T>::value>> {$/;"	s
compare_buffer_info	include/pybind11/numpy.h	/^struct compare_buffer_info<T, detail::enable_if_t<detail::is_pod_struct<T>::value>> {$/;"	s
compare_buffer_info::compare	include/pybind11/buffer_info.h	/^    static bool compare(const buffer_info &b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool	access:public	signature:(const buffer_info & b)
compare_buffer_info::compare	include/pybind11/numpy.h	/^    static bool compare(const buffer_info &b) {$/;"	f	struct:compare_buffer_info	typeref:typename:bool	access:public	signature:(const buffer_info & b)
compile_function	pybind11/setup_helpers.py	/^        def compile_function($/;"	f	member:ParallelCompile.function	typeref:typename:Any	file:	access:private	signature:( compiler: distutils.ccompiler.CCompiler, sources: List[str], output_dir: Optional[str] = None, macros: Optional[Union[Tuple[str], Tuple[str, Optional[str]]]] = None, include_dirs: Optional[List[str]] = None, debug: bool = False, extra_preargs: Optional[List[str]] = None, extra_postargs: Optional[List[str]] = None, depends: Optional[List[str]] = None, )
compiling	docs/compiling.rst	/^.. _compiling:$/;"	T
compute	include/pybind11/pytypes.h	/^    bool compute($/;"	f	class:slice	typeref:typename:bool	access:public	signature:(ssize_t length,ssize_t * start,ssize_t * stop,ssize_t * step,ssize_t * slicelength) const
compute	include/pybind11/pytypes.h	/^    compute(size_t length, size_t *start, size_t *stop, size_t *step, size_t *slicelength) const/;"	f	class:slice	typeref:typename:bool	access:public	signature:(size_t length,size_t * start,size_t * stop,size_t * step,size_t * slicelength) const
compute_array_flag_from_tensor	include/pybind11/eigen/tensor.h	/^constexpr int compute_array_flag_from_tensor() {$/;"	f	typeref:typename:int	signature:()
concat	include/pybind11/detail/descr.h	/^constexpr auto concat(const descr<N, Ts...> &d, const Args &...args) {$/;"	f	typeref:typename:auto	signature:(const descr<N,Ts...> & d,const Args &...args)
concat	include/pybind11/detail/descr.h	/^constexpr auto concat(const descr<N, Ts...> &d, const Args &...args)$/;"	f	typeref:typename:decltype(std::declval<descr<N+2,Ts...>> ()+concat (args...))	signature:(const descr<N,Ts...> & d,const Args &...args)
concat	include/pybind11/detail/descr.h	/^constexpr descr<0> concat() { return {}; }$/;"	f	typeref:typename:descr<0>	signature:()
concat	include/pybind11/detail/descr.h	/^constexpr descr<N, Ts...> concat(const descr<N, Ts...> &descr) {$/;"	f	typeref:typename:descr<N,Ts...>	signature:(const descr<N,Ts...> & descr)
conditional_t	include/pybind11/detail/common.h	/^using conditional_t = typename std::conditional<B, T, F>::type;$/;"	t	typeref:typename:std::conditional<B,T,F>::type
config	tests/test_embed/test_interpreter.cpp	/^        PyConfig config;$/;"	v	typeref:typename:PyConfig
config	tests/test_embed/test_interpreter.cpp	/^    PyConfig config;$/;"	v	typeref:typename:PyConfig
conformable	include/pybind11/eigen/matrix.h	/^    bool conformable = false;$/;"	m	struct:EigenConformable	typeref:typename:bool	access:public
conformable	include/pybind11/eigen/matrix.h	/^    static EigenConformable<row_major> conformable(const array &a) {$/;"	f	struct:EigenProps	typeref:typename:EigenConformable<row_major>	access:public	signature:(const array & a)
constRefQualified	tests/test_methods_and_attributes.cpp	/^    int constRefQualified(int other) const & { return value + other; }$/;"	f	struct:RefQualified	typeref:typename:int	file:	access:public	signature:(int other) const
const_name	include/pybind11/detail/descr.h	/^auto constexpr const_name() -> remove_cv_t<decltype(int_to_str<Size \/ 10, Size % 10>::digits)> /;"	f	typeref:typename:auto 	signature:()
const_name	include/pybind11/detail/descr.h	/^constexpr descr<0> const_name(char const (&)[1]) { return {}; }$/;"	f	typeref:typename:descr<0>	signature:(char const (&)[1])
const_name	include/pybind11/detail/descr.h	/^constexpr descr<1, Type> const_name() {$/;"	f	typeref:typename:descr<1,Type>	signature:()
const_name	include/pybind11/detail/descr.h	/^constexpr descr<N - 1> const_name(char const (&text)[N]) {$/;"	f	typeref:typename:descr<N-1>	signature:(char const (& text)[N])
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, T2> const_name(const T1 &, const T2 &d) {$/;"	f	typeref:typename:enable_if_t<!B,T2>	signature:(const T1 &,const T2 & d)
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<!B, descr<N2 - 1>> const_name(char const (&)[N1], char const (&text2)[N2])/;"	f	typeref:typename:enable_if_t<!B,descr<N2-1>>	signature:(char const (&)[N1],char const (& text2)[N2])
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, T1> const_name(const T1 &d, const T2 &) {$/;"	f	typeref:typename:enable_if_t<B,T1>	signature:(const T1 & d,const T2 &)
const_name	include/pybind11/detail/descr.h	/^constexpr enable_if_t<B, descr<N1 - 1>> const_name(char const (&text1)[N1], char const (&)[N2]) /;"	f	typeref:typename:enable_if_t<B,descr<N1-1>>	signature:(char const (& text1)[N1],char const (&)[N2])
constants	include/pybind11/numpy.h	/^    enum constants {$/;"	g	struct:npy_api	access:public
constexpr_last	include/pybind11/detail/common.h	/^constexpr int constexpr_last() {$/;"	f	typeref:typename:int	signature:()
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum() { return 0; }$/;"	f	typeref:typename:size_t	signature:()
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum(T n, Ts... ns) {$/;"	f	typeref:typename:size_t	signature:(T n,Ts...ns)
constexpr_sum	include/pybind11/detail/common.h	/^constexpr size_t constexpr_sum(Ts... ns) {$/;"	f	typeref:typename:size_t	signature:(Ts...ns)
construct	include/pybind11/detail/init.h	/^void construct(...) {$/;"	f	typeref:typename:void	signature:(...)
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> &&result, bool) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,Alias<Class> && result,bool)
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Alias<Class> *alias_ptr, bool) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,Alias<Class> * alias_ptr,bool)
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> &&result, bool need_alias) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,Cpp<Class> && result,bool need_alias)
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Cpp<Class> *ptr, bool need_alias) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,Cpp<Class> * ptr,bool need_alias)
construct	include/pybind11/detail/init.h	/^void construct(value_and_holder &v_h, Holder<Class> holder, bool need_alias) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,Holder<Class> holder,bool need_alias)
construct1	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1() { return new TestFactory1(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory1 *	file:	access:public	signature:()
construct1	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory1> construct1(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::unique_ptr<TestFactory1>	file:	access:public	signature:(int a)
construct1_string	tests/test_factory_constructors.cpp	/^    static TestFactory1 *construct1_string(std::string a) {$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory1 *	file:	access:public	signature:(std::string a)
construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 *construct2() { return new TestFactory2(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory2 *	file:	access:public	signature:()
construct2	tests/test_factory_constructors.cpp	/^    static TestFactory2 construct2(std::string a) { return TestFactory2(std::move(a)); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory2	file:	access:public	signature:(std::string a)
construct2	tests/test_factory_constructors.cpp	/^    static std::unique_ptr<TestFactory2> construct2(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::unique_ptr<TestFactory2>	file:	access:public	signature:(int a)
construct3	tests/test_factory_constructors.cpp	/^    static TestFactory3 *construct3() { return new TestFactory3(); }$/;"	f	class:TestFactoryHelper	typeref:typename:TestFactory3 *	file:	access:public	signature:()
construct3	tests/test_factory_constructors.cpp	/^    static std::shared_ptr<TestFactory3> construct3(int a) {$/;"	f	class:TestFactoryHelper	typeref:typename:std::shared_ptr<TestFactory3>	file:	access:public	signature:(int a)
construct_alias_from_cpp	include/pybind11/detail/init.h	/^[[noreturn]] void construct_alias_from_cpp(std::false_type \/*!is_alias_constructible*\/,$/;"	f	typeref:typename:void	signature:(std::false_type,value_and_holder &,Cpp<Class> &&)
construct_alias_from_cpp	include/pybind11/detail/init.h	/^void construct_alias_from_cpp(std::true_type \/*is_alias_constructible*\/,$/;"	f	typeref:typename:void	signature:(std::true_type,value_and_holder & v_h,Cpp<Class> && base)
construct_or_initialize	include/pybind11/detail/init.h	/^inline Class *construct_or_initialize(Args &&...args) {$/;"	f	typeref:typename:Class *	signature:(Args &&...args)
constructor	include/pybind11/detail/init.h	/^struct constructor {$/;"	s
constructor::execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:constructor	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
consume_str	tests/test_methods_and_attributes.cpp	/^    void consume_str(std::string &&) {}$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(std::string &&)
container	tests/test_embed/test_interpreter.cpp	/^    std::vector<int> container;$/;"	v	typeref:typename:std::vector<int>
container_mapped_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_mapped_type_traits {$/;"	s
container_mapped_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_mapped_type_traits<$/;"	s
container_mapped_type_traits::has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = false;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
container_mapped_type_traits::has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = true;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
container_mapped_type_traits::has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = false;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
container_mapped_type_traits::has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = true;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
container_traits	include/pybind11/stl_bind.h	/^struct container_traits {$/;"	s
container_traits::is_comparable	include/pybind11/stl_bind.h	/^    static constexpr const bool is_comparable$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
container_traits::is_element	include/pybind11/stl_bind.h	/^    static constexpr const bool is_element = !is_pair && !is_vector;$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
container_traits::is_pair	include/pybind11/stl_bind.h	/^    static constexpr const bool is_pair$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
container_traits::is_vector	include/pybind11/stl_bind.h	/^    static constexpr const bool is_vector$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
container_traits::test_comparable	include/pybind11/stl_bind.h	/^    static std::false_type test_comparable(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
container_traits::test_pair	include/pybind11/stl_bind.h	/^    static std::false_type test_pair(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
container_traits::test_pair	include/pybind11/stl_bind.h	/^    static std::true_type test_pair(typename T2::first_type *, typename T2::second_type *);$/;"	p	struct:container_traits	typeref:typename:std::true_type	access:public	signature:(typename T2::first_type *,typename T2::second_type *)
container_traits::test_value	include/pybind11/stl_bind.h	/^    static std::false_type test_value(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
container_traits::test_value	include/pybind11/stl_bind.h	/^    static std::true_type test_value(typename T2::value_type *);$/;"	p	struct:container_traits	typeref:typename:std::true_type	access:public	signature:(typename T2::value_type *)
container_type	include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:common_iterator	typeref:typename:std::vector<ssize_t>	access:public
container_type	include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:multi_array_iterator	typeref:typename:std::vector<ssize_t>	access:public
container_value_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_value_type_traits : std::false_type {$/;"	s	inherits:std::false_type
container_value_type_traits	include/pybind11/detail/type_caster_base.h	/^struct container_value_type_traits<$/;"	s
container_value_type_traits::has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = false;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
container_value_type_traits::has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = true;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
container_value_type_traits::has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = false;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
container_value_type_traits::has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = true;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
contains	include/pybind11/pytypes.h	/^    bool contains(T &&item) const;$/;"	p	class:object_api	typeref:typename:bool	access:public	signature:(T && item) const
contains	include/pybind11/pytypes.h	/^    bool contains(T &&key) const {$/;"	f	class:dict	typeref:typename:bool	access:public	signature:(T && key) const
contains	include/pybind11/pytypes.h	/^    bool contains(T &&val) const {$/;"	f	class:anyset	typeref:typename:bool	access:public	signature:(T && val) const
contains	include/pybind11/pytypes.h	/^bool object_api<D>::contains(T &&item) const {$/;"	f	class:object_api	typeref:typename:bool	signature:(T && item) const
contains	include/pybind11/stl_bind.h	/^    bool contains(const object &) override { return false; }$/;"	f	struct:KeysViewImpl	typeref:typename:bool	access:public	signature:(const object &)
contains	include/pybind11/stl_bind.h	/^    bool contains(const typename Map::key_type &k) override { return map.find(k) != map.end(); }$/;"	f	struct:KeysViewImpl	typeref:typename:bool	access:public	signature:(const typename Map::key_type & k)
contains	include/pybind11/stl_bind.h	/^    virtual bool contains(const KeyType &k) = 0;$/;"	p	struct:keys_view	typeref:typename:bool	access:public	signature:(const KeyType & k)
contains	include/pybind11/stl_bind.h	/^    virtual bool contains(const object &k) = 0;$/;"	p	struct:keys_view	typeref:typename:bool	access:public	signature:(const object & k)
contains	tests/test_sequences_and_iterators.cpp	/^        bool contains(float v) const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(float v) const
conv	tests/test_pytypes.cpp	/^PyObject *conv(PyObject *o) {$/;"	f	namespace:external::detail	typeref:typename:PyObject *	signature:(PyObject * o)
conversion_table	docs/advanced/cast/overview.rst	/^.. _conversion_table:$/;"	T	title:Overview
convert	include/pybind11/attr.h	/^    bool convert : 1;  \/\/\/< True if the argument is allowed to convert when loading$/;"	m	struct:argument_record	typeref:typename:bool:1	access:public
convert_dsizes_to_vector	include/pybind11/eigen/tensor.h	/^std::vector<T> convert_dsizes_to_vector(const Eigen::DSizes<T, size> &arr) {$/;"	f	signature:(const Eigen::DSizes<T,size> & arr)
copy	include/pybind11/detail/common.h	/^    copy,$/;"	e	enum:return_value_policy	access:public
copy_assignments	tests/constructor_stats.h	/^    int copy_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
copy_constructions	tests/constructor_stats.h	/^    int copy_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
copy_created	tests/constructor_stats.h	/^    void copy_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
copy_or_ref	include/pybind11/eigen/matrix.h	/^    Array copy_or_ref;$/;"	m	struct:type_caster	typeref:typename:Array	access:private
copyable_holder_caster	include/pybind11/cast.h	/^struct copyable_holder_caster : public type_caster_base<type> {$/;"	s	inherits:type_caster_base<type>
copyable_holder_caster::base	include/pybind11/cast.h	/^    using base = type_caster_base<type>;$/;"	t	struct:copyable_holder_caster	typeref:typename:type_caster_base<type>	access:public
copyable_holder_caster::cast	include/pybind11/cast.h	/^    static handle cast(const holder_type &src, return_value_policy, handle) {$/;"	f	struct:copyable_holder_caster	typeref:typename:handle	access:public	signature:(const holder_type & src,return_value_policy,handle)
copyable_holder_caster::check_holder_compat	include/pybind11/cast.h	/^    void check_holder_compat() {$/;"	f	struct:copyable_holder_caster	typeref:typename:void	access:protected	signature:()
copyable_holder_caster::holder	include/pybind11/cast.h	/^    holder_type holder;$/;"	m	struct:copyable_holder_caster	typeref:typename:holder_type	access:protected
copyable_holder_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
copyable_holder_caster::load_value	include/pybind11/cast.h	/^    bool load_value(value_and_holder &&v_h) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(value_and_holder && v_h)
copyable_holder_caster::operator holder_type&	include/pybind11/cast.h	/^    explicit operator holder_type &() { return holder; }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
copyable_holder_caster::operator holder_type*	include/pybind11/cast.h	/^    explicit operator holder_type *() { return std::addressof(holder); }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
copyable_holder_caster::operator type&	include/pybind11/cast.h	/^    explicit operator type &() { return *(static_cast<type *>(this->value)); }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
copyable_holder_caster::operator type*	include/pybind11/cast.h	/^    explicit operator type *() { return this->value; }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
copyable_holder_caster::try_direct_conversions	include/pybind11/cast.h	/^    static bool try_direct_conversions(handle) { return false; }$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle)
copyable_holder_caster::try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle src,bool convert)
copyable_holder_caster::try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle, bool) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle,bool)
copyright	docs/conf.py	/^copyright = "2017, Wenzel Jakob"$/;"	v	access:public
core_types	docs/reference.rst	/^.. _core_types:$/;"	T	chapter:Macros
corners	tests/test_eigen_matrix.cpp	/^        py::EigenDMap<Eigen::Matrix2d> corners() {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:py::EigenDMap<Eigen::Matrix2d>	file:	access:public	signature:()
cornersConst	tests/test_eigen_matrix.cpp	/^        py::EigenDMap<const Eigen::Matrix2d> cornersConst() const {$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:py::EigenDMap<const Eigen::Matrix2d>	file:	access:public	signature:() const
costream	include/pybind11/iostream.h	/^    std::ostream &costream;$/;"	m	class:scoped_ostream_redirect	typeref:typename:std::ostream &	access:protected
coverage	docs/Makefile	/^coverage:$/;"	t
cpp17_container_casters	docs/advanced/cast/stl.rst	/^.. _cpp17_container_casters:$/;"	T	chapter:Automatic conversion
cpp_flag_cache	pybind11/setup_helpers.py	/^cpp_flag_cache = None$/;"	v	access:public
cpp_function	include/pybind11/pybind11.h	/^    cpp_function() = default;$/;"	p	class:cpp_function	access:public	signature:()
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Func &&f, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Func && f,const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (*f)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (* f)(Args...),const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) &, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)&,const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) const &, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)const &,const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) const, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)const,const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...), const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...),const Extra &...extra)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t) {}$/;"	f	class:cpp_function	access:public	signature:(std::nullptr_t)
cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t, const is_setter &) {}$/;"	f	class:cpp_function	access:public	signature:(std::nullptr_t,const is_setter &)
cpp_function	include/pybind11/pybind11.h	/^class cpp_function : public function {$/;"	c	inherits:function
cpp_function::InitializingFunctionRecordDeleter	include/pybind11/pybind11.h	/^    struct InitializingFunctionRecordDeleter {$/;"	s	class:cpp_function	access:protected
cpp_function::InitializingFunctionRecordDeleter::operator ()	include/pybind11/pybind11.h	/^        void operator()(detail::function_record *rec) { destruct(rec, false); }$/;"	f	struct:cpp_function::InitializingFunctionRecordDeleter	typeref:typename:void	access:public	signature:(detail::function_record * rec)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function() = default;$/;"	p	class:cpp_function	access:public	signature:()
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Func &&f, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Func && f,const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (*f)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (* f)(Args...),const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) &, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)&,const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) const &, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)const &,const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...) const, const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...)const,const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(Return (Class::*f)(Arg...), const Extra &...extra) {$/;"	f	class:cpp_function	access:public	signature:(Return (Class::* f)(Arg...),const Extra &...extra)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t) {}$/;"	f	class:cpp_function	access:public	signature:(std::nullptr_t)
cpp_function::cpp_function	include/pybind11/pybind11.h	/^    cpp_function(std::nullptr_t, const is_setter &) {}$/;"	f	class:cpp_function	access:public	signature:(std::nullptr_t,const is_setter &)
cpp_function::destruct	include/pybind11/pybind11.h	/^    static void destruct(detail::function_record *rec, bool free_strings = true) {$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(detail::function_record * rec,bool free_strings=true)
cpp_function::dispatcher	include/pybind11/pybind11.h	/^    static PyObject *dispatcher(PyObject *self, PyObject *args_in, PyObject *kwargs_in) {$/;"	f	class:cpp_function	typeref:typename:PyObject *	access:protected	signature:(PyObject * self,PyObject * args_in,PyObject * kwargs_in)
cpp_function::initialize	include/pybind11/pybind11.h	/^    void initialize(Func &&f, Return (*)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(Func && f,Return (*)(Args...),const Extra &...extra)
cpp_function::initialize::capture::f	include/pybind11/pybind11.h	/^            remove_reference_t<Func> f;$/;"	m	struct:cpp_function::initialize::capture	typeref:typename:remove_reference_t<Func>	access:public
cpp_function::initialize_generic	include/pybind11/pybind11.h	/^    void initialize_generic(unique_function_record &&unique_rec,$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(unique_function_record && unique_rec,const char * text,const std::type_info * const * types,size_t args)
cpp_function::make_function_record	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE unique_function_record make_function_record() {$/;"	f	class:cpp_function	typeref:typename:PYBIND11_NOINLINE unique_function_record	access:protected	signature:()
cpp_function::name	include/pybind11/pybind11.h	/^    object name() const { return attr("__name__"); }$/;"	f	class:cpp_function	typeref:typename:object	access:public	signature:() const
cpp_function::strdup_guard	include/pybind11/pybind11.h	/^    class strdup_guard {$/;"	c	class:cpp_function	access:protected
cpp_function::strdup_guard::operator ()	include/pybind11/pybind11.h	/^        char *operator()(const char *s) {$/;"	f	class:cpp_function::strdup_guard	typeref:typename:char *	access:public	signature:(const char * s)
cpp_function::strdup_guard::operator =	include/pybind11/pybind11.h	/^        strdup_guard &operator=(const strdup_guard &) = delete;$/;"	p	class:cpp_function::strdup_guard	typeref:typename:strdup_guard &	access:public	signature:(const strdup_guard &)
cpp_function::strdup_guard::release	include/pybind11/pybind11.h	/^        void release() { strings.clear(); }$/;"	f	class:cpp_function::strdup_guard	typeref:typename:void	access:public	signature:()
cpp_function::strdup_guard::strdup_guard	include/pybind11/pybind11.h	/^        strdup_guard() = default;$/;"	p	class:cpp_function::strdup_guard	access:public	signature:()
cpp_function::strdup_guard::strdup_guard	include/pybind11/pybind11.h	/^        strdup_guard(const strdup_guard &) = delete;$/;"	p	class:cpp_function::strdup_guard	access:public	signature:(const strdup_guard &)
cpp_function::strdup_guard::strings	include/pybind11/pybind11.h	/^        std::vector<char *> strings;$/;"	m	class:cpp_function::strdup_guard	typeref:typename:std::vector<char * >	access:private
cpp_function::strdup_guard::~strdup_guard	include/pybind11/pybind11.h	/^        ~strdup_guard() {$/;"	f	class:cpp_function::strdup_guard	access:public	signature:()
cpp_function::unique_function_record	include/pybind11/pybind11.h	/^    using unique_function_record$/;"	t	class:cpp_function	typeref:typename:std::unique_ptr<detail::function_record,InitializingFunctionRecordDeleter>	access:protected
cpp_module	tests/test_embed/test_interpreter.cpp	/^    auto cpp_module = py::module_::import("widget_module");$/;"	v	typeref:typename:auto
cpp_std	tests/pybind11_tests.cpp	/^const char *cpp_std() {$/;"	f	typeref:typename:const char *	signature:()
cpp_version	setup.py	/^cpp_version = "{MAJOR}.{MINOR}.{PATCH}".format(**matches)$/;"	v	access:public
cpp_widget	tests/test_embed/test_interpreter.cpp	/^        const auto &cpp_widget = py_widget.cast<const Widget &>();$/;"	v	typeref:typename:const auto &
cpp_widget	tests/test_embed/test_interpreter.cpp	/^    const auto &cpp_widget = py_widget.cast<const Widget &>();$/;"	v	typeref:typename:const auto &
cppimport	docs/compiling.rst	/^.. [cppimport] https:\/\/github.com\/tbenthompson\/cppimport$/;"	C	chapter:Building with cppimport
cppreference	docs/advanced/smart_ptrs.rst	/^.. _cppreference: http:\/\/en.cppreference.com\/w\/cpp\/memory\/enable_shared_from_this$/;"	T	chapter:std::shared_ptr
cpptest	tests/test_embed/CMakeLists.txt	/^  add_custom_target(cpptest) # Dummy target on PyPy. Embedding is not supported.$/;"	t
cpptest	tests/test_embed/CMakeLists.txt	/^  cpptest$/;"	t
cpptype	include/pybind11/detail/internals.h	/^    const std::type_info *cpptype;$/;"	m	struct:type_info	typeref:typename:const std::type_info *	access:public
cpptype	include/pybind11/detail/type_caster_base.h	/^    const std::type_info *cpptype = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:const std::type_info *	access:public
create	include/pybind11/numpy.h	/^    static Type create(broadcast_trivial trivial, const std::vector<ssize_t> &shape) {$/;"	f	struct:vectorize_returned_array	typeref:typename:Type	access:public	signature:(broadcast_trivial trivial,const std::vector<ssize_t> & shape)
create	include/pybind11/numpy.h	/^    static Type create(broadcast_trivial, const std::vector<ssize_t> &) { return none(); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Type	access:public	signature:(broadcast_trivial,const std::vector<ssize_t> &)
create	tests/test_eigen_matrix.cpp	/^        static Eigen::MatrixXd create() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd	file:	access:public	signature:()
createConst	tests/test_eigen_matrix.cpp	/^        static const Eigen::MatrixXd createConst() { return Eigen::MatrixXd::Ones(10, 10); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd	file:	access:public	signature:()
create_and_destroy	tests/test_factory_constructors.py	/^def create_and_destroy(*args):$/;"	f	access:public	signature:(*args)
create_extension_module	include/pybind11/pybind11.h	/^    static module_ create_extension_module(const char *name, const char *doc, module_def *def) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name,const char * doc,module_def * def)
create_recarray	tests/test_numpy_dtypes.cpp	/^py::array_t<S, 0> create_recarray(size_t n) {$/;"	f	typeref:typename:py::array_t<S,0>	signature:(size_t n)
create_zoo	tests/test_tagbased_polymorphic.cpp	/^std::vector<std::unique_ptr<Animal>> create_zoo() {$/;"	f	typeref:typename:std::vector<std::unique_ptr<Animal>>	signature:()
created	tests/constructor_stats.h	/^    void created(void *inst) { ++_instances[inst]; }$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
curr	include/pybind11/detail/type_caster_base.h	/^        value_and_holder curr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:value_and_holder	access:private
custom_constructors	docs/advanced/classes.rst	/^.. _custom_constructors:$/;"	T	section:Different method signatures
custom_type_setup	include/pybind11/attr.h	/^    explicit custom_type_setup(callback value) : value(std::move(value)) {}$/;"	f	struct:custom_type_setup	access:public	signature:(callback value)
custom_type_setup	include/pybind11/attr.h	/^struct custom_type_setup {$/;"	s
custom_type_setup::callback	include/pybind11/attr.h	/^    using callback = std::function<void(PyHeapTypeObject *heap_type)>;$/;"	t	struct:custom_type_setup	access:public
custom_type_setup::custom_type_setup	include/pybind11/attr.h	/^    explicit custom_type_setup(callback value) : value(std::move(value)) {}$/;"	f	struct:custom_type_setup	access:public	signature:(callback value)
custom_type_setup::value	include/pybind11/attr.h	/^    callback value;$/;"	m	struct:custom_type_setup	typeref:typename:callback	access:public
custom_type_setup_callback	include/pybind11/attr.h	/^    custom_type_setup::callback custom_type_setup_callback;$/;"	m	struct:type_record	typeref:typename:custom_type_setup::callback	access:public
custom_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit custom_unique_ptr(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::custom_unique_ptr	file:	access:public	signature:(T * p)
custom_unique_ptr	tests/test_smart_ptr.cpp	/^class custom_unique_ptr {$/;"	c	namespace:__anond975f9d30111	file:
cxx_append	tools/pybind11Common.cmake	/^      set(cxx_append ";-fno-fat-lto-objects")$/;"	v	function:_pybind11_generate_lto
cxx_append	tools/pybind11Common.cmake	/^    set(cxx_append "")$/;"	v	function:_pybind11_generate_lto
cxx_lang	tools/pybind11Common.cmake	/^    set(cxx_lang "$<COMPILE_LANGUAGE:CXX>")$/;"	v	function:_pybind11_generate_lto
cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self) -> int:$/;"	m	class:Pybind11Extension	typeref:typename:int	access:public	signature:(self)
cxx_std	pybind11/setup_helpers.py	/^    def cxx_std(self, level: int) -> None:$/;"	m	class:Pybind11Extension	typeref:typename:None	access:public	signature:(self, level: int)
d	tests/test_embed/test_interpreter.cpp	/^    auto d = py::dict();$/;"	v	typeref:typename:auto
d	tests/test_exceptions.cpp	/^    py::dict d;$/;"	m	struct:PythonCallInDestructor	typeref:typename:py::dict	file:	access:public
d	tests/test_multiple_inheritance.cpp	/^        int d;$/;"	m	struct:TEST_SUBMODULE::D	typeref:typename:int	file:	access:public
d	tests/test_numpy_dtypes.cpp	/^    std::array<float, 2> d[4];$/;"	m	struct:ArrayStruct	typeref:typename:std::array<float,2>[4]	file:	access:public
d	tests/test_pytypes.py	/^        d = {"operator[object]": 1, "operator[char *]": 2}$/;"	v	class:test_accessors.TestObject	access:public
d	tests/test_pytypes.py	/^    d = {"key": None}$/;"	v	class:CustomContains	access:public
d0	tests/test_multiple_inheritance.cpp	/^        int d0 = 3;$/;"	m	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public
d1	tests/test_multiple_inheritance.cpp	/^        int d1 = 4;$/;"	m	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public
d_buffer	include/pybind11/iostream.h	/^    std::unique_ptr<char[]> d_buffer;$/;"	m	class:pythonbuf	typeref:typename:std::unique_ptr<char[]>	access:private
data	include/pybind11/attr.h	/^    void *data[3] = {};$/;"	m	struct:function_record	typeref:typename:void * [3]	access:public
data	include/pybind11/eigen/matrix.h	/^    Scalar *data(Array &a) {$/;"	f	struct:type_caster	typeref:typename:Scalar *	access:private	signature:(Array & a)
data	include/pybind11/eigen/matrix.h	/^    const Scalar *data(Array &a) {$/;"	f	struct:type_caster	typeref:typename:const Scalar *	access:private	signature:(Array & a)
data	include/pybind11/numpy.h	/^    T *data() const {$/;"	f	class:multi_array_iterator	typeref:typename:T *	access:public	signature:() const
data	include/pybind11/numpy.h	/^    char *data;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject_HEAD char *	access:public
data	include/pybind11/numpy.h	/^    const T *data(Ix... index) const {$/;"	f	class:array_t	typeref:typename:const T *	access:public	signature:(Ix...index) const
data	include/pybind11/numpy.h	/^    const T *data(Ix... ix) const {$/;"	f	class:unchecked_reference	typeref:typename:const T *	access:public	signature:(Ix...ix) const
data	include/pybind11/numpy.h	/^    const void *data(Ix... index) const {$/;"	f	class:array	typeref:typename:const void *	access:public	signature:(Ix...index) const
data	include/pybind11/numpy.h	/^    void *data() const { return p_ptr; }$/;"	f	class:common_iterator	typeref:typename:void *	access:public	signature:() const
data	tests/test_buffers.cpp	/^        float *data() { return m_data; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float *	file:	access:public	signature:()
data	tests/test_numpy_array.cpp	/^        int data[2] = {1, 2};$/;"	m	struct:TEST_SUBMODULE::ArrayClass	typeref:typename:int[2]	file:	access:public
data	tests/test_numpy_array.cpp	/^arr data(const arr &a, Ix... index) {$/;"	f	typeref:typename:arr	signature:(const arr & a,Ix...index)
data	tests/test_stl.cpp	/^        std::string data;$/;"	m	struct:TEST_SUBMODULE::Issue1561Inner	typeref:typename:std::string	file:	access:public
data_	include/pybind11/numpy.h	/^    const unsigned char *data_;$/;"	m	class:unchecked_reference	typeref:typename:const unsigned char *	access:protected
data_	tests/test_sequences_and_iterators.cpp	/^        std::vector<std::pair<int, int>> data_;$/;"	m	class:TEST_SUBMODULE::IntPairs	typeref:typename:std::vector<std::pair<int,int>>	file:	access:private
data_	tests/test_vector_unique_ptr_member.cpp	/^    const std::vector<std::unique_ptr<DataType>> data_;$/;"	m	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:const std::vector<std::unique_ptr<DataType>>	file:	access:private
data_i	tests/test_numpy_array.cpp	/^static int data_i = 42;$/;"	v	typeref:typename:int	file:
data_size	tests/test_vector_unique_ptr_member.cpp	/^    std::size_t data_size() const { return data_.size(); }$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:std::size_t	file:	access:public	signature:() const
data_t	tests/test_numpy_array.cpp	/^arr data_t(const arr_t &a, Ix... index) {$/;"	f	typeref:typename:arr	signature:(const arr_t & a,Ix...index)
days	include/pybind11/chrono.h	/^    using days = std::chrono::duration<int_least32_t, std::ratio<86400>>;$/;"	t	class:duration_caster	typeref:typename:std::chrono::duration<int_least32_t,std::ratio<86400>>	access:public
dd_t	include/pybind11/chrono.h	/^        using dd_t = duration<int, std::ratio<86400>>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::ratio<86400>>
dealloc	include/pybind11/attr.h	/^    void (*dealloc)(detail::value_and_holder &) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(detail::value_and_holder &)	access:public
dealloc	include/pybind11/detail/internals.h	/^    void (*dealloc)(value_and_holder &v_h);$/;"	m	struct:type_info	typeref:typename:void (*)(value_and_holder & v_h)	access:public
dealloc	include/pybind11/pybind11.h	/^    static void dealloc(detail::value_and_holder &v_h) {$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::value_and_holder & v_h)
deallocate_layout	include/pybind11/detail/common.h	/^    void deallocate_layout();$/;"	p	struct:instance	typeref:typename:void	access:public	signature:()
deallocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::deallocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void	signature:()
decRef	tests/object.h	/^    void decRef(bool dealloc = true) const {$/;"	f	class:Object	typeref:typename:void	access:public	signature:(bool dealloc=true) const
dec_ref	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void dec_ref() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
dec_ref	include/pybind11/pytypes.h	/^    const handle &dec_ref() const & {$/;"	f	class:handle	typeref:typename:const handle &	access:public	signature:() const
decode_utfN	include/pybind11/cast.h	/^    static handle decode_utfN(const char *buffer, ssize_t nbytes) {$/;"	f	struct:string_caster	typeref:typename:handle	access:private	signature:(const char * buffer,ssize_t nbytes)
decrement	include/pybind11/pytypes.h	/^    void decrement() { --index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:()
decrement	include/pybind11/pytypes.h	/^    void decrement() { --ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:()
def	include/pybind11/attr.h	/^    PyMethodDef *def = nullptr;$/;"	m	struct:function_record	typeref:typename:PyMethodDef *	access:public
def	include/pybind11/pybind11.h	/^    class_ &def(const T &op, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const T & op,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    class_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::alias_constructor<Args...> &init, const Extra &...extra)/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const detail::initimpl::alias_constructor<Args...> & init,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    class_ &def(const detail::initimpl::constructor<Args...> &init, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const detail::initimpl::constructor<Args...> & init,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::factory<Args...> &&init, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(detail::initimpl::factory<Args...> && init,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    class_ &def(detail::initimpl::pickle_factory<Args...> &&pf, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(detail::initimpl::pickle_factory<Args...> && pf,const Extra &...extra)
def	include/pybind11/pybind11.h	/^    module_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:module_	typeref:typename:module_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Func &&func) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Func && func)
def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...) const) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Return (Class::* func)(Args...)const)
def_buffer	include/pybind11/pybind11.h	/^    class_ &def_buffer(Return (Class::*func)(Args...)) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(Return (Class::* func)(Args...))
def_cast	include/pybind11/pybind11.h	/^    class_ &def_cast(const T &op, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const T & op,const Extra &...extra)
def_index_fn	tests/test_numpy_array.cpp	/^#define def_index_fn(/;"	d	file:	signature:(name,type)
def_property	include/pybind11/pybind11.h	/^    class_ &def_property(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const cpp_function & fset,const Extra &...extra)
def_property	include/pybind11/pybind11.h	/^    class_ &def_property(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const cpp_function & fset,const Extra &...extra)
def_property	include/pybind11/pybind11.h	/^    def_property(const char *name, const Getter &fget, const Setter &fset, const Extra &...extra/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Setter & fset,const Extra &...extra)
def_property_readonly	include/pybind11/pybind11.h	/^    class_ &def_property_readonly(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Extra &...extra)
def_property_readonly	include/pybind11/pybind11.h	/^    def_property_readonly(const char *name, const cpp_function &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const Extra &...extra)
def_property_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_property_readonly_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const Extra &...extra)
def_property_readonly_static	include/pybind11/pybind11.h	/^    def_property_readonly_static(const char *name, const Getter &fget, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const Extra &...extra)
def_property_static	include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const Getter & fget,const cpp_function & fset,const Extra &...extra)
def_property_static	include/pybind11/pybind11.h	/^    class_ &def_property_static(const char *name,$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const cpp_function & fget,const cpp_function & fset,const Extra &...extra)
def_property_static_impl	include/pybind11/pybind11.h	/^    void def_property_static_impl(const char *name,$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(const char * name,handle fget,handle fset,detail::function_record * rec_func)
def_readonly	include/pybind11/pybind11.h	/^    class_ &def_readonly(const char *name, const D C::*pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const D C::* pm,const Extra &...extra)
def_readonly_static	include/pybind11/pybind11.h	/^    class_ &def_readonly_static(const char *name, const D *pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,const D * pm,const Extra &...extra)
def_readwrite	include/pybind11/pybind11.h	/^    class_ &def_readwrite(const char *name, D C::*pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,D C::* pm,const Extra &...extra)
def_readwrite_static	include/pybind11/pybind11.h	/^    class_ &def_readwrite_static(const char *name, D *pm, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name,D * pm,const Extra &...extra)
def_static	include/pybind11/pybind11.h	/^    class_ &def_static(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:class_	typeref:typename:class_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
def_submodule	include/pybind11/pybind11.h	/^    module_ def_submodule(const char *name, const char *doc = nullptr) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name,const char * doc=nullptr)
default_args	docs/basics.rst	/^.. _default_args:$/;"	T	chapter:Keyword arguments
default_constructed	tests/test_pytypes.cpp	/^PyObject *default_constructed() { return PyFloat_FromDouble(0.0); }$/;"	f	namespace:external::detail	typeref:typename:PyObject *	signature:()
default_constructions	tests/constructor_stats.h	/^    int default_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
default_created	tests/constructor_stats.h	/^    void default_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
default_holder	include/pybind11/attr.h	/^    bool default_holder : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
default_holder	include/pybind11/detail/internals.h	/^    bool default_holder : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
default_metaclass	include/pybind11/detail/internals.h	/^    PyTypeObject *default_metaclass;$/;"	m	struct:internals	typeref:typename:PyTypeObject *	access:public
default_role	docs/conf.py	/^default_role = "any"$/;"	v	access:public
default_scope	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter default_scope;$/;"	v	typeref:typename:py::scoped_interpreter
deferred_t	include/pybind11/detail/common.h	/^using deferred_t = typename deferred_type<T, Us...>::type;$/;"	t	typeref:typename:deferred_type<T,Us...>::type
deferred_type	include/pybind11/detail/common.h	/^struct deferred_type {$/;"	s
deferred_type::type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:deferred_type	typeref:typename:T	access:public
delattr	include/pybind11/pytypes.h	/^inline void delattr(handle obj, const char *name) {$/;"	f	typeref:typename:void	signature:(handle obj,const char * name)
delattr	include/pybind11/pytypes.h	/^inline void delattr(handle obj, handle name) {$/;"	f	typeref:typename:void	signature:(handle obj,handle name)
delete_module_file	tests/test_embed/test_interpreter.cpp	/^    scope_exit delete_module_file([&]() { std::remove(module_file.c_str()); });$/;"	v	typeref:typename:scope_exit
deprecated_call	tests/env.py	/^def deprecated_call():$/;"	f	access:public	signature:()
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return *ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:reference	access:protected	signature:() const
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {key, value}; }$/;"	f	class:dict_readonly	typeref:typename:reference	access:protected	signature:() const
dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {obj, static_cast<size_t>(index)}; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:reference	access:protected	signature:() const
deregister_instance	include/pybind11/detail/class.h	/^inline bool deregister_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f	typeref:typename:bool	signature:(instance * self,void * valptr,const type_info * tinfo)
deregister_instance_impl	include/pybind11/detail/class.h	/^inline bool deregister_instance_impl(void *ptr, instance *self) {$/;"	f	typeref:typename:bool	signature:(void * ptr,instance * self)
derived	include/pybind11/pytypes.h	/^    const Derived &derived() const { return static_cast<const Derived &>(*this); }$/;"	f	class:object_api	typeref:typename:const Derived &	access:private	signature:() const
descr	include/pybind11/attr.h	/^    const char *descr; \/\/\/< Human-readable version of the argument value$/;"	m	struct:argument_record	typeref:typename:const char *	access:public
descr	include/pybind11/cast.h	/^    const char *descr;$/;"	m	struct:arg_v	typeref:typename:const char *	access:public
descr	include/pybind11/detail/descr.h	/^    constexpr descr() = default;$/;"	p	struct:descr	access:public	signature:()
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char c, Chars... cs) : text{c, static_cast<char>(cs)..., '\\0'} {}$/;"	f	struct:descr	access:public	signature:(char c,Chars...cs)
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1]) : descr(s, make_index_sequence<N>()) {}$/;"	f	struct:descr	access:public	signature:(char const (& s)[N+1])
descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1], index_sequence<Is...>) : text{s[Is]..., '\\0'} {}$/;"	f	struct:descr	access:public	signature:(char const (& s)[N+1],index_sequence<Is...>)
descr	include/pybind11/detail/descr.h	/^struct descr {$/;"	s
descr	include/pybind11/numpy.h	/^    PyArrayDescr_Proxy *descr;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyArrayDescr_Proxy *	access:public
descr	include/pybind11/numpy.h	/^    PyObject *descr;$/;"	m	struct:PyArray_Proxy	typeref:typename:PyObject *	access:public
descr	include/pybind11/numpy.h	/^    dtype descr;$/;"	m	struct:field_descriptor	typeref:typename:dtype	access:public
descr::descr	include/pybind11/detail/descr.h	/^    constexpr descr() = default;$/;"	p	struct:descr	access:public	signature:()
descr::descr	include/pybind11/detail/descr.h	/^    constexpr descr(char c, Chars... cs) : text{c, static_cast<char>(cs)..., '\\0'} {}$/;"	f	struct:descr	access:public	signature:(char c,Chars...cs)
descr::descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1]) : descr(s, make_index_sequence<N>()) {}$/;"	f	struct:descr	access:public	signature:(char const (& s)[N+1])
descr::descr	include/pybind11/detail/descr.h	/^    constexpr descr(char const (&s)[N + 1], index_sequence<Is...>) : text{s[Is]..., '\\0'} {}$/;"	f	struct:descr	access:public	signature:(char const (& s)[N+1],index_sequence<Is...>)
descr::text	include/pybind11/detail/descr.h	/^    char text[N + 1]{'\\0'};$/;"	m	struct:descr	typeref:typename:char[]	access:public
descr::types	include/pybind11/detail/descr.h	/^    static constexpr std::array<const std::type_info *, sizeof...(Ts) + 1> types() {$/;"	f	struct:descr	typeref:typename:std::array<const std::type_info *,sizeof...(Ts)+1>	access:public	signature:()
descriptor	include/pybind11/eigen/matrix.h	/^    static constexpr auto descriptor$/;"	m	struct:EigenProps	typeref:typename:auto	access:public
destroyed	tests/constructor_stats.h	/^    void destroyed(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
destruct	include/pybind11/pybind11.h	/^    static void destruct(detail::function_record *rec, bool free_strings = true) {$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(detail::function_record * rec,bool free_strings=true)
destructors_that_call_python	docs/advanced/classes.rst	/^.. _destructors_that_call_python:$/;"	T	chapter:Non-public destructors
detail	tests/test_custom_type_casters.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
detail	tests/test_pytypes.cpp	/^namespace detail {$/;"	n	namespace:external	file:
detail	tests/test_smart_ptr.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
detail	tests/test_stl.cpp	/^namespace detail {$/;"	n	namespace:PYBIND11_NAMESPACE	file:
detail	tests/test_stl_binders.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
detail	tests/test_vector_unique_ptr_member.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
detail_headers	tests/extra_python_package/test_files.py	/^detail_headers = {$/;"	v	access:public
detail_headers	tools/setup_global.py.in	/^detail_headers = glob.glob("pybind11\/include\/pybind11\/detail\/*.h")$/;"	v	access:public
details	include/pybind11/eigen/tensor.h	/^    static constexpr auto details$/;"	m	struct:get_tensor_descriptor	typeref:typename:auto	access:public
devhelp	docs/Makefile	/^devhelp:$/;"	t
dict	include/pybind11/pytypes.h	/^    explicit dict(Args &&...args) : dict(collector(std::forward<Args>(args)...).kwargs()) {}$/;"	f	class:dict	access:public	signature:(Args &&...args)
dict	include/pybind11/pytypes.h	/^class dict : public object {$/;"	c	inherits:object
dict::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(dict, object, PyDict_Check, raw_dict)$/;"	f	class:dict	access:public	signature:(dict,object,PyDict_Check,raw_dict)
dict::begin	include/pybind11/pytypes.h	/^    detail::dict_iterator begin() const { return {*this, 0}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator	access:public	signature:() const
dict::clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PyDict_Clear(ptr()); }$/;"	f	class:dict	typeref:typename:void	access:public	signature:()
dict::contains	include/pybind11/pytypes.h	/^    bool contains(T &&key) const {$/;"	f	class:dict	typeref:typename:bool	access:public	signature:(T && key) const
dict::dict	include/pybind11/pytypes.h	/^    explicit dict(Args &&...args) : dict(collector(std::forward<Args>(args)...).kwargs()) {}$/;"	f	class:dict	access:public	signature:(Args &&...args)
dict::empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:dict	typeref:typename:bool	access:public	signature:() const
dict::end	include/pybind11/pytypes.h	/^    detail::dict_iterator end() const { return {}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator	access:public	signature:() const
dict::raw_dict	include/pybind11/pytypes.h	/^    static PyObject *raw_dict(PyObject *op) {$/;"	f	class:dict	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
dict::size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyDict_Size(m_ptr); }$/;"	f	class:dict	typeref:typename:size_t	access:public	signature:() const
dict_getitem	include/pybind11/pytypes.h	/^inline PyObject *dict_getitem(PyObject *v, PyObject *key) {$/;"	f	typeref:typename:PyObject *	signature:(PyObject * v,PyObject * key)
dict_getitemstring	include/pybind11/pytypes.h	/^inline PyObject *dict_getitemstring(PyObject *v, const char *key) {$/;"	f	typeref:typename:PyObject *	signature:(PyObject * v,const char * key)
dict_iterator	include/pybind11/pytypes.h	/^using dict_iterator = generic_iterator<iterator_policies::dict_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::dict_readonly>
dict_readonly	include/pybind11/pytypes.h	/^    dict_readonly() = default;$/;"	p	class:dict_readonly	access:protected	signature:()
dict_readonly	include/pybind11/pytypes.h	/^    dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }$/;"	f	class:dict_readonly	access:protected	signature:(handle obj,ssize_t pos)
dict_readonly	include/pybind11/pytypes.h	/^class dict_readonly {$/;"	c
dict_readonly::dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {key, value}; }$/;"	f	class:dict_readonly	typeref:typename:reference	access:protected	signature:() const
dict_readonly::dict_readonly	include/pybind11/pytypes.h	/^    dict_readonly() = default;$/;"	p	class:dict_readonly	access:protected	signature:()
dict_readonly::dict_readonly	include/pybind11/pytypes.h	/^    dict_readonly(handle obj, ssize_t pos) : obj(obj), pos(pos) { increment(); }$/;"	f	class:dict_readonly	access:protected	signature:(handle obj,ssize_t pos)
dict_readonly::equal	include/pybind11/pytypes.h	/^    bool equal(const dict_readonly &b) const { return pos == b.pos; }$/;"	f	class:dict_readonly	typeref:typename:bool	access:protected	signature:(const dict_readonly & b) const
dict_readonly::increment	include/pybind11/pytypes.h	/^    void increment() {$/;"	f	class:dict_readonly	typeref:typename:void	access:protected	signature:()
dict_readonly::iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::forward_iterator_tag;$/;"	t	class:dict_readonly	typeref:typename:std::forward_iterator_tag	access:protected
dict_readonly::key	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly	typeref:typename:PyObject *	access:private
dict_readonly::obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:dict_readonly	typeref:typename:handle	access:private
dict_readonly::pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const value_type>;$/;"	t	class:dict_readonly	typeref:typename:arrow_proxy<const value_type>	access:protected
dict_readonly::pos	include/pybind11/pytypes.h	/^    ssize_t pos = -1;$/;"	m	class:dict_readonly	typeref:typename:ssize_t	access:private
dict_readonly::reference	include/pybind11/pytypes.h	/^    using reference = const value_type; \/\/ PR #3263$/;"	t	class:dict_readonly	typeref:typename:const value_type	access:protected
dict_readonly::value	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly	typeref:typename:PyObject *	access:private
dict_readonly::value_type	include/pybind11/pytypes.h	/^    using value_type = std::pair<handle, handle>;$/;"	t	class:dict_readonly	typeref:typename:std::pair<handle,handle>	access:protected
difference_type	include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:generic_iterator	typeref:typename:ssize_t	access:public
difference_type	include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:iterator	typeref:typename:ssize_t	access:public
different_resolutions	tests/test_chrono.cpp	/^struct different_resolutions {$/;"	s	file:
different_resolutions::time_point_h	tests/test_chrono.cpp	/^    using time_point_h = std::chrono::time_point<std::chrono::system_clock, std::chrono::hours>;$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::hours>	file:	access:public
different_resolutions::time_point_m	tests/test_chrono.cpp	/^    using time_point_m = std::chrono::time_point<std::chrono::system_clock, std::chrono::minutes/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::minutes>	file:	access:public
different_resolutions::time_point_ms	tests/test_chrono.cpp	/^    using time_point_ms$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::milliseconds>	file:	access:public
different_resolutions::time_point_s	tests/test_chrono.cpp	/^    using time_point_s = std::chrono::time_point<std::chrono::system_clock, std::chrono::seconds/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::seconds>	file:	access:public
different_resolutions::time_point_us	tests/test_chrono.cpp	/^    using time_point_us$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::microseconds>	file:	access:public
different_resolutions::timestamp_h	tests/test_chrono.cpp	/^    time_point_h timestamp_h;$/;"	m	struct:different_resolutions	typeref:typename:time_point_h	file:	access:public
different_resolutions::timestamp_m	tests/test_chrono.cpp	/^    time_point_m timestamp_m;$/;"	m	struct:different_resolutions	typeref:typename:time_point_m	file:	access:public
different_resolutions::timestamp_ms	tests/test_chrono.cpp	/^    time_point_ms timestamp_ms;$/;"	m	struct:different_resolutions	typeref:typename:time_point_ms	file:	access:public
different_resolutions::timestamp_s	tests/test_chrono.cpp	/^    time_point_s timestamp_s;$/;"	m	struct:different_resolutions	typeref:typename:time_point_s	file:	access:public
different_resolutions::timestamp_us	tests/test_chrono.cpp	/^    time_point_us timestamp_us;$/;"	m	struct:different_resolutions	typeref:typename:time_point_us	file:	access:public
digits	include/pybind11/detail/descr.h	/^    static constexpr auto digits = descr<sizeof...(Digits)>(('0' + Digits)...);$/;"	m	struct:int_to_str	typeref:typename:auto	access:public
dimensions	include/pybind11/numpy.h	/^    ssize_t *dimensions;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *	access:public
dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor = concat(const_name<Indices>()...);$/;"	m	struct:eigen_tensor_helper	typeref:typename:auto	access:public
dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor$/;"	m	struct:eigen_tensor_helper	typeref:typename:auto	access:public
dims_	include/pybind11/numpy.h	/^    const ssize_t dims_;$/;"	m	class:unchecked_reference	typeref:typename:const ssize_t	access:protected
direct_conversions	include/pybind11/detail/internals.h	/^    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<bool (*)(PyObject *,void * &)> *	access:public
direct_conversions	include/pybind11/detail/internals.h	/^    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;$/;"	m	struct:internals	typeref:typename:type_map<std::vector<bool (*)(PyObject *,void * &)>>	access:public
direct_converter	include/pybind11/numpy.h	/^    static bool direct_converter(PyObject *obj, void *&value) {$/;"	f	struct:npy_format_descriptor	typeref:typename:bool	access:private	signature:(PyObject * obj,void * & value)
dirhtml	docs/Makefile	/^dirhtml:$/;"	t
disable_enum_members_docstring	include/pybind11/options.h	/^    options &disable_enum_members_docstring() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
disable_function_signatures	include/pybind11/options.h	/^    options &disable_function_signatures() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
disable_user_defined_docstrings	include/pybind11/options.h	/^    options &disable_user_defined_docstrings() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_release	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
disassoc	include/pybind11/gil.h	/^    bool disassoc;$/;"	m	class:gil_scoped_release	typeref:typename:bool	access:private
discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(const char *err_context) {$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:(const char * err_context)
discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(object err_context) {$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:(object err_context)
dispatch	tests/test_virtual_functions.cpp	/^    std::string dispatch() const override {$/;"	f	struct:DispatchIssue	typeref:typename:std::string	file:	access:public	signature:() const
dispatch	tests/test_virtual_functions.cpp	/^    virtual std::string dispatch() const = 0;$/;"	p	struct:Base	typeref:typename:std::string	file:	access:public	signature:() const
dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass1	access:public	signature:(self)
dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass2	access:public	signature:(self)
dispatcher	include/pybind11/pybind11.h	/^    static PyObject *dispatcher(PyObject *self, PyObject *args_in, PyObject *kwargs_in) {$/;"	f	class:cpp_function	typeref:typename:PyObject *	access:protected	signature:(PyObject * self,PyObject * args_in,PyObject * kwargs_in)
distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_fast_readonly &b) const { return ptr - b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:ssize_t	access:protected	signature:(const sequence_fast_readonly & b) const
distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_slow_readwrite &b) const { return index - b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:ssize_t	access:protected	signature:(const sequence_slow_readwrite & b) const
do_nothing	tests/test_methods_and_attributes.cpp	/^    void do_nothing() const {}$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:() const
do_stderr_	include/pybind11/iostream.h	/^    bool do_stderr_;$/;"	m	class:OstreamRedirect	typeref:typename:bool	access:private
do_stdout_	include/pybind11/iostream.h	/^    bool do_stdout_;$/;"	m	class:OstreamRedirect	typeref:typename:bool	access:private
doc	include/pybind11/attr.h	/^    char *doc = nullptr;$/;"	m	struct:function_record	typeref:typename:char *	access:public
doc	include/pybind11/attr.h	/^    const char *doc = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *	access:public
doc	include/pybind11/attr.h	/^    explicit doc(const char *value) : value(value) {}$/;"	f	struct:doc	access:public	signature:(const char * value)
doc	include/pybind11/attr.h	/^struct doc {$/;"	s
doc	include/pybind11/pytypes.h	/^    str_attr_accessor doc() const;$/;"	p	class:object_api	typeref:typename:str_attr_accessor	access:public	signature:() const
doc	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::doc() const {$/;"	f	class:object_api	typeref:typename:str_attr_accessor	signature:() const
doc	tests/conftest.py	/^def doc():$/;"	f	access:public	signature:()
doc::doc	include/pybind11/attr.h	/^    explicit doc(const char *value) : value(value) {}$/;"	f	struct:doc	access:public	signature:(const char * value)
doc::value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:doc	typeref:typename:const char *	access:public
docs	noxfile.py	/^def docs(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
doctest	docs/Makefile	/^doctest:$/;"	t
dont_write_bytecode	tests/test_embed/test_interpreter.cpp	/^    bool dont_write_bytecode = sys.attr("dont_write_bytecode").cast<bool>();$/;"	v	typeref:typename:bool
double	tests/test_callbacks.py	/^        def double(self, val):$/;"	m	class:test_bound_method_callback.MyClass	access:public	signature:(self, val)
dt	docs/benchmark.py	/^import datetime as dt$/;"	I	access:public	nameref:module:datetime
dt_fmt	tests/test_numpy_dtypes.py	/^def dt_fmt():$/;"	f	access:public	signature:()
dtype	include/pybind11/numpy.h	/^    dtype(list names, list formats, list offsets, ssize_t itemsize) {$/;"	f	class:dtype	access:public	signature:(list names,list formats,list offsets,ssize_t itemsize)
dtype	include/pybind11/numpy.h	/^    explicit dtype(const buffer_info &info) {$/;"	f	class:dtype	typeref:typename:dtype,object,detail::npy_api::get ().PyArrayDescr_Check_	access:public	signature:(const buffer_info & info)
dtype	include/pybind11/numpy.h	/^    explicit dtype(const char *format) : dtype(pybind11::str(format)) {}$/;"	f	class:dtype	access:public	signature:(const char * format)
dtype	include/pybind11/numpy.h	/^    explicit dtype(const pybind11::str &format) : dtype(from_args(format)) {}$/;"	f	class:dtype	access:public	signature:(const pybind11::str & format)
dtype	include/pybind11/numpy.h	/^    explicit dtype(const std::string &format) : dtype(pybind11::str(format)) {}$/;"	f	class:dtype	access:public	signature:(const std::string & format)
dtype	include/pybind11/numpy.h	/^    explicit dtype(int typenum)$/;"	f	class:dtype	access:public	signature:(int typenum)
dtype	include/pybind11/numpy.h	/^    pybind11::dtype dtype() const {$/;"	f	class:array	typeref:typename:pybind11::dtype	access:public	signature:() const
dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return base_descr::dtype(); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return pybind11::dtype(\/*typenum*\/ value); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return reinterpret_borrow<pybind11::dtype>(dtype_ptr()); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() {$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
dtype	include/pybind11/numpy.h	/^class dtype : public object {$/;"	c	inherits:object
dtype	tests/test_numpy_array.cpp	/^    py::dtype dtype{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:py::dtype	file:	access:public
dtype::_dtype_from_pep3118	include/pybind11/numpy.h	/^    static object _dtype_from_pep3118() {$/;"	f	class:dtype	typeref:typename:object	access:private	signature:()
dtype::alignment	include/pybind11/numpy.h	/^    int alignment() const { return detail::array_descriptor_proxy(m_ptr)->alignment; }$/;"	f	class:dtype	typeref:typename:int	access:public	signature:() const
dtype::byteorder	include/pybind11/numpy.h	/^    char byteorder() const { return detail::array_descriptor_proxy(m_ptr)->byteorder; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
dtype::char_	include/pybind11/numpy.h	/^    char char_() const {$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
dtype::dtype	include/pybind11/numpy.h	/^    dtype(list names, list formats, list offsets, ssize_t itemsize) {$/;"	f	class:dtype	access:public	signature:(list names,list formats,list offsets,ssize_t itemsize)
dtype::dtype	include/pybind11/numpy.h	/^    explicit dtype(const buffer_info &info) {$/;"	f	class:dtype	typeref:typename:dtype,object,detail::npy_api::get ().PyArrayDescr_Check_	access:public	signature:(const buffer_info & info)
dtype::dtype	include/pybind11/numpy.h	/^    explicit dtype(const char *format) : dtype(pybind11::str(format)) {}$/;"	f	class:dtype	access:public	signature:(const char * format)
dtype::dtype	include/pybind11/numpy.h	/^    explicit dtype(const pybind11::str &format) : dtype(from_args(format)) {}$/;"	f	class:dtype	access:public	signature:(const pybind11::str & format)
dtype::dtype	include/pybind11/numpy.h	/^    explicit dtype(const std::string &format) : dtype(pybind11::str(format)) {}$/;"	f	class:dtype	access:public	signature:(const std::string & format)
dtype::dtype	include/pybind11/numpy.h	/^    explicit dtype(int typenum)$/;"	f	class:dtype	access:public	signature:(int typenum)
dtype::flags	include/pybind11/numpy.h	/^    char flags() const { return detail::array_descriptor_proxy(m_ptr)->flags; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
dtype::from_args	include/pybind11/numpy.h	/^    static dtype from_args(const object &args) {$/;"	f	class:dtype	typeref:typename:dtype	access:public	signature:(const object & args)
dtype::has_fields	include/pybind11/numpy.h	/^    bool has_fields() const { return detail::array_descriptor_proxy(m_ptr)->names != nullptr; }$/;"	f	class:dtype	typeref:typename:bool	access:public	signature:() const
dtype::itemsize	include/pybind11/numpy.h	/^    ssize_t itemsize() const { return detail::array_descriptor_proxy(m_ptr)->elsize; }$/;"	f	class:dtype	typeref:typename:ssize_t	access:public	signature:() const
dtype::kind	include/pybind11/numpy.h	/^    char kind() const { return detail::array_descriptor_proxy(m_ptr)->kind; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
dtype::num	include/pybind11/numpy.h	/^    int num() const {$/;"	f	class:dtype	typeref:typename:int	access:public	signature:() const
dtype::of	include/pybind11/numpy.h	/^    static dtype of() {$/;"	f	class:dtype	typeref:typename:dtype	access:public	signature:()
dtype::strip_padding	include/pybind11/numpy.h	/^    dtype strip_padding(ssize_t itemsize) {$/;"	f	class:dtype	typeref:typename:dtype	access:private	signature:(ssize_t itemsize)
dtype::strip_padding::field_descr::field_descr	include/pybind11/numpy.h	/^            field_descr(pybind11::str &&name, object &&format, pybind11::int_ &&offset)$/;"	f	struct:dtype::strip_padding::field_descr	access:public	signature:(pybind11::str && name,object && format,pybind11::int_ && offset)
dtype::strip_padding::field_descr::format	include/pybind11/numpy.h	/^            object format;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:object	access:public
dtype::strip_padding::field_descr::name	include/pybind11/numpy.h	/^            pybind11::str name;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:pybind11::str	access:public
dtype::strip_padding::field_descr::offset	include/pybind11/numpy.h	/^            pybind11::int_ offset;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:pybind11::int_	access:public
dtype_ptr	include/pybind11/numpy.h	/^    PyObject *dtype_ptr;$/;"	m	struct:numpy_type_info	typeref:typename:PyObject *	access:public
dtype_ptr	include/pybind11/numpy.h	/^    static PyObject *dtype_ptr() {$/;"	f	struct:npy_format_descriptor	typeref:typename:PyObject *	access:private	signature:()
dummy1	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy1;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:	access:public
dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialNestedStruct	typeref:typename:uint64_t	file:	access:public
dummy2	tests/test_numpy_dtypes.cpp	/^    uint64_t dummy2;$/;"	m	struct:PartialStruct	typeref:typename:uint64_t	file:	access:public
dummy_function	tests/test_callbacks.cpp	/^int dummy_function(int i) { return i + 1; }$/;"	f	typeref:typename:int	signature:(int i)
duration_caster	include/pybind11/chrono.h	/^class duration_caster {$/;"	c
duration_caster::cast	include/pybind11/chrono.h	/^    static handle cast(const type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:duration_caster	typeref:typename:handle	access:public	signature:(const type & src,return_value_policy,handle)
duration_caster::days	include/pybind11/chrono.h	/^    using days = std::chrono::duration<int_least32_t, std::ratio<86400>>;$/;"	t	class:duration_caster	typeref:typename:std::chrono::duration<int_least32_t,std::ratio<86400>>	access:public
duration_caster::get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::duration<rep, period> &src) {$/;"	f	class:duration_caster	typeref:typename:const std::chrono::duration<rep,period> &	access:public	signature:(const std::chrono::duration<rep,period> & src)
duration_caster::get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::time_point<Clock, std::chrono::duration<rep, period>> &src) /;"	f	class:duration_caster	typeref:typename:std::chrono::duration<rep,period>	access:public	signature:(const std::chrono::time_point<Clock,std::chrono::duration<rep,period>> & src)
duration_caster::load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:duration_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
duration_caster::period	include/pybind11/chrono.h	/^    using period = typename type::period;$/;"	t	class:duration_caster	typeref:typename:type::period	access:public
duration_caster::rep	include/pybind11/chrono.h	/^    using rep = typename type::rep;$/;"	t	class:duration_caster	typeref:typename:type::rep	access:public
dynamic	include/pybind11/eigen/matrix.h	/^        dynamic = !fixed_rows && !fixed_cols;             \/\/ Fully-dynamic size$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
dynamic_attr	include/pybind11/attr.h	/^    bool dynamic_attr : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
dynamic_attr	include/pybind11/attr.h	/^struct dynamic_attr {};$/;"	s
dynamic_stride	include/pybind11/eigen/matrix.h	/^    static constexpr bool dynamic_stride$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
e	tests/test_multiple_inheritance.cpp	/^        int e = 5;$/;"	m	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public
e	tests/test_pickling.py	/^    from pybind11_tests import enums as e$/;"	Y	function:test_enum_pickle	file:	access:private	nameref:unknown:enums
egien_tensor	tests/test_eigen_tensor.cpp	/^test_initializer egien_tensor("eigen_tensor", eigen_tensor_test::test_module);$/;"	v	typeref:typename:test_initializer
eigen_array_cast	include/pybind11/eigen/matrix.h	/^eigen_array_cast(typename props::Type const &src, handle base = handle(), bool writeable = true)/;"	f	typeref:typename:handle	signature:(typename props::Type const & src,handle base=handle (),bool writeable=true)
eigen_encapsulate	include/pybind11/eigen/matrix.h	/^handle eigen_encapsulate(Type *src) {$/;"	f	typeref:typename:handle	signature:(Type * src)
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride {$/;"	s
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride<Eigen::Map<PlainObjectType, MapOptions, StrideType>> {$/;"	s
eigen_extract_stride	include/pybind11/eigen/matrix.h	/^struct eigen_extract_stride<Eigen::Ref<PlainObjectType, Options, StrideType>> {$/;"	s
eigen_extract_stride::type	include/pybind11/eigen/matrix.h	/^    using type = StrideType;$/;"	t	struct:eigen_extract_stride	typeref:typename:StrideType	access:public
eigen_extract_stride::type	include/pybind11/eigen/matrix.h	/^    using type = Type;$/;"	t	struct:eigen_extract_stride	typeref:typename:Type	access:public
eigen_headers	tests/extra_python_package/test_files.py	/^eigen_headers = {$/;"	v	access:public
eigen_headers	tools/setup_global.py.in	/^eigen_headers = glob.glob("pybind11\/include\/pybind11\/eigen\/*.h")$/;"	v	access:public
eigen_map_caster	include/pybind11/eigen/matrix.h	/^struct eigen_map_caster {$/;"	s
eigen_map_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:eigen_map_caster	typeref:typename:handle	access:public	signature:(const MapType & src,return_value_policy policy,handle parent)
eigen_map_caster::cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = MapType;$/;"	t	struct:eigen_map_caster	typeref:typename:MapType	access:public
eigen_map_caster::load	include/pybind11/eigen/matrix.h	/^    bool load(handle, bool) = delete;$/;"	p	struct:eigen_map_caster	typeref:typename:bool	access:public	signature:(handle,bool)
eigen_map_caster::name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:eigen_map_caster	typeref:typename:auto	access:public
eigen_map_caster::operator MapType	include/pybind11/eigen/matrix.h	/^    operator MapType() = delete;$/;"	p	struct:eigen_map_caster	access:public	signature:()
eigen_map_caster::props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<MapType>;$/;"	t	struct:eigen_map_caster	typeref:typename:EigenProps<MapType>	access:private
eigen_ref_array	include/pybind11/eigen/matrix.h	/^handle eigen_ref_array(Type &src, handle parent = none()) {$/;"	f	typeref:typename:handle	signature:(Type & src,handle parent=none ())
eigen_tensor	tests/test_eigen_tensor.py	/^eigen_tensor = pytest.importorskip("pybind11_tests.eigen_tensor")$/;"	v	access:public
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper {};$/;"	s
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper<$/;"	s
eigen_tensor_helper	include/pybind11/eigen/tensor.h	/^struct eigen_tensor_helper<Eigen::Tensor<Scalar_, NumIndices_, Options_, IndexType>> {$/;"	s
eigen_tensor_helper::Type	include/pybind11/eigen/tensor.h	/^    using Type = Eigen::Tensor<Scalar_, NumIndices_, Options_, IndexType>;$/;"	t	struct:eigen_tensor_helper	typeref:typename:Eigen::Tensor<Scalar_,NumIndices_,Options_,IndexType>	access:public
eigen_tensor_helper::Type	include/pybind11/eigen/tensor.h	/^    using Type = Eigen::TensorFixedSize<Scalar_, Eigen::Sizes<Indices...>, Options_, IndexType>;$/;"	t	struct:eigen_tensor_helper	typeref:typename:Eigen::TensorFixedSize<Scalar_,Eigen::Sizes<Indices...>,Options_,IndexType>	access:public
eigen_tensor_helper::ValidType	include/pybind11/eigen/tensor.h	/^    using ValidType = void;$/;"	t	struct:eigen_tensor_helper	typeref:typename:void	access:public
eigen_tensor_helper::alloc	include/pybind11/eigen/tensor.h	/^    static Type *alloc(Args &&...args) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Type *	access:public	signature:(Args &&...args)
eigen_tensor_helper::dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor = concat(const_name<Indices>()...);$/;"	m	struct:eigen_tensor_helper	typeref:typename:auto	access:public
eigen_tensor_helper::dimensions_descriptor	include/pybind11/eigen/tensor.h	/^    static constexpr auto dimensions_descriptor$/;"	m	struct:eigen_tensor_helper	typeref:typename:auto	access:public
eigen_tensor_helper::free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) { delete tensor; }$/;"	f	struct:eigen_tensor_helper	typeref:typename:void	access:public	signature:(Type * tensor)
eigen_tensor_helper::free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:void	access:public	signature:(Type * tensor)
eigen_tensor_helper::get_shape	include/pybind11/eigen/tensor.h	/^    get_shape(const Type & \/*f*\/) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:(const Type &)
eigen_tensor_helper::get_shape	include/pybind11/eigen/tensor.h	/^    static Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape(const Type &f) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:(const Type & f)
eigen_tensor_helper::get_shape	include/pybind11/eigen/tensor.h	/^    static constexpr Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape() {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:()
eigen_tensor_helper::helper	include/pybind11/eigen/tensor.h	/^    struct helper {};$/;"	s	struct:eigen_tensor_helper	access:public
eigen_tensor_helper::helper	include/pybind11/eigen/tensor.h	/^    struct helper<index_sequence<Is...>> {$/;"	s	struct:eigen_tensor_helper	access:public
eigen_tensor_helper::helper::value	include/pybind11/eigen/tensor.h	/^        static constexpr auto value = concat(const_name(((void) Is, "?"))...);$/;"	m	struct:eigen_tensor_helper::helper	typeref:typename:auto	access:public
eigen_tensor_helper::is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> & \/*shape*\/) /;"	f	struct:eigen_tensor_helper	typeref:typename:bool	access:public	signature:(const Eigen::DSizes<typename Type::Index,Type::NumIndices> &)
eigen_tensor_helper::is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> &shape) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:bool	access:public	signature:(const Eigen::DSizes<typename Type::Index,Type::NumIndices> & shape)
elapsed	docs/benchmark.py	/^        elapsed = (n2 - n1).total_seconds()$/;"	v	access:public
ellipsis	include/pybind11/pytypes.h	/^class ellipsis : public object {$/;"	c	inherits:object
ellipsis::PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(ellipsis, object, detail::PyEllipsis_Check)$/;"	f	class:ellipsis	access:public	signature:(ellipsis,object,detail::PyEllipsis_Check)
elsize	include/pybind11/numpy.h	/^    int elsize;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
embedded_module	include/pybind11/embed.h	/^    embedded_module(const char *name, init_t init) {$/;"	f	struct:embedded_module	access:public	signature:(const char * name,init_t init)
embedded_module	include/pybind11/embed.h	/^struct embedded_module {$/;"	s
embedded_module::embedded_module	include/pybind11/embed.h	/^    embedded_module(const char *name, init_t init) {$/;"	f	struct:embedded_module	access:public	signature:(const char * name,init_t init)
embedded_module::init_t	include/pybind11/embed.h	/^    using init_t = PyObject *(*) ();$/;"	t	struct:embedded_module	access:public
embedding	docs/advanced/embedding.rst	/^.. _embedding:$/;"	T
embedding_modules	docs/advanced/embedding.rst	/^.. _embedding_modules:$/;"	T	chapter:Importing modules
emplace	tests/test_stl.cpp	/^    T &emplace(Args &&...args) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:T &	file:	access:public	signature:(Args &&...args)
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:anyset	typeref:typename:bool	access:public	signature:() const
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:dict	typeref:typename:bool	access:public	signature:() const
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:list	typeref:typename:bool	access:public	signature:() const
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:sequence	typeref:typename:bool	access:public	signature:() const
empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:tuple	typeref:typename:bool	access:public	signature:() const
empty	tests/test_copy_move.cpp	/^struct empty {$/;"	s	file:
empty::get_one	tests/test_copy_move.cpp	/^    static const derived &get_one() { return instance_; }$/;"	f	struct:empty	typeref:typename:const derived &	file:	access:public	signature:()
empty::instance_	tests/test_copy_move.cpp	/^    static derived instance_;$/;"	m	struct:empty	typeref:typename:derived	file:	access:public
empty<lacking_copy_ctor>::instance_	tests/test_copy_move.cpp	/^lacking_copy_ctor empty<lacking_copy_ctor>::instance_ = {};$/;"	m	class:empty<lacking_copy_ctor>	typeref:typename:lacking_copy_ctor
empty<lacking_move_ctor>::instance_	tests/test_copy_move.cpp	/^lacking_move_ctor empty<lacking_move_ctor>::instance_ = {};$/;"	m	class:empty<lacking_move_ctor>	typeref:typename:lacking_move_ctor
enable_buffer_protocol	include/pybind11/detail/class.h	/^inline void enable_buffer_protocol(PyHeapTypeObject *heap_type) {$/;"	f	typeref:typename:void	signature:(PyHeapTypeObject * heap_type)
enable_dynamic_attributes	include/pybind11/detail/class.h	/^inline void enable_dynamic_attributes(PyHeapTypeObject *heap_type) {$/;"	f	typeref:typename:void	signature:(PyHeapTypeObject * heap_type)
enable_dynamic_attributes	include/pybind11/detail/class.h	/^inline void enable_dynamic_attributes(PyHeapTypeObject *heap_type);$/;"	p	typeref:typename:void	signature:(PyHeapTypeObject * heap_type)
enable_enum_members_docstring	include/pybind11/options.h	/^    options &enable_enum_members_docstring() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
enable_function_signatures	include/pybind11/options.h	/^    options &enable_function_signatures() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
enable_if_t	include/pybind11/detail/common.h	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	typeref:typename:std::enable_if<B,T>::type
enable_user_defined_docstrings	include/pybind11/options.h	/^    options &enable_user_defined_docstrings() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:CustomGuard	typeref:typename:bool	file:	access:public
enabled	tests/test_call_policies.cpp	/^    static bool enabled;$/;"	m	struct:DependentGuard	typeref:typename:bool	file:	access:public
enabled	tests/test_call_policies.cpp	/^bool CustomGuard::enabled = false;$/;"	m	class:CustomGuard	typeref:typename:bool
enabled	tests/test_call_policies.cpp	/^bool DependentGuard::enabled = false;$/;"	m	class:DependentGuard	typeref:typename:bool
end	include/pybind11/detail/type_caster_base.h	/^    iterator end() { return iterator(tinfo.size()); }$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:()
end	include/pybind11/pybind11.h	/^    Sentinel end;$/;"	m	struct:iterator_state	typeref:typename:Sentinel	access:public
end	include/pybind11/pytypes.h	/^    detail::dict_iterator end() const { return {}; }$/;"	f	class:dict	typeref:typename:detail::dict_iterator	access:public	signature:() const
end	include/pybind11/pytypes.h	/^    detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }$/;"	f	class:list	typeref:typename:detail::list_iterator	access:public	signature:() const
end	include/pybind11/pytypes.h	/^    detail::sequence_iterator end() const { return {*this, PySequence_Size(m_ptr)}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator	access:public	signature:() const
end	include/pybind11/pytypes.h	/^    detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator	access:public	signature:() const
end	include/pybind11/pytypes.h	/^    iterator end() const;$/;"	p	class:object_api	typeref:typename:iterator	access:public	signature:() const
end	include/pybind11/pytypes.h	/^iterator object_api<D>::end() const {$/;"	f	class:object_api	typeref:typename:iterator	signature:() const
end	tests/test_sequences_and_iterators.cpp	/^        const float *end() const { return m_data + m_size; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:const float *	file:	access:public	signature:() const
end	tests/test_sequences_and_iterators.cpp	/^        const std::pair<int, int> *end() const { return data_.data() + data_.size(); }$/;"	f	class:TEST_SUBMODULE::IntPairs	typeref:typename:const std::pair<int,int> *	file:	access:public	signature:() const
end	tests/test_sequences_and_iterators.cpp	/^        decltype(map.cend()) end() const { return map.cend(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:decltype(map.cend ())	file:	access:public	signature:() const
ensure	include/pybind11/numpy.h	/^    static array ensure(handle h, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(handle h,int ExtraFlags=0)
ensure	include/pybind11/numpy.h	/^    static array_t ensure(handle h) {$/;"	f	class:array_t	typeref:typename:array_t	access:public	signature:(handle h)
ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(handle h) { return reinterpret_borrow<object>(h); }$/;"	f	class:accessor	typeref:typename:object	access:private	signature:(handle h)
ensure_object	include/pybind11/pytypes.h	/^    static object ensure_object(object &&o) { return std::move(o); }$/;"	f	class:accessor	typeref:typename:object	access:private	signature:(object && o)
enter	include/pybind11/iostream.h	/^    void enter() {$/;"	f	class:OstreamRedirect	typeref:typename:void	access:public	signature:()
enum_	include/pybind11/pybind11.h	/^    enum_(const handle &scope, const char *name, const Extra &...extra)$/;"	f	class:enum_	access:public	signature:(const handle & scope,const char * name,const Extra &...extra)
enum_	include/pybind11/pybind11.h	/^class enum_ : public class_<Type> {$/;"	c	inherits:class_<Type>
enum_::Base	include/pybind11/pybind11.h	/^    using Base = class_<Type>;$/;"	t	class:enum_	typeref:typename:class_<Type>	access:public
enum_::Scalar	include/pybind11/pybind11.h	/^    using Scalar = detail::conditional_t<detail::any_of<detail::is_std_char_type<Underlying>,$/;"	t	class:enum_	access:public
enum_::Underlying	include/pybind11/pybind11.h	/^    using Underlying = typename std::underlying_type<Type>::type;$/;"	t	class:enum_	typeref:typename:std::underlying_type<Type>::type	access:public
enum_::enum_	include/pybind11/pybind11.h	/^    enum_(const handle &scope, const char *name, const Extra &...extra)$/;"	f	class:enum_	access:public	signature:(const handle & scope,const char * name,const Extra &...extra)
enum_::export_values	include/pybind11/pybind11.h	/^    enum_ &export_values() {$/;"	f	class:enum_	typeref:typename:enum_ &	access:public	signature:()
enum_::m_base	include/pybind11/pybind11.h	/^    detail::enum_base m_base;$/;"	m	class:enum_	typeref:typename:detail::enum_base	access:private
enum_::value	include/pybind11/pybind11.h	/^    enum_ &value(char const *name, Type value, const char *doc = nullptr) {$/;"	f	class:enum_	typeref:typename:enum_ &	access:public	signature:(char const * name,Type value,const char * doc=nullptr)
enum_base	include/pybind11/pybind11.h	/^    enum_base(const handle &base, const handle &parent) : m_base(base), m_parent(parent) {}$/;"	f	struct:enum_base	access:public	signature:(const handle & base,const handle & parent)
enum_base	include/pybind11/pybind11.h	/^struct enum_base {$/;"	s
enum_base::enum_base	include/pybind11/pybind11.h	/^    enum_base(const handle &base, const handle &parent) : m_base(base), m_parent(parent) {}$/;"	f	struct:enum_base	access:public	signature:(const handle & base,const handle & parent)
enum_base::export_values	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void export_values() {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
enum_base::init	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void init(bool is_arithmetic, bool is_convertible) {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(bool is_arithmetic,bool is_convertible)
enum_base::m_base	include/pybind11/pybind11.h	/^    handle m_base;$/;"	m	struct:enum_base	typeref:typename:handle	access:public
enum_base::m_parent	include/pybind11/pybind11.h	/^    handle m_parent;$/;"	m	struct:enum_base	typeref:typename:handle	access:public
enum_base::value	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void value(char const *name_, object value, const char *doc = nullptr) {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(char const * name_,object value,const char * doc=nullptr)
epub	docs/Makefile	/^epub:$/;"	t
equal	include/pybind11/pytypes.h	/^    bool equal(const dict_readonly &b) const { return pos == b.pos; }$/;"	f	class:dict_readonly	typeref:typename:bool	access:protected	signature:(const dict_readonly & b) const
equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_fast_readonly &b) const { return ptr == b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:bool	access:protected	signature:(const sequence_fast_readonly & b) const
equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_slow_readwrite &b) const { return index == b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:bool	access:protected	signature:(const sequence_slow_readwrite & b) const
equal	include/pybind11/pytypes.h	/^    bool equal(object_api const &other) const { return rich_compare(other, Py_EQ); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer {};$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 1> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 2> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 4> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<false, 8> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 1> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 2> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 4> {$/;"	s
equivalent_integer	include/pybind11/pybind11.h	/^struct equivalent_integer<true, 8> {$/;"	s
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = int16_t;$/;"	t	struct:equivalent_integer	typeref:typename:int16_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = int32_t;$/;"	t	struct:equivalent_integer	typeref:typename:int32_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = int64_t;$/;"	t	struct:equivalent_integer	typeref:typename:int64_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = int8_t;$/;"	t	struct:equivalent_integer	typeref:typename:int8_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = uint16_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint16_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = uint32_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint32_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = uint64_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint64_t	access:public
equivalent_integer::type	include/pybind11/pybind11.h	/^    using type = uint8_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint8_t	access:public
equivalent_integer_t	include/pybind11/pybind11.h	/^using equivalent_integer_t =$/;"	t
error_already_set	include/pybind11/pytypes.h	/^    error_already_set()$/;"	f	class:error_already_set	access:public	signature:()
error_already_set	include/pybind11/pytypes.h	/^class PYBIND11_EXPORT_EXCEPTION error_already_set : public std::exception {$/;"	c	inherits:std::exception
error_already_set::clear	include/pybind11/pytypes.h	/^    void clear() {}$/;"	f	class:error_already_set	typeref:typename:PYBIND11_DEPRECATED ("Use of error_already_set.clear() is deprecated")void	access:public	signature:()
error_already_set::discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(const char *err_context) {$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:(const char * err_context)
error_already_set::discard_as_unraisable	include/pybind11/pytypes.h	/^    void discard_as_unraisable(object err_context) {$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:(object err_context)
error_already_set::error_already_set	include/pybind11/pytypes.h	/^    error_already_set()$/;"	f	class:error_already_set	access:public	signature:()
error_already_set::m_fetched_error	include/pybind11/pytypes.h	/^    std::shared_ptr<detail::error_fetch_and_normalize> m_fetched_error;$/;"	m	class:error_already_set	typeref:typename:std::shared_ptr<detail::error_fetch_and_normalize>	access:private
error_already_set::m_fetched_error_deleter	include/pybind11/pybind11.h	/^error_already_set::m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr) {$/;"	f	class:error_already_set	typeref:typename:void	signature:(detail::error_fetch_and_normalize * raw_ptr)
error_already_set::m_fetched_error_deleter	include/pybind11/pytypes.h	/^    static void m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr);$/;"	p	class:error_already_set	typeref:typename:void	access:private	signature:(detail::error_fetch_and_normalize * raw_ptr)
error_already_set::matches	include/pybind11/pytypes.h	/^    bool matches(handle exc) const { return m_fetched_error->matches(exc); }$/;"	f	class:error_already_set	typeref:typename:bool	access:public	signature:(handle exc) const
error_already_set::restore	include/pybind11/pytypes.h	/^    void restore() { m_fetched_error->restore(); }$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:()
error_already_set::trace	include/pybind11/pytypes.h	/^    const object &trace() const { return m_fetched_error->m_trace; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
error_already_set::type	include/pybind11/pytypes.h	/^    const object &type() const { return m_fetched_error->m_type; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
error_already_set::value	include/pybind11/pytypes.h	/^    const object &value() const { return m_fetched_error->m_value; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
error_already_set::what	include/pybind11/pybind11.h	/^inline const char *error_already_set::what() const noexcept {$/;"	f	class:error_already_set	typeref:typename:const char *	signature:() const
error_already_set::what	include/pybind11/pytypes.h	/^    const char *what() const noexcept override;$/;"	p	class:error_already_set	typeref:typename:const char *	access:public	signature:() const
error_fetch_and_normalize	include/pybind11/pytypes.h	/^    error_fetch_and_normalize(const error_fetch_and_normalize &) = delete;$/;"	p	struct:error_fetch_and_normalize	access:public	signature:(const error_fetch_and_normalize &)
error_fetch_and_normalize	include/pybind11/pytypes.h	/^    error_fetch_and_normalize(error_fetch_and_normalize &&) = delete;$/;"	p	struct:error_fetch_and_normalize	access:public	signature:(error_fetch_and_normalize &&)
error_fetch_and_normalize	include/pybind11/pytypes.h	/^    explicit error_fetch_and_normalize(const char *called) {$/;"	f	struct:error_fetch_and_normalize	access:public	signature:(const char * called)
error_fetch_and_normalize	include/pybind11/pytypes.h	/^struct error_fetch_and_normalize {$/;"	s
error_fetch_and_normalize::error_fetch_and_normalize	include/pybind11/pytypes.h	/^    error_fetch_and_normalize(const error_fetch_and_normalize &) = delete;$/;"	p	struct:error_fetch_and_normalize	access:public	signature:(const error_fetch_and_normalize &)
error_fetch_and_normalize::error_fetch_and_normalize	include/pybind11/pytypes.h	/^    error_fetch_and_normalize(error_fetch_and_normalize &&) = delete;$/;"	p	struct:error_fetch_and_normalize	access:public	signature:(error_fetch_and_normalize &&)
error_fetch_and_normalize::error_fetch_and_normalize	include/pybind11/pytypes.h	/^    explicit error_fetch_and_normalize(const char *called) {$/;"	f	struct:error_fetch_and_normalize	access:public	signature:(const char * called)
error_fetch_and_normalize::error_string	include/pybind11/pytypes.h	/^    std::string const &error_string() const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:std::string const &	access:public	signature:() const
error_fetch_and_normalize::format_value_and_trace	include/pybind11/pytypes.h	/^    std::string format_value_and_trace() const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:std::string	access:public	signature:() const
error_fetch_and_normalize::m_lazy_error_string	include/pybind11/pytypes.h	/^    mutable std::string m_lazy_error_string;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:std::string	access:private
error_fetch_and_normalize::m_lazy_error_string_completed	include/pybind11/pytypes.h	/^    mutable bool m_lazy_error_string_completed = false;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:bool	access:private
error_fetch_and_normalize::m_restore_called	include/pybind11/pytypes.h	/^    mutable bool m_restore_called = false;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:bool	access:private
error_fetch_and_normalize::m_trace	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
error_fetch_and_normalize::m_type	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
error_fetch_and_normalize::m_value	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
error_fetch_and_normalize::matches	include/pybind11/pytypes.h	/^    bool matches(handle exc) const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:bool	access:public	signature:(handle exc) const
error_fetch_and_normalize::restore	include/pybind11/pytypes.h	/^    void restore() {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:void	access:public	signature:()
error_scope	include/pybind11/detail/common.h	/^    error_scope() { PyErr_Fetch(&type, &value, &trace); }$/;"	f	struct:error_scope	access:public	signature:()
error_scope	include/pybind11/detail/common.h	/^    error_scope(const error_scope &) = delete;$/;"	p	struct:error_scope	access:public	signature:(const error_scope &)
error_scope	include/pybind11/detail/common.h	/^struct error_scope {$/;"	s
error_scope::error_scope	include/pybind11/detail/common.h	/^    error_scope() { PyErr_Fetch(&type, &value, &trace); }$/;"	f	struct:error_scope	access:public	signature:()
error_scope::error_scope	include/pybind11/detail/common.h	/^    error_scope(const error_scope &) = delete;$/;"	p	struct:error_scope	access:public	signature:(const error_scope &)
error_scope::operator =	include/pybind11/detail/common.h	/^    error_scope &operator=(const error_scope &) = delete;$/;"	p	struct:error_scope	typeref:typename:error_scope &	access:public	signature:(const error_scope &)
error_scope::trace	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
error_scope::type	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
error_scope::value	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
error_scope::~error_scope	include/pybind11/detail/common.h	/^    ~error_scope() { PyErr_Restore(type, value, trace); }$/;"	f	struct:error_scope	access:public	signature:()
error_string	include/pybind11/detail/class.h	/^std::string error_string();$/;"	p	typeref:typename:std::string	signature:()
error_string	include/pybind11/pytypes.h	/^    std::string const &error_string() const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:std::string const &	access:public	signature:() const
error_string	include/pybind11/pytypes.h	/^inline std::string error_string() {$/;"	f	typeref:typename:std::string	signature:()
error_string	include/pybind11/pytypes.h	/^std::string error_string();$/;"	p	typeref:typename:std::string	signature:()
eval	docs/advanced/pycpp/utilities.rst	/^.. _eval:$/;"	T	chapter:Capturing standard output from ostream
eval	include/pybind11/eval.h	/^object eval(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f	typeref:typename:object	signature:(const char (& s)[N],object global=globals (),object local=object ())
eval	include/pybind11/eval.h	/^object eval(const str &expr, object global = globals(), object local = object()) {$/;"	f	typeref:typename:object	signature:(const str & expr,object global=globals (),object local=object ())
eval_expr	include/pybind11/eval.h	/^    eval_expr,$/;"	e	enum:eval_mode	access:public
eval_file	include/pybind11/eval.h	/^object eval_file(str fname, object global = globals(), object local = object()) {$/;"	f	typeref:typename:object	signature:(str fname,object global=globals (),object local=object ())
eval_file	include/pybind11/eval.h	/^object eval_file(str) {$/;"	f	typeref:typename:object	signature:(str)
eval_file	include/pybind11/eval.h	/^object eval_file(str, object) {$/;"	f	typeref:typename:object	signature:(str,object)
eval_file	include/pybind11/eval.h	/^object eval_file(str, object, object) {$/;"	f	typeref:typename:object	signature:(str,object,object)
eval_mode	include/pybind11/eval.h	/^enum eval_mode {$/;"	g
eval_single_statement	include/pybind11/eval.h	/^    eval_single_statement,$/;"	e	enum:eval_mode	access:public
eval_statements	include/pybind11/eval.h	/^    eval_statements$/;"	e	enum:eval_mode	access:public
event_loop	tests/test_async.py	/^def event_loop():$/;"	f	access:public	signature:()
exactly_one	include/pybind11/detail/common.h	/^struct exactly_one {$/;"	s
exactly_one	include/pybind11/detail/common.h	/^struct exactly_one<P, Default> {$/;"	s
exactly_one::found	include/pybind11/detail/common.h	/^    static constexpr auto found = constexpr_sum(Predicate<Ts>::value...);$/;"	m	struct:exactly_one	typeref:typename:auto	access:public
exactly_one::index	include/pybind11/detail/common.h	/^    static constexpr auto index = found ? constexpr_first<Predicate, Ts...>() : 0;$/;"	m	struct:exactly_one	typeref:typename:auto	access:public
exactly_one::type	include/pybind11/detail/common.h	/^    using type = Default;$/;"	t	struct:exactly_one	typeref:typename:Default	access:public
exactly_one::type	include/pybind11/detail/common.h	/^    using type = conditional_t<found, typename pack_element<index, Ts...>::type, Default>;$/;"	t	struct:exactly_one	typeref:typename:conditional_t<found,typename pack_element<index,Ts...>::type,Default>	access:public
exactly_one_t	include/pybind11/detail/common.h	/^using exactly_one_t = typename exactly_one<Predicate, Default, Ts...>::type;$/;"	t	typeref:typename:exactly_one<Predicate,Default,Ts...>::type
exception	include/pybind11/pybind11.h	/^    exception() = default;$/;"	p	class:exception	access:public	signature:()
exception	include/pybind11/pybind11.h	/^    exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f	class:exception	access:public	signature:(handle scope,const char * name,handle base=PyExc_Exception)
exception	include/pybind11/pybind11.h	/^class exception : public object {$/;"	c	inherits:object
exception::exception	include/pybind11/pybind11.h	/^    exception() = default;$/;"	p	class:exception	access:public	signature:()
exception::exception	include/pybind11/pybind11.h	/^    exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f	class:exception	access:public	signature:(handle scope,const char * name,handle base=PyExc_Exception)
exception::operator ()	include/pybind11/pybind11.h	/^    void operator()(const char *message) { PyErr_SetString(m_ptr, message); }$/;"	f	class:exception	typeref:typename:void	access:public	signature:(const char * message)
excitement	tests/test_tagbased_polymorphic.cpp	/^    int excitement;$/;"	m	struct:Labrador	typeref:typename:int	file:	access:public
exclude_from_all	tools/pybind11Tools.cmake	/^    set(exclude_from_all "")$/;"	v	function:pybind11_add_module
exclude_from_all	tools/pybind11Tools.cmake	/^    set(exclude_from_all EXCLUDE_FROM_ALL)$/;"	v	function:pybind11_add_module
exclude_patterns	docs/conf.py	/^exclude_patterns = [".build", "release.rst"]$/;"	v	access:public
exec	include/pybind11/eval.h	/^inline void exec(const str &expr, object global = globals(), object local = object()) {$/;"	f	typeref:typename:void	signature:(const str & expr,object global=globals (),object local=object ())
exec	include/pybind11/eval.h	/^void exec(const char (&s)[N], object global = globals(), object local = object()) {$/;"	f	typeref:typename:void	signature:(const char (& s)[N],object global=globals (),object local=object ())
execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:alias_constructor	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
execute	include/pybind11/detail/init.h	/^    static void execute(Class &cl, const Extra &...extra) {$/;"	f	struct:constructor	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:factory	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:pickle_factory	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
execute	include/pybind11/operators.h	/^    void execute(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra) const
execute_cast	include/pybind11/operators.h	/^    void execute_cast(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra) const
exercise_is_setter	tests/test_methods_and_attributes.cpp	/^namespace exercise_is_setter {$/;"	n	namespace:pybind11_tests	file:
exercise_trampoline	tests/test_pickling.cpp	/^namespace exercise_trampoline {$/;"	n	file:
exercise_trampoline::SimpleBase	tests/test_pickling.cpp	/^struct SimpleBase {$/;"	s	namespace:exercise_trampoline	file:
exercise_trampoline::SimpleBase::SimpleBase	tests/test_pickling.cpp	/^    SimpleBase() = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:()
exercise_trampoline::SimpleBase::SimpleBase	tests/test_pickling.cpp	/^    SimpleBase(const SimpleBase &) = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:(const SimpleBase &)
exercise_trampoline::SimpleBase::num	tests/test_pickling.cpp	/^    int num = 0;$/;"	m	struct:exercise_trampoline::SimpleBase	typeref:typename:int	file:	access:public
exercise_trampoline::SimpleBase::~SimpleBase	tests/test_pickling.cpp	/^    virtual ~SimpleBase() = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:()
exercise_trampoline::SimpleBaseTrampoline	tests/test_pickling.cpp	/^struct SimpleBaseTrampoline : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:	inherits:SimpleBase
exercise_trampoline::SimpleCppDerived	tests/test_pickling.cpp	/^struct SimpleCppDerived : SimpleBase {};$/;"	s	namespace:exercise_trampoline	file:	inherits:SimpleBase
exercise_trampoline::wrap	tests/test_pickling.cpp	/^void wrap(py::module m) {$/;"	f	namespace:exercise_trampoline	typeref:typename:void	signature:(py::module m)
exit	include/pybind11/iostream.h	/^    void exit() {$/;"	f	class:OstreamRedirect	typeref:typename:void	access:public	signature:()
exp_opt_int	tests/test_stl.cpp	/^    using exp_opt_int = std::experimental::optional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::experimental::optional<int>	file:
exp_opt_no_assign	tests/test_stl.cpp	/^    using exp_opt_no_assign = std::experimental::optional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::experimental::optional<NoAssign>	file:
exp_version_hex	setup.py	/^exp_version_hex = build_expected_version_hex(matches)$/;"	v	access:public
expand_side_effects	include/pybind11/detail/common.h	/^using expand_side_effects = bool[];$/;"	t	typeref:typename:bool[]
expander	include/pybind11/attr.h	/^        using expander = int[];$/;"	t	function:process_attributes::init	typeref:typename:int[]
expander	include/pybind11/attr.h	/^        using expander = int[];$/;"	t	function:process_attributes::postcall	typeref:typename:int[]
expander	include/pybind11/attr.h	/^        using expander = int[];$/;"	t	function:process_attributes::precall	typeref:typename:int[]
expander	include/pybind11/cast.h	/^        using expander = int[];$/;"	t	function:unpacking_collector::unpacking_collector	typeref:typename:int[]
expected_num_args	include/pybind11/attr.h	/^constexpr bool expected_num_args(size_t nargs, bool has_args, bool has_kwargs) {$/;"	f	typeref:typename:bool	signature:(size_t nargs,bool has_args,bool has_kwargs)
export_values	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void export_values() {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
export_values	include/pybind11/pybind11.h	/^    enum_ &export_values() {$/;"	f	class:enum_	typeref:typename:enum_ &	access:public	signature:()
extended_aliases	docs/advanced/classes.rst	/^.. _extended_aliases:$/;"	T	chapter:Combining virtual functions and inheritance
extended_class_functionality_forced_trampoline	docs/advanced/classes.rst	/^.. _extended_class_functionality_forced_trampoline:$/;"	T	chapter:Extended trampoline class functionality
extensions	docs/conf.py	/^extensions = [$/;"	v	access:public
extent	include/pybind11/numpy.h	/^    static constexpr size_t extent = N;$/;"	m	struct:array_info	typeref:typename:size_t	access:public
extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name("");$/;"	m	struct:array_info_scalar	typeref:typename:auto	access:public
extents	include/pybind11/numpy.h	/^    static constexpr auto extents = const_name<array_info<T>::is_array>($/;"	m	struct:array_info	typeref:typename:auto	access:public
external	tests/test_pytypes.cpp	/^namespace external {$/;"	n	file:
external::detail	tests/test_pytypes.cpp	/^namespace detail {$/;"	n	namespace:external	file:
external::detail::check	tests/test_pytypes.cpp	/^bool check(PyObject *o) { return PyFloat_Check(o) != 0; }$/;"	f	namespace:external::detail	typeref:typename:bool	signature:(PyObject * o)
external::detail::conv	tests/test_pytypes.cpp	/^PyObject *conv(PyObject *o) {$/;"	f	namespace:external::detail	typeref:typename:PyObject *	signature:(PyObject * o)
external::detail::default_constructed	tests/test_pytypes.cpp	/^PyObject *default_constructed() { return PyFloat_FromDouble(0.0); }$/;"	f	namespace:external::detail	typeref:typename:PyObject *	signature:()
external::float_	tests/test_pytypes.cpp	/^class float_ : public py::object {$/;"	c	namespace:external	file:	inherits:py::object
external::float_::PYBIND11_OBJECT_CVT	tests/test_pytypes.cpp	/^    PYBIND11_OBJECT_CVT(float_, py::object, external::detail::check, external::detail::conv)$/;"	f	class:external::float_	file:	access:private	signature:(float_,py::object,external::detail::check,external::detail::conv)
external::float_::get_value	tests/test_pytypes.cpp	/^    double get_value() const { return PyFloat_AsDouble(this->ptr()); }$/;"	f	class:external::float_	typeref:typename:double	file:	access:private	signature:() const
extra	tests/test_pickling.cpp	/^        int extra;$/;"	m	class:TEST_SUBMODULE::PickleableWithDict	typeref:typename:int	file:	access:public
extra1	tests/test_pickling.cpp	/^        int extra1() const { return m_extra1; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:public	signature:() const
extra2	tests/test_pickling.cpp	/^        int extra2() const { return m_extra2; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:public	signature:() const
extra_cmd	setup.py	/^extra_cmd = 'cmdclass["sdist"] = SDist\\n'$/;"	v	access:public
extract_guard_t	include/pybind11/attr.h	/^using extract_guard_t = typename exactly_one_t<is_call_guard, call_guard<>, Extra...>::type;$/;"	t	typeref:typename:exactly_one_t<is_call_guard,call_guard<>,Extra...>::type
extras	docs/reference.rst	/^.. _extras:$/;"	T	chapter:Convenience functions converting to Python types
f	include/pybind11/functional.h	/^                            function_type f;$/;"	m	struct:type_caster::load::capture	typeref:typename:function_type	access:public
f	include/pybind11/functional.h	/^            function f;$/;"	m	struct:type_caster::load::func_handle	typeref:typename:function	access:public
f	include/pybind11/numpy.h	/^    remove_reference_t<Func> f;$/;"	m	struct:vectorize_helper	typeref:typename:remove_reference_t<Func>	access:private
f	include/pybind11/pybind11.h	/^            remove_reference_t<Func> f;$/;"	m	struct:cpp_function::initialize::capture	typeref:typename:remove_reference_t<Func>	access:public
f	tests/pybind11_tests.h	/^    float f;$/;"	m	union:IntFloat	typeref:typename:float	access:public
f	tests/test_callbacks.py	/^    def f(*args, **kwargs):$/;"	f	function:test_keyword_args_and_generalized_unpacking	file:	access:private	signature:(*args, **kwargs)
f	tests/test_custom_type_casters.cpp	/^        ArgInspector1 f(ArgInspector1 a, ArgAlwaysConverts) { return a; }$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:ArgInspector1	file:	access:public	signature:(ArgInspector1 a,ArgAlwaysConverts)
f	tests/test_multiple_inheritance.cpp	/^        int f = 6;$/;"	m	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public
f	tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A.f()"); }$/;"	f	struct:TEST_SUBMODULE::A	typeref:typename:void	file:	access:public	signature:()
f	tests/test_virtual_functions.cpp	/^        virtual void f() { py::print("A2.f()"); }$/;"	f	struct:TEST_SUBMODULE::A2	typeref:typename:void	file:	access:public	signature:()
f	tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA	typeref:typename:void	file:	access:public	signature:()
f	tests/test_virtual_functions.cpp	/^        void f() override {$/;"	f	struct:TEST_SUBMODULE::PyA2	typeref:typename:void	file:	access:public	signature:()
f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization1.B	access:public	signature:(self)
f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization2.B2	access:public	signature:(self)
f1	tests/test_constants_and_functions.cpp	/^int f1(int x) noexcept(true) { return x + 1; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
f2	tests/test_constants_and_functions.cpp	/^int f2(int x) noexcept(true) { return x + 2; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
f3	tests/test_constants_and_functions.cpp	/^int f3(int x) noexcept(false) { return x + 3; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
f4	tests/test_constants_and_functions.cpp	/^int f4(int x) throw() { return x + 4; } \/\/ Deprecated equivalent to noexcept(true)$/;"	f	namespace:test_exc_sp	signature:(int x)
f_	tests/test_embed/test_interpreter.cpp	/^    std::function<void()> f_;$/;"	m	struct:scope_exit	typeref:typename:std::function<void ()>	file:	access:public
f_strides	include/pybind11/buffer_info.h	/^inline std::vector<ssize_t> f_strides(const std::vector<ssize_t> &shape, ssize_t itemsize) {$/;"	f	typeref:typename:std::vector<ssize_t>	signature:(const std::vector<ssize_t> & shape,ssize_t itemsize)
f_style	include/pybind11/numpy.h	/^        f_style = detail::npy_api::NPY_ARRAY_F_CONTIGUOUS_,$/;"	e	enum:array::__anon91d3b2de0203	access:public
f_trivial	include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial	access:public
factory	include/pybind11/detail/init.h	/^    factory(CFunc &&c, AFunc &&a)$/;"	f	struct:factory	access:public	signature:(CFunc && c,AFunc && a)
factory	include/pybind11/detail/init.h	/^    factory(Func &&f) : class_factory(std::forward<Func>(f)) {}$/;"	f	struct:factory	access:public	signature:(Func && f)
factory	include/pybind11/detail/init.h	/^struct factory<CFunc, AFunc, CReturn(CArgs...), AReturn(AArgs...)> {$/;"	s
factory	include/pybind11/detail/init.h	/^struct factory<Func, void_type (*)(), Return(Args...)> {$/;"	s
factory::alias_factory	include/pybind11/detail/init.h	/^    remove_reference_t<AFunc> alias_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<AFunc>	access:public
factory::class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<CFunc> class_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<CFunc>	access:public
factory::class_factory	include/pybind11/detail/init.h	/^    remove_reference_t<Func> class_factory;$/;"	m	struct:factory	typeref:typename:remove_reference_t<Func>	access:public
factory::execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:factory	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
factory::factory	include/pybind11/detail/init.h	/^    factory(CFunc &&c, AFunc &&a)$/;"	f	struct:factory	access:public	signature:(CFunc && c,AFunc && a)
factory::factory	include/pybind11/detail/init.h	/^    factory(Func &&f) : class_factory(std::forward<Func>(f)) {}$/;"	f	struct:factory	access:public	signature:(Func && f)
fail_dim_check	include/pybind11/numpy.h	/^    void fail_dim_check(ssize_t dim, const std::string &msg) const {$/;"	f	class:array	typeref:typename:void	access:protected	signature:(ssize_t dim,const std::string & msg) const
faq:hidden_visibility	docs/faq.rst	/^.. _`faq:hidden_visibility`:$/;"	T	chapter:"recursive template instantiation exceeded maximum depth of 256"
faq:symhidden	docs/faq.rst	/^.. _`faq:symhidden`:$/;"	T	chapter:"'SomeClass' declared with greater visibility than the type of its field 'SomeClass::member' [-Wattributes]"
faq_reference_arguments	docs/faq.rst	/^.. _faq_reference_arguments:$/;"	T	chapter:The Python interpreter immediately crashes when importing my module
fcommand	setup.py	/^            fcommand = [$/;"	v	access:public
field1	tests/test_class.cpp	/^        int field1;$/;"	m	struct:TEST_SUBMODULE::BraceInitialization	typeref:typename:int	file:	access:public
field2	tests/test_class.cpp	/^        std::string field2;$/;"	m	struct:TEST_SUBMODULE::BraceInitialization	typeref:typename:std::string	file:	access:public
field_descr	include/pybind11/numpy.h	/^            field_descr(pybind11::str &&name, object &&format, pybind11::int_ &&offset)$/;"	f	struct:dtype::strip_padding::field_descr	access:public	signature:(pybind11::str && name,object && format,pybind11::int_ && offset)
field_descr	include/pybind11/numpy.h	/^        struct field_descr {$/;"	s	function:dtype::strip_padding
field_descriptor	include/pybind11/numpy.h	/^struct field_descriptor {$/;"	s
field_descriptor::descr	include/pybind11/numpy.h	/^    dtype descr;$/;"	m	struct:field_descriptor	typeref:typename:dtype	access:public
field_descriptor::format	include/pybind11/numpy.h	/^    std::string format;$/;"	m	struct:field_descriptor	typeref:typename:std::string	access:public
field_descriptor::name	include/pybind11/numpy.h	/^    const char *name;$/;"	m	struct:field_descriptor	typeref:typename:const char *	access:public
field_descriptor::offset	include/pybind11/numpy.h	/^    ssize_t offset;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t	access:public
field_descriptor::size	include/pybind11/numpy.h	/^    ssize_t size;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t	access:public
fields	include/pybind11/numpy.h	/^    PyObject *fields;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *	access:public
file	.github/matchers/pylint.json	/^          "file": 1,$/;"	n	object:problemMatcher.0.pattern.0
file	.github/matchers/pylint.json	/^          "file": 1,$/;"	n	object:problemMatcher.1.pattern.0
filterwarnings	tests/pytest.ini	/^filterwarnings =$/;"	k	section:pytest
finalize_interpreter	include/pybind11/embed.h	/^inline void finalize_interpreter() {$/;"	f	typeref:typename:void	signature:()
finalize_interpreter	tests/test_embed/test_interpreter.cpp	/^    py::finalize_interpreter();$/;"	p	class:py	file:	signature:()
find	include/pybind11/detail/type_caster_base.h	/^    iterator find(const type_info *find_type) {$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:(const type_info * find_type)
find-python-mode	docs/compiling.rst	/^.. _find-python-mode:$/;"	T	section:find_package vs. add_subdirectory
find_package vs. add_subdirectory	docs/compiling.rst	/^find_package vs. add_subdirectory$/;"	s	chapter:Building with CMake
find_registered_python_instance	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle find_registered_python_instance(void *src,$/;"	f	typeref:typename:PYBIND11_NOINLINE handle	signature:(void * src,const detail::type_info * tinfo)
first	include/pybind11/detail/common.h	/^constexpr int first(int i, T v, Ts... vs) {$/;"	f	typeref:typename:int	signature:(int i,T v,Ts...vs)
first_arg_kw_only	tests/test_kwargs_and_defaults.cpp	/^    struct first_arg_kw_only {};$/;"	s	function:TEST_SUBMODULE	file:
first_or_done	include/pybind11/pybind11.h	/^    bool first_or_done;$/;"	m	struct:iterator_state	typeref:typename:bool	access:public
fixed	include/pybind11/eigen/matrix.h	/^                          fixed = size != Eigen::Dynamic, \/\/ Fully-fixed size$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
fixed_cols	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
fixed_rows	include/pybind11/eigen/matrix.h	/^        fixed_rows = rows != Eigen::Dynamic, fixed_cols = cols != Eigen::Dynamic,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
flag	include/pybind11/pybind11.h	/^        bool &flag;$/;"	m	struct:implicitly_convertible::set_flag	typeref:typename:bool &	access:public
flag_noconvert	include/pybind11/cast.h	/^    bool flag_noconvert : 1; \/\/\/< If set, do not allow conversion (requires a supporting type$/;"	m	struct:arg	typeref:typename:bool:1	access:public
flag_none	include/pybind11/cast.h	/^    bool flag_none : 1;      \/\/\/< If set (the default), allow None to be passed to this argum/;"	m	struct:arg	typeref:typename:bool:1	access:public
flags	include/pybind11/numpy.h	/^    char flags() const { return detail::array_descriptor_proxy(m_ptr)->flags; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
flags	include/pybind11/numpy.h	/^    char flags;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
flags	include/pybind11/numpy.h	/^    int flags() const { return detail::array_proxy(m_ptr)->flags; }$/;"	f	class:array	typeref:typename:int	access:public	signature:() const
flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyArray_Proxy	typeref:typename:int	access:public
flags	include/pybind11/numpy.h	/^    int flags;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:int	access:public
float_	include/pybind11/pytypes.h	/^    float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_	access:public	signature:(double value=.0)
float_	include/pybind11/pytypes.h	/^class float_ : public object {$/;"	c	inherits:object
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:PartialStruct	typeref:typename:float	file:	access:public
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStruct	typeref:typename:float	file:	access:public
float_	tests/test_numpy_dtypes.cpp	/^    float float_;$/;"	m	struct:SimpleStructReordered	typeref:typename:float	file:	access:public
float_	tests/test_pytypes.cpp	/^class float_ : public py::object {$/;"	c	namespace:external	file:	inherits:py::object
float_::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(float_, object, PyFloat_Check, PyNumber_Float)$/;"	f	class:float_	access:public	signature:(float_,object,PyFloat_Check,PyNumber_Float)
float_::float_	include/pybind11/pytypes.h	/^    float_(double value = .0) : object(PyFloat_FromDouble((double) value), stolen_t{}) {$/;"	f	class:float_	access:public	signature:(double value=.0)
float_::operator double	include/pybind11/pytypes.h	/^    operator double() const { return (double) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_	access:public	signature:() const
float_::operator float	include/pybind11/pytypes.h	/^    operator float() const { return (float) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_	access:public	signature:() const
fn_type	tests/test_callbacks.cpp	/^        using fn_type = int (*)(int);$/;"	t	function:TEST_SUBMODULE::__anone4fbb0f71702	file:
foo	tests/test_class.cpp	/^        int foo() const override { PYBIND11_OVERRIDE(int, ProtectedB, foo, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:int	file:	access:public	signature:() const
foo	tests/test_class.cpp	/^        int foo() const { return value; }$/;"	f	class:TEST_SUBMODULE::ProtectedA	typeref:typename:int	file:	access:protected	signature:() const
foo	tests/test_class.cpp	/^        virtual int foo() const { return value; }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:int	file:	access:protected	signature:() const
foo	tests/test_class.py	/^        def foo(self):$/;"	m	class:test_bind_protected_functions.C	access:public	signature:(self)
foo	tests/test_kwargs_and_defaults.cpp	/^        void foo(int, float) {}$/;"	f	struct:TEST_SUBMODULE::KWClass	typeref:typename:void	file:	access:public	signature:(int,float)
foo	tests/test_multiple_inheritance.cpp	/^        int foo() const { return i; }$/;"	f	struct:TEST_SUBMODULE::Base1	typeref:typename:int	file:	access:public	signature:() const
foo	tests/test_multiple_inheritance.cpp	/^    int foo() const { return i; }$/;"	f	struct:__anon9ca8d76c0111::Base1a	typeref:typename:int	file:	access:public	signature:() const
foo	tests/test_multiple_inheritance.py	/^        def foo(self):$/;"	m	class:test_multiple_inheritance_mix1.Base1	access:public	signature:(self)
forcecast	include/pybind11/numpy.h	/^        forcecast = detail::npy_api::NPY_ARRAY_FORCECAST_$/;"	e	enum:array::__anon91d3b2de0203	access:public
format	include/pybind11/buffer_info.h	/^    std::string format;           \/\/ For homogeneous buffers, this should be set to$/;"	m	struct:buffer_info	typeref:typename:std::string	access:public
format	include/pybind11/complex.h	/^    static std::string format() { return std::string(value); }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format	include/pybind11/detail/common.h	/^    static std::string format() { return std::string(1, c); }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format	include/pybind11/numpy.h	/^            object format;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:object	access:public
format	include/pybind11/numpy.h	/^    static std::string format() { return std::to_string(N) + 's'; }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format	include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format	include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:npy_format_descriptor	typeref:typename:std::string	access:public	signature:()
format	include/pybind11/numpy.h	/^    std::string format;$/;"	m	struct:field_descriptor	typeref:typename:std::string	access:public
format	include/pybind11/pytypes.h	/^    str format(Args &&...args) const {$/;"	f	class:str	typeref:typename:str	access:public	signature:(Args &&...args) const
format_descriptor	include/pybind11/complex.h	/^struct format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor {};$/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor<$/;"	s
format_descriptor	include/pybind11/detail/common.h	/^struct format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
format_descriptor	include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<detail::array_info<T>::is_array>> {$/;"	s
format_descriptor	include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<detail::is_pod_struct<T>::value>> {$/;"	s
format_descriptor	include/pybind11/numpy.h	/^struct format_descriptor<T, detail::enable_if_t<std::is_enum<T>::value>> {$/;"	s
format_descriptor	include/pybind11/numpy.h	/^struct format_descriptor<char[N]> {$/;"	s
format_descriptor	include/pybind11/numpy.h	/^struct format_descriptor<std::array<char, N>> {$/;"	s
format_descriptor::c	include/pybind11/complex.h	/^    static constexpr const char c = format_descriptor<T>::c;$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
format_descriptor::c	include/pybind11/detail/common.h	/^    static constexpr const char c = "?bBhHiIqQfdg"[detail::is_fmt_numeric<T>::index];$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
format_descriptor::c	include/pybind11/detail/common.h	/^    static constexpr const char c = 'O';$/;"	m	struct:format_descriptor	typeref:typename:const char	access:public
format_descriptor::format	include/pybind11/complex.h	/^    static std::string format() { return std::string(value); }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format_descriptor::format	include/pybind11/detail/common.h	/^    static std::string format() { return std::string(1, c); }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format_descriptor::format	include/pybind11/numpy.h	/^    static std::string format() { return std::to_string(N) + 's'; }$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format_descriptor::format	include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:format_descriptor	typeref:typename:std::string	access:public	signature:()
format_descriptor::value	include/pybind11/complex.h	/^    static constexpr const char value[3] = {'Z', c, '\\0'};$/;"	m	struct:format_descriptor	typeref:typename:const char[3]	access:public
format_descriptor::value	include/pybind11/detail/common.h	/^    static constexpr const char value[2] = {c, '\\0'};$/;"	m	struct:format_descriptor	typeref:typename:const char[2]	access:public
format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value	include/pybind11/detail/common.h	/^    format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value[2];$/;"	m	class:format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>	typeref:typename:const char[2]
format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>::value	include/pybind11/complex.h	/^                      detail::enable_if_t<std::is_floating_point<T>::value>>::value[3];$/;"	m	class:format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>	typeref:typename:const char[3]
format_ptrs	tests/constructor_stats.h	/^auto format_ptrs(T &&x) -> decltype(std::forward<T>(x)) {$/;"	f	typeref:typename:decltype(std::forward<T> (x))	signature:(T && x)
format_ptrs	tests/constructor_stats.h	/^inline const char *format_ptrs(const char *p) { return p; }$/;"	f	typeref:typename:const char *	signature:(const char * p)
format_ptrs	tests/constructor_stats.h	/^py::str format_ptrs(T *p) {$/;"	f	typeref:typename:py::str	signature:(T * p)
format_str	include/pybind11/numpy.h	/^    std::string format_str;$/;"	m	struct:numpy_type_info	typeref:typename:std::string	access:public
format_value_and_trace	include/pybind11/pytypes.h	/^    std::string format_value_and_trace() const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:std::string	access:public	signature:() const
forward_like	include/pybind11/stl.h	/^constexpr forwarded_type<T, U> forward_like(U &&u) {$/;"	f	typeref:typename:forwarded_type<T,U>	signature:(U && u)
forwarded_type	include/pybind11/stl.h	/^using forwarded_type = conditional_t<std::is_lvalue_reference<T>::value,$/;"	t	typeref:typename:conditional_t<std::is_lvalue_reference<T>::value,remove_reference_t<U> &,remove_reference_t<U> &&>
found	include/pybind11/detail/common.h	/^    static constexpr auto found = constexpr_sum(Predicate<Ts>::value...);$/;"	m	struct:exactly_one	typeref:typename:auto	access:public
free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) { delete tensor; }$/;"	f	struct:eigen_tensor_helper	typeref:typename:void	access:public	signature:(Type * tensor)
free	include/pybind11/eigen/tensor.h	/^    static void free(Type *tensor) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:void	access:public	signature:(Type * tensor)
free	tests/test_embed/test_interpreter.cpp	/^        std::free(argv[0]);$/;"	p	class:std	file:	signature:(argv[0])
free	tests/test_embed/test_interpreter.cpp	/^        std::free(argv[1]);$/;"	p	class:std	file:	signature:(argv[1])
free_data	include/pybind11/attr.h	/^    void (*free_data)(function_record *ptr) = nullptr;$/;"	m	struct:function_record	typeref:typename:void (*)(function_record * ptr)	access:public
from_args	include/pybind11/numpy.h	/^    static dtype from_args(const object &args) {$/;"	f	class:dtype	typeref:typename:dtype	access:public	signature:(const object & args)
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(T *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(T * ptr,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly=false)
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const T *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const T * ptr,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides)
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const void *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides)
from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(void *ptr,$/;"	p	class:memoryview	typeref:typename:memoryview	access:public	signature:(void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly=false)
from_buffer	include/pybind11/pytypes.h	/^inline memoryview memoryview::from_buffer(void *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	signature:(void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly)
from_const	tests/test_pytypes.cpp	/^bool from_const() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:bool	signature:()
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(const void *mem, ssize_t size) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const void * mem,ssize_t size)
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(std::string_view mem) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(std::string_view mem)
from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(void *mem, ssize_t size, bool readonly = false) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(void * mem,ssize_t size,bool readonly=false)
from_ncnst	tests/test_pytypes.cpp	/^bool from_ncnst() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:bool	signature:()
frozenset	include/pybind11/pytypes.h	/^class frozenset : public anyset {$/;"	c	inherits:anyset
func	include/pybind11/cast.h	/^    const function_record &func;$/;"	m	struct:function_call	typeref:typename:const function_record &	access:public
func	include/pybind11/pybind11.h	/^            Func func;$/;"	m	struct:class_::def_buffer::capture	typeref:typename:Func	access:public
func	tests/test_callbacks.cpp	/^        virtual unsigned int func() = 0;$/;"	p	class:TEST_SUBMODULE::AbstractBase	typeref:typename:unsigned int	file:	access:public	signature:()
func	tests/test_embed/test_interpreter.cpp	/^    int func() override { PYBIND11_OVERRIDE(int, test_override_cache_helper, func); }$/;"	f	class:test_override_cache_helper_trampoline	typeref:typename:int	file:	access:private	signature:()
func	tests/test_embed/test_interpreter.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper	typeref:typename:int	file:	access:public	signature:()
func	tests/test_embed/test_trampoline.py	/^        def func(self):$/;"	m	class:func.Test	access:public	signature:(self)
func	tests/test_embed/test_trampoline.py	/^def func():$/;"	f	access:public	signature:()
func	tests/test_pytypes.py	/^        def func(self, x, *args):$/;"	m	class:test_accessors.TestObject	access:public	signature:(self, x, *args)
func	tests/test_virtual_functions.cpp	/^    int func() override { PYBIND11_OVERRIDE(int, test_override_cache_helper, func); }$/;"	f	class:test_override_cache_helper_trampoline	typeref:typename:int	file:	access:private	signature:()
func	tests/test_virtual_functions.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper	typeref:typename:int	file:	access:public	signature:()
func	tests/test_virtual_functions.py	/^            def func(self):$/;"	m	class:test_python_override.func.Test	access:public	signature:(self)
func	tests/test_virtual_functions.py	/^    def func():$/;"	f	function:test_python_override	file:	access:private	signature:()
func.Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func	file:	inherits:trampoline_module.test_override_cache_helper	access:private
func.Test.func	tests/test_embed/test_trampoline.py	/^        def func(self):$/;"	m	class:func.Test	access:public	signature:(self)
func1	tests/test_callbacks.py	/^    def func1():$/;"	f	function:test_callbacks	file:	access:private	signature:()
func1	tests/test_methods_and_attributes.cpp	/^    std::size_t func1(std::string &&s) { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s)
func2	tests/test_callbacks.py	/^    def func2(a, b, c, d):$/;"	f	function:test_callbacks	file:	access:private	signature:(a, b, c, d)
func2	tests/test_embed/test_trampoline.py	/^def func2():$/;"	f	access:public	signature:()
func2	tests/test_methods_and_attributes.cpp	/^    std::size_t func2(std::string &&s) const { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s) const
func2	tests/test_virtual_functions.py	/^    def func2():$/;"	f	function:test_python_override	file:	access:private	signature:()
func2.Test	tests/test_embed/test_trampoline.py	/^    class Test(trampoline_module.test_override_cache_helper):$/;"	c	function:func2	file:	inherits:trampoline_module.test_override_cache_helper	access:private
func3	tests/test_callbacks.py	/^    def func3(a):$/;"	f	function:test_callbacks	file:	access:private	signature:(a)
func3	tests/test_methods_and_attributes.cpp	/^    std::size_t func3(std::string &&s) & { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s)
func4	tests/test_methods_and_attributes.cpp	/^    std::size_t func4(std::string &&s) const & { return s.size(); }$/;"	f	struct:RValueRefParam	typeref:typename:std::size_t	file:	access:public	signature:(std::string && s) const
func_handle	include/pybind11/functional.h	/^                func_handle(function &&f_) noexcept$/;"	f	struct:type_caster::load::func_handle	access:public	signature:(function && f_)
func_handle	include/pybind11/functional.h	/^            func_handle(const func_handle &f_) { operator=(f_); }$/;"	f	struct:type_caster::load::func_handle	access:public	signature:(const func_handle & f_)
func_handle	include/pybind11/functional.h	/^        struct func_handle {$/;"	s	function:type_caster::load
func_wrapper	include/pybind11/functional.h	/^            explicit func_wrapper(func_handle &&hf) noexcept : hfunc(std::move(hf)) {}$/;"	f	struct:type_caster::load::func_wrapper	access:public	signature:(func_handle && hf)
func_wrapper	include/pybind11/functional.h	/^        struct func_wrapper {$/;"	s	function:type_caster::load
function	include/pybind11/pytypes.h	/^class function : public object {$/;"	c	inherits:object
function	pybind11/setup_helpers.py	/^    def function(self) -> CCompilerMethod:$/;"	m	class:ParallelCompile	typeref:typename:CCompilerMethod	access:public	signature:(self)
function::PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(function, object, PyCallable_Check)$/;"	f	class:function	access:public	signature:(function,object,PyCallable_Check)
function::is_cpp_function	include/pybind11/pytypes.h	/^    bool is_cpp_function() const { return (bool) cpp_function(); }$/;"	f	class:function	typeref:typename:bool	access:public	signature:() const
function_call	include/pybind11/attr.h	/^inline function_call::function_call(const function_record &f, handle p) : func(f), parent(p) {$/;"	f	class:function_call	signature:(const function_record & f,handle p)
function_call	include/pybind11/cast.h	/^    function_call(const function_record &f, handle p); \/\/ Implementation in attr.h$/;"	p	struct:function_call	access:public	signature:(const function_record & f,handle p)
function_call	include/pybind11/cast.h	/^struct function_call {$/;"	s
function_call::args	include/pybind11/cast.h	/^    std::vector<handle> args;$/;"	m	struct:function_call	typeref:typename:std::vector<handle>	access:public
function_call::args_convert	include/pybind11/cast.h	/^    std::vector<bool> args_convert;$/;"	m	struct:function_call	typeref:typename:std::vector<bool>	access:public
function_call::args_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call	typeref:typename:object	access:public
function_call::func	include/pybind11/cast.h	/^    const function_record &func;$/;"	m	struct:function_call	typeref:typename:const function_record &	access:public
function_call::function_call	include/pybind11/attr.h	/^inline function_call::function_call(const function_record &f, handle p) : func(f), parent(p) {$/;"	f	class:function_call	signature:(const function_record & f,handle p)
function_call::function_call	include/pybind11/cast.h	/^    function_call(const function_record &f, handle p); \/\/ Implementation in attr.h$/;"	p	struct:function_call	access:public	signature:(const function_record & f,handle p)
function_call::init_self	include/pybind11/cast.h	/^    handle init_self;$/;"	m	struct:function_call	typeref:typename:handle	access:public
function_call::kwargs_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call	typeref:typename:object	access:public
function_call::parent	include/pybind11/cast.h	/^    handle parent;$/;"	m	struct:function_call	typeref:typename:handle	access:public
function_record	include/pybind11/attr.h	/^    function_record()$/;"	f	struct:function_record	access:public	signature:()
function_record	include/pybind11/attr.h	/^struct function_record {$/;"	s
function_record::args	include/pybind11/attr.h	/^    std::vector<argument_record> args;$/;"	m	struct:function_record	typeref:typename:std::vector<argument_record>	access:public
function_record::data	include/pybind11/attr.h	/^    void *data[3] = {};$/;"	m	struct:function_record	typeref:typename:void * [3]	access:public
function_record::def	include/pybind11/attr.h	/^    PyMethodDef *def = nullptr;$/;"	m	struct:function_record	typeref:typename:PyMethodDef *	access:public
function_record::doc	include/pybind11/attr.h	/^    char *doc = nullptr;$/;"	m	struct:function_record	typeref:typename:char *	access:public
function_record::free_data	include/pybind11/attr.h	/^    void (*free_data)(function_record *ptr) = nullptr;$/;"	m	struct:function_record	typeref:typename:void (*)(function_record * ptr)	access:public
function_record::function_record	include/pybind11/attr.h	/^    function_record()$/;"	f	struct:function_record	access:public	signature:()
function_record::has_args	include/pybind11/attr.h	/^    bool has_args : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::has_kwargs	include/pybind11/attr.h	/^    bool has_kwargs : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::impl	include/pybind11/attr.h	/^    handle (*impl)(function_call &) = nullptr;$/;"	m	struct:function_record	typeref:typename:handle (*)(function_call &)	access:public
function_record::is_constructor	include/pybind11/attr.h	/^    bool is_constructor : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::is_method	include/pybind11/attr.h	/^    bool is_method : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::is_new_style_constructor	include/pybind11/attr.h	/^    bool is_new_style_constructor : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::is_operator	include/pybind11/attr.h	/^    bool is_operator : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::is_setter	include/pybind11/attr.h	/^    bool is_setter : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::is_stateless	include/pybind11/attr.h	/^    bool is_stateless : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::name	include/pybind11/attr.h	/^    char *name = nullptr; \/* why no C++ strings? They generate heavier code.. *\/$/;"	m	struct:function_record	typeref:typename:char *	access:public
function_record::nargs	include/pybind11/attr.h	/^    std::uint16_t nargs;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
function_record::nargs_pos	include/pybind11/attr.h	/^    std::uint16_t nargs_pos = 0;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
function_record::nargs_pos_only	include/pybind11/attr.h	/^    std::uint16_t nargs_pos_only = 0;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
function_record::next	include/pybind11/attr.h	/^    function_record *next = nullptr;$/;"	m	struct:function_record	typeref:typename:function_record *	access:public
function_record::policy	include/pybind11/attr.h	/^    return_value_policy policy = return_value_policy::automatic;$/;"	m	struct:function_record	typeref:typename:return_value_policy	access:public
function_record::prepend	include/pybind11/attr.h	/^    bool prepend : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
function_record::scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:function_record	typeref:typename:handle	access:public
function_record::sibling	include/pybind11/attr.h	/^    handle sibling;$/;"	m	struct:function_record	typeref:typename:handle	access:public
function_record::signature	include/pybind11/attr.h	/^    char *signature = nullptr;$/;"	m	struct:function_record	typeref:typename:char *	access:public
function_record_capsule_name	include/pybind11/detail/internals.h	/^    std::string function_record_capsule_name = internals_function_record_capsule_name;$/;"	m	struct:internals	typeref:typename:std::string	access:public
function_signature_t	include/pybind11/detail/common.h	/^using function_signature_t = conditional_t<$/;"	t
function_type	include/pybind11/functional.h	/^    using function_type = Return (*)(Args...);$/;"	t	struct:type_caster	access:public
functions	include/pybind11/numpy.h	/^    enum functions {$/;"	g	struct:npy_api	access:private
g	tests/test_custom_type_casters.cpp	/^        std::string g(const ArgInspector1 &a,$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:std::string	file:	access:public	signature:(const ArgInspector1 & a,const ArgInspector1 & b,int c,ArgInspector2 * d,ArgAlwaysConverts)
g	tests/test_embed/test_interpreter.cpp	/^        pybind11::scoped_interpreter g;$/;"	v	typeref:typename:pybind11::scoped_interpreter
g	tests/test_multiple_inheritance.py	/^        g = 7$/;"	v	class:test_python_inherit_from_mi.PyMVF	access:public
gc	tests/constructor_stats.h	/^    static void gc() {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:()
gc_collect	tests/conftest.py	/^def gc_collect():$/;"	f	access:public	signature:()
gc_tester	tests/test_custom_type_setup.py	/^def gc_tester():$/;"	f	access:public	signature:()
gc_tester.add_ref	tests/test_custom_type_setup.py	/^    def add_ref(obj):$/;"	f	function:gc_tester	file:	access:private	signature:(obj)
gen_f	tests/test_callbacks.py	/^    def gen_f():$/;"	f	function:test_async_callbacks	file:	access:private	signature:()
generate_doxygen_xml	docs/conf.py	/^def generate_doxygen_xml(app):$/;"	f	access:public	signature:(app)
generate_dummy_code_boost	docs/benchmark.py	/^def generate_dummy_code_boost(nclasses=10):$/;"	f	access:public	signature:(nclasses=10)
generate_dummy_code_pybind11	docs/benchmark.py	/^def generate_dummy_code_pybind11(nclasses=10):$/;"	f	access:public	signature:(nclasses=10)
generic_item	include/pybind11/pytypes.h	/^struct generic_item {$/;"	s
generic_item::get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) {$/;"	f	struct:generic_item	typeref:typename:object	access:public	signature:(handle obj,handle key)
generic_item::key_type	include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:generic_item	typeref:typename:object	access:public
generic_item::set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) {$/;"	f	struct:generic_item	typeref:typename:void	access:public	signature:(handle obj,handle key,handle val)
generic_iterator	include/pybind11/pytypes.h	/^    generic_iterator() = default;$/;"	p	class:generic_iterator	access:public	signature:()
generic_iterator	include/pybind11/pytypes.h	/^    generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}$/;"	f	class:generic_iterator	access:public	signature:(handle seq,ssize_t index)
generic_iterator	include/pybind11/pytypes.h	/^class generic_iterator : public Policy {$/;"	c	inherits:Policy
generic_iterator::It	include/pybind11/pytypes.h	/^    using It = generic_iterator;$/;"	t	class:generic_iterator	typeref:typename:generic_iterator	access:private
generic_iterator::difference_type	include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:generic_iterator	typeref:typename:ssize_t	access:public
generic_iterator::generic_iterator	include/pybind11/pytypes.h	/^    generic_iterator() = default;$/;"	p	class:generic_iterator	access:public	signature:()
generic_iterator::generic_iterator	include/pybind11/pytypes.h	/^    generic_iterator(handle seq, ssize_t index) : Policy(seq, index) {}$/;"	f	class:generic_iterator	access:public	signature:(handle seq,ssize_t index)
generic_iterator::iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = typename Policy::iterator_category;$/;"	t	class:generic_iterator	typeref:typename:Policy::iterator_category	access:public
generic_iterator::operator *	include/pybind11/pytypes.h	/^    reference operator*() const { return Policy::dereference(); }$/;"	f	class:generic_iterator	typeref:typename:reference	access:public	signature:() const
generic_iterator::operator ++	include/pybind11/pytypes.h	/^    It &operator++() {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:()
generic_iterator::operator ++	include/pybind11/pytypes.h	/^    It operator++(int) {$/;"	f	class:generic_iterator	typeref:typename:It	access:public	signature:(int)
generic_iterator::operator +=	include/pybind11/pytypes.h	/^    It &operator+=(difference_type n) {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:(difference_type n)
generic_iterator::operator --	include/pybind11/pytypes.h	/^    It &operator--() {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:()
generic_iterator::operator --	include/pybind11/pytypes.h	/^    It operator--(int) {$/;"	f	class:generic_iterator	typeref:typename:It	access:public	signature:(int)
generic_iterator::operator -=	include/pybind11/pytypes.h	/^    It &operator-=(difference_type n) {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:(difference_type n)
generic_iterator::operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const { return **this; }$/;"	f	class:generic_iterator	typeref:typename:pointer	access:public	signature:() const
generic_iterator::operator []	include/pybind11/pytypes.h	/^    reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:generic_iterator	typeref:typename:reference	access:public	signature:(difference_type n) const
generic_iterator::pointer	include/pybind11/pytypes.h	/^    using pointer = typename Policy::pointer;$/;"	t	class:generic_iterator	typeref:typename:Policy::pointer	access:public
generic_iterator::reference	include/pybind11/pytypes.h	/^    using reference = typename Policy::reference;$/;"	t	class:generic_iterator	typeref:typename:Policy::reference	access:public
generic_iterator::value_type	include/pybind11/pytypes.h	/^    using value_type = typename Policy::value_type;$/;"	t	class:generic_iterator	typeref:typename:Policy::value_type	access:public
generic_type	include/pybind11/pybind11.h	/^class generic_type : public object {$/;"	c	inherits:object
generic_type::def_property_static_impl	include/pybind11/pybind11.h	/^    void def_property_static_impl(const char *name,$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(const char * name,handle fget,handle fset,detail::function_record * rec_func)
generic_type::initialize	include/pybind11/pybind11.h	/^    void initialize(const type_record &rec) {$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(const type_record & rec)
generic_type::install_buffer_funcs	include/pybind11/pybind11.h	/^    void install_buffer_funcs(buffer_info *(*get_buffer)(PyObject *, void *),$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(buffer_info * (* get_buffer)(PyObject *,void *),void * get_buffer_data)
generic_type::mark_parents_nonsimple	include/pybind11/pybind11.h	/^    void mark_parents_nonsimple(PyTypeObject *value) {$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(PyTypeObject * value)
genex	tools/pybind11Common.cmake	/^      set(genex "$<AND:${not_debug},${cxx_lang}>")$/;"	v	function:_pybind11_generate_lto
genex	tools/pybind11Common.cmake	/^      set(genex "${not_debug}")$/;"	v	function:_pybind11_generate_lto
get	include/pybind11/cast.h	/^    static auto get(const T &p) -> decltype(p.get()) { return p.get(); }$/;"	f	struct:holder_helper	typeref:typename:decltype(p.get ())	access:public	signature:(const T & p)
get	include/pybind11/detail/init.h	/^    remove_reference_t<Get> get;$/;"	m	struct:pickle_factory	typeref:typename:remove_reference_t<Get>	access:public
get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&) { return src; }$/;"	f	struct:polymorphic_type_hook_base	typeref:typename:const void *	access:public	signature:(const itype * src,const std::type_info * &)
get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:polymorphic_type_hook_base	typeref:typename:const void *	access:public	signature:(const itype * src,const std::type_info * & type)
get	include/pybind11/numpy.h	/^    static npy_api &get() {$/;"	f	struct:npy_api	typeref:typename:npy_api &	access:public	signature:()
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:list_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:sequence_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:tuple_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
get	include/pybind11/pytypes.h	/^    static object get(handle obj, const char *key) { return getattr(obj, key); }$/;"	f	struct:str_attr	typeref:typename:object	access:public	signature:(handle obj,const char * key)
get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) { return getattr(obj, key); }$/;"	f	struct:obj_attr	typeref:typename:object	access:public	signature:(handle obj,handle key)
get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) {$/;"	f	struct:generic_item	typeref:typename:object	access:public	signature:(handle obj,handle key)
get	tests/constructor_stats.h	/^    static ConstructorStats &get() {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:()
get	tests/constructor_stats.h	/^    static ConstructorStats &get(py::object class_) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:(py::object class_)
get	tests/constructor_stats.h	/^    static ConstructorStats &get(std::type_index type) {$/;"	f	class:ConstructorStats	typeref:typename:ConstructorStats &	access:public	signature:(std::type_index type)
get	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd &get() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd &	file:	access:public	signature:()
get	tests/test_factory_constructors.cpp	/^    int get() override { PYBIND11_OVERRIDE(int, TestFactory6, get, \/*no args*\/); }$/;"	f	class:PyTF6	typeref:typename:int	file:	access:public	signature:()
get	tests/test_factory_constructors.cpp	/^    int get() override { PYBIND11_OVERRIDE(int, TestFactory7, get, \/*no args*\/); }$/;"	f	class:PyTF7	typeref:typename:int	file:	access:public	signature:()
get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory6	typeref:typename:int	file:	access:public	signature:()
get	tests/test_factory_constructors.cpp	/^    virtual int get() { return value; }$/;"	f	class:TestFactory7	typeref:typename:int	file:	access:public	signature:()
get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_alias.MyTest	access:public	signature:(self)
get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_dual.PythFactory7	access:public	signature:(self)
get	tests/test_methods_and_attributes.cpp	/^    int get() const { return value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:	access:public	signature:() const
get	tests/test_sequences_and_iterators.cpp	/^        std::string get(const std::string &key) const { return map.at(key); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:std::string	file:	access:public	signature:(const std::string & key) const
get	tests/test_sequences_and_iterators.cpp	/^    int get() const { return value_; }$/;"	f	class:NonCopyableInt	typeref:typename:int	file:	access:public	signature:() const
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:T *	file:	access:public	signature:() const
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:() const
get	tests/test_smart_ptr.cpp	/^    T *get() const { return impl.get(); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:() const
get	tests/test_smart_ptr.cpp	/^    T *get() { return ptr.get(); }$/;"	f	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:T *	file:	access:public	signature:()
get	tests/test_smart_ptr.cpp	/^    static const T *get(const ref<T> &p) { return p.get_ptr(); }$/;"	f	struct:PYBIND11_NAMESPACE::detail::holder_helper	typeref:typename:const T *	file:	access:public	signature:(const ref<T> & p)
get	tests/test_tagbased_polymorphic.cpp	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:PYBIND11_NAMESPACE::polymorphic_type_hook	typeref:typename:const void *	file:	access:public	signature:(const itype * src,const std::type_info * & type)
get1	tests/test_methods_and_attributes.cpp	/^    const UserType &get1() const { return v1; }$/;"	f	struct:TestPropRVP	typeref:typename:const UserType &	file:	access:public	signature:() const
get2	tests/test_methods_and_attributes.cpp	/^    const UserType &get2() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:const UserType &	file:	access:public	signature:() const
getPtr	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd *getPtr() { return &mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd *	file:	access:public	signature:()
getRefCount	tests/object.h	/^    int getRefCount() const { return m_refCount; };$/;"	f	class:Object	typeref:typename:int	access:public	signature:() const
getValue	tests/test_docstring_options.cpp	/^            int getValue() const { return value; }$/;"	f	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:int	file:	access:public	signature:() const
get_a1	tests/test_modules.cpp	/^        A &get_a1() { return a1; }$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:A &	file:	access:public	signature:()
get_a2	tests/test_modules.cpp	/^        A &get_a2() { return a2; }$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:A &	file:	access:public	signature:()
get_and_replace	setup.py	/^def get_and_replace($/;"	f	typeref:typename:Union[bytes,str]	access:public	signature:( filename: Path, binary: bool = False, **opts: str )
get_array_data_for_type	include/pybind11/eigen/tensor.h	/^StoragePointerType get_array_data_for_type(array &arr) {$/;"	f	typeref:typename:StoragePointerType	signature:(array & arr)
get_await_result	tests/test_async.py	/^async def get_await_result(x):$/;"	f	access:public	signature:(x)
get_b_b	tests/test_multiple_inheritance.cpp	/^        int get_b_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVB	typeref:typename:int	file:	access:public	signature:() const
get_buffer	include/pybind11/detail/internals.h	/^    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;$/;"	m	struct:type_info	typeref:typename:buffer_info * (*)(PyObject *,void *)	access:public
get_buffer_data	include/pybind11/detail/internals.h	/^    void *get_buffer_data = nullptr;$/;"	m	struct:type_info	typeref:typename:void *	access:public
get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() const {$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:py::buffer_info	file:	access:public	signature:() const
get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() { return py::buffer_info(&value, 1); }$/;"	f	struct:TEST_SUBMODULE::BufferReadOnly	typeref:typename:py::buffer_info	file:	access:public	signature:()
get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() { return py::buffer_info(&value, 1, readonly); }$/;"	f	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:py::buffer_info	file:	access:public	signature:()
get_buffer_info	tests/test_buffers.cpp	/^        py::buffer_info get_buffer_info() {$/;"	f	struct:TEST_SUBMODULE::Buffer	typeref:typename:py::buffer_info	file:	access:public	signature:()
get_c_b	tests/test_multiple_inheritance.cpp	/^        int get_c_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public	signature:() const
get_c_c	tests/test_multiple_inheritance.cpp	/^        int get_c_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVC	typeref:typename:int	file:	access:public	signature:() const
get_cache	include/pybind11/pytypes.h	/^    object &get_cache() const {$/;"	f	class:accessor	typeref:typename:object &	access:private	signature:() const
get_cm	tests/test_eigen_matrix.cpp	/^Eigen::MatrixXd &get_cm() {$/;"	f	typeref:typename:Eigen::MatrixXd &	signature:()
get_cmake_dir	pybind11/commands.py	/^def get_cmake_dir() -> str:$/;"	f	typeref:typename:str	access:public	signature:()
get_concrete_dtype_checks	tests/test_numpy_array.cpp	/^std::vector<DtypeCheck> get_concrete_dtype_checks() {$/;"	f	typeref:typename:std::vector<DtypeCheck>	signature:()
get_const_tensor	tests/test_eigen_tensor.inl	/^const Eigen::Tensor<double, 3, Options> &get_const_tensor() {$/;"	f	typeref:typename:const Eigen::Tensor<double,3,Options> &	signature:()
get_d0_b	tests/test_multiple_inheritance.cpp	/^        int get_d0_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
get_d0_c	tests/test_multiple_inheritance.cpp	/^        int get_d0_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
get_d0_d0	tests/test_multiple_inheritance.cpp	/^        int get_d0_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVD0	typeref:typename:int	file:	access:public	signature:() const
get_d1_b	tests/test_multiple_inheritance.cpp	/^        int get_d1_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
get_d1_c	tests/test_multiple_inheritance.cpp	/^        int get_d1_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
get_d1_d1	tests/test_multiple_inheritance.cpp	/^        int get_d1_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVD1	typeref:typename:int	file:	access:public	signature:() const
get_double	tests/test_methods_and_attributes.cpp	/^    double get_double() const { return ro_value; }$/;"	f	class:UnregisteredBase	typeref:typename:double	file:	access:public	signature:() const
get_dtype_check	tests/test_numpy_array.cpp	/^DtypeCheck get_dtype_check(const char *name) {$/;"	f	typeref:typename:DtypeCheck	signature:(const char * name)
get_dtype_size_check	tests/test_numpy_array.cpp	/^DtypeSizeCheck get_dtype_size_check() {$/;"	f	typeref:typename:DtypeSizeCheck	signature:()
get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::duration<rep, period> &src) {$/;"	f	class:duration_caster	typeref:typename:const std::chrono::duration<rep,period> &	access:public	signature:(const std::chrono::duration<rep,period> & src)
get_duration	include/pybind11/chrono.h	/^    get_duration(const std::chrono::time_point<Clock, std::chrono::duration<rep, period>> &src) /;"	f	class:duration_caster	typeref:typename:std::chrono::duration<rep,period>	access:public	signature:(const std::chrono::time_point<Clock,std::chrono::duration<rep,period>> & src)
get_e_b	tests/test_multiple_inheritance.cpp	/^        int get_e_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
get_e_c	tests/test_multiple_inheritance.cpp	/^        int get_e_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
get_e_d0	tests/test_multiple_inheritance.cpp	/^        int get_e_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
get_e_d1	tests/test_multiple_inheritance.cpp	/^        int get_e_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
get_e_e	tests/test_multiple_inheritance.cpp	/^        int get_e_e() const { return e; }$/;"	f	struct:TEST_SUBMODULE::MVE	typeref:typename:int	file:	access:public	signature:() const
get_elem	tests/test_eigen_matrix.cpp	/^double get_elem(const Eigen::Ref<const Eigen::MatrixXd> &m) { return m(2, 1); };$/;"	f	typeref:typename:double	signature:(const Eigen::Ref<const Eigen::MatrixXd> & m)
get_f_b	tests/test_multiple_inheritance.cpp	/^        int get_f_b() const { return b; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_f_c	tests/test_multiple_inheritance.cpp	/^        int get_f_c() const { return c; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_f_d0	tests/test_multiple_inheritance.cpp	/^        int get_f_d0() const { return d0; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_f_d1	tests/test_multiple_inheritance.cpp	/^        int get_f_d1() const { return d1; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_f_e	tests/test_multiple_inheritance.cpp	/^        int get_f_e() const { return e; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_f_f	tests/test_multiple_inheritance.cpp	/^        int get_f_f() const { return f; }$/;"	f	struct:TEST_SUBMODULE::MVF	typeref:typename:int	file:	access:public	signature:() const
get_fixed_tensor	tests/test_eigen_tensor.inl	/^Eigen::TensorFixedSize<double, Eigen::Sizes<3, 5, 2>, Options> &get_fixed_tensor() {$/;"	f	typeref:typename:Eigen::TensorFixedSize<double,Eigen::Sizes<3,5,2>,Options> &	signature:()
get_fully_qualified_tp_name	include/pybind11/detail/common.h	/^std::string get_fully_qualified_tp_name(PyTypeObject *);$/;"	p	typeref:typename:std::string	signature:(PyTypeObject *)
get_function_record	include/pybind11/pybind11.h	/^    static detail::function_record *get_function_record(handle h) {$/;"	f	class:class_	typeref:typename:detail::function_record *	access:private	signature:(handle h)
get_function_record_capsule_name	include/pybind11/detail/internals.h	/^inline const char *get_function_record_capsule_name() {$/;"	f	typeref:typename:const char *	signature:()
get_g_g	tests/test_multiple_inheritance.py	/^        def get_g_g(self):$/;"	m	class:test_python_inherit_from_mi.PyMVF	access:public	signature:(self)
get_global_type_info	include/pybind11/detail/type_caster_base.h	/^inline detail::type_info *get_global_type_info(const std::type_index &tp) {$/;"	f	typeref:typename:detail::type_info *	signature:(const std::type_index & tp)
get_include	pybind11/commands.py	/^def get_include(user: bool = False) -> str:  # noqa: ARG001$/;"	f	typeref:typename:str	access:public	signature:(user: bool = False)
get_int	tests/test_methods_and_attributes.cpp	/^    int get_int() const { return rw_value; }$/;"	f	class:UnregisteredBase	typeref:typename:int	file:	access:public	signature:() const
get_internals	include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE internals &get_internals() {$/;"	f	typeref:typename:PYBIND11_NOINLINE internals &	signature:()
get_internals	tests/test_embed/test_interpreter.cpp	/^    pybind11::detail::get_internals();$/;"	p	class:pybind11::detail	file:	signature:()
get_internals::gil_scoped_acquire_local::gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local() : state(PyGILState_Ensure()) {}$/;"	f	struct:get_internals::gil_scoped_acquire_local	access:public	signature:()
get_internals::gil_scoped_acquire_local::gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local(const gil_scoped_acquire_local &) = delete;$/;"	p	struct:get_internals::gil_scoped_acquire_local	access:public	signature:(const gil_scoped_acquire_local &)
get_internals::gil_scoped_acquire_local::operator =	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local &operator=(const gil_scoped_acquire_local &) = delete;$/;"	p	struct:get_internals::gil_scoped_acquire_local	typeref:typename:gil_scoped_acquire_local &	access:public	signature:(const gil_scoped_acquire_local &)
get_internals::gil_scoped_acquire_local::state	include/pybind11/detail/internals.h	/^        const PyGILState_STATE state;$/;"	m	struct:get_internals::gil_scoped_acquire_local	typeref:typename:const PyGILState_STATE	access:public
get_internals::gil_scoped_acquire_local::~gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        ~gil_scoped_acquire_local() { PyGILState_Release(state); }$/;"	f	struct:get_internals::gil_scoped_acquire_local	access:public	signature:()
get_internals_obj_from_state_dict	include/pybind11/detail/internals.h	/^inline object get_internals_obj_from_state_dict(handle state_dict) {$/;"	f	typeref:typename:object	signature:(handle state_dict)
get_internals_pp	include/pybind11/detail/internals.h	/^inline internals **&get_internals_pp() {$/;"	f	typeref:typename:internals ** &	signature:()
get_internals_pp_from_capsule	include/pybind11/detail/internals.h	/^inline internals **get_internals_pp_from_capsule(handle obj) {$/;"	f	typeref:typename:internals **	signature:(handle obj)
get_local_internals	include/pybind11/detail/internals.h	/^inline local_internals &get_local_internals() {$/;"	f	typeref:typename:local_internals &	signature:()
get_local_type_info	include/pybind11/detail/type_caster_base.h	/^inline detail::type_info *get_local_type_info(const std::type_index &tp) {$/;"	f	typeref:typename:detail::type_info *	signature:(const std::type_index & tp)
get_movable	tests/test_virtual_functions.cpp	/^    Movable get_movable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:Movable	file:	access:private	signature:(int a,int b)
get_movable	tests/test_virtual_functions.cpp	/^    virtual Movable get_movable(int a, int b) = 0;$/;"	p	class:NCVirt	typeref:typename:Movable	file:	access:public	signature:(int a,int b)
get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt	access:public	signature:(self, a, b)
get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2	access:public	signature:(self, a, b)
get_msg	tests/test_class.cpp	/^std::string get_msg(const T &) {$/;"	f	namespace:test_class::pr4220_tripped_over_this	typeref:typename:std::string	signature:(const T &)
get_name_in_error_scope	include/pybind11/pytypes.h	/^    static const char *get_name_in_error_scope(PyObject *o) {$/;"	f	class:capsule	typeref:typename:const char *	access:private	signature:(PyObject * o)
get_noncopyable	tests/test_virtual_functions.cpp	/^    NonCopyable get_noncopyable(int a, int b) override {$/;"	f	class:NCVirtTrampoline	typeref:typename:NonCopyable	file:	access:private	signature:(int a,int b)
get_noncopyable	tests/test_virtual_functions.cpp	/^    virtual NonCopyable get_noncopyable(int a, int b) { return NonCopyable(a, b); }$/;"	f	class:NCVirt	typeref:typename:NonCopyable	file:	access:public	signature:(int a,int b)
get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt	access:public	signature:(self, a, b)
get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2	access:public	signature:(self, a, b)
get_numpy_internals	include/pybind11/numpy.h	/^inline numpy_internals &get_numpy_internals() {$/;"	f	typeref:typename:numpy_internals &	signature:()
get_object_handle	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle get_object_handle(const void *ptr, const detail::type_info *type) {$/;"	f	typeref:typename:PYBIND11_NOINLINE handle	signature:(const void * ptr,const detail::type_info * type)
get_one	tests/test_copy_move.cpp	/^    static const derived &get_one() { return instance_; }$/;"	f	struct:empty	typeref:typename:const derived &	file:	access:public	signature:()
get_or_create_shared_data	include/pybind11/detail/internals.h	/^T &get_or_create_shared_data(const std::string &name) {$/;"	f	typeref:typename:T &	signature:(const std::string & name)
get_overload	include/pybind11/pybind11.h	/^inline function get_overload(const T *this_ptr, const char *name) {$/;"	f	typeref:typename:function	signature:(const T * this_ptr,const char * name)
get_pkgconfig_dir	pybind11/commands.py	/^def get_pkgconfig_dir() -> str:$/;"	f	typeref:typename:str	access:public	signature:()
get_platform_dtype_size_checks	tests/test_numpy_array.cpp	/^std::vector<DtypeSizeCheck> get_platform_dtype_size_checks() {$/;"	f	typeref:typename:std::vector<DtypeSizeCheck>	signature:()
get_pointer	include/pybind11/pytypes.h	/^    T *get_pointer() const {$/;"	f	class:capsule	typeref:typename:T *	access:public	signature:() const
get_ptr	tests/object.h	/^    T *get_ptr() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *	access:public	signature:()
get_ptr	tests/object.h	/^    const T *get_ptr() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *	access:public	signature:() const
get_python_state_dict	include/pybind11/detail/internals.h	/^inline object get_python_state_dict() {$/;"	f	typeref:typename:object	signature:()
get_rm	tests/test_eigen_matrix.cpp	/^MatrixXdR &get_rm() {$/;"	f	typeref:typename:MatrixXdR &	signature:()
get_rvalue	tests/test_methods_and_attributes.cpp	/^    UserType get_rvalue() const { return v2; }$/;"	f	struct:TestPropRVP	typeref:typename:UserType	file:	access:public	signature:() const
get_self	tests/test_class.cpp	/^        virtual void *get_self() { return static_cast<void *>(this); }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:void *	file:	access:protected	signature:()
get_self	tests/test_class.cpp	/^        void *get_self() override { PYBIND11_OVERRIDE(void *, ProtectedB, get_self, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:void *	file:	access:public	signature:()
get_shape	include/pybind11/eigen/tensor.h	/^    get_shape(const Type & \/*f*\/) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:(const Type &)
get_shape	include/pybind11/eigen/tensor.h	/^    static Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape(const Type &f) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:(const Type & f)
get_shape	include/pybind11/eigen/tensor.h	/^    static constexpr Eigen::DSizes<typename Type::Index, Type::NumIndices> get_shape() {$/;"	f	struct:eigen_tensor_helper	typeref:typename:Eigen::DSizes<typename Type::Index,Type::NumIndices>	access:public	signature:()
get_shape_for_array	include/pybind11/eigen/tensor.h	/^Eigen::DSizes<T, size> get_shape_for_array(const array &arr) {$/;"	f	typeref:typename:Eigen::DSizes<T,size>	signature:(const array & arr)
get_stack_pp	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support **get_stack_pp() {$/;"	f	class:loader_life_support	typeref:typename:loader_life_support **	access:private	signature:()
get_stack_tls_key	include/pybind11/detail/type_caster_base.h	/^    static PYBIND11_TLS_KEY_REF get_stack_tls_key() {$/;"	f	class:loader_life_support	typeref:typename:PYBIND11_TLS_KEY_REF	access:private	signature:()
get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() { return *get_stack_pp(); }$/;"	f	class:loader_life_support	typeref:typename:loader_life_support *	access:private	signature:()
get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() {$/;"	f	class:loader_life_support	typeref:typename:loader_life_support *	access:private	signature:()
get_storage_pointer_type	include/pybind11/eigen/tensor.h	/^struct get_storage_pointer_type<MapType, void_t<typename MapType::PointerArgType>> {$/;"	s
get_storage_pointer_type	include/pybind11/eigen/tensor.h	/^struct get_storage_pointer_type<MapType, void_t<typename MapType::StoragePointerType>> {$/;"	s
get_storage_pointer_type::SPT	include/pybind11/eigen/tensor.h	/^    using SPT = typename MapType::PointerArgType;$/;"	t	struct:get_storage_pointer_type	typeref:typename:MapType::PointerArgType	access:public
get_storage_pointer_type::SPT	include/pybind11/eigen/tensor.h	/^    using SPT = typename MapType::StoragePointerType;$/;"	t	struct:get_storage_pointer_type	typeref:typename:MapType::StoragePointerType	access:public
get_string1	tests/test_virtual_functions.cpp	/^    const std::string &get_string1() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string &	file:	access:public	signature:()
get_string1	tests/test_virtual_functions.cpp	/^    virtual const std::string &get_string1() { return str1; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string &	file:	access:public	signature:()
get_string1	tests/test_virtual_functions.py	/^        def get_string1(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
get_string2	tests/test_virtual_functions.cpp	/^    const std::string *get_string2() override {$/;"	f	class:PyExampleVirt	typeref:typename:const std::string *	file:	access:public	signature:()
get_string2	tests/test_virtual_functions.cpp	/^    virtual const std::string *get_string2() { return &str2; }$/;"	f	class:ExampleVirt	typeref:typename:const std::string *	file:	access:public	signature:()
get_string2	tests/test_virtual_functions.py	/^        def get_string2(self):$/;"	m	class:test_override.ExtendedExampleVirt2	access:public	signature:(self)
get_sys_path_size	tests/test_embed/test_interpreter.cpp	/^        REQUIRE(get_sys_path_size() == path_size_add_program_dir_to_path_false + 1);$/;"	p	typeref:typename:REQUIRE (==path_size_add_program_dir_to_path_false+1)	file:	signature:()
get_sys_path_size	tests/test_embed/test_interpreter.cpp	/^size_t get_sys_path_size() {$/;"	f	typeref:typename:size_t	signature:()
get_tensor	tests/test_eigen_tensor.inl	/^Eigen::Tensor<double, 3, Options> &get_tensor() {$/;"	f	typeref:typename:Eigen::Tensor<double,3,Options> &	signature:()
get_tensor_descriptor	include/pybind11/eigen/tensor.h	/^struct get_tensor_descriptor {$/;"	s
get_tensor_descriptor::details	include/pybind11/eigen/tensor.h	/^    static constexpr auto details$/;"	m	struct:get_tensor_descriptor	typeref:typename:auto	access:public
get_tensor_descriptor::value	include/pybind11/eigen/tensor.h	/^    static constexpr auto value$/;"	m	struct:get_tensor_descriptor	typeref:typename:auto	access:public
get_tensor_map	tests/test_eigen_tensor.inl	/^Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> &get_tensor_map() {$/;"	f	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>> &	signature:()
get_thread_state_unchecked	include/pybind11/detail/type_caster_base.h	/^inline PyThreadState *get_thread_state_unchecked() {$/;"	f	typeref:typename:PyThreadState *	signature:()
get_type	include/pybind11/pytypes.h	/^    handle get_type() const;$/;"	p	class:object_api	typeref:typename:handle	access:public	signature:() const
get_type	include/pybind11/pytypes.h	/^handle object_api<D>::get_type() const {$/;"	f	class:object_api	typeref:typename:handle	signature:() const
get_type_handle	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE handle get_type_handle(const std::type_info &tp, bool throw_if_missing) {$/;"	f	typeref:typename:PYBIND11_NOINLINE handle	signature:(const std::type_info & tp,bool throw_if_missing)
get_type_info	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE detail::type_info *get_type_info(PyTypeObject *type) {$/;"	f	typeref:typename:PYBIND11_NOINLINE detail::type_info *	signature:(PyTypeObject * type)
get_type_info	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE detail::type_info *get_type_info(const std::type_index &tp,$/;"	f	typeref:typename:PYBIND11_NOINLINE detail::type_info *	signature:(const std::type_index & tp,bool throw_if_missing=false)
get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *	access:public	signature:(bool throw_if_missing=true)
get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(const std::type_info &tinfo, bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *	access:public	signature:(const std::type_info & tinfo,bool throw_if_missing=true)
get_type_overload	include/pybind11/pybind11.h	/^get_type_overload(const void *this_ptr, const detail::type_info *this_type, const char *name) {$/;"	f	signature:(const void * this_ptr,const detail::type_info * this_type,const char * name)
get_value	tests/test_buffers.cpp	/^        int32_t get_value() const { return *value; }$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:int32_t	file:	access:public	signature:() const
get_value	tests/test_pytypes.cpp	/^    double get_value() const { return PyFloat_AsDouble(this->ptr()); }$/;"	f	class:external::float_	typeref:typename:double	file:	access:private	signature:() const
get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const { return std::to_string(value); }$/;"	f	class:Movable	typeref:typename:std::string	file:	access:public	signature:() const
get_value	tests/test_virtual_functions.cpp	/^    std::string get_value() const {$/;"	f	class:NonCopyable	typeref:typename:std::string	file:	access:public	signature:() const
get_value_and_holder	include/pybind11/detail/common.h	/^    value_and_holder get_value_and_holder(const type_info *find_type = nullptr,$/;"	p	struct:instance	typeref:typename:value_and_holder	access:public	signature:(const type_info * find_type=nullptr,bool throw_if_missing=true)
get_value_and_holder	include/pybind11/detail/type_caster_base.h	/^instance::get_value_and_holder(const type_info *find_type \/*= nullptr default in common.h*\/,$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE value_and_holder	signature:(const type_info * find_type,bool throw_if_missing)
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name) {$/;"	f	typeref:typename:object	signature:(handle obj,const char * name)
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, const char *name, handle default_) {$/;"	f	typeref:typename:object	signature:(handle obj,const char * name,handle default_)
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name) {$/;"	f	typeref:typename:object	signature:(handle obj,handle name)
getattr	include/pybind11/pytypes.h	/^inline object getattr(handle obj, handle name, handle default_) {$/;"	f	typeref:typename:object	signature:(handle obj,handle name,handle default_)
gettext	docs/Makefile	/^gettext:$/;"	t
gil	docs/advanced/misc.rst	/^.. _gil:$/;"	T	chapter:General notes regarding convenience macros
gil_acquire	tests/cross_module_gil_utils.cpp	/^void gil_acquire() { py::gil_scoped_acquire gil; }$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
gil_acquire_inner	tests/cross_module_gil_utils.cpp	/^void gil_acquire_inner() {$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
gil_acquire_nested	tests/cross_module_gil_utils.cpp	/^void gil_acquire_nested() {$/;"	f	namespace:__anonf105cff20111	typeref:typename:void	signature:()
gil_multi_acquire_release	tests/cross_module_gil_utils.cpp	/^std::string gil_multi_acquire_release(unsigned bits) {$/;"	f	namespace:__anonf105cff20111	typeref:typename:std::string	signature:(unsigned bits)
gil_release	tests/test_embed/test_interpreter.cpp	/^        py::gil_scoped_release gil_release{};$/;"	v	typeref:typename:py::gil_scoped_release
gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
gil_scoped_acquire	include/pybind11/gil.h	/^    gil_scoped_acquire(const gil_scoped_acquire &) = delete;$/;"	p	class:gil_scoped_acquire	access:public	signature:(const gil_scoped_acquire &)
gil_scoped_acquire	include/pybind11/gil.h	/^class gil_scoped_acquire {$/;"	c
gil_scoped_acquire::active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_acquire	typeref:typename:bool	access:private
gil_scoped_acquire::dec_ref	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void dec_ref() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
gil_scoped_acquire::disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
gil_scoped_acquire::gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
gil_scoped_acquire::gil_scoped_acquire	include/pybind11/gil.h	/^    gil_scoped_acquire(const gil_scoped_acquire &) = delete;$/;"	p	class:gil_scoped_acquire	access:public	signature:(const gil_scoped_acquire &)
gil_scoped_acquire::inc_ref	include/pybind11/gil.h	/^    void inc_ref() { ++tstate->gilstate_counter; }$/;"	f	class:gil_scoped_acquire	typeref:typename:void	access:public	signature:()
gil_scoped_acquire::operator =	include/pybind11/gil.h	/^    gil_scoped_acquire &operator=(const gil_scoped_acquire &) = delete;$/;"	p	class:gil_scoped_acquire	typeref:typename:gil_scoped_acquire &	access:public	signature:(const gil_scoped_acquire &)
gil_scoped_acquire::release	include/pybind11/gil.h	/^    bool release = true;$/;"	m	class:gil_scoped_acquire	typeref:typename:bool	access:private
gil_scoped_acquire::tstate	include/pybind11/gil.h	/^    PyThreadState *tstate = nullptr;$/;"	m	class:gil_scoped_acquire	typeref:typename:PyThreadState *	access:private
gil_scoped_acquire::~gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE ~gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local() : state(PyGILState_Ensure()) {}$/;"	f	struct:get_internals::gil_scoped_acquire_local	access:public	signature:()
gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local(const gil_scoped_acquire_local &) = delete;$/;"	p	struct:get_internals::gil_scoped_acquire_local	access:public	signature:(const gil_scoped_acquire_local &)
gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^    struct gil_scoped_acquire_local {$/;"	s	function:get_internals
gil_scoped_release	include/pybind11/gil.h	/^    explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {$/;"	f	class:gil_scoped_release	access:public	signature:(bool disassoc=false)
gil_scoped_release	include/pybind11/gil.h	/^    gil_scoped_release(const gil_scoped_release &) = delete;$/;"	p	class:gil_scoped_release	access:public	signature:(const gil_scoped_release &)
gil_scoped_release	include/pybind11/gil.h	/^class gil_scoped_release {$/;"	c
gil_scoped_release::active	include/pybind11/gil.h	/^    bool active = true;$/;"	m	class:gil_scoped_release	typeref:typename:bool	access:private
gil_scoped_release::disarm	include/pybind11/gil.h	/^    PYBIND11_NOINLINE void disarm() { active = false; }$/;"	f	class:gil_scoped_release	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:()
gil_scoped_release::disassoc	include/pybind11/gil.h	/^    bool disassoc;$/;"	m	class:gil_scoped_release	typeref:typename:bool	access:private
gil_scoped_release::gil_scoped_release	include/pybind11/gil.h	/^    explicit gil_scoped_release(bool disassoc = false) : disassoc(disassoc) {$/;"	f	class:gil_scoped_release	access:public	signature:(bool disassoc=false)
gil_scoped_release::gil_scoped_release	include/pybind11/gil.h	/^    gil_scoped_release(const gil_scoped_release &) = delete;$/;"	p	class:gil_scoped_release	access:public	signature:(const gil_scoped_release &)
gil_scoped_release::operator =	include/pybind11/gil.h	/^    gil_scoped_release &operator=(const gil_scoped_release &) = delete;$/;"	p	class:gil_scoped_release	typeref:typename:gil_scoped_release &	access:public	signature:(const gil_scoped_release &)
gil_scoped_release::tstate	include/pybind11/gil.h	/^    PyThreadState *tstate;$/;"	m	class:gil_scoped_release	typeref:typename:PyThreadState *	access:private
gil_scoped_release::~gil_scoped_release	include/pybind11/gil.h	/^    ~gil_scoped_release() {$/;"	f	class:gil_scoped_release	access:public	signature:()
global_sdist	setup.py	/^global_sdist = os.environ.get("PYBIND11_GLOBAL_SDIST", False)$/;"	v	access:public
global_state	include/pybind11/options.h	/^    static state &global_state() {$/;"	f	class:options	typeref:typename:state &	access:private	signature:()
globals	include/pybind11/pybind11.h	/^inline dict globals() {$/;"	f	typeref:typename:dict	signature:()
globals	tests/test_embed/test_interpreter.cpp	/^             py::globals(),$/;"	p	class:py	typeref:typename:py::exec ("__dict__",,locals)	file:	signature:()
globals	tests/test_embed/test_interpreter.cpp	/^             py::globals(),$/;"	p	class:py	typeref:typename:py::exec ("not set",,locals)	file:	signature:()
globals	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(py::globals()["var"]["number"].cast<int>() == 42);$/;"	p	class:py	typeref:typename:REQUIRE (["var"]["number"].cast<int> ()==42)	file:	signature:()
glyph0-0	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-0">$/;"	i
glyph0-0	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-0">$/;"	i
glyph0-1	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-1">$/;"	i
glyph0-1	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-1">$/;"	i
glyph0-10	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-10">$/;"	i
glyph0-10	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-10">$/;"	i
glyph0-11	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-11">$/;"	i
glyph0-12	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-12">$/;"	i
glyph0-2	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-2">$/;"	i
glyph0-2	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-2">$/;"	i
glyph0-3	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-3">$/;"	i
glyph0-3	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-3">$/;"	i
glyph0-4	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-4">$/;"	i
glyph0-4	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-4">$/;"	i
glyph0-5	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-5">$/;"	i
glyph0-5	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-5">$/;"	i
glyph0-6	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-6">$/;"	i
glyph0-6	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-6">$/;"	i
glyph0-7	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-7">$/;"	i
glyph0-7	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-7">$/;"	i
glyph0-8	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-8">$/;"	i
glyph0-8	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-8">$/;"	i
glyph0-9	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph0-9">$/;"	i
glyph0-9	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph0-9">$/;"	i
glyph1-0	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-0">$/;"	i
glyph1-0	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-0">$/;"	i
glyph1-1	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-1">$/;"	i
glyph1-1	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-1">$/;"	i
glyph1-2	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-2">$/;"	i
glyph1-2	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-2">$/;"	i
glyph1-3	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-3">$/;"	i
glyph1-3	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph1-3">$/;"	i
glyph1-4	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-4">$/;"	i
glyph1-5	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-5">$/;"	i
glyph1-6	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-6">$/;"	i
glyph1-7	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph1-7">$/;"	i
glyph2-0	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-0">$/;"	i
glyph2-0	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-0">$/;"	i
glyph2-1	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-1">$/;"	i
glyph2-1	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-1">$/;"	i
glyph2-10	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-10">$/;"	i
glyph2-11	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-11">$/;"	i
glyph2-12	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-12">$/;"	i
glyph2-13	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-13">$/;"	i
glyph2-2	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-2">$/;"	i
glyph2-2	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-2">$/;"	i
glyph2-3	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-3">$/;"	i
glyph2-3	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-3">$/;"	i
glyph2-4	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-4">$/;"	i
glyph2-4	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-4">$/;"	i
glyph2-5	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-5">$/;"	i
glyph2-5	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph2-5">$/;"	i
glyph2-6	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-6">$/;"	i
glyph2-7	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-7">$/;"	i
glyph2-8	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-8">$/;"	i
glyph2-9	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph2-9">$/;"	i
glyph3-0	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-0">$/;"	i
glyph3-0	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-0">$/;"	i
glyph3-1	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-1">$/;"	i
glyph3-1	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-1">$/;"	i
glyph3-10	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-10">$/;"	i
glyph3-10	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-10">$/;"	i
glyph3-11	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-11">$/;"	i
glyph3-11	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-11">$/;"	i
glyph3-12	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-12">$/;"	i
glyph3-13	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-13">$/;"	i
glyph3-14	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-14">$/;"	i
glyph3-2	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-2">$/;"	i
glyph3-2	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-2">$/;"	i
glyph3-3	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-3">$/;"	i
glyph3-3	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-3">$/;"	i
glyph3-4	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-4">$/;"	i
glyph3-4	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-4">$/;"	i
glyph3-5	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-5">$/;"	i
glyph3-5	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-5">$/;"	i
glyph3-6	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-6">$/;"	i
glyph3-6	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-6">$/;"	i
glyph3-7	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-7">$/;"	i
glyph3-7	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-7">$/;"	i
glyph3-8	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-8">$/;"	i
glyph3-8	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-8">$/;"	i
glyph3-9	docs/pybind11_vs_boost_python1.svg	/^<symbol overflow="visible" id="glyph3-9">$/;"	i
glyph3-9	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph3-9">$/;"	i
glyph4-0	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-0">$/;"	i
glyph4-1	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-1">$/;"	i
glyph4-10	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-10">$/;"	i
glyph4-11	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-11">$/;"	i
glyph4-12	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-12">$/;"	i
glyph4-13	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-13">$/;"	i
glyph4-14	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-14">$/;"	i
glyph4-2	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-2">$/;"	i
glyph4-3	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-3">$/;"	i
glyph4-4	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-4">$/;"	i
glyph4-5	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-5">$/;"	i
glyph4-6	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-6">$/;"	i
glyph4-7	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-7">$/;"	i
glyph4-8	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-8">$/;"	i
glyph4-9	docs/pybind11_vs_boost_python2.svg	/^<symbol overflow="visible" id="glyph4-9">$/;"	i
gstate	tests/cross_module_gil_utils.cpp	/^    PyGILState_STATE gstate;$/;"	m	struct:__anonf105cff20111::CustomAutoGIL	typeref:typename:PyGILState_STATE	file:	access:public
guard	include/pybind11/attr.h	/^        T guard{}; \/\/ Compose multiple guard types with left-to-right default-constructor orde/;"	m	struct:call_guard::type	typeref:typename:T	access:public
h	tests/test_custom_type_casters.cpp	/^        static ArgInspector2 h(ArgInspector2 a, ArgAlwaysConverts) { return a; }$/;"	f	class:TEST_SUBMODULE::ArgInspector	typeref:typename:ArgInspector2	file:	access:public	signature:(ArgInspector2 a,ArgAlwaysConverts)
handle	include/pybind11/pytypes.h	/^    handle() = default;$/;"	p	class:handle	access:public	signature:()
handle	include/pybind11/pytypes.h	/^    handle(T &obj) : m_ptr(obj) {}$/;"	f	class:handle	access:public	signature:(T & obj)
handle	include/pybind11/pytypes.h	/^    handle(T ptr) : m_ptr(ptr) {}$/;"	f	class:handle	access:public	signature:(T ptr)
handle	include/pybind11/pytypes.h	/^class handle : public detail::object_api<handle> {$/;"	c	inherits:detail::object_api<handle>
handle::cast	include/pybind11/cast.h	/^T handle::cast() const {$/;"	f	class:handle	typeref:typename:T	signature:() const
handle::cast	include/pybind11/cast.h	/^inline void handle::cast() const {$/;"	f	class:handle	typeref:typename:void	signature:() const
handle::cast	include/pybind11/pytypes.h	/^    T cast() const;$/;"	p	class:handle	typeref:typename:T	access:public	signature:() const
handle::check	include/pybind11/pytypes.h	/^    bool check() const { return m_ptr != nullptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use handle::operator bool() instead")bool	access:public	signature:() const
handle::dec_ref	include/pybind11/pytypes.h	/^    const handle &dec_ref() const & {$/;"	f	class:handle	typeref:typename:const handle &	access:public	signature:() const
handle::handle	include/pybind11/pytypes.h	/^    handle() = default;$/;"	p	class:handle	access:public	signature:()
handle::handle	include/pybind11/pytypes.h	/^    handle(T &obj) : m_ptr(obj) {}$/;"	f	class:handle	access:public	signature:(T & obj)
handle::handle	include/pybind11/pytypes.h	/^    handle(T ptr) : m_ptr(ptr) {}$/;"	f	class:handle	access:public	signature:(T ptr)
handle::inc_ref	include/pybind11/pytypes.h	/^    const handle &inc_ref() const & {$/;"	f	class:handle	typeref:typename:const handle &	access:public	signature:() const
handle::inc_ref_counter	include/pybind11/pytypes.h	/^    static std::size_t inc_ref_counter() { return inc_ref_counter(0); }$/;"	f	class:handle	typeref:typename:std::size_t	access:public	signature:()
handle::inc_ref_counter	include/pybind11/pytypes.h	/^    static std::size_t inc_ref_counter(std::size_t add) {$/;"	f	class:handle	typeref:typename:std::size_t	access:private	signature:(std::size_t add)
handle::m_ptr	include/pybind11/pytypes.h	/^    PyObject *m_ptr = nullptr;$/;"	m	class:handle	typeref:typename:PyObject *	access:protected
handle::operator !=	include/pybind11/pytypes.h	/^    bool operator!=(const handle &h) const { return m_ptr != h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use !obj1.is(obj2) instead")bool	access:public	signature:(const handle & h) const
handle::operator ==	include/pybind11/pytypes.h	/^    bool operator==(const handle &h) const { return m_ptr == h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use obj1.is(obj2) instead")bool	access:public	signature:(const handle & h) const
handle::operator bool	include/pybind11/pytypes.h	/^    explicit operator bool() const { return m_ptr != nullptr; }$/;"	f	class:handle	access:public	signature:() const
handle::ptr	include/pybind11/pytypes.h	/^    PyObject *&ptr() { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject * &	access:public	signature:()
handle::ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject *	access:public	signature:() const
handle::throw_gilstate_error	include/pybind11/pytypes.h	/^    void throw_gilstate_error(const std::string &function_name) const {$/;"	f	class:handle	typeref:typename:void	access:private	signature:(const std::string & function_name) const
handle_from_move_only_type_with_operator_PyObject	tests/test_pytypes.cpp	/^namespace handle_from_move_only_type_with_operator_PyObject {$/;"	n	file:
handle_from_move_only_type_with_operator_PyObject::from_const	tests/test_pytypes.cpp	/^bool from_const() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:bool	signature:()
handle_from_move_only_type_with_operator_PyObject::from_ncnst	tests/test_pytypes.cpp	/^bool from_ncnst() {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:bool	signature:()
handle_from_move_only_type_with_operator_PyObject::m_defs	tests/test_pytypes.cpp	/^void m_defs(py::module_ &m) {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:void	signature:(py::module_ & m)
handle_from_move_only_type_with_operator_PyObject::operator_const	tests/test_pytypes.cpp	/^struct operator_const {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
handle_from_move_only_type_with_operator_PyObject::operator_const::operator PyObject*	tests/test_pytypes.cpp	/^    operator PyObject *() const { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:() const
handle_from_move_only_type_with_operator_PyObject::operator_const::operator_const	tests/test_pytypes.cpp	/^    operator_const() = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:()
handle_from_move_only_type_with_operator_PyObject::operator_const::operator_const	tests/test_pytypes.cpp	/^    operator_const(operator_const &&) = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:(operator_const &&)
handle_from_move_only_type_with_operator_PyObject::operator_ncnst	tests/test_pytypes.cpp	/^struct operator_ncnst {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
handle_from_move_only_type_with_operator_PyObject::operator_ncnst::operator PyObject*	tests/test_pytypes.cpp	/^    operator PyObject *() \/* *\/ { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:()
handle_from_move_only_type_with_operator_PyObject::operator_ncnst::operator_ncnst	tests/test_pytypes.cpp	/^    operator_ncnst() = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:()
handle_from_move_only_type_with_operator_PyObject::operator_ncnst::operator_ncnst	tests/test_pytypes.cpp	/^    operator_ncnst(operator_ncnst &&) = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:(operator_ncnst &&)
handle_nested_exception	include/pybind11/detail/internals.h	/^bool handle_nested_exception(const T &exc, const std::exception_ptr &p) {$/;"	f	typeref:typename:bool	signature:(const T & exc,const std::exception_ptr & p)
handle_of	include/pybind11/pytypes.h	/^    static handle handle_of();$/;"	p	class:type	typeref:typename:handle	access:public	signature:()
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<args> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<bool_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<bytes> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<float_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<int_> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<iterable> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<iterator> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<kwargs> {$/;"	s
handle_type_name	include/pybind11/cast.h	/^struct handle_type_name<none> {$/;"	s
handle_type_name	include/pybind11/numpy.h	/^struct handle_type_name<array> {$/;"	s
handle_type_name	include/pybind11/numpy.h	/^struct handle_type_name<array_t<T, Flags>> {$/;"	s
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("**kwargs");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("*args");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterable");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterator");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("None");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("bool");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("float");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("int");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_BYTES_NAME);$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name<T>();$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name("numpy.ndarray");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handle_type_name::name	include/pybind11/numpy.h	/^    static constexpr auto name$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
handling_python_exceptions_cpp	docs/advanced/exceptions.rst	/^.. _handling_python_exceptions_cpp:$/;"	T	chapter:Local vs Global Exception Translators
has_alias	include/pybind11/pybind11.h	/^    constexpr static bool has_alias = !std::is_void<type_alias>::value;$/;"	m	class:class_	typeref:typename:bool	access:public
has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory6	typeref:typename:bool	file:	access:public	signature:() const
has_alias	tests/test_factory_constructors.cpp	/^    bool has_alias() const { return alias; }$/;"	f	class:TestFactory7	typeref:typename:bool	file:	access:public	signature:() const
has_args	include/pybind11/attr.h	/^    bool has_args : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
has_fields	include/pybind11/numpy.h	/^    bool has_fields() const { return detail::array_descriptor_proxy(m_ptr)->names != nullptr; }$/;"	f	class:dtype	typeref:typename:bool	access:public	signature:() const
has_flag	pybind11/setup_helpers.py	/^def has_flag(compiler: Any, flag: str) -> bool:$/;"	f	typeref:typename:bool	access:public	signature:(compiler: Any, flag: str)
has_kwargs	include/pybind11/attr.h	/^    bool has_kwargs : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
has_kwargs	include/pybind11/cast.h	/^    static constexpr bool has_kwargs = kwargs_pos != -1;$/;"	m	class:argument_loader	typeref:typename:bool	access:public
has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = false;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
has_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_mapped_type = true;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
has_operator_delete	include/pybind11/pybind11.h	/^struct has_operator_delete : std::false_type {};$/;"	s	inherits:std::false_type
has_operator_delete	include/pybind11/pybind11.h	/^struct has_operator_delete<T, void_t<decltype(static_cast<void (*)(void *)>(T::operator delete))/;"	s	inherits:std::true_type
has_operator_delete_size	include/pybind11/pybind11.h	/^struct has_operator_delete_size : std::false_type {};$/;"	s	inherits:std::false_type
has_operator_delete_size	include/pybind11/pybind11.h	/^struct has_operator_delete_size<$/;"	s	inherits:std::true_type
has_patients	include/pybind11/detail/common.h	/^    bool has_patients : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
has_pybind11_internals_static	tests/test_embed/test_interpreter.cpp	/^bool has_pybind11_internals_static() {$/;"	f	typeref:typename:bool	signature:()
has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = false;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
has_recursive_mapped_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_mapped_type = true;$/;"	m	struct:container_mapped_type_traits	typeref:typename:bool	access:public
has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = false;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
has_recursive_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_recursive_value_type = true;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
has_reserve_method	include/pybind11/stl.h	/^using has_reserve_method = std::is_same<decltype(std::declval<C>().reserve(0)), void>;$/;"	t
has_state_dict_internals_obj	tests/test_embed/test_interpreter.cpp	/^bool has_state_dict_internals_obj() {$/;"	f	typeref:typename:bool	signature:()
has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = false;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
has_value_type	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool has_value_type = true;$/;"	m	struct:container_value_type_traits	typeref:typename:bool	access:public
hasattr	include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, const char *name) {$/;"	f	typeref:typename:bool	signature:(handle obj,const char * name)
hasattr	include/pybind11/pytypes.h	/^inline bool hasattr(handle obj, handle name) {$/;"	f	typeref:typename:bool	signature:(handle obj,handle name)
hash	include/pybind11/pytypes.h	/^inline ssize_t hash(handle obj) {$/;"	f	typeref:typename:ssize_t	signature:(handle obj)
hash	tests/test_operator_overloading.cpp	/^        size_t hash() const { return static_cast<size_t>(value); }$/;"	f	struct:TEST_SUBMODULE::Hashable	typeref:typename:size_t	file:	access:public	signature:() const
hash	tests/test_operator_overloading.cpp	/^struct hash<HashMe> {$/;"	s	namespace:std	file:
hash	tests/test_operator_overloading.cpp	/^struct hash<Vector2> {$/;"	s	namespace:std	file:
hash	tests/test_stl.cpp	/^struct hash<TplCtorClass> {$/;"	s	namespace:std	file:
headers	tests/extra_python_package/test_files.py	/^headers = main_headers | detail_headers | eigen_headers | stl_headers$/;"	v	access:public
headers	tools/setup_global.py.in	/^headers = main_headers + detail_headers + stl_headers + eigen_headers$/;"	v	access:public
help	docs/Makefile	/^help:$/;"	t
helper	include/pybind11/eigen/tensor.h	/^    struct helper {};$/;"	s	struct:eigen_tensor_helper	access:public
helper	include/pybind11/eigen/tensor.h	/^    struct helper<index_sequence<Is...>> {$/;"	s	struct:eigen_tensor_helper	access:public
hfunc	include/pybind11/functional.h	/^            func_handle hfunc;$/;"	m	struct:type_caster::load::func_wrapper	typeref:typename:func_handle	access:public
highlight_language	docs/conf.py	/^highlight_language = "cpp"$/;"	v	access:public
holder	include/pybind11/cast.h	/^    holder_type holder;$/;"	m	struct:copyable_holder_caster	typeref:typename:holder_type	access:protected
holder	include/pybind11/detail/type_caster_base.h	/^    H &holder() const {$/;"	f	struct:value_and_holder	typeref:typename:H &	access:public	signature:() const
holder_constructed	include/pybind11/detail/type_caster_base.h	/^    bool holder_constructed() const {$/;"	f	struct:value_and_holder	typeref:typename:bool	access:public	signature:() const
holder_helper	include/pybind11/cast.h	/^struct holder_helper {$/;"	s
holder_helper	tests/test_smart_ptr.cpp	/^struct holder_helper<ref<T>> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
holder_helper::get	include/pybind11/cast.h	/^    static auto get(const T &p) -> decltype(p.get()) { return p.get(); }$/;"	f	struct:holder_helper	typeref:typename:decltype(p.get ())	access:public	signature:(const T & p)
holder_size	include/pybind11/attr.h	/^    size_t holder_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
holder_size_in_ptrs	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
holder_type	include/pybind11/pybind11.h	/^    using holder_type = detail::exactly_one_t<is_holder, std::unique_ptr<type>, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_holder,std::unique_ptr<type>,options...>	access:public
hook	tests/test_exceptions.py	/^        def hook(unraisable_hook_args):$/;"	f	function:test_python_alreadyset_in_destructor	file:	access:private	signature:(unraisable_hook_args)
html	docs/Makefile	/^html:$/;"	t
html_css_files	docs/conf.py	/^html_css_files = [$/;"	v	access:public
html_static_path	docs/conf.py	/^html_static_path = ["_static"]$/;"	v	access:public
html_theme	docs/conf.py	/^html_theme = "furo"$/;"	v	access:public
htmlhelp	docs/Makefile	/^htmlhelp:$/;"	t
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = "pybind11doc"$/;"	v	access:public
huge_unique_ptr	tests/test_smart_ptr.cpp	/^    explicit huge_unique_ptr(T *p) : ptr(p) {}$/;"	f	class:__anond975f9d30111::huge_unique_ptr	file:	access:public	signature:(T * p)
huge_unique_ptr	tests/test_smart_ptr.cpp	/^class huge_unique_ptr {$/;"	c	namespace:__anond975f9d30111	file:
i	tests/local_bindings.h	/^    int i = -1;$/;"	m	class:LocalBase	typeref:typename:int	access:public
i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL	typeref:typename:int	access:public
i	tests/local_bindings.h	/^    int i;$/;"	m	struct:MixGL2	typeref:typename:int	access:public
i	tests/pybind11_tests.h	/^    int i = -1;$/;"	m	class:UserType	typeref:typename:int	access:private
i	tests/pybind11_tests.h	/^    int i;$/;"	m	union:IntFloat	typeref:typename:int	access:public
i	tests/test_class.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::ConvertibleFromUserType	typeref:typename:int	file:	access:public
i	tests/test_class.cpp	/^        std::uint32_t i;$/;"	m	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:std::uint32_t	file:	access:public
i	tests/test_class.cpp	/^        std::uint32_t i[8];$/;"	m	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:std::uint32_t[8]	file:	access:public
i	tests/test_class.cpp	/^        std::uint64_t i;$/;"	m	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:std::uint64_t	file:	access:public
i	tests/test_class.cpp	/^        std::uint64_t i;$/;"	m	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:std::uint64_t	file:	access:public
i	tests/test_embed/test_interpreter.cpp	/^        for (auto i = 0; i < num_threads; ++i) {$/;"	v	typeref:typename:auto
i	tests/test_embed/test_interpreter.cpp	/^    int i = 0;$/;"	v	typeref:typename:int
i	tests/test_factory_constructors.cpp	/^        int i;$/;"	m	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:int	file:	access:public
i	tests/test_multiple_inheritance.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::Base1	typeref:typename:int	file:	access:public
i	tests/test_multiple_inheritance.cpp	/^        int i;$/;"	m	struct:TEST_SUBMODULE::Base2	typeref:typename:int	file:	access:public
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::Base1a	typeref:typename:int	file:	access:public
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::Base2a	typeref:typename:int	file:	access:public
i	tests/test_multiple_inheritance.cpp	/^    int i;$/;"	m	struct:__anon9ca8d76c0111::BaseN	typeref:typename:int	file:	access:public
if_not_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_not_recursive = T;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:T	access:public
if_not_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_not_recursive = std::pair<typename std::remove_const<A>::type, B>;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:std::pair<typename std::remove_const<A>::type,B>	access:public
if_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_recursive = recursive_bottom;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:recursive_bottom	access:public
if_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_recursive = typename std::remove_const<A>::type;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:std::remove_const<A>::type	access:public
if_zero	include/pybind11/eigen/matrix.h	/^    using if_zero = std::integral_constant<EigenIndex, i == 0 ? ifzero : i>;$/;"	t	struct:EigenProps	typeref:typename:std::integral_constant<EigenIndex,i==0?ifzero:i>	access:public
ignore_pytest_unraisable_warning	tests/test_exceptions.py	/^def ignore_pytest_unraisable_warning(f):$/;"	f	access:public	signature:(f)
impl	include/pybind11/attr.h	/^    handle (*impl)(function_call &) = nullptr;$/;"	m	struct:function_record	typeref:typename:handle (*)(function_call &)	access:public
impl	tests/test_smart_ptr.cpp	/^    std::shared_ptr<T> impl;$/;"	m	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:std::shared_ptr<T>	file:	access:private
impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:std::unique_ptr<T>	file:	access:private
impl	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> impl;$/;"	m	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:std::unique_ptr<T>	file:	access:private
impl_recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct impl_recursive_container_traits {$/;"	s
impl_recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct impl_recursive_container_traits<$/;"	s
impl_recursive_container_traits::is_recursive	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool is_recursive$/;"	m	struct:impl_recursive_container_traits	typeref:typename:bool	access:public
impl_recursive_container_traits::type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^    using type_to_check_recursively = recursive_bottom;$/;"	t	struct:impl_recursive_container_traits	typeref:typename:recursive_bottom	access:public
impl_recursive_container_traits::type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^    using type_to_check_recursively = typename std::conditional<$/;"	t	struct:impl_recursive_container_traits	access:public
impl_type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^struct impl_type_to_check_recursively {$/;"	s
impl_type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^struct impl_type_to_check_recursively<std::pair<A, B>, \/* is_this_a_map = *\/ true> {$/;"	s
impl_type_to_check_recursively::if_not_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_not_recursive = T;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:T	access:public
impl_type_to_check_recursively::if_not_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_not_recursive = std::pair<typename std::remove_const<A>::type, B>;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:std::pair<typename std::remove_const<A>::type,B>	access:public
impl_type_to_check_recursively::if_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_recursive = recursive_bottom;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:recursive_bottom	access:public
impl_type_to_check_recursively::if_recursive	include/pybind11/detail/type_caster_base.h	/^    using if_recursive = typename std::remove_const<A>::type;$/;"	t	struct:impl_type_to_check_recursively	typeref:typename:std::remove_const<A>::type	access:public
implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) & {$/;"	f	class:tuple_caster	typeref:typename:type	access:protected	signature:(index_sequence<Is...>)
implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) && {$/;"	f	class:tuple_caster	typeref:typename:type	access:protected	signature:(index_sequence<Is...>)
implicit_casting	docs/advanced/pycpp/object.rst	/^.. _implicit_casting:$/;"	T	chapter:Unpacking arguments
implicit_casts	include/pybind11/detail/internals.h	/^    std::vector<std::pair<const std::type_info *, void *(*) (void *)>> implicit_casts;$/;"	m	struct:type_info	typeref:typename:std::vector<std::pair<const std::type_info *,void * (*)(void *)>>	access:public
implicit_conversion_from_0_to_handle	tests/test_pytypes.cpp	/^namespace implicit_conversion_from_0_to_handle {$/;"	n	file:
implicit_conversions	docs/advanced/classes.rst	/^.. _implicit_conversions:$/;"	T	chapter:Destructors that call Python
implicit_conversions	include/pybind11/detail/internals.h	/^    std::vector<PyObject *(*) (PyObject *, PyTypeObject *)> implicit_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<PyObject * (*)(PyObject *,PyTypeObject *)>	access:public
implicitly_convertible	include/pybind11/pybind11.h	/^void implicitly_convertible() {$/;"	f	typeref:typename:void	signature:()
implicitly_convertible::set_flag::flag	include/pybind11/pybind11.h	/^        bool &flag;$/;"	m	struct:implicitly_convertible::set_flag	typeref:typename:bool &	access:public
implicitly_convertible::set_flag::set_flag	include/pybind11/pybind11.h	/^        explicit set_flag(bool &flag_) : flag(flag_) { flag_ = true; }$/;"	f	struct:implicitly_convertible::set_flag	access:public	signature:(bool & flag_)
implicitly_convertible::set_flag::~set_flag	include/pybind11/pybind11.h	/^        ~set_flag() { flag = false; }$/;"	f	struct:implicitly_convertible::set_flag	access:public	signature:()
import	include/pybind11/pybind11.h	/^    static module_ import(const char *name) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name)
inactive_override_cache	include/pybind11/detail/internals.h	/^        inactive_override_cache;$/;"	m	struct:internals	typeref:typename:std::unordered_set<std::pair<const PyObject *,const char * >,override_hash>	access:public
incRef	tests/object.h	/^    void incRef() const { ++m_refCount; }$/;"	f	class:Object	typeref:typename:void	access:public	signature:() const
inc_ref	include/pybind11/gil.h	/^    void inc_ref() { ++tstate->gilstate_counter; }$/;"	f	class:gil_scoped_acquire	typeref:typename:void	access:public	signature:()
inc_ref	include/pybind11/pytypes.h	/^    const handle &inc_ref() const & {$/;"	f	class:handle	typeref:typename:const handle &	access:public	signature:() const
inc_ref_counter	include/pybind11/pytypes.h	/^    static std::size_t inc_ref_counter() { return inc_ref_counter(0); }$/;"	f	class:handle	typeref:typename:std::size_t	access:public	signature:()
inc_ref_counter	include/pybind11/pytypes.h	/^    static std::size_t inc_ref_counter(std::size_t add) {$/;"	f	class:handle	typeref:typename:std::size_t	access:private	signature:(std::size_t add)
include_as_a_submodule	docs/installing.rst	/^.. _include_as_a_submodule:$/;"	T	title:Installing the library
increase_value	tests/test_methods_and_attributes.cpp	/^    void increase_value() {$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:()
increment	include/pybind11/numpy.h	/^    void increment(size_type dim) { p_ptr += m_strides[dim]; }$/;"	f	class:common_iterator	typeref:typename:void	access:public	signature:(size_type dim)
increment	include/pybind11/pytypes.h	/^    void increment() { ++index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:()
increment	include/pybind11/pytypes.h	/^    void increment() { ++ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:()
increment	include/pybind11/pytypes.h	/^    void increment() {$/;"	f	class:dict_readonly	typeref:typename:void	access:protected	signature:()
increment_common_iterator	include/pybind11/numpy.h	/^    void increment_common_iterator(size_t dim) {$/;"	f	class:multi_array_iterator	typeref:typename:void	access:private	signature:(size_t dim)
index	include/pybind11/complex.h	/^    static constexpr int index = is_fmt_numeric<T>::index + 3;$/;"	m	struct:is_fmt_numeric	typeref:typename:int	access:public
index	include/pybind11/detail/common.h	/^    static constexpr auto index = found ? constexpr_first<Predicate, Ts...>() : 0;$/;"	m	struct:exactly_one	typeref:typename:auto	access:public
index	include/pybind11/detail/common.h	/^    static constexpr int index$/;"	m	struct:is_fmt_numeric	typeref:typename:int	access:public
index	include/pybind11/detail/type_caster_base.h	/^    size_t index = 0u;$/;"	m	struct:value_and_holder	typeref:typename:size_t	access:public
index	include/pybind11/pytypes.h	/^    ssize_t index;$/;"	m	class:sequence_slow_readwrite	typeref:typename:ssize_t	access:private
index_at	include/pybind11/numpy.h	/^    ssize_t index_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
index_at	include/pybind11/numpy.h	/^    ssize_t index_at(Ix... index) const {$/;"	f	class:array_t	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
index_at	tests/test_numpy_array.cpp	/^py::ssize_t index_at(const arr &a, Ix... idx) {$/;"	f	typeref:typename:py::ssize_t	signature:(const arr & a,Ix...idx)
index_at_t	tests/test_numpy_array.cpp	/^py::ssize_t index_at_t(const arr_t &a, Ix... idx) {$/;"	f	typeref:typename:py::ssize_t	signature:(const arr_t & a,Ix...idx)
index_sequence	include/pybind11/detail/common.h	/^struct index_sequence {};$/;"	s
index_to_object	include/pybind11/pytypes.h	/^    static object index_to_object(T index) {$/;"	f	class:slice	typeref:typename:object	access:private	signature:(T index)
indices	include/pybind11/cast.h	/^    using indices = make_index_sequence<size>;$/;"	t	class:tuple_caster	typeref:typename:make_index_sequence<size>	access:private
indices	include/pybind11/cast.h	/^    using indices = make_index_sequence<sizeof...(Args)>;$/;"	t	class:argument_loader	access:private
indices	tests/test_eigen_tensor.py	/^indices = (2, 3, 1)$/;"	v	access:public
info	docs/Makefile	/^info:$/;"	t
inheritance	docs/classes.rst	/^.. _inheritance:$/;"	T	chapter:Dynamic attributes
init	include/pybind11/attr.h	/^    static void init(const Args &...args, function_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(const Args &...args,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const Args &...args, type_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(const Args &...args,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const T &, function_record *) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(const T &,function_record *)
init	include/pybind11/attr.h	/^    static void init(const T &, type_record *) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(const T &,type_record *)
init	include/pybind11/attr.h	/^    static void init(const arg &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const arg & a,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const arg_v &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const arg_v & a,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const base<T> &, type_record *r) { r->add_base(typeid(T), nullptr); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const base<T> &,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const buffer_protocol &, type_record *r) { r->buffer_protocol = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const buffer_protocol &,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const char *d, function_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const char * d,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const char *d, type_record *r) { r->doc = d; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const char * d,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const custom_type_setup &value, type_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const custom_type_setup & value,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const doc &n, function_record *r) { r->doc = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const doc & n,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const dynamic_attr &, type_record *r) { r->dynamic_attr = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const dynamic_attr &,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const handle &h, type_record *r) { r->bases.append(h); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const handle & h,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const is_final &, type_record *r) { r->is_final = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_final &,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const is_method &s, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_method & s,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const is_new_style_constructor &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_new_style_constructor &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const is_operator &, function_record *r) { r->is_operator = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_operator &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const is_setter &, function_record *r) { r->is_setter = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_setter &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const kw_only &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const kw_only &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const metaclass &m, type_record *r) { r->metaclass = m.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const metaclass & m,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const module_local &l, type_record *r) { r->module_local = l.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const module_local & l,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const multiple_inheritance &, type_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const multiple_inheritance &,type_record * r)
init	include/pybind11/attr.h	/^    static void init(const name &n, function_record *r) { r->name = const_cast<char *>(n.value);/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const name & n,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const pos_only &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const pos_only &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const prepend &, function_record *r) { r->prepend = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const prepend &,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const return_value_policy &p, function_record *r) { r->policy = p; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const return_value_policy & p,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const scope &s, function_record *r) { r->scope = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const scope & s,function_record * r)
init	include/pybind11/attr.h	/^    static void init(const sibling &s, function_record *r) { r->sibling = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const sibling & s,function_record * r)
init	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void init(bool is_arithmetic, bool is_convertible) {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(bool is_arithmetic,bool is_convertible)
init	include/pybind11/pybind11.h	/^Ret init(CFunc &&c, AFunc &&a) {$/;"	f	typeref:typename:Ret	signature:(CFunc && c,AFunc && a)
init	include/pybind11/pybind11.h	/^Ret init(Func &&f) {$/;"	f	typeref:typename:Ret	signature:(Func && f)
init	include/pybind11/pybind11.h	/^detail::initimpl::constructor<Args...> init() {$/;"	f	typeref:typename:detail::initimpl::constructor<Args...>	signature:()
init_alias	include/pybind11/pybind11.h	/^detail::initimpl::alias_constructor<Args...> init_alias() {$/;"	f	typeref:typename:detail::initimpl::alias_constructor<Args...>	signature:()
init_common_iterator	include/pybind11/numpy.h	/^    void init_common_iterator(const buffer_info &buffer,$/;"	f	class:multi_array_iterator	typeref:typename:void	access:private	signature:(const buffer_info & buffer,const container_type & shape,common_iter & iterator,container_type & strides)
init_holder	include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,detail::value_and_holder & v_h,const holder_type * holder_ptr,const void *)
init_holder	include/pybind11/pybind11.h	/^    static void init_holder(detail::instance *inst,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,detail::value_and_holder & v_h,const holder_type *,const std::enable_shared_from_this<T> *)
init_holder_from_existing	include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(const detail::value_and_holder & v_h,const holder_type * holder_ptr,std::false_type)
init_holder_from_existing	include/pybind11/pybind11.h	/^    static void init_holder_from_existing(const detail::value_and_holder &v_h,$/;"	f	class:class_	typeref:typename:void	access:private	signature:(const detail::value_and_holder & v_h,const holder_type * holder_ptr,std::true_type)
init_instance	include/pybind11/attr.h	/^    void (*init_instance)(instance *, const void *) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(instance *,const void *)	access:public
init_instance	include/pybind11/detail/internals.h	/^    void (*init_instance)(instance *, const void *);$/;"	m	struct:type_info	typeref:typename:void (*)(instance *,const void *)	access:public
init_instance	include/pybind11/pybind11.h	/^    static void init_instance(detail::instance *inst, const void *holder_ptr) {$/;"	f	class:class_	typeref:typename:void	access:private	signature:(detail::instance * inst,const void * holder_ptr)
init_self	include/pybind11/cast.h	/^    handle init_self;$/;"	m	struct:function_call	typeref:typename:handle	access:public
init_t	include/pybind11/embed.h	/^    using init_t = PyObject *(*) ();$/;"	t	struct:embedded_module	access:public
init_tensor_module	tests/test_eigen_tensor.inl	/^void init_tensor_module(pybind11::module &m) {$/;"	f	typeref:typename:void	signature:(pybind11::module & m)
initialize	include/pybind11/pybind11.h	/^    void initialize(Func &&f, Return (*)(Args...), const Extra &...extra) {$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(Func && f,Return (*)(Args...),const Extra &...extra)
initialize	include/pybind11/pybind11.h	/^    void initialize(const type_record &rec) {$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(const type_record & rec)
initialize_generic	include/pybind11/pybind11.h	/^    void initialize_generic(unique_function_record &&unique_rec,$/;"	f	class:cpp_function	typeref:typename:void	access:protected	signature:(unique_function_record && unique_rec,const char * text,const std::type_info * const * types,size_t args)
initialize_inherited_virtuals	tests/test_virtual_functions.cpp	/^void initialize_inherited_virtuals(py::module_ &m) {$/;"	f	typeref:typename:void	signature:(py::module_ & m)
initialize_inherited_virtuals	tests/test_virtual_functions.cpp	/^void initialize_inherited_virtuals(py::module_ &m);$/;"	p	typeref:typename:void	file:	signature:(py::module_ & m)
initialize_interpreter	include/pybind11/embed.h	/^inline void initialize_interpreter(bool init_signal_handlers = true,$/;"	f	typeref:typename:void	signature:(bool init_signal_handlers=true,int argc=0,const char * const * argv=nullptr,bool add_program_dir_to_path=true)
initialize_interpreter	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_THROWS_WITH(py::initialize_interpreter(), "The interpreter is already running");$/;"	p	class:py	typeref:typename:REQUIRE_THROWS_WITH (,"The interpreter is already running")	file:	signature:()
initialize_interpreter	tests/test_embed/test_interpreter.cpp	/^    py::initialize_interpreter();$/;"	p	class:py	file:	signature:()
initialize_interpreter_pre_pyconfig	include/pybind11/embed.h	/^inline void initialize_interpreter_pre_pyconfig(bool init_signal_handlers,$/;"	f	typeref:typename:void	signature:(bool init_signal_handlers,int argc,const char * const * argv,bool add_program_dir_to_path)
initialized	tests/test_stl.cpp	/^        bool initialized = true;$/;"	m	struct:TEST_SUBMODULE::MoveOutDetector	typeref:typename:bool	file:	access:public
initializers	tests/pybind11_tests.cpp	/^std::list<std::function<void(py::module_ &)>> &initializers() {$/;"	f	typeref:typename:std::list<std::function<void (py::module_ &)>> &	signature:()
inner_stride	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex inner_stride$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
insert	include/pybind11/pytypes.h	/^    void insert(const IdxType &index, ValType &&val) \/* py-non-const *\/ {$/;"	f	class:list	typeref:typename:void	access:public	signature:(const IdxType & index,ValType && val)
inst	include/pybind11/detail/type_caster_base.h	/^        instance *inst = nullptr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:instance *	access:private
inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:instance *	access:public
inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst;$/;"	m	struct:values_and_holders	typeref:typename:instance *	access:private
install	pybind11/setup_helpers.py	/^    def install(self: S) -> S:$/;"	m	class:ParallelCompile	typeref:typename:S	access:public	signature:(self: S)
install_buffer_funcs	include/pybind11/pybind11.h	/^    void install_buffer_funcs(buffer_info *(*get_buffer)(PyObject *, void *),$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(buffer_info * (* get_buffer)(PyObject *,void *),void * get_buffer_data)
installing	docs/installing.rst	/^.. _installing:$/;"	T
instance	include/pybind11/detail/common.h	/^struct instance {$/;"	s
instance::__anonf1125e50010a	include/pybind11/detail/common.h	/^    union {$/;"	u	struct:instance	access:public
instance::__anonf1125e50010a::nonsimple	include/pybind11/detail/common.h	/^        nonsimple_values_and_holders nonsimple;$/;"	m	union:instance::__anonf1125e50010a	typeref:typename:nonsimple_values_and_holders	access:public
instance::__anonf1125e50010a::simple_value_holder	include/pybind11/detail/common.h	/^        void *simple_value_holder[1 + instance_simple_holder_in_ptrs()];$/;"	m	union:instance::__anonf1125e50010a	typeref:typename:void * []	access:public
instance::allocate_layout	include/pybind11/detail/common.h	/^    void allocate_layout();$/;"	p	struct:instance	typeref:typename:void	access:public	signature:()
instance::allocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::allocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void	signature:()
instance::deallocate_layout	include/pybind11/detail/common.h	/^    void deallocate_layout();$/;"	p	struct:instance	typeref:typename:void	access:public	signature:()
instance::deallocate_layout	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE void instance::deallocate_layout() {$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE void	signature:()
instance::get_value_and_holder	include/pybind11/detail/common.h	/^    value_and_holder get_value_and_holder(const type_info *find_type = nullptr,$/;"	p	struct:instance	typeref:typename:value_and_holder	access:public	signature:(const type_info * find_type=nullptr,bool throw_if_missing=true)
instance::get_value_and_holder	include/pybind11/detail/type_caster_base.h	/^instance::get_value_and_holder(const type_info *find_type \/*= nullptr default in common.h*\/,$/;"	f	class:instance	typeref:typename:PYBIND11_NOINLINE value_and_holder	signature:(const type_info * find_type,bool throw_if_missing)
instance::has_patients	include/pybind11/detail/common.h	/^    bool has_patients : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
instance::owned	include/pybind11/detail/common.h	/^    bool owned : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
instance::simple_holder_constructed	include/pybind11/detail/common.h	/^    bool simple_holder_constructed : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
instance::simple_instance_registered	include/pybind11/detail/common.h	/^    bool simple_instance_registered : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
instance::simple_layout	include/pybind11/detail/common.h	/^    bool simple_layout : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
instance::status_holder_constructed	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_holder_constructed = 1;$/;"	m	struct:instance	typeref:typename:uint8_t	access:public
instance::status_instance_registered	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_instance_registered = 2;$/;"	m	struct:instance	typeref:typename:uint8_t	access:public
instance::weakrefs	include/pybind11/detail/common.h	/^    PyObject *weakrefs;$/;"	m	struct:instance	typeref:typename:PyObject *	access:public
instance_	tests/test_copy_move.cpp	/^    static derived instance_;$/;"	m	struct:empty	typeref:typename:derived	file:	access:public
instance_	tests/test_copy_move.cpp	/^lacking_copy_ctor empty<lacking_copy_ctor>::instance_ = {};$/;"	m	class:empty<lacking_copy_ctor>	typeref:typename:lacking_copy_ctor
instance_	tests/test_copy_move.cpp	/^lacking_move_ctor empty<lacking_move_ctor>::instance_ = {};$/;"	m	class:empty<lacking_move_ctor>	typeref:typename:lacking_move_ctor
instance_base	include/pybind11/detail/internals.h	/^    PyObject *instance_base;$/;"	m	struct:internals	typeref:typename:PyObject *	access:public
instance_registered	include/pybind11/detail/type_caster_base.h	/^    bool instance_registered() const {$/;"	f	struct:value_and_holder	typeref:typename:bool	access:public	signature:() const
instance_simple_holder_in_ptrs	include/pybind11/detail/common.h	/^constexpr size_t instance_simple_holder_in_ptrs() {$/;"	f	typeref:typename:size_t	signature:()
instantiating_compound_types	docs/advanced/pycpp/object.rst	/^.. _instantiating_compound_types:$/;"	T	chapter:Available wrappers
int_	include/pybind11/pytypes.h	/^    int_(T value) {$/;"	f	class:int_	access:public	signature:(T value)
int_	include/pybind11/pytypes.h	/^class int_ : public object {$/;"	c	inherits:object
int_::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(int_, object, PYBIND11_LONG_CHECK, PyNumber_Long)$/;"	f	class:int_	access:public	signature:(int_,object,PYBIND11_LONG_CHECK,PyNumber_Long)
int_::int_	include/pybind11/pytypes.h	/^    int_(T value) {$/;"	f	class:int_	access:public	signature:(T value)
int_::operator T	include/pybind11/pytypes.h	/^    operator T() const {$/;"	f	class:int_	access:public	signature:() const
int_to_str	include/pybind11/detail/descr.h	/^struct int_to_str : int_to_str<Rem \/ 10, Rem % 10, Digits...> {};$/;"	s	inherits:int_to_str<Rem/10,Rem%10,Digits...>
int_to_str	include/pybind11/detail/descr.h	/^struct int_to_str<0, Digits...> {$/;"	s
int_to_str::digits	include/pybind11/detail/descr.h	/^    static constexpr auto digits = descr<sizeof...(Digits)>(('0' + Digits)...);$/;"	m	struct:int_to_str	typeref:typename:auto	access:public
int_value	tests/test_methods_and_attributes.cpp	/^    int int_value() const { return int_value_; }$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:int	file:	access:public	signature:() const
int_value_	tests/test_methods_and_attributes.cpp	/^    int int_value_ = -99;$/;"	m	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:int	file:	access:private
interleaved_error_already_set	tests/cross_module_interleaved_error_already_set.cpp	/^void interleaved_error_already_set() {$/;"	f	namespace:__anon83ce96ce0111	typeref:typename:void	signature:()
internal1	tests/test_methods_and_attributes.cpp	/^    int internal1() const { return value; }        \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:int	file:	access:public	signature:() const
internal2	tests/test_methods_and_attributes.cpp	/^    int &internal2() { return value; }             \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:int &	file:	access:public	signature:()
internal3	tests/test_methods_and_attributes.cpp	/^    const int &internal3() const { return value; } \/\/ return by const reference$/;"	f	class:ExampleMandA	typeref:typename:const int &	file:	access:public	signature:() const
internal4	tests/test_methods_and_attributes.cpp	/^    int *internal4() { return &value; }            \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:int *	file:	access:public	signature:()
internal5	tests/test_methods_and_attributes.cpp	/^    const int *internal5() { return &value; }      \/\/ return by const pointer$/;"	f	class:ExampleMandA	typeref:typename:const int *	file:	access:public	signature:()
internals	include/pybind11/detail/internals.h	/^    internals() = default;$/;"	p	struct:internals	access:public	signature:()
internals	include/pybind11/detail/internals.h	/^    internals(const internals &other) = delete;$/;"	p	struct:internals	access:public	signature:(const internals & other)
internals	include/pybind11/detail/internals.h	/^struct internals {$/;"	s
internals::PYBIND11_TLS_KEY_INIT	include/pybind11/detail/internals.h	/^    PYBIND11_TLS_KEY_INIT(loader_life_support_tls_key)$/;"	p	struct:internals	typeref:typename:tstate	access:public	signature:(loader_life_support_tls_key)
internals::default_metaclass	include/pybind11/detail/internals.h	/^    PyTypeObject *default_metaclass;$/;"	m	struct:internals	typeref:typename:PyTypeObject *	access:public
internals::direct_conversions	include/pybind11/detail/internals.h	/^    type_map<std::vector<bool (*)(PyObject *, void *&)>> direct_conversions;$/;"	m	struct:internals	typeref:typename:type_map<std::vector<bool (*)(PyObject *,void * &)>>	access:public
internals::function_record_capsule_name	include/pybind11/detail/internals.h	/^    std::string function_record_capsule_name = internals_function_record_capsule_name;$/;"	m	struct:internals	typeref:typename:std::string	access:public
internals::inactive_override_cache	include/pybind11/detail/internals.h	/^        inactive_override_cache;$/;"	m	struct:internals	typeref:typename:std::unordered_set<std::pair<const PyObject *,const char * >,override_hash>	access:public
internals::instance_base	include/pybind11/detail/internals.h	/^    PyObject *instance_base;$/;"	m	struct:internals	typeref:typename:PyObject *	access:public
internals::internals	include/pybind11/detail/internals.h	/^    internals() = default;$/;"	p	struct:internals	access:public	signature:()
internals::internals	include/pybind11/detail/internals.h	/^    internals(const internals &other) = delete;$/;"	p	struct:internals	access:public	signature:(const internals & other)
internals::operator =	include/pybind11/detail/internals.h	/^    internals &operator=(const internals &other) = delete;$/;"	p	struct:internals	typeref:typename:internals &	access:public	signature:(const internals & other)
internals::patients	include/pybind11/detail/internals.h	/^    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;$/;"	m	struct:internals	typeref:typename:std::unordered_map<const PyObject *,std::vector<PyObject * >>	access:public
internals::registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:internals	typeref:typename:std::forward_list<ExceptionTranslator>	access:public
internals::registered_instances	include/pybind11/detail/internals.h	/^    std::unordered_multimap<const void *, instance *> registered_instances; \/\/ void * -> insta/;"	m	struct:internals	typeref:typename:std::unordered_multimap<const void *,instance * >	access:public
internals::registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:internals	typeref:typename:type_map<type_info * >	access:public
internals::registered_types_py	include/pybind11/detail/internals.h	/^    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py;$/;"	m	struct:internals	typeref:typename:std::unordered_map<PyTypeObject *,std::vector<type_info * >>	access:public
internals::shared_data	include/pybind11/detail/internals.h	/^    std::unordered_map<std::string, void *> shared_data; \/\/ Custom data to be shared across$/;"	m	struct:internals	typeref:typename:std::unordered_map<std::string,void * >	access:public
internals::static_property_type	include/pybind11/detail/internals.h	/^    PyTypeObject *static_property_type;$/;"	m	struct:internals	typeref:typename:PyTypeObject *	access:public
internals::static_strings	include/pybind11/detail/internals.h	/^    std::forward_list<std::string> static_strings; \/\/ Stores the std::strings backing$/;"	m	struct:internals	typeref:typename:std::forward_list<std::string>	access:public
internals::unused_loader_patient_stack_remove_at_v5	include/pybind11/detail/internals.h	/^    std::vector<PyObject *> unused_loader_patient_stack_remove_at_v5;$/;"	m	struct:internals	typeref:typename:std::vector<PyObject * >	access:public
internals::~internals	include/pybind11/detail/internals.h	/^    ~internals() {$/;"	f	struct:internals	access:public	signature:()
intree_extensions	pybind11/setup_helpers.py	/^def intree_extensions($/;"	f	typeref:typename:List[Pybind11Extension]	access:public	signature:( paths: Iterable[str], package_dir: Optional[Dict[str, str]] = None )
intrinsic_t	include/pybind11/detail/common.h	/^using intrinsic_t = typename intrinsic_type<T>::type;$/;"	t	typeref:typename:intrinsic_type<T>::type
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T &&> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T &> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T *> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<T[N]> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<const T> {$/;"	s
intrinsic_type	include/pybind11/detail/common.h	/^struct intrinsic_type<const T[N]> {$/;"	s
intrinsic_type::type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:intrinsic_type	typeref:typename:T	access:public
intrinsic_type::type	include/pybind11/detail/common.h	/^    using type = typename intrinsic_type<T>::type;$/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type	access:public
is	include/pybind11/pytypes.h	/^    bool is(object_api const &other) const { return derived().ptr() == other.derived().ptr(); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
is_accessible_base_of	include/pybind11/detail/common.h	/^using is_accessible_base_of$/;"	t
is_alias	include/pybind11/detail/init.h	/^bool is_alias(Cpp<Class> *ptr) {$/;"	f	typeref:typename:bool	signature:(Cpp<Class> * ptr)
is_alias	include/pybind11/detail/init.h	/^constexpr bool is_alias(void *) {$/;"	f	typeref:typename:bool	signature:(void *)
is_alias_constructible	include/pybind11/detail/init.h	/^using is_alias_constructible = std::is_constructible<Alias<Class>, Cpp<Class> &&>;$/;"	t	typeref:typename:std::is_constructible<Alias<Class>,Cpp<Class> &&>
is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = false;$/;"	m	struct:array_info_scalar	typeref:typename:bool	access:public
is_array	include/pybind11/numpy.h	/^    static constexpr bool is_array = true;$/;"	m	struct:array_info	typeref:typename:bool	access:public
is_base	include/pybind11/pybind11.h	/^    using is_base = detail::is_strict_base_of<T, type_>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<T,type_>	access:private
is_call_guard	include/pybind11/attr.h	/^using is_call_guard = is_instantiation<call_guard, T>;$/;"	t	typeref:typename:is_instantiation<call_guard,T>
is_comparable	include/pybind11/stl_bind.h	/^    static constexpr const bool is_comparable$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable : std::false_type {};$/;"	s	inherits:std::false_type
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<$/;"	s	inherits:std::true_type
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_pair>> {$/;"	s
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<T, enable_if_t<container_traits<T>::is_vector>>$/;"	s	inherits:is_comparable<typenamerecursive_container_traits<T>::type_to_check_recursively>
is_comparable	include/pybind11/stl_bind.h	/^struct is_comparable<recursive_bottom> : std::true_type {};$/;"	s	inherits:std::true_type
is_comparable::value	include/pybind11/stl_bind.h	/^    static constexpr const bool value = is_comparable<typename T::first_type>::value$/;"	m	struct:is_comparable	typeref:typename:const bool	access:public
is_complex	include/pybind11/numpy.h	/^struct is_complex : std::false_type {};$/;"	s	inherits:std::false_type
is_complex	include/pybind11/numpy.h	/^struct is_complex<std::complex<T>> : std::true_type {};$/;"	s	inherits:std::true_type
is_constructor	include/pybind11/attr.h	/^    bool is_constructor : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable$/;"	s	inherits:all_of<std::is_copy_assignable<T>,is_copy_assignable<typenamerecursive_container_traits<T>::type_to_check_recursively>>
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable<recursive_bottom> : std::true_type {};$/;"	s	inherits:std::true_type
is_copy_assignable	include/pybind11/detail/type_caster_base.h	/^struct is_copy_assignable<std::pair<T1, T2>>$/;"	s	inherits:all_of<is_copy_assignable<T1>,is_copy_assignable<T2>>
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible$/;"	s	inherits:all_of<std::is_copy_constructible<T>,is_copy_constructible<typenamerecursive_container_traits<T>::type_to_check_recursively>>
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible<recursive_bottom> : std::true_type {};$/;"	s	inherits:std::true_type
is_copy_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_copy_constructible<std::pair<T1, T2>>$/;"	s	inherits:all_of<is_copy_constructible<T1>,is_copy_constructible<T2>>
is_copy_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_copy_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:	inherits:std::false_type
is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> & \/*shape*\/) /;"	f	struct:eigen_tensor_helper	typeref:typename:bool	access:public	signature:(const Eigen::DSizes<typename Type::Index,Type::NumIndices> &)
is_correct_shape	include/pybind11/eigen/tensor.h	/^    is_correct_shape(const Eigen::DSizes<typename Type::Index, Type::NumIndices> &shape) {$/;"	f	struct:eigen_tensor_helper	typeref:typename:bool	access:public	signature:(const Eigen::DSizes<typename Type::Index,Type::NumIndices> & shape)
is_cpp_function	include/pybind11/pytypes.h	/^    bool is_cpp_function() const { return (bool) cpp_function(); }$/;"	f	class:function	typeref:typename:bool	access:public	signature:() const
is_debug	tools/pybind11Common.cmake	/^    set(is_debug "$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>")$/;"	v	function:_pybind11_generate_lto
is_ds_unpacking	include/pybind11/pytypes.h	/^using is_ds_unpacking = std::is_same<kwargs_proxy, T>; \/\/ ** unpacking$/;"	t	typeref:typename:std::is_same<kwargs_proxy,T>
is_eigen_dense_map	include/pybind11/eigen/matrix.h	/^using is_eigen_dense_map = all_of<is_template_base_of<Eigen::DenseBase, T>,$/;"	t	typeref:typename:all_of<is_template_base_of<Eigen::DenseBase,T>,std::is_base_of<Eigen::MapBase<T,Eigen::ReadOnlyAccessors>,T>>
is_eigen_dense_plain	include/pybind11/eigen/matrix.h	/^using is_eigen_dense_plain$/;"	t	typeref:typename:all_of<negation<is_eigen_dense_map<T>>,is_template_base_of<Eigen::PlainObjectBase,T>>
is_eigen_mutable_map	include/pybind11/eigen/matrix.h	/^using is_eigen_mutable_map = std::is_base_of<Eigen::MapBase<T, Eigen::WriteAccessors>, T>;$/;"	t	typeref:typename:std::is_base_of<Eigen::MapBase<T,Eigen::WriteAccessors>,T>
is_eigen_other	include/pybind11/eigen/matrix.h	/^using is_eigen_other$/;"	t
is_eigen_sparse	include/pybind11/eigen/matrix.h	/^using is_eigen_sparse = is_template_base_of<Eigen::SparseMatrixBase, T>;$/;"	t	typeref:typename:is_template_base_of<Eigen::SparseMatrixBase,T>
is_element	include/pybind11/stl_bind.h	/^    static constexpr const bool is_element = !is_pair && !is_vector;$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = (N == 0) || array_info<T>::is_empty;$/;"	m	struct:array_info	typeref:typename:bool	access:public
is_empty	include/pybind11/numpy.h	/^    static constexpr bool is_empty = false;$/;"	m	struct:array_info_scalar	typeref:typename:bool	access:public
is_final	include/pybind11/attr.h	/^    bool is_final : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
is_final	include/pybind11/attr.h	/^struct is_final {};$/;"	s
is_fmt_numeric	include/pybind11/complex.h	/^struct is_fmt_numeric<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
is_fmt_numeric	include/pybind11/detail/common.h	/^struct is_fmt_numeric {$/;"	s
is_fmt_numeric	include/pybind11/detail/common.h	/^struct is_fmt_numeric<T, enable_if_t<std::is_arithmetic<T>::value>> {$/;"	s
is_fmt_numeric::index	include/pybind11/complex.h	/^    static constexpr int index = is_fmt_numeric<T>::index + 3;$/;"	m	struct:is_fmt_numeric	typeref:typename:int	access:public
is_fmt_numeric::index	include/pybind11/detail/common.h	/^    static constexpr int index$/;"	m	struct:is_fmt_numeric	typeref:typename:int	access:public
is_fmt_numeric::value	include/pybind11/complex.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
is_fmt_numeric::value	include/pybind11/detail/common.h	/^    static constexpr bool value = false;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
is_fmt_numeric::value	include/pybind11/detail/common.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
is_function_pointer	include/pybind11/detail/common.h	/^using is_function_pointer$/;"	t	typeref:typename:bool_constant<std::is_pointer<T>::value && std::is_function<typename std::remove_pointer<T>::type>::value>
is_function_record_capsule	include/pybind11/detail/internals.h	/^inline bool is_function_record_capsule(const capsule &cap) {$/;"	f	typeref:typename:bool	signature:(const capsule & cap)
is_holder	include/pybind11/pybind11.h	/^    using is_holder = detail::is_holder_type<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_holder_type<type_,T>	access:private
is_holder_type	include/pybind11/cast.h	/^struct is_holder_type$/;"	s	inherits:std::is_base_of<detail::type_caster_holder<base,holder>,detail::type_caster<holder>>
is_holder_type	include/pybind11/cast.h	/^struct is_holder_type<base, std::unique_ptr<base, deleter>> : std::true_type {};$/;"	s	inherits:std::true_type
is_input_iterator	include/pybind11/detail/common.h	/^struct is_input_iterator : std::false_type {};$/;"	s	inherits:std::false_type
is_input_iterator	include/pybind11/detail/common.h	/^struct is_input_iterator<T,$/;"	s	inherits:std::true_type
is_instantiation	include/pybind11/detail/common.h	/^struct is_instantiation : std::false_type {};$/;"	s	inherits:std::false_type
is_instantiation	include/pybind11/detail/common.h	/^struct is_instantiation<Class, Class<Us...>> : std::true_type {};$/;"	s	inherits:std::true_type
is_keyword	include/pybind11/pytypes.h	/^using is_keyword = std::is_base_of<arg, T>;$/;"	t	typeref:typename:std::is_base_of<arg,T>
is_keyword_or_ds	include/pybind11/pytypes.h	/^using is_keyword_or_ds = satisfies_any_of<T, is_keyword, is_ds_unpacking>;$/;"	t	typeref:typename:satisfies_any_of<T,is_keyword,is_ds_unpacking>
is_kw_only	include/pybind11/cast.h	/^using is_kw_only = std::is_same<intrinsic_t<T>, kw_only>;$/;"	t	typeref:typename:std::is_same<intrinsic_t<T>,kw_only>
is_lambda	include/pybind11/detail/common.h	/^using is_lambda = satisfies_none_of<remove_reference_t<T>,$/;"	t	typeref:typename:satisfies_none_of<remove_reference_t<T>,std::is_function,std::is_pointer,std::is_member_pointer>
is_method	include/pybind11/attr.h	/^    bool is_method : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_method	include/pybind11/attr.h	/^    explicit is_method(const handle &c) : class_(c) {}$/;"	f	struct:is_method	access:public	signature:(const handle & c)
is_method	include/pybind11/attr.h	/^struct is_method {$/;"	s
is_method::class_	include/pybind11/attr.h	/^    handle class_;$/;"	m	struct:is_method	typeref:typename:handle	access:public
is_method::is_method	include/pybind11/attr.h	/^    explicit is_method(const handle &c) : class_(c) {}$/;"	f	struct:is_method	access:public	signature:(const handle & c)
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible$/;"	s	inherits:all_of<std::is_move_constructible<T>,is_move_constructible<typenamerecursive_container_traits<T>::type_to_check_recursively>>
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible<recursive_bottom> : std::true_type {};$/;"	s	inherits:std::true_type
is_move_constructible	include/pybind11/detail/type_caster_base.h	/^struct is_move_constructible<std::pair<T1, T2>>$/;"	s	inherits:all_of<is_move_constructible<T1>,is_move_constructible<T2>>
is_move_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_move_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:	inherits:std::false_type
is_new_style_constructor	include/pybind11/attr.h	/^    bool is_new_style_constructor : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_new_style_constructor	include/pybind11/attr.h	/^struct is_new_style_constructor {};$/;"	s
is_none	include/pybind11/pytypes.h	/^    bool is_none() const { return derived().ptr() == Py_None; }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:() const
is_operator	include/pybind11/attr.h	/^    bool is_operator : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_operator	include/pybind11/attr.h	/^struct is_operator {};$/;"	s
is_pair	include/pybind11/stl_bind.h	/^    static constexpr const bool is_pair$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
is_pod	include/pybind11/numpy.h	/^using is_pod = all_of<std::is_standard_layout<T>, std::is_trivial<T>>;$/;"	t	typeref:typename:all_of<std::is_standard_layout<T>,std::is_trivial<T>>
is_pod_struct	include/pybind11/numpy.h	/^using is_pod_struct$/;"	t
is_pos_only	include/pybind11/cast.h	/^using is_pos_only = std::is_same<intrinsic_t<T>, pos_only>;$/;"	t	typeref:typename:std::is_same<intrinsic_t<T>,pos_only>
is_positional	include/pybind11/pytypes.h	/^using is_positional = satisfies_none_of<T, is_keyword, is_s_unpacking, is_ds_unpacking>;$/;"	t	typeref:typename:satisfies_none_of<T,is_keyword,is_s_unpacking,is_ds_unpacking>
is_pyobj_ptr_or_nullptr_t	include/pybind11/pytypes.h	/^using is_pyobj_ptr_or_nullptr_t = detail::any_of<std::is_same<T, PyObject *>,$/;"	t
is_pyobject	include/pybind11/pytypes.h	/^using is_pyobject = std::is_base_of<pyobject_tag, remove_reference_t<T>>;$/;"	t	typeref:typename:std::is_base_of<pyobject_tag,remove_reference_t<T>>
is_recursive	include/pybind11/detail/type_caster_base.h	/^    static constexpr bool is_recursive$/;"	m	struct:impl_recursive_container_traits	typeref:typename:bool	access:public
is_s_unpacking	include/pybind11/pytypes.h	/^using is_s_unpacking = std::is_same<args_proxy, T>; \/\/ * unpacking$/;"	t	typeref:typename:std::is_same<args_proxy,T>
is_same_ignoring_cvref	include/pybind11/detail/common.h	/^using is_same_ignoring_cvref = std::is_same<detail::remove_cvref_t<T>, U>;$/;"	t	typeref:typename:std::is_same<detail::remove_cvref_t<T>,U>
is_setter	include/pybind11/attr.h	/^    bool is_setter : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_setter	include/pybind11/attr.h	/^struct is_setter {};$/;"	s
is_shared_ptr	include/pybind11/detail/common.h	/^using is_shared_ptr = is_instantiation<std::shared_ptr, T>;$/;"	t	typeref:typename:is_instantiation<std::shared_ptr,T>
is_stateless	include/pybind11/attr.h	/^    bool is_stateless : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
is_std_array	include/pybind11/numpy.h	/^struct is_std_array : std::false_type {};$/;"	s	inherits:std::false_type
is_std_array	include/pybind11/numpy.h	/^struct is_std_array<std::array<T, N>> : std::true_type {};$/;"	s	inherits:std::true_type
is_std_char_type	include/pybind11/cast.h	/^using is_std_char_type = any_of<std::is_same<CharT, char>, \/* std::string *\/$/;"	t
is_strict_base_of	include/pybind11/detail/common.h	/^using is_strict_base_of$/;"	t	typeref:typename:bool_constant<std::is_base_of<Base,Derived>::value &&!std::is_same<Base,Derived>::value>
is_subtype	include/pybind11/pybind11.h	/^    using is_subtype = detail::is_strict_base_of<type_, T>;$/;"	t	class:class_	typeref:typename:detail::is_strict_base_of<type_,T>	access:private
is_template_base_of	include/pybind11/detail/common.h	/^using is_template_base_of$/;"	t
is_template_base_of_impl	include/pybind11/detail/common.h	/^struct is_template_base_of_impl {$/;"	s
is_template_base_of_impl::check	include/pybind11/detail/common.h	/^    static std::false_type check(...);$/;"	p	struct:is_template_base_of_impl	typeref:typename:std::false_type	access:public	signature:(...)
is_template_base_of_impl::check	include/pybind11/detail/common.h	/^    static std::true_type check(Base<Us...> *);$/;"	p	struct:is_template_base_of_impl	typeref:typename:std::true_type	access:public	signature:(Base<Us...> *)
is_valid	include/pybind11/embed.h	/^    bool is_valid = true;$/;"	m	class:scoped_interpreter	typeref:typename:bool	access:private
is_valid_class_option	include/pybind11/pybind11.h	/^    struct is_valid_class_option : detail::any_of<is_holder<T>, is_subtype<T>, is_base<T>> {};$/;"	s	class:class_	inherits:detail::any_of<is_holder<T>,is_subtype<T>,is_base<T>>	access:private
is_vector	include/pybind11/stl_bind.h	/^    static constexpr const bool is_vector$/;"	m	struct:container_traits	typeref:typename:const bool	access:public
isinstance	include/pybind11/pytypes.h	/^bool isinstance(handle obj) {$/;"	f	typeref:typename:bool	signature:(handle obj)
isinstance	include/pybind11/pytypes.h	/^inline bool isinstance(handle obj, handle type) {$/;"	f	typeref:typename:bool	signature:(handle obj,handle type)
isinstance	include/pybind11/pytypes.h	/^inline bool isinstance<handle>(handle) = delete;$/;"	p	typeref:typename:bool	signature:(handle)
isinstance	include/pybind11/pytypes.h	/^inline bool isinstance<object>(handle obj) {$/;"	f	typeref:typename:bool	signature:(handle obj)
isinstance_generic	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE bool isinstance_generic(handle obj, const std::type_info &tp) {$/;"	f	typeref:typename:PYBIND11_NOINLINE bool	signature:(handle obj,const std::type_info & tp)
isinstance_generic	include/pybind11/pytypes.h	/^bool isinstance_generic(handle obj, const std::type_info &tp);$/;"	p	typeref:typename:bool	signature:(handle obj,const std::type_info & tp)
issues	tools/make_changelog.py	/^issues = (issue for page in issues_pages for issue in page)$/;"	v	access:public
issues_pages	tools/make_changelog.py	/^issues_pages = ghapi.page.paged($/;"	v	access:public
it	include/pybind11/pybind11.h	/^    Iterator it;$/;"	m	struct:iterator_state	typeref:typename:Iterator	access:public
item_accessor	include/pybind11/pytypes.h	/^using item_accessor = accessor<accessor_policies::generic_item>;$/;"	t	typeref:typename:accessor<accessor_policies::generic_item>
item_type_is_equivalent_to	include/pybind11/buffer_info.h	/^    bool item_type_is_equivalent_to() const {$/;"	f	struct:buffer_info	typeref:typename:bool	access:public	signature:() const
items_view	include/pybind11/stl_bind.h	/^struct items_view {$/;"	s
items_view::iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:items_view	typeref:typename:iterator	access:public	signature:()
items_view::len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:items_view	typeref:typename:size_t	access:public	signature:()
items_view::~items_view	include/pybind11/stl_bind.h	/^    virtual ~items_view() = default;$/;"	p	struct:items_view	access:public	signature:()
itemsize	include/pybind11/buffer_info.h	/^    ssize_t itemsize = 0;         \/\/ Size of individual items in bytes$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
itemsize	include/pybind11/numpy.h	/^    constexpr ssize_t itemsize() const { return sizeof(T); }$/;"	f	class:array_t	typeref:typename:ssize_t	access:public	signature:() const
itemsize	include/pybind11/numpy.h	/^    constexpr static ssize_t itemsize() { return sizeof(T); }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:()
itemsize	include/pybind11/numpy.h	/^    ssize_t itemsize() const { return detail::array_descriptor_proxy(m_ptr)->elsize; }$/;"	f	class:dtype	typeref:typename:ssize_t	access:public	signature:() const
itemsize	include/pybind11/numpy.h	/^    ssize_t itemsize() const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
iter	include/pybind11/pytypes.h	/^inline iterator iter(handle obj) {$/;"	f	typeref:typename:iterator	signature:(handle obj)
iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_iterator(map.begin(), map.end()); }$/;"	f	struct:ItemsViewImpl	typeref:typename:iterator	access:public	signature:()
iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_key_iterator(map.begin(), map.end()); }$/;"	f	struct:KeysViewImpl	typeref:typename:iterator	access:public	signature:()
iter	include/pybind11/stl_bind.h	/^    iterator iter() override { return make_value_iterator(map.begin(), map.end()); }$/;"	f	struct:ValuesViewImpl	typeref:typename:iterator	access:public	signature:()
iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:items_view	typeref:typename:iterator	access:public	signature:()
iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:keys_view	typeref:typename:iterator	access:public	signature:()
iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:values_view	typeref:typename:iterator	access:public	signature:()
iter	tests/test_embed/test_interpreter.cpp	/^        auto iter = pybind11::make_iterator(container.begin(), container.end());$/;"	v	typeref:typename:auto
iterable	include/pybind11/pytypes.h	/^class iterable : public object {$/;"	c	inherits:object
iterator	include/pybind11/detail/type_caster_base.h	/^        explicit iterator(size_t end) : curr(end) {}$/;"	f	struct:values_and_holders::iterator	access:private	signature:(size_t end)
iterator	include/pybind11/detail/type_caster_base.h	/^        iterator(instance *inst, const type_vec *tinfo)$/;"	f	struct:values_and_holders::iterator	access:private	signature:(instance * inst,const type_vec * tinfo)
iterator	include/pybind11/detail/type_caster_base.h	/^    struct iterator {$/;"	s	struct:values_and_holders	access:public
iterator	include/pybind11/pytypes.h	/^class iterator : public object {$/;"	c	inherits:object
iterator::advance	include/pybind11/pytypes.h	/^        advance();$/;"	p	class:iterator	access:public	signature:()
iterator::advance	include/pybind11/pytypes.h	/^    void advance() {$/;"	f	class:iterator	typeref:typename:void	access:private	signature:()
iterator::difference_type	include/pybind11/pytypes.h	/^    using difference_type = ssize_t;$/;"	t	class:iterator	typeref:typename:ssize_t	access:public
iterator::iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::input_iterator_tag;$/;"	t	class:iterator	typeref:typename:std::input_iterator_tag	access:public
iterator::operator *	include/pybind11/pytypes.h	/^    reference operator*() const {$/;"	f	class:iterator	typeref:typename:reference	access:public	signature:() const
iterator::operator ++	include/pybind11/pytypes.h	/^    iterator operator++(int) {$/;"	f	class:iterator	typeref:typename:iterator	access:public	signature:(int)
iterator::operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const {$/;"	f	class:iterator	typeref:typename:pointer	access:public	signature:() const
iterator::pointer	include/pybind11/pytypes.h	/^    using pointer = const handle *;$/;"	t	class:iterator	typeref:typename:const handle *	access:public
iterator::reference	include/pybind11/pytypes.h	/^    using reference = const handle; \/\/ PR #3263$/;"	t	class:iterator	typeref:typename:const handle	access:public
iterator::sentinel	include/pybind11/pytypes.h	/^    static iterator sentinel() { return {}; }$/;"	f	class:iterator	typeref:typename:iterator	access:public	signature:()
iterator::value	include/pybind11/pytypes.h	/^    object value = {};$/;"	m	class:iterator	typeref:typename:object	access:private
iterator::value_type	include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:iterator	typeref:typename:handle	access:public
iterator_access	include/pybind11/pybind11.h	/^struct iterator_access {$/;"	s
iterator_access::operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return *it; }$/;"	f	struct:iterator_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
iterator_access::result_type	include/pybind11/pybind11.h	/^    using result_type = decltype(*std::declval<Iterator &>());$/;"	t	struct:iterator_access	access:public
iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::forward_iterator_tag;$/;"	t	class:dict_readonly	typeref:typename:std::forward_iterator_tag	access:protected
iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::input_iterator_tag;$/;"	t	class:iterator	typeref:typename:std::input_iterator_tag	access:public
iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_fast_readonly	typeref:typename:std::random_access_iterator_tag	access:protected
iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_slow_readwrite	typeref:typename:std::random_access_iterator_tag	access:protected
iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = typename Policy::iterator_category;$/;"	t	class:generic_iterator	typeref:typename:Policy::iterator_category	access:public
iterator_key_access	include/pybind11/pybind11.h	/^class iterator_key_access {$/;"	c
iterator_key_access::operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).first; }$/;"	f	class:iterator_key_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
iterator_key_access::pair_type	include/pybind11/pybind11.h	/^    using pair_type = decltype(*std::declval<Iterator &>());$/;"	t	class:iterator_key_access	access:private
iterator_key_access::result_type	include/pybind11/pybind11.h	/^    using result_type$/;"	t	class:iterator_key_access	access:public
iterator_state	include/pybind11/pybind11.h	/^struct iterator_state {$/;"	s
iterator_state::end	include/pybind11/pybind11.h	/^    Sentinel end;$/;"	m	struct:iterator_state	typeref:typename:Sentinel	access:public
iterator_state::first_or_done	include/pybind11/pybind11.h	/^    bool first_or_done;$/;"	m	struct:iterator_state	typeref:typename:bool	access:public
iterator_state::it	include/pybind11/pybind11.h	/^    Iterator it;$/;"	m	struct:iterator_state	typeref:typename:Iterator	access:public
iterator_value_access	include/pybind11/pybind11.h	/^class iterator_value_access {$/;"	c
iterator_value_access::operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).second; }$/;"	f	class:iterator_value_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
iterator_value_access::pair_type	include/pybind11/pybind11.h	/^    using pair_type = decltype(*std::declval<Iterator &>());$/;"	t	class:iterator_value_access	access:private
iterator_value_access::result_type	include/pybind11/pybind11.h	/^    using result_type$/;"	t	class:iterator_value_access	access:public
itype	include/pybind11/detail/type_caster_base.h	/^    using itype = intrinsic_t<type>;$/;"	t	class:type_caster_base	typeref:typename:intrinsic_t<type>	access:private
j	tests/test_class.cpp	/^        std::uint64_t j;$/;"	m	struct:TEST_SUBMODULE::PyAliasedHasOpNewDelSize	typeref:typename:std::uint64_t	file:	access:public
join	tests/test_embed/test_interpreter.cpp	/^            thread.join();$/;"	p	typeref:typename:thread.	file:	signature:()
join	tests/test_iostream.cpp	/^    void join() const {$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:() const
join	tests/test_thread.py	/^    def join(self):$/;"	m	class:Thread	access:public	signature:(self)
join_paths	tools/JoinPaths.cmake	/^function(join_paths joined_path first_path_segment)$/;"	f
json	docs/Makefile	/^json:$/;"	t
kModuleName	tests/cross_module_gil_utils.cpp	/^constexpr char kModuleName[] = "cross_module_gil_utils";$/;"	v	namespace:__anonf105cff20111	typeref:typename:char[]
kModuleName	tests/cross_module_interleaved_error_already_set.cpp	/^constexpr char kModuleName[] = "cross_module_interleaved_error_already_set";$/;"	v	namespace:__anon83ce96ce0111	typeref:typename:char[]
kSet	tests/test_stl.cpp	/^    kSet = 42,$/;"	e	enum:EnumType	file:	access:public
kUnset	tests/test_stl.cpp	/^    kUnset = 85,$/;"	e	enum:EnumType	file:	access:public
keep_alive	include/pybind11/attr.h	/^struct keep_alive {};$/;"	s
keep_alive	include/pybind11/detail/type_caster_base.h	/^    std::unordered_set<PyObject *> keep_alive;$/;"	m	class:loader_life_support	typeref:typename:std::unordered_set<PyObject * >	access:private
keep_alive_impl	include/pybind11/attr.h	/^void keep_alive_impl(size_t Nurse, size_t Patient, function_call &call, handle ret);$/;"	p	typeref:typename:void	signature:(size_t Nurse,size_t Patient,function_call & call,handle ret)
keep_alive_impl	include/pybind11/detail/type_caster_base.h	/^void keep_alive_impl(handle nurse, handle patient);$/;"	p	typeref:typename:void	signature:(handle nurse,handle patient)
keep_alive_impl	include/pybind11/pybind11.h	/^keep_alive_impl(size_t Nurse, size_t Patient, function_call &call, handle ret) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(size_t Nurse,size_t Patient,function_call & call,handle ret)
key	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly	typeref:typename:PyObject *	access:private
key	include/pybind11/pytypes.h	/^    key_type key;$/;"	m	class:accessor	typeref:typename:key_type	access:private
key_conv	include/pybind11/stl.h	/^    using key_conv = make_caster<Key>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Key>	access:public
key_conv	include/pybind11/stl.h	/^    using key_conv = make_caster<Key>;$/;"	t	struct:set_caster	typeref:typename:make_caster<Key>	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = const char *;$/;"	t	struct:str_attr	typeref:typename:const char *	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:generic_item	typeref:typename:object	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:obj_attr	typeref:typename:object	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:list_item	typeref:typename:size_t	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:sequence_item	typeref:typename:size_t	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:tuple_item	typeref:typename:size_t	access:public
key_type	include/pybind11/pytypes.h	/^    using key_type = typename Policy::key_type;$/;"	t	class:accessor	typeref:typename:Policy::key_type	access:private
keys_view	include/pybind11/stl_bind.h	/^struct keys_view {$/;"	s
keys_view::contains	include/pybind11/stl_bind.h	/^    virtual bool contains(const KeyType &k) = 0;$/;"	p	struct:keys_view	typeref:typename:bool	access:public	signature:(const KeyType & k)
keys_view::contains	include/pybind11/stl_bind.h	/^    virtual bool contains(const object &k) = 0;$/;"	p	struct:keys_view	typeref:typename:bool	access:public	signature:(const object & k)
keys_view::iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:keys_view	typeref:typename:iterator	access:public	signature:()
keys_view::len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:keys_view	typeref:typename:size_t	access:public	signature:()
keys_view::~keys_view	include/pybind11/stl_bind.h	/^    virtual ~keys_view() = default;$/;"	p	struct:keys_view	access:public	signature:()
keyword_args	docs/basics.rst	/^.. _keyword_args:$/;"	T	chapter:Creating bindings for a simple function
keyword_only_arguments	docs/advanced/functions.rst	/^.. _keyword_only_arguments:$/;"	T	chapter:Default arguments revisited
kind	include/pybind11/numpy.h	/^    char kind() const { return detail::array_descriptor_proxy(m_ptr)->kind; }$/;"	f	class:dtype	typeref:typename:char	access:public	signature:() const
kind	include/pybind11/numpy.h	/^    char kind;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
kind	tests/test_tagbased_polymorphic.cpp	/^    const Kind kind;$/;"	m	struct:Animal	typeref:typename:const Kind	file:	access:public
kw_only	include/pybind11/cast.h	/^struct kw_only {};$/;"	s
kwargs	include/pybind11/cast.h	/^    const dict &kwargs() const & { return m_kwargs; }$/;"	f	class:unpacking_collector	typeref:typename:const dict &	access:public	signature:() const
kwargs	include/pybind11/cast.h	/^    dict kwargs() && { return std::move(m_kwargs); }$/;"	f	class:unpacking_collector	typeref:typename:dict	access:public	signature:()
kwargs	include/pybind11/cast.h	/^    dict kwargs() const { return {}; }$/;"	f	class:simple_collector	typeref:typename:dict	access:public	signature:() const
kwargs	include/pybind11/pytypes.h	/^class kwargs : public dict {$/;"	c	inherits:dict
kwargs_pos	include/pybind11/cast.h	/^    static constexpr auto kwargs_pos = constexpr_last<argument_is_kwargs, Args...>();$/;"	m	class:argument_loader	typeref:typename:auto	access:private
kwargs_proxy	include/pybind11/pytypes.h	/^    explicit kwargs_proxy(handle h) : handle(h) {}$/;"	f	class:kwargs_proxy	access:public	signature:(handle h)
kwargs_proxy	include/pybind11/pytypes.h	/^class kwargs_proxy : public handle {$/;"	c	inherits:handle
kwargs_proxy::kwargs_proxy	include/pybind11/pytypes.h	/^    explicit kwargs_proxy(handle h) : handle(h) {}$/;"	f	class:kwargs_proxy	access:public	signature:(handle h)
kwargs_ref	include/pybind11/cast.h	/^    object args_ref, kwargs_ref;$/;"	m	struct:function_call	typeref:typename:object	access:public
l	tests/test_smart_ptr.cpp	/^    std::vector<std::shared_ptr<ElementBase>> l;$/;"	m	struct:__anond975f9d30111::ElementList	typeref:typename:std::vector<std::shared_ptr<ElementBase>>	file:	access:public
lacking_copy_ctor	tests/test_copy_move.cpp	/^    lacking_copy_ctor() = default;$/;"	p	struct:lacking_copy_ctor	file:	access:public	signature:()
lacking_copy_ctor	tests/test_copy_move.cpp	/^    lacking_copy_ctor(const lacking_copy_ctor &other) = delete;$/;"	p	struct:lacking_copy_ctor	file:	access:public	signature:(const lacking_copy_ctor & other)
lacking_copy_ctor	tests/test_copy_move.cpp	/^struct lacking_copy_ctor : public empty<lacking_copy_ctor> {$/;"	s	file:	inherits:empty<lacking_copy_ctor>
lacking_copy_ctor::lacking_copy_ctor	tests/test_copy_move.cpp	/^    lacking_copy_ctor() = default;$/;"	p	struct:lacking_copy_ctor	file:	access:public	signature:()
lacking_copy_ctor::lacking_copy_ctor	tests/test_copy_move.cpp	/^    lacking_copy_ctor(const lacking_copy_ctor &other) = delete;$/;"	p	struct:lacking_copy_ctor	file:	access:public	signature:(const lacking_copy_ctor & other)
lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor() = default;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:()
lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor(const lacking_move_ctor &other) = delete;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:(const lacking_move_ctor & other)
lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor(lacking_move_ctor &&other) = delete;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:(lacking_move_ctor && other)
lacking_move_ctor	tests/test_copy_move.cpp	/^struct lacking_move_ctor : public empty<lacking_move_ctor> {$/;"	s	file:	inherits:empty<lacking_move_ctor>
lacking_move_ctor::lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor() = default;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:()
lacking_move_ctor::lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor(const lacking_move_ctor &other) = delete;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:(const lacking_move_ctor & other)
lacking_move_ctor::lacking_move_ctor	tests/test_copy_move.cpp	/^    lacking_move_ctor(lacking_move_ctor &&other) = delete;$/;"	p	struct:lacking_move_ctor	file:	access:public	signature:(lacking_move_ctor && other)
language	docs/conf.py	/^language = None$/;"	v	access:public
last	include/pybind11/detail/common.h	/^constexpr int last(int \/*i*\/, int result) { return result; }$/;"	f	typeref:typename:int	signature:(int,int result)
last	include/pybind11/detail/common.h	/^constexpr int last(int i, int result, T v, Ts... vs) {$/;"	f	typeref:typename:int	signature:(int i,int result,T v,Ts...vs)
latex	docs/Makefile	/^latex:$/;"	t
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v	access:public
latex_elements	docs/conf.py	/^latex_elements = {$/;"	v	access:public
latex_engine	docs/conf.py	/^latex_engine = "pdflatex"$/;"	v	access:public
latexpdf	docs/Makefile	/^latexpdf:$/;"	t
latexpdfja	docs/Makefile	/^latexpdfja:$/;"	t
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:PartialStruct	typeref:typename:long double	file:	access:public
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStruct	typeref:typename:long double	file:	access:public
ldbl_	tests/test_numpy_dtypes.cpp	/^    long double ldbl_;$/;"	m	struct:SimpleStructReordered	typeref:typename:long double	file:	access:public
len	include/pybind11/numpy.h	/^        int len;$/;"	m	struct:npy_api::PyArray_Dims	typeref:typename:int	access:public
len	include/pybind11/pytypes.h	/^inline size_t len(handle h) {$/;"	f	typeref:typename:size_t	signature:(handle h)
len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:ItemsViewImpl	typeref:typename:size_t	access:public	signature:()
len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:KeysViewImpl	typeref:typename:size_t	access:public	signature:()
len	include/pybind11/stl_bind.h	/^    size_t len() override { return map.size(); }$/;"	f	struct:ValuesViewImpl	typeref:typename:size_t	access:public	signature:()
len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:items_view	typeref:typename:size_t	access:public	signature:()
len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:keys_view	typeref:typename:size_t	access:public	signature:()
len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:values_view	typeref:typename:size_t	access:public	signature:()
len_hint	include/pybind11/pytypes.h	/^inline size_t len_hint(handle h) {$/;"	f	typeref:typename:size_t	signature:(handle h)
lib	tools/libsize.py	/^lib = sys.argv[1]$/;"	v	access:public
lib_type	tools/pybind11NewTools.cmake	/^    set(lib_type MODULE)$/;"	v	function:pybind11_add_module
lib_type	tools/pybind11NewTools.cmake	/^    set(lib_type SHARED)$/;"	v	function:pybind11_add_module
lib_type	tools/pybind11NewTools.cmake	/^    set(lib_type STATIC)$/;"	v	function:pybind11_add_module
lib_type	tools/pybind11Tools.cmake	/^    set(lib_type MODULE)$/;"	v	function:pybind11_add_module
lib_type	tools/pybind11Tools.cmake	/^    set(lib_type SHARED)$/;"	v	function:pybind11_add_module
libsize	tools/libsize.py	/^libsize = os.path.getsize(lib)$/;"	v	access:public
line	.github/matchers/pylint.json	/^          "line": 2,$/;"	n	object:problemMatcher.0.pattern.0
line	.github/matchers/pylint.json	/^          "line": 2,$/;"	n	object:problemMatcher.1.pattern.0
lines	CMakeLists.txt	/^    set(lines$/;"	v
linkcheck	docs/Makefile	/^linkcheck:$/;"	t
linker_append	tools/pybind11Common.cmake	/^      set(linker_append ";$<$<CONFIG:MinSizeRel>:-O3>")$/;"	v	function:_pybind11_generate_lto
linker_append	tools/pybind11Common.cmake	/^    set(linker_append "")$/;"	v	function:_pybind11_generate_lto
lint	noxfile.py	/^def lint(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
list	include/pybind11/pytypes.h	/^class list : public object {$/;"	c	inherits:object
list	tests/test_stl.cpp	/^        std::vector<Issue1561Inner> list;$/;"	m	struct:TEST_SUBMODULE::Issue1561Outer	typeref:typename:std::vector<Issue1561Inner>	file:	access:public
list::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(list, object, PyList_Check, PySequence_List)$/;"	f	class:list	access:public	signature:(list,object,PyList_Check,PySequence_List)
list::append	include/pybind11/pytypes.h	/^    void append(T &&val) \/* py-non-const *\/ {$/;"	f	class:list	typeref:typename:void	access:public	signature:(T && val)
list::begin	include/pybind11/pytypes.h	/^    detail::list_iterator begin() const { return {*this, 0}; }$/;"	f	class:list	typeref:typename:detail::list_iterator	access:public	signature:() const
list::empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:list	typeref:typename:bool	access:public	signature:() const
list::end	include/pybind11/pytypes.h	/^    detail::list_iterator end() const { return {*this, PyList_GET_SIZE(m_ptr)}; }$/;"	f	class:list	typeref:typename:detail::list_iterator	access:public	signature:() const
list::insert	include/pybind11/pytypes.h	/^    void insert(const IdxType &index, ValType &&val) \/* py-non-const *\/ {$/;"	f	class:list	typeref:typename:void	access:public	signature:(const IdxType & index,ValType && val)
list::operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:list	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
list::operator []	include/pybind11/pytypes.h	/^    detail::list_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:list	typeref:typename:detail::list_accessor	access:public	signature:(size_t index) const
list::size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyList_Size(m_ptr); }$/;"	f	class:list	typeref:typename:size_t	access:public	signature:() const
list_accessor	include/pybind11/pytypes.h	/^using list_accessor = accessor<accessor_policies::list_item>;$/;"	t	typeref:typename:accessor<accessor_policies::list_item>
list_caster	include/pybind11/stl.h	/^struct list_caster {$/;"	s
list_caster::cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:list_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
list_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:list_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
list_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &, void *) {}$/;"	f	struct:list_caster	typeref:typename:void	access:private	signature:(const sequence &,void *)
list_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &s, Type *) {$/;"	f	struct:list_caster	typeref:typename:void	access:private	signature:(const sequence & s,Type *)
list_caster::value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:list_caster	typeref:typename:make_caster<Value>	access:public
list_item	include/pybind11/pytypes.h	/^struct list_item {$/;"	s
list_item::get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:list_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
list_item::key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:list_item	typeref:typename:size_t	access:public
list_item::set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:list_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
list_iterator	include/pybind11/pytypes.h	/^using list_iterator = generic_iterator<iterator_policies::sequence_fast_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_fast_readonly>
literals	include/pybind11/cast.h	/^inline namespace literals {$/;"	n
literals	include/pybind11/pytypes.h	/^inline namespace literals {$/;"	n
literals::operator ""_a	include/pybind11/cast.h	/^constexpr arg operator"" _a(const char *name, size_t) { return arg(name); }$/;"	f	namespace:literals	typeref:typename:arg	signature:(const char * name,size_t)
literals::operator ""_s	include/pybind11/pytypes.h	/^inline str operator"" _s(const char *s, size_t size) { return {s, size}; }$/;"	f	namespace:literals	typeref:typename:str	signature:(const char * s,size_t size)
load	include/pybind11/cast.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle h,bool)
load	include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) {$/;"	f	struct:pyobject_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) { return subcaster.load(src, convert); }$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:tuple_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:string_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:void_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:duration_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/complex.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/detail/init.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle h,bool)
load	include/pybind11/detail/type_caster_base.h	/^    bool load(handle src, bool convert) { return load_impl<type_caster_generic>(src, convert); }$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/eigen/matrix.h	/^    bool load(handle, bool) = delete;$/;"	p	struct:eigen_map_caster	typeref:typename:bool	access:public	signature:(handle,bool)
load	include/pybind11/eigen/matrix.h	/^    bool load(handle, bool) = delete;$/;"	p	struct:type_caster	typeref:typename:bool	access:public	signature:(handle,bool)
load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool \/*convert*\/) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/functional.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/numpy.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:pyobject_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:array_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:list_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:map_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:optional_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:set_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
load	include/pybind11/stl/filesystem.h	/^    bool load(handle handle, bool) {$/;"	f	struct:path_caster	typeref:typename:bool	access:public	signature:(handle handle,bool)
load	include/pybind11/type_caster_pyobject_ptr.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
load	tests/test_builtin_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	class:type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool)
load	tests/test_copy_move.cpp	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster	typeref:typename:bool	file:	access:public	signature:(handle src,bool)
load	tests/test_custom_type_casters.cpp	/^    bool load(handle src, bool convert) {$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle src,bool convert)
load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool convert) { return convert; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool convert)
load	tests/test_custom_type_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	struct:PYBIND11_NAMESPACE::detail::type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool)
load	tests/test_custom_type_casters.cpp	/^    bool load(py_::handle, bool) { return true; }$/;"	f	struct:other_lib::my_caster	typeref:typename:bool	file:	access:public	signature:(py_::handle,bool)
load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle src, bool convert, type_list<U, Us...>) {$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert,type_list<U,Us...>)
load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle, bool, type_list<>) { return false; }$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle,bool,type_list<>)
load_args	include/pybind11/cast.h	/^    bool load_args(function_call &call) { return load_impl_sequence(call, indices{}); }$/;"	f	class:argument_loader	typeref:typename:bool	access:public	signature:(function_call & call)
load_impl	include/pybind11/cast.h	/^    bool load_impl(const sequence &seq, bool convert, index_sequence<Is...>) {$/;"	f	class:tuple_caster	typeref:typename:bool	access:protected	signature:(const sequence & seq,bool convert,index_sequence<Is...>)
load_impl	include/pybind11/cast.h	/^    static constexpr bool load_impl(const sequence &, bool, index_sequence<>) { return true; }$/;"	f	class:tuple_caster	typeref:typename:bool	access:protected	signature:(const sequence &,bool,index_sequence<>)
load_impl	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool load_impl(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE bool	access:public	signature:(handle src,bool convert)
load_impl_sequence	include/pybind11/cast.h	/^    bool load_impl_sequence(function_call &call, index_sequence<Is...>) {$/;"	f	class:argument_loader	typeref:typename:bool	access:private	signature:(function_call & call,index_sequence<Is...>)
load_impl_sequence	include/pybind11/cast.h	/^    static bool load_impl_sequence(function_call &, index_sequence<>) { return true; }$/;"	f	class:argument_loader	typeref:typename:bool	access:private	signature:(function_call &,index_sequence<>)
load_numpy_internals	include/pybind11/numpy.h	/^PYBIND11_NOINLINE void load_numpy_internals(numpy_internals *&ptr) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(numpy_internals * & ptr)
load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<!std::is_same<C, char>::value, handle>) {$/;"	f	struct:string_caster	typeref:typename:bool	access:private	signature:(enable_if_t<!std::is_same<C,char>::value,handle>)
load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<std::is_same<C, char>::value, handle> src) {$/;"	f	struct:string_caster	typeref:typename:bool	access:private	signature:(enable_if_t<std::is_same<C,char>::value,handle> src)
load_type	include/pybind11/cast.h	/^make_caster<T> load_type(const handle &handle) {$/;"	f	typeref:typename:make_caster<T>	signature:(const handle & handle)
load_type	include/pybind11/cast.h	/^type_caster<T, SFINAE> &load_type(type_caster<T, SFINAE> &conv, const handle &handle) {$/;"	f	typeref:typename:type_caster<T,SFINAE> &	signature:(type_caster<T,SFINAE> & conv,const handle & handle)
load_value	include/pybind11/cast.h	/^    bool load_value(value_and_holder &&v_h) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(value_and_holder && v_h)
load_value	include/pybind11/detail/type_caster_base.h	/^    void load_value(value_and_holder &&v_h) {$/;"	f	class:type_caster_generic	typeref:typename:void	access:public	signature:(value_and_holder && v_h)
loader_life_support	include/pybind11/detail/type_caster_base.h	/^    loader_life_support() : parent{get_stack_top()} { set_stack_top(this); }$/;"	f	class:loader_life_support	access:public	signature:()
loader_life_support	include/pybind11/detail/type_caster_base.h	/^class loader_life_support {$/;"	c
loader_life_support::add_patient	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void add_patient(handle h) {$/;"	f	class:loader_life_support	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(handle h)
loader_life_support::get_stack_pp	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support **get_stack_pp() {$/;"	f	class:loader_life_support	typeref:typename:loader_life_support **	access:private	signature:()
loader_life_support::get_stack_tls_key	include/pybind11/detail/type_caster_base.h	/^    static PYBIND11_TLS_KEY_REF get_stack_tls_key() {$/;"	f	class:loader_life_support	typeref:typename:PYBIND11_TLS_KEY_REF	access:private	signature:()
loader_life_support::get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() { return *get_stack_pp(); }$/;"	f	class:loader_life_support	typeref:typename:loader_life_support *	access:private	signature:()
loader_life_support::get_stack_top	include/pybind11/detail/type_caster_base.h	/^    static loader_life_support *get_stack_top() {$/;"	f	class:loader_life_support	typeref:typename:loader_life_support *	access:private	signature:()
loader_life_support::keep_alive	include/pybind11/detail/type_caster_base.h	/^    std::unordered_set<PyObject *> keep_alive;$/;"	m	class:loader_life_support	typeref:typename:std::unordered_set<PyObject * >	access:private
loader_life_support::loader_life_support	include/pybind11/detail/type_caster_base.h	/^    loader_life_support() : parent{get_stack_top()} { set_stack_top(this); }$/;"	f	class:loader_life_support	access:public	signature:()
loader_life_support::parent	include/pybind11/detail/type_caster_base.h	/^    loader_life_support *parent = nullptr;$/;"	m	class:loader_life_support	typeref:typename:loader_life_support *	access:private
loader_life_support::set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) { *get_stack_pp() = value; }$/;"	f	class:loader_life_support	typeref:typename:void	access:private	signature:(loader_life_support * value)
loader_life_support::set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) {$/;"	f	class:loader_life_support	typeref:typename:void	access:private	signature:(loader_life_support * value)
loader_life_support::~loader_life_support	include/pybind11/detail/type_caster_base.h	/^    ~loader_life_support() {$/;"	f	class:loader_life_support	access:public	signature:()
loc	docs/conf.py	/^loc = {}$/;"	v	access:public
loc	setup.py	/^loc: Dict[str, str] = {}$/;"	v	typeref:typename:Dict[str, str]	access:public
loc_inst	tests/test_embed/test_interpreter.cpp	/^        py::object loc_inst = locals["func"]();$/;"	v	typeref:typename:py::object
local_internals	include/pybind11/detail/internals.h	/^    local_internals() {$/;"	f	struct:local_internals	access:public	signature:()
local_internals	include/pybind11/detail/internals.h	/^struct local_internals {$/;"	s
local_internals::local_internals	include/pybind11/detail/internals.h	/^    local_internals() {$/;"	f	struct:local_internals	access:public	signature:()
local_internals::registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:local_internals	typeref:typename:std::forward_list<ExceptionTranslator>	access:public
local_internals::registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:local_internals	typeref:typename:type_map<type_info * >	access:public
local_internals::shared_loader_life_support_data	include/pybind11/detail/internals.h	/^    struct shared_loader_life_support_data {$/;"	s	struct:local_internals	access:public
local_internals::shared_loader_life_support_data::shared_loader_life_support_data	include/pybind11/detail/internals.h	/^        shared_loader_life_support_data() {$/;"	f	struct:local_internals::shared_loader_life_support_data	typeref:typename:loader_life_support_tls_key	access:public	signature:()
local_load	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void *local_load(PyObject *src, const type_info *ti) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE void *	access:public	signature:(PyObject * src,const type_info * ti)
local_sdist_files	tests/extra_python_package/test_files.py	/^local_sdist_files = {$/;"	v	access:public
locals	tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict("count"_a = 0);$/;"	v	typeref:typename:auto
locals	tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict("hello"_a = "Hello, World!", "x"_a = 5, **module_.attr("__dict__"));$/;"	v	typeref:typename:auto
locals	tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict("is_keyerror"_a = false, "message"_a = "not set");$/;"	v	typeref:typename:auto
locals	tests/test_embed/test_interpreter.cpp	/^    auto locals = py::dict(**module_.attr("__dict__"));$/;"	v	typeref:typename:auto
localtime_thread_safe	include/pybind11/chrono.h	/^inline std::tm *localtime_thread_safe(const std::time_t *time, std::tm *buf) {$/;"	f	typeref:typename:std::tm *	signature:(const std::time_t * time,std::tm * buf)
log_cli_level	tests/pytest.ini	/^log_cli_level = info$/;"	k	section:pytest
lookup	include/pybind11/numpy.h	/^    static npy_api lookup() {$/;"	f	struct:npy_api	typeref:typename:npy_api	access:private	signature:()
lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, B_Repeat, lucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:double	file:	access:public	signature:()
lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, Base, lucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:double	file:	access:public	signature:()
lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, C_Repeat, lucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:double	file:	access:public	signature:()
lucky_number	tests/test_virtual_functions.cpp	/^    double lucky_number() override { PYBIND11_OVERRIDE(double, D_Repeat, lucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:double	file:	access:public	signature:()
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self)
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCR	access:public	signature:(self)
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCT	access:public	signature:(self)
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CR	access:public	signature:(self)
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DR	access:public	signature:(self)
lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self)
m	tests/test_async.py	/^m = pytest.importorskip("pybind11_tests.async_module")$/;"	v	access:public
m	tests/test_buffers.py	/^from pybind11_tests import buffers as m$/;"	Y	access:public	nameref:unknown:buffers
m	tests/test_builtin_casters.py	/^from pybind11_tests import builtin_casters as m$/;"	Y	access:public	nameref:unknown:builtin_casters
m	tests/test_call_policies.py	/^from pybind11_tests import call_policies as m$/;"	Y	access:public	nameref:unknown:call_policies
m	tests/test_callbacks.py	/^from pybind11_tests import callbacks as m$/;"	Y	access:public	nameref:unknown:callbacks
m	tests/test_chrono.py	/^from pybind11_tests import chrono as m$/;"	Y	access:public	nameref:unknown:chrono
m	tests/test_class.py	/^from pybind11_tests import class_ as m$/;"	Y	access:public	nameref:unknown:class_
m	tests/test_const_name.py	/^from pybind11_tests import const_name as m$/;"	Y	access:public	nameref:unknown:const_name
m	tests/test_constants_and_functions.py	/^m = pytest.importorskip("pybind11_tests.constants_and_functions")$/;"	v	access:public
m	tests/test_copy_move.py	/^from pybind11_tests import copy_move_policies as m$/;"	Y	access:public	nameref:unknown:copy_move_policies
m	tests/test_custom_type_casters.py	/^from pybind11_tests import custom_type_casters as m$/;"	Y	access:public	nameref:unknown:custom_type_casters
m	tests/test_custom_type_setup.py	/^from pybind11_tests import custom_type_setup as m$/;"	Y	access:public	nameref:unknown:custom_type_setup
m	tests/test_docstring_options.py	/^from pybind11_tests import docstring_options as m$/;"	Y	access:public	nameref:unknown:docstring_options
m	tests/test_eigen_matrix.py	/^m = pytest.importorskip("pybind11_tests.eigen_matrix")$/;"	v	access:public
m	tests/test_embed/test_interpreter.cpp	/^        auto m = py::module_::import("widget_module");$/;"	v	typeref:typename:auto
m	tests/test_enum.py	/^from pybind11_tests import enums as m$/;"	Y	access:public	nameref:unknown:enums
m	tests/test_eval.py	/^from pybind11_tests import eval_ as m$/;"	Y	access:public	nameref:unknown:eval_
m	tests/test_exceptions.py	/^from pybind11_tests import exceptions as m$/;"	Y	access:public	nameref:unknown:exceptions
m	tests/test_factory_constructors.py	/^from pybind11_tests import factory_constructors as m$/;"	Y	access:public	nameref:unknown:factory_constructors
m	tests/test_gil_scoped.py	/^from pybind11_tests import gil_scoped as m$/;"	Y	access:public	nameref:unknown:gil_scoped
m	tests/test_iostream.py	/^from pybind11_tests import iostream as m$/;"	Y	access:public	nameref:unknown:iostream
m	tests/test_kwargs_and_defaults.py	/^from pybind11_tests import kwargs_and_defaults as m$/;"	Y	access:public	nameref:unknown:kwargs_and_defaults
m	tests/test_local_bindings.py	/^from pybind11_tests import local_bindings as m$/;"	Y	access:public	nameref:unknown:local_bindings
m	tests/test_methods_and_attributes.py	/^from pybind11_tests import methods_and_attributes as m$/;"	Y	access:public	nameref:unknown:methods_and_attributes
m	tests/test_modules.py	/^from pybind11_tests import modules as m$/;"	Y	access:public	nameref:unknown:modules
m	tests/test_multiple_inheritance.py	/^from pybind11_tests import multiple_inheritance as m$/;"	Y	access:public	nameref:unknown:multiple_inheritance
m	tests/test_numpy_array.py	/^from pybind11_tests import numpy_array as m$/;"	Y	access:public	nameref:unknown:numpy_array
m	tests/test_numpy_dtypes.py	/^from pybind11_tests import numpy_dtypes as m$/;"	Y	access:public	nameref:unknown:numpy_dtypes
m	tests/test_numpy_vectorize.py	/^from pybind11_tests import numpy_vectorize as m$/;"	Y	access:public	nameref:unknown:numpy_vectorize
m	tests/test_opaque_types.py	/^from pybind11_tests import opaque_types as m$/;"	Y	access:public	nameref:unknown:opaque_types
m	tests/test_operator_overloading.py	/^from pybind11_tests import operators as m$/;"	Y	access:public	nameref:unknown:operators
m	tests/test_pickling.py	/^from pybind11_tests import pickling as m$/;"	Y	access:public	nameref:unknown:pickling
m	tests/test_pytypes.py	/^from pybind11_tests import pytypes as m$/;"	Y	access:public	nameref:unknown:pytypes
m	tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	I	function:test_iterator_rvp	file:	access:private	nameref:module:pybind11_tests.sequences_and_iterators
m	tests/test_sequences_and_iterators.py	/^from pybind11_tests import sequences_and_iterators as m$/;"	Y	access:public	nameref:unknown:sequences_and_iterators
m	tests/test_smart_ptr.py	/^m = pytest.importorskip("pybind11_tests.smart_ptr")$/;"	v	access:public
m	tests/test_stl.py	/^from pybind11_tests import stl as m$/;"	Y	access:public	nameref:unknown:stl
m	tests/test_stl_binders.py	/^from pybind11_tests import stl_binders as m$/;"	Y	access:public	nameref:unknown:stl_binders
m	tests/test_tagbased_polymorphic.py	/^from pybind11_tests import tagbased_polymorphic as m$/;"	Y	access:public	nameref:unknown:tagbased_polymorphic
m	tests/test_thread.py	/^from pybind11_tests import thread as m$/;"	Y	access:public	nameref:unknown:thread
m	tests/test_type_caster_pyobject_ptr.py	/^from pybind11_tests import type_caster_pyobject_ptr as m$/;"	Y	access:public	nameref:unknown:type_caster_pyobject_ptr
m	tests/test_union.py	/^from pybind11_tests import union_ as m$/;"	Y	access:public	nameref:unknown:union_
m	tests/test_unnamed_namespace_a.py	/^from pybind11_tests import unnamed_namespace_a as m$/;"	Y	access:public	nameref:unknown:unnamed_namespace_a
m	tests/test_unnamed_namespace_b.py	/^from pybind11_tests import unnamed_namespace_b as m$/;"	Y	access:public	nameref:unknown:unnamed_namespace_b
m	tests/test_vector_unique_ptr_member.py	/^from pybind11_tests import vector_unique_ptr_member as m$/;"	Y	access:public	nameref:unknown:vector_unique_ptr_member
m	tests/test_virtual_functions.py	/^m = pytest.importorskip("pybind11_tests.virtual_functions")$/;"	v	access:public
m1	tests/test_constants_and_functions.cpp	/^    int m1(int x) noexcept { return x - 1; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
m2	tests/test_constants_and_functions.cpp	/^    int m2(int x) const noexcept { return x - 2; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
m3	tests/test_constants_and_functions.cpp	/^    int m3(int x) noexcept(true) { return x - 3; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
m4	tests/test_constants_and_functions.cpp	/^    int m4(int x) const noexcept(true) { return x - 4; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
m5	tests/test_constants_and_functions.cpp	/^    int m5(int x) noexcept(false) { return x - 5; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
m6	tests/test_constants_and_functions.cpp	/^    int m6(int x) const noexcept(false) { return x - 6; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
m7	tests/test_constants_and_functions.cpp	/^    int m7(int x) throw() { return x - 7; }$/;"	f	struct:test_exc_sp::C	file:	access:public	signature:(int x)
m8	tests/test_constants_and_functions.cpp	/^    int m8(int x) const throw() { return x - 8; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:simple_collector	typeref:typename:tuple	access:private
m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:unpacking_collector	typeref:typename:tuple	access:private
m_base	include/pybind11/pybind11.h	/^    detail::enum_base m_base;$/;"	m	class:enum_	typeref:typename:detail::enum_base	access:private
m_base	include/pybind11/pybind11.h	/^    handle m_base;$/;"	m	struct:enum_base	typeref:typename:handle	access:public
m_cols	tests/test_buffers.cpp	/^        py::ssize_t m_cols;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:private
m_common_iterator	include/pybind11/numpy.h	/^    std::array<common_iter, N> m_common_iterator;$/;"	m	class:multi_array_iterator	typeref:typename:std::array<common_iter,N>	access:private
m_data	tests/test_buffers.cpp	/^        float *m_data;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:float *	file:	access:private
m_data	tests/test_sequences_and_iterators.cpp	/^        float *m_data;$/;"	m	class:TEST_SUBMODULE::Sequence	typeref:typename:float *	file:	access:private
m_defs	tests/test_pytypes.cpp	/^void m_defs(py::module_ &m) {$/;"	f	namespace:handle_from_move_only_type_with_operator_PyObject	typeref:typename:void	signature:(py::module_ & m)
m_extra1	tests/test_pickling.cpp	/^        int m_extra1 = 0;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:private
m_extra2	tests/test_pickling.cpp	/^        int m_extra2 = 0;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:int	file:	access:private
m_fetched_error	include/pybind11/pytypes.h	/^    std::shared_ptr<detail::error_fetch_and_normalize> m_fetched_error;$/;"	m	class:error_already_set	typeref:typename:std::shared_ptr<detail::error_fetch_and_normalize>	access:private
m_fetched_error_deleter	include/pybind11/pybind11.h	/^error_already_set::m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr) {$/;"	f	class:error_already_set	typeref:typename:void	signature:(detail::error_fetch_and_normalize * raw_ptr)
m_fetched_error_deleter	include/pybind11/pytypes.h	/^    static void m_fetched_error_deleter(detail::error_fetch_and_normalize *raw_ptr);$/;"	p	class:error_already_set	typeref:typename:void	access:private	signature:(detail::error_fetch_and_normalize * raw_ptr)
m_index	include/pybind11/numpy.h	/^    container_type m_index;$/;"	m	class:multi_array_iterator	typeref:typename:container_type	access:private
m_kwargs	include/pybind11/cast.h	/^    dict m_kwargs;$/;"	m	class:unpacking_collector	typeref:typename:dict	access:private
m_lazy_error_string	include/pybind11/pytypes.h	/^    mutable std::string m_lazy_error_string;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:std::string	access:private
m_lazy_error_string_completed	include/pybind11/pytypes.h	/^    mutable bool m_lazy_error_string_completed = false;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:bool	access:private
m_name	tests/test_class.cpp	/^        std::string m_name;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:private
m_parent	include/pybind11/pybind11.h	/^    handle m_parent;$/;"	m	struct:enum_base	typeref:typename:handle	access:public
m_ptr	include/pybind11/pytypes.h	/^    PyObject *m_ptr = nullptr;$/;"	m	class:handle	typeref:typename:PyObject *	access:protected
m_ptr	tests/object.h	/^    T *m_ptr;$/;"	m	class:ref	typeref:typename:T *	access:private
m_refCount	tests/object.h	/^    mutable std::atomic<int> m_refCount{0};$/;"	m	class:Object	typeref:typename:std::atomic<int>	access:private
m_restore_called	include/pybind11/pytypes.h	/^    mutable bool m_restore_called = false;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:bool	access:private
m_rows	tests/test_buffers.cpp	/^        py::ssize_t m_rows;$/;"	m	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:private
m_shape	include/pybind11/numpy.h	/^    container_type m_shape;$/;"	m	class:multi_array_iterator	typeref:typename:container_type	access:private
m_size	tests/test_sequences_and_iterators.cpp	/^        size_t m_size;$/;"	m	class:TEST_SUBMODULE::Sequence	typeref:typename:size_t	file:	access:private
m_species	tests/test_class.cpp	/^        std::string m_species;$/;"	m	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:private
m_strides	include/pybind11/numpy.h	/^    container_type m_strides;$/;"	m	class:common_iterator	typeref:typename:container_type	access:private
m_trace	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
m_type	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
m_value	include/pybind11/pytypes.h	/^    object m_type, m_value, m_trace;$/;"	m	struct:error_fetch_and_normalize	typeref:typename:object	access:public
m_value	tests/test_pickling.cpp	/^        std::string m_value;$/;"	m	class:TEST_SUBMODULE::Pickleable	typeref:typename:std::string	file:	access:private
m_view	include/pybind11/buffer_info.h	/^    Py_buffer *m_view = nullptr;$/;"	m	struct:buffer_info	typeref:typename:Py_buffer *	access:private
macro_notes	docs/advanced/misc.rst	/^.. _macro_notes:$/;"	T	title:Miscellaneous
macros	docs/reference.rst	/^.. _macros:$/;"	T	title:Reference
main	pybind11/__main__.py	/^def main() -> None:$/;"	f	typeref:typename:None	access:public	signature:()
main	tests/test_cmake_build/embed.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	tests/test_embed/catch.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main_headers	tests/extra_python_package/test_files.py	/^main_headers = {$/;"	v	access:public
main_headers	tools/setup_global.py.in	/^main_headers = glob.glob("pybind11\/include\/pybind11\/*.h")$/;"	v	access:public
main_tstate	tests/test_embed/test_interpreter.cpp	/^    auto *main_tstate = PyThreadState_Get();$/;"	v	typeref:typename:auto *
make	tests/test_class.cpp	/^        static std::unique_ptr<MyBase> make() { return std::unique_ptr<MyBase>(new MyBase()); }$/;"	f	struct:TEST_SUBMODULE::MyBase	typeref:typename:std::unique_ptr<MyBase>	file:	access:public	signature:()
make	tests/test_class.cpp	/^        static std::unique_ptr<MyDerived> make() {$/;"	f	struct:TEST_SUBMODULE::MyDerived	typeref:typename:std::unique_ptr<MyDerived>	file:	access:public	signature:()
make_caster	include/pybind11/cast.h	/^using make_caster = type_caster<intrinsic_t<type>>;$/;"	t	typeref:typename:type_caster<intrinsic_t<type>>
make_changelog	noxfile.py	/^def make_changelog(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
make_copy_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_copy_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor	access:protected	signature:(...)
make_copy_constructor	include/pybind11/detail/type_caster_base.h	/^    static auto make_copy_constructor(const T *)$/;"	f	class:type_caster_base	typeref:typename:decltype(new T (std::declval<const T> ()),Constructor{})	access:protected	signature:(const T *)
make_default_metaclass	include/pybind11/detail/class.h	/^inline PyTypeObject *make_default_metaclass() {$/;"	f	typeref:typename:PyTypeObject *	signature:()
make_default_metaclass	include/pybind11/detail/internals.h	/^inline PyTypeObject *make_default_metaclass();$/;"	p	typeref:typename:PyTypeObject *	signature:()
make_function_record	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE unique_function_record make_function_record() {$/;"	f	class:cpp_function	typeref:typename:PYBIND11_NOINLINE unique_function_record	access:protected	signature:()
make_index_sequence	include/pybind11/detail/common.h	/^using make_index_sequence = typename make_index_sequence_impl<N>::type;$/;"	t	typeref:typename:make_index_sequence_impl<N>::type
make_index_sequence_impl	include/pybind11/detail/common.h	/^struct make_index_sequence_impl : make_index_sequence_impl<N - 1, N - 1, S...> {};$/;"	s	inherits:make_index_sequence_impl<N-1,N-1,S...>
make_index_sequence_impl	include/pybind11/detail/common.h	/^struct make_index_sequence_impl<0, S...> {$/;"	s
make_index_sequence_impl::type	include/pybind11/detail/common.h	/^    using type = index_sequence<S...>;$/;"	t	struct:make_index_sequence_impl	typeref:typename:index_sequence<S...>	access:public
make_iterator	include/pybind11/pybind11.h	/^iterator make_iterator(Type &value, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Type & value,Extra &&...extra)
make_iterator_impl	include/pybind11/pybind11.h	/^iterator make_iterator_impl(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Iterator first,Sentinel last,Extra &&...extra)
make_key_iterator	include/pybind11/pybind11.h	/^iterator make_key_iterator(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Iterator first,Sentinel last,Extra &&...extra)
make_key_iterator	include/pybind11/pybind11.h	/^iterator make_key_iterator(Type &value, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Type & value,Extra &&...extra)
make_move_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_move_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor	access:protected	signature:(...)
make_move_constructor	include/pybind11/detail/type_caster_base.h	/^    static auto make_move_constructor(const T *)$/;"	f	class:type_caster_base	typeref:typename:decltype(new T (std::declval<T &&> ()),Constructor{})	access:protected	signature:(const T *)
make_new_instance	include/pybind11/detail/class.h	/^inline PyObject *make_new_instance(PyTypeObject *type) {$/;"	f	typeref:typename:PyObject *	signature:(PyTypeObject * type)
make_new_instance	include/pybind11/detail/type_caster_base.h	/^inline PyObject *make_new_instance(PyTypeObject *type);$/;"	p	typeref:typename:PyObject *	signature:(PyTypeObject * type)
make_new_python_type	include/pybind11/detail/class.h	/^inline PyObject *make_new_python_type(const type_record &rec) {$/;"	f	typeref:typename:PyObject *	signature:(const type_record & rec)
make_object_base_type	include/pybind11/detail/class.h	/^inline PyObject *make_object_base_type(PyTypeObject *metaclass) {$/;"	f	typeref:typename:PyObject *	signature:(PyTypeObject * metaclass)
make_object_base_type	include/pybind11/detail/internals.h	/^inline PyObject *make_object_base_type(PyTypeObject *metaclass);$/;"	p	typeref:typename:PyObject *	signature:(PyTypeObject * metaclass)
make_release_tree	setup.py	/^    def make_release_tree(self, base_dir: str, files: List[str]) -> None:$/;"	m	class:SDist	typeref:typename:None	access:public	signature:(self, base_dir: str, files: List[str])
make_simple_namespace	include/pybind11/pybind11.h	/^object make_simple_namespace(Args &&...args_) {$/;"	f	signature:(Args &&...args_)
make_static_property_type	include/pybind11/detail/class.h	/^inline PyTypeObject *make_static_property_type() {$/;"	f	typeref:typename:PyTypeObject *	signature:()
make_static_property_type	include/pybind11/detail/internals.h	/^inline PyTypeObject *make_static_property_type();$/;"	p	typeref:typename:PyTypeObject *	signature:()
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex inner) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex outer,EigenIndex inner)
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex outer,EigenIndex)
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex inner) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex,EigenIndex inner)
make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex,EigenIndex)
make_tuple	include/pybind11/cast.h	/^tuple make_tuple() {$/;"	f	typeref:typename:tuple	signature:()
make_tuple	include/pybind11/cast.h	/^tuple make_tuple(Args &&...args_) {$/;"	f	typeref:typename:tuple	signature:(Args &&...args_)
make_value_iterator	include/pybind11/pybind11.h	/^iterator make_value_iterator(Iterator first, Sentinel last, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Iterator first,Sentinel last,Extra &&...extra)
make_value_iterator	include/pybind11/pybind11.h	/^iterator make_value_iterator(Type &value, Extra &&...extra) {$/;"	f	typeref:typename:iterator	signature:(Type & value,Extra &&...extra)
make_vector_pyobject_ptr	tests/test_type_caster_pyobject_ptr.cpp	/^std::vector<PyObject *> make_vector_pyobject_ptr(const py::object &ValueHolder) {$/;"	f	namespace:__anon10a0f82e0111	typeref:typename:std::vector<PyObject * >	signature:(const py::object & ValueHolder)
man	docs/Makefile	/^man:$/;"	t
man_pages	docs/conf.py	/^man_pages = [(master_doc, "pybind11", "pybind11 Documentation", [author], 1)]$/;"	v	access:public
map	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<MapType> map;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<MapType>	access:private
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ItemsViewImpl	typeref:typename:Map &	access:public
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:KeysViewImpl	typeref:typename:Map &	access:public
map	include/pybind11/stl_bind.h	/^    Map &map;$/;"	m	struct:ValuesViewImpl	typeref:typename:Map &	access:public
map	tests/test_sequences_and_iterators.cpp	/^        std::unordered_map<std::string, std::string> map;$/;"	m	class:TEST_SUBMODULE::StringMap	typeref:typename:std::unordered_map<std::string,std::string>	file:	access:private
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment($/;"	f	typeref:typename:void	signature:(enable_if_t<is_copy_assignable<typename Map::mapped_type>::value,Class_> & cl)
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment(const Args &...) {}$/;"	f	typeref:typename:void	signature:(const Args &...)
map_assignment	include/pybind11/stl_bind.h	/^void map_assignment(enable_if_t<!is_copy_assignable<typename Map::mapped_type>::value$/;"	f	typeref:typename:void	signature:(enable_if_t<!is_copy_assignable<typename Map::mapped_type>::value && is_copy_constructible<typename Map::mapped_type>::value,Class_> & cl)
map_caster	include/pybind11/stl.h	/^struct map_caster {$/;"	s
map_caster::cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:map_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
map_caster::key_conv	include/pybind11/stl.h	/^    using key_conv = make_caster<Key>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Key>	access:public
map_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:map_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
map_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &, void *) {}$/;"	f	struct:map_caster	typeref:typename:void	access:private	signature:(const dict &,void *)
map_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &d, Type *) {$/;"	f	struct:map_caster	typeref:typename:void	access:private	signature:(const dict & d,Type *)
map_caster::value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Value>	access:public
map_if_insertion_operator	include/pybind11/stl_bind.h	/^auto map_if_insertion_operator(Class_ &cl, std::string const &name)$/;"	f	typeref:typename:decltype(std::declval<std::ostream &> ()<<std::declval<typename Map::key_type> ()<<std::declval<typename Map::mapped_type> (),void ())	signature:(Class_ & cl,std::string const & name)
mark	tools/check-style.sh	/^function mark(pattern, string) { sub(pattern, "\\033[01;31m&\\033[0m", string); return string }$/;"	f
mark_parents_nonsimple	include/pybind11/pybind11.h	/^    void mark_parents_nonsimple(PyTypeObject *value) {$/;"	f	class:generic_type	typeref:typename:void	access:protected	signature:(PyTypeObject * value)
master_doc	docs/conf.py	/^master_doc = "index"$/;"	v	access:public
mat	tests/test_eigen_matrix.cpp	/^        Eigen::MatrixXd mat = create();$/;"	m	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::MatrixXd	file:	access:private
matches	include/pybind11/pytypes.h	/^    bool matches(handle exc) const { return m_fetched_error->matches(exc); }$/;"	f	class:error_already_set	typeref:typename:bool	access:public	signature:(handle exc) const
matches	include/pybind11/pytypes.h	/^    bool matches(handle exc) const {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:bool	access:public	signature:(handle exc) const
matches	setup.py	/^matches = dict(VERSION_REGEX.findall(COMMON_FILE.read_text(encoding="utf8")))$/;"	v	access:public
mb	tests/test_unnamed_namespace_a.py	/^from pybind11_tests import unnamed_namespace_b as mb$/;"	Y	access:public	nameref:unknown:unnamed_namespace_b
member	tests/test_eigen_tensor.inl	/^    Eigen::Tensor<double, 3, Options> member;$/;"	m	struct:CustomExample	typeref:typename:Eigen::Tensor<double,3,Options>	file:	access:public
member	tests/test_operator_overloading.cpp	/^    std::string member;$/;"	m	struct:HashMe	typeref:typename:std::string	file:	access:public
member_initialized	tests/test_stl.cpp	/^    bool member_initialized() const { return member && member->initialized; }$/;"	f	struct:OptionalHolder	typeref:typename:bool	file:	access:public	signature:() const
memcheck	tests/CMakeLists.txt	/^  memcheck$/;"	t
memoryview	include/pybind11/pytypes.h	/^class memoryview : public object {$/;"	c	inherits:object
memoryview::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(memoryview, object, PyMemoryView_Check, PyMemoryView_FromObject)$/;"	f	class:memoryview	access:public	signature:(memoryview,object,PyMemoryView_Check,PyMemoryView_FromObject)
memoryview::from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(T *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(T * ptr,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly=false)
memoryview::from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const T *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const T * ptr,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides)
memoryview::from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(const void *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides)
memoryview::from_buffer	include/pybind11/pytypes.h	/^    static memoryview from_buffer(void *ptr,$/;"	p	class:memoryview	typeref:typename:memoryview	access:public	signature:(void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly=false)
memoryview::from_buffer	include/pybind11/pytypes.h	/^inline memoryview memoryview::from_buffer(void *ptr,$/;"	f	class:memoryview	typeref:typename:memoryview	signature:(void * ptr,ssize_t itemsize,const char * format,detail::any_container<ssize_t> shape,detail::any_container<ssize_t> strides,bool readonly)
memoryview::from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(const void *mem, ssize_t size) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(const void * mem,ssize_t size)
memoryview::from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(std::string_view mem) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(std::string_view mem)
memoryview::from_memory	include/pybind11/pytypes.h	/^    static memoryview from_memory(void *mem, ssize_t size, bool readonly = false) {$/;"	f	class:memoryview	typeref:typename:memoryview	access:public	signature:(void * mem,ssize_t size,bool readonly=false)
message	.github/matchers/pylint.json	/^          "message": 5$/;"	n	object:problemMatcher.0.pattern.0
message	.github/matchers/pylint.json	/^          "message": 5$/;"	n	object:problemMatcher.1.pattern.0
message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalException	typeref:typename:std::string	access:private
message	tests/local_bindings.h	/^    std::string message = "";$/;"	m	class:LocalSimpleException	typeref:typename:std::string	access:private
message	tests/test_embed/test_interpreter.cpp	/^    auto message = py_widget.attr("the_message");$/;"	v	typeref:typename:auto
message	tests/test_embed/test_interpreter.cpp	/^    std::string message;$/;"	m	class:Widget	typeref:typename:std::string	file:	access:private
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException	typeref:typename:std::string	file:	access:private
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException2	typeref:typename:std::string	file:	access:private
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException3	typeref:typename:std::string	file:	access:private
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException4	typeref:typename:std::string	file:	access:private
message	tests/test_exceptions.cpp	/^    std::string message = "";$/;"	m	class:MyException6	typeref:typename:std::string	file:	access:private
metaclass	include/pybind11/attr.h	/^    explicit metaclass(handle value) : value(value) {}$/;"	f	struct:metaclass	access:public	signature:(handle value)
metaclass	include/pybind11/attr.h	/^    handle metaclass;$/;"	m	struct:type_record	typeref:typename:handle	access:public
metaclass	include/pybind11/attr.h	/^    metaclass() = default;$/;"	p	struct:metaclass	access:public	signature:()
metaclass	include/pybind11/attr.h	/^struct metaclass {$/;"	s
metaclass::metaclass	include/pybind11/attr.h	/^    explicit metaclass(handle value) : value(value) {}$/;"	f	struct:metaclass	access:public	signature:(handle value)
metaclass::metaclass	include/pybind11/attr.h	/^    metaclass() = default;$/;"	p	struct:metaclass	access:public	signature:()
metaclass::value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:metaclass	typeref:typename:handle	access:public
method	tests/test_numpy_vectorize.cpp	/^        float method(int x, float y) const { return y + (float) (x + value); }$/;"	f	struct:TEST_SUBMODULE::VectorizeTestClass	typeref:typename:float	file:	access:public	signature:(int x,float y) const
method_adaptor	include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...) const) -> Return (Derived::*)(Args...) const {$/;"	f	typeref:typename:Return (Derived::*)(Args...)const	signature:(Return (Class::* pmf)(Args...)const)
method_adaptor	include/pybind11/pybind11.h	/^auto method_adaptor(Return (Class::*pmf)(Args...)) -> Return (Derived::*)(Args...) {$/;"	f	typeref:typename:Return (Derived::*)(Args...)	signature:(Return (Class::* pmf)(Args...))
minversion	tests/pytest.ini	/^minversion = 3.10$/;"	k	section:pytest
missing	tools/make_changelog.py	/^missing = []$/;"	v	access:public
mkarray_via_buffer	tests/test_numpy_dtypes.cpp	/^py::array mkarray_via_buffer(size_t n) {$/;"	f	typeref:typename:py::array	signature:(size_t n)
mock_install	tests/test_cmake_build/CMakeLists.txt	/^    mock_install ${CMAKE_COMMAND} "-DCMAKE_INSTALL_PREFIX=${pybind11_BINARY_DIR}\/mock_install" /;"	t
module	include/pybind11/pybind11.h	/^using module = module_;$/;"	t	typeref:typename:module_
module	tests/test_embed/test_interpreter.cpp	/^        auto module = py::module::import("test_interpreter");$/;"	v	typeref:typename:auto
module_	include/pybind11/pybind11.h	/^class module_ : public object {$/;"	c	inherits:object
module_	tests/test_embed/test_interpreter.cpp	/^    auto module_ = py::module_::import("test_interpreter");$/;"	v	typeref:typename:auto
module_	tests/test_embed/test_interpreter.cpp	/^    auto module_ = py::module_::import("test_trampoline");$/;"	v	typeref:typename:auto
module_	tests/test_embed/test_interpreter.cpp	/^    auto module_ = py::module_::import(module_name.c_str());$/;"	v	typeref:typename:auto
module_::PYBIND11_OBJECT_DEFAULT	include/pybind11/pybind11.h	/^    PYBIND11_OBJECT_DEFAULT(module_, object, PyModule_Check)$/;"	f	class:module_	access:public	signature:(module_,object,PyModule_Check)
module_::add_object	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void add_object(const char *name, handle obj, bool overwrite = false) {$/;"	f	class:module_	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(const char * name,handle obj,bool overwrite=false)
module_::create_extension_module	include/pybind11/pybind11.h	/^    static module_ create_extension_module(const char *name, const char *doc, module_def *def) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name,const char * doc,module_def * def)
module_::def	include/pybind11/pybind11.h	/^    module_ &def(const char *name_, Func &&f, const Extra &...extra) {$/;"	f	class:module_	typeref:typename:module_ &	access:public	signature:(const char * name_,Func && f,const Extra &...extra)
module_::def_submodule	include/pybind11/pybind11.h	/^    module_ def_submodule(const char *name, const char *doc = nullptr) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name,const char * doc=nullptr)
module_::import	include/pybind11/pybind11.h	/^    static module_ import(const char *name) {$/;"	f	class:module_	typeref:typename:module_	access:public	signature:(const char * name)
module_::module_def	include/pybind11/pybind11.h	/^    using module_def = PyModuleDef; \/\/ TODO: Can this be removed (it was needed only for Pytho/;"	t	class:module_	typeref:typename:PyModuleDef	access:public
module_::reload	include/pybind11/pybind11.h	/^    void reload() {$/;"	f	class:module_	typeref:typename:void	access:public	signature:()
module_def	include/pybind11/pybind11.h	/^    using module_def = PyModuleDef; \/\/ TODO: Can this be removed (it was needed only for Pytho/;"	t	class:module_	typeref:typename:PyModuleDef	access:public
module_file	tests/test_embed/test_interpreter.cpp	/^    std::string module_file = module_name + ".py";$/;"	v	typeref:typename:std::string
module_local	docs/advanced/classes.rst	/^.. _module_local:$/;"	T	chapter:Multiple Inheritance
module_local	include/pybind11/attr.h	/^    bool module_local : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
module_local	include/pybind11/attr.h	/^    constexpr explicit module_local(bool v = true) : value(v) {}$/;"	f	struct:module_local	access:public	signature:(bool v=true)
module_local	include/pybind11/attr.h	/^struct module_local {$/;"	s
module_local	include/pybind11/detail/internals.h	/^    bool module_local : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
module_local::module_local	include/pybind11/attr.h	/^    constexpr explicit module_local(bool v = true) : value(v) {}$/;"	f	struct:module_local	access:public	signature:(bool v=true)
module_local::value	include/pybind11/attr.h	/^    const bool value;$/;"	m	struct:module_local	typeref:typename:const bool	access:public
module_local_load	include/pybind11/detail/internals.h	/^    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;$/;"	m	struct:type_info	typeref:typename:void * (*)(PyObject *,const type_info *)	access:public
module_name	tests/test_embed/test_interpreter.cpp	/^    std::string module_name = "test_module_reload";$/;"	v	typeref:typename:std::string
moduledef	tests/cross_module_gil_utils.cpp	/^struct PyModuleDef moduledef = {$/;"	v	namespace:__anonf105cff20111	typeref:struct:PyModuleDef
moduledef	tests/cross_module_interleaved_error_already_set.cpp	/^struct PyModuleDef moduledef = {$/;"	v	namespace:__anon83ce96ce0111	typeref:struct:PyModuleDef
movable_cast_op_type	include/pybind11/detail/type_caster_base.h	/^using movable_cast_op_type$/;"	t
move	include/pybind11/cast.h	/^detail::enable_if_t<!detail::move_never<T>::value, T> move(object &&obj) {$/;"	f	typeref:typename:detail::enable_if_t<!detail::move_never<T>::value,T>	signature:(object && obj)
move	include/pybind11/detail/common.h	/^    move,$/;"	e	enum:return_value_policy	access:public
move_always	include/pybind11/cast.h	/^struct move_always : std::false_type {};$/;"	s	inherits:std::false_type
move_always	include/pybind11/cast.h	/^struct move_always<$/;"	s	inherits:std::true_type
move_assignments	tests/constructor_stats.h	/^    int move_assignments = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
move_constructions	tests/constructor_stats.h	/^    int move_constructions = 0;$/;"	m	class:ConstructorStats	typeref:typename:int	access:public
move_created	tests/constructor_stats.h	/^    void move_created(void *inst) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(void * inst)
move_if_unreferenced	include/pybind11/cast.h	/^struct move_if_unreferenced : std::false_type {};$/;"	s	inherits:std::false_type
move_if_unreferenced	include/pybind11/cast.h	/^struct move_if_unreferenced<$/;"	s	inherits:std::true_type
move_is_plain_type	include/pybind11/cast.h	/^using move_is_plain_type$/;"	t	typeref:typename:satisfies_none_of<T,std::is_void,std::is_pointer,std::is_reference,std::is_const>
move_list	tests/test_stl.cpp	/^        std::list<Value> move_list() const { return {{0}, {1}, {2}}; }$/;"	f	struct:TEST_SUBMODULE::MoveOutContainer	typeref:typename:std::list<Value>	file:	access:public	signature:() const
move_never	include/pybind11/cast.h	/^using move_never = none_of<move_always<T>, move_if_unreferenced<T>>;$/;"	t	typeref:typename:none_of<move_always<T>,move_if_unreferenced<T>>
move_only_holder_caster	include/pybind11/cast.h	/^struct move_only_holder_caster {$/;"	s
move_only_holder_caster::cast	include/pybind11/cast.h	/^    static handle cast(holder_type &&src, return_value_policy, handle) {$/;"	f	struct:move_only_holder_caster	typeref:typename:handle	access:public	signature:(holder_type && src,return_value_policy,handle)
move_only_holder_caster::name	include/pybind11/cast.h	/^    static constexpr auto name = type_caster_base<type>::name;$/;"	m	struct:move_only_holder_caster	typeref:typename:auto	access:public
ms	tests/test_modules.py	/^from pybind11_tests.modules import subsubmodule as ms$/;"	Y	access:public	nameref:unknown:subsubmodule
msg	pybind11/__init__.py	/^    msg = "pybind11 does not support Python < 3.6. 2.9 was the last release supporting Python 2./;"	v	access:public
msg	setup.py	/^    msg = f"PYBIND11_VERSION_HEX {version_hex} does not match expected value {exp_version_hex}!"$/;"	v	access:public
msg	setup.py	/^    msg = f"Python version {version} does not match C++ version {cpp_version}!"$/;"	v	access:public
msg	tests/conftest.py	/^def msg():$/;"	f	access:public	signature:()
msg	tests/test_eigen_tensor.py	/^    msg = ($/;"	v	access:public
msg	tools/make_changelog.py	/^            msg = "* " + msg$/;"	v	access:public
msg	tools/make_changelog.py	/^    msg = "## Suggested changelog entry:\\n\\n```rst\\n\\n```"$/;"	v	access:public
multi_array_iterator	include/pybind11/numpy.h	/^    multi_array_iterator(const std::array<buffer_info, N> &buffers, const container_type &shape)$/;"	f	class:multi_array_iterator	access:public	signature:(const std::array<buffer_info,N> & buffers,const container_type & shape)
multi_array_iterator	include/pybind11/numpy.h	/^class multi_array_iterator {$/;"	c
multi_array_iterator::common_iter	include/pybind11/numpy.h	/^    using common_iter = common_iterator;$/;"	t	class:multi_array_iterator	typeref:typename:common_iterator	access:private
multi_array_iterator::container_type	include/pybind11/numpy.h	/^    using container_type = std::vector<ssize_t>;$/;"	t	class:multi_array_iterator	typeref:typename:std::vector<ssize_t>	access:public
multi_array_iterator::data	include/pybind11/numpy.h	/^    T *data() const {$/;"	f	class:multi_array_iterator	typeref:typename:T *	access:public	signature:() const
multi_array_iterator::increment_common_iterator	include/pybind11/numpy.h	/^    void increment_common_iterator(size_t dim) {$/;"	f	class:multi_array_iterator	typeref:typename:void	access:private	signature:(size_t dim)
multi_array_iterator::init_common_iterator	include/pybind11/numpy.h	/^    void init_common_iterator(const buffer_info &buffer,$/;"	f	class:multi_array_iterator	typeref:typename:void	access:private	signature:(const buffer_info & buffer,const container_type & shape,common_iter & iterator,container_type & strides)
multi_array_iterator::m_common_iterator	include/pybind11/numpy.h	/^    std::array<common_iter, N> m_common_iterator;$/;"	m	class:multi_array_iterator	typeref:typename:std::array<common_iter,N>	access:private
multi_array_iterator::m_index	include/pybind11/numpy.h	/^    container_type m_index;$/;"	m	class:multi_array_iterator	typeref:typename:container_type	access:private
multi_array_iterator::m_shape	include/pybind11/numpy.h	/^    container_type m_shape;$/;"	m	class:multi_array_iterator	typeref:typename:container_type	access:private
multi_array_iterator::multi_array_iterator	include/pybind11/numpy.h	/^    multi_array_iterator(const std::array<buffer_info, N> &buffers, const container_type &shape)$/;"	f	class:multi_array_iterator	access:public	signature:(const std::array<buffer_info,N> & buffers,const container_type & shape)
multi_array_iterator::operator ++	include/pybind11/numpy.h	/^    multi_array_iterator &operator++() {$/;"	f	class:multi_array_iterator	typeref:typename:multi_array_iterator &	access:public	signature:()
multiple_inheritance	include/pybind11/attr.h	/^    bool multiple_inheritance : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
multiple_inheritance	include/pybind11/attr.h	/^struct multiple_inheritance {};$/;"	s
multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error() {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:()
multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error(const std::string &name) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(const std::string & name)
mutable_at	include/pybind11/numpy.h	/^    T &mutable_at(Ix... index) {$/;"	f	class:array_t	typeref:typename:T &	access:public	signature:(Ix...index)
mutable_data	include/pybind11/numpy.h	/^    T *mutable_data(Ix... index) {$/;"	f	class:array_t	typeref:typename:T *	access:public	signature:(Ix...index)
mutable_data	include/pybind11/numpy.h	/^    T *mutable_data(Ix... ix) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T *	access:public	signature:(Ix...ix)
mutable_data	include/pybind11/numpy.h	/^    static Return *mutable_data(Type &array) { return array.mutable_data(); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Return *	access:public	signature:(Type & array)
mutable_data	include/pybind11/numpy.h	/^    static void *mutable_data(Type &) { return nullptr; }$/;"	f	struct:vectorize_returned_array	typeref:typename:void *	access:public	signature:(Type &)
mutable_data	include/pybind11/numpy.h	/^    void *mutable_data(Ix... index) {$/;"	f	class:array	typeref:typename:void *	access:public	signature:(Ix...index)
mutable_unchecked	include/pybind11/numpy.h	/^    detail::unchecked_mutable_reference<T, Dims> mutable_unchecked() & {$/;"	f	class:array	typeref:typename:detail::unchecked_mutable_reference<T,Dims>	access:public	signature:()
mutable_unchecked	include/pybind11/numpy.h	/^    detail::unchecked_mutable_reference<T, Dims> mutable_unchecked() & {$/;"	f	class:array_t	typeref:typename:detail::unchecked_mutable_reference<T,Dims>	access:public	signature:()
mutate_at_t	tests/test_numpy_array.cpp	/^arr_t &mutate_at_t(arr_t &a, Ix... idx) {$/;"	f	typeref:typename:arr_t &	signature:(arr_t & a,Ix...idx)
mutate_data	tests/test_numpy_array.cpp	/^arr &mutate_data(arr &a, Ix... index) {$/;"	f	typeref:typename:arr &	signature:(arr & a,Ix...index)
mutate_data_t	tests/test_numpy_array.cpp	/^arr_t &mutate_data_t(arr_t &a, Ix... index) {$/;"	f	typeref:typename:arr_t &	signature:(arr_t & a,Ix...index)
my_caster	tests/test_custom_type_casters.cpp	/^struct my_caster {$/;"	s	namespace:other_lib	file:
my_func	tests/test_numpy_vectorize.cpp	/^double my_func(int x, float y, double z) {$/;"	f	typeref:typename:double	signature:(int x,float y,double z)
myexe	tools/pybind11Config.cmake.in	/^  add_executable(myexe main.cpp)$/;"	t
mylib	tools/pybind11Config.cmake.in	/^  add_library(mylib MODULE main.cpp)$/;"	t
myobject4_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4 *> myobject4_instances;$/;"	v	namespace:__anond975f9d30111	typeref:typename:std::unordered_set<MyObject4 * >
myobject4a_instances	tests/test_smart_ptr.cpp	/^std::unordered_set<MyObject4a *> myobject4a_instances;$/;"	v	namespace:__anond975f9d30111	typeref:typename:std::unordered_set<MyObject4a * >
n1	docs/benchmark.py	/^        n1 = dt.datetime.now()$/;"	v	access:public
n2	docs/benchmark.py	/^        n2 = dt.datetime.now()$/;"	v	access:public
naive_recompile	pybind11/setup_helpers.py	/^def naive_recompile(obj: str, src: str) -> bool:$/;"	f	typeref:typename:bool	access:public	signature:(obj: str, src: str)
name	include/pybind11/attr.h	/^    char *name = nullptr; \/* why no C++ strings? They generate heavier code.. *\/$/;"	m	struct:function_record	typeref:typename:char *	access:public
name	include/pybind11/attr.h	/^    const char *name = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *	access:public
name	include/pybind11/attr.h	/^    const char *name;  \/\/\/< Argument name$/;"	m	struct:argument_record	typeref:typename:const char *	access:public
name	include/pybind11/attr.h	/^    explicit name(const char *value) : value(value) {}$/;"	f	struct:name	access:public	signature:(const char * value)
name	include/pybind11/attr.h	/^struct name {$/;"	s
name	include/pybind11/cast.h	/^    const char *name;        \/\/\/< If non-null, this is a named kwargs argument$/;"	m	struct:arg	typeref:typename:const char *	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = caster_t::name;$/;"	m	class:type_caster	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("**kwargs");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("*args");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterable");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("Iterator");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("None");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("bool");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("capsule");$/;"	m	class:type_caster	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("float");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("int");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_BYTES_NAME);$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_STRING_NAME);$/;"	m	struct:type_caster	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = const_name<T>();$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name = type_caster_base<type>::name;$/;"	m	struct:move_only_holder_caster	typeref:typename:auto	access:public
name	include/pybind11/cast.h	/^    static constexpr auto name$/;"	m	class:tuple_caster	typeref:typename:auto	access:public
name	include/pybind11/detail/init.h	/^    static constexpr auto name = const_name<value_and_holder>();$/;"	m	class:type_caster	typeref:typename:auto	access:public
name	include/pybind11/detail/type_caster_base.h	/^    static constexpr auto name = const_name<type>();$/;"	m	class:type_caster_base	typeref:typename:auto	access:public
name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:eigen_map_caster	typeref:typename:auto	access:public
name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
name	include/pybind11/eigen/tensor.h	/^    static constexpr auto name = get_tensor_descriptor<Type, true, needs_writeable>::value;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^            pybind11::str name;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:pybind11::str	access:public
name	include/pybind11/numpy.h	/^    const char *name;$/;"	m	struct:field_descriptor	typeref:typename:const char *	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = base_descr::name;$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name < std::is_same<T, float>::value$/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name < std::is_same<typename T::value_type, float>::value$/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name("numpy.ndarray");$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name("object");$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name<std::is_same<T, bool>::value>($/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name = make_caster<T>::name;$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name$/;"	m	struct:handle_type_name	typeref:typename:auto	access:public
name	include/pybind11/numpy.h	/^    static constexpr auto name$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
name	include/pybind11/pybind11.h	/^    object name() const { return attr("__name__"); }$/;"	f	class:cpp_function	typeref:typename:object	access:public	signature:() const
name	include/pybind11/pytypes.h	/^    const char *name() const {$/;"	f	class:capsule	typeref:typename:const char *	access:public	signature:() const
name	include/pybind11/type_caster_pyobject_ptr.h	/^    static constexpr auto name = const_name("object"); \/\/ See discussion under PR #4601.$/;"	m	class:type_caster	typeref:typename:auto	access:public
name	tests/local_bindings.h	/^    const std::string &name() const { return name_; }$/;"	f	class:pets::Pet	typeref:typename:const std::string &	access:public	signature:() const
name	tests/test_builtin_casters.cpp	/^    static constexpr auto name = const_name<ConstRefCasted>();$/;"	m	class:type_caster	typeref:typename:auto	file:	access:public
name	tests/test_class.cpp	/^        std::string name() const { return m_name; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:public	signature:() const
name	tests/test_copy_move.cpp	/^    static constexpr auto name = const_name("CopyOnlyInt");$/;"	m	struct:type_caster	typeref:typename:auto	file:	access:public
name	tests/test_numpy_array.cpp	/^    std::string name{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:std::string	file:	access:public
name	tests/test_tagbased_polymorphic.cpp	/^    const std::string name;$/;"	m	struct:Animal	typeref:typename:const std::string	file:	access:public
name::name	include/pybind11/attr.h	/^    explicit name(const char *value) : value(value) {}$/;"	f	struct:name	access:public	signature:(const char * value)
name::value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:name	typeref:typename:const char *	access:public
name_	tests/local_bindings.h	/^    std::string name_;$/;"	m	class:pets::Pet	typeref:typename:std::string	access:public
name_of_kind	tests/test_tagbased_polymorphic.cpp	/^    static std::string name_of_kind(Kind kind);$/;"	p	struct:Animal	typeref:typename:std::string	file:	access:public	signature:(Kind kind)
name_of_kind	tests/test_tagbased_polymorphic.cpp	/^std::string Animal::name_of_kind(Kind kind) {$/;"	f	class:Animal	typeref:typename:std::string	signature:(Kind kind)
nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error() {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:()
nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error(const std::string &type) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(const std::string & type)
names	include/pybind11/numpy.h	/^    PyObject *names;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject *	access:public
nargs	docs/benchmark.py	/^nargs = 4  # Arguments per function$/;"	v	access:public
nargs	include/pybind11/attr.h	/^    std::uint16_t nargs;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
nargs_pos	include/pybind11/attr.h	/^    std::uint16_t nargs_pos = 0;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
nargs_pos_only	include/pybind11/attr.h	/^    std::uint16_t nargs_pos_only = 0;$/;"	m	struct:function_record	typeref:typename:std::uint16_t	access:public
nbytes	include/pybind11/numpy.h	/^    ssize_t nbytes() const { return size() * itemsize(); }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
nbytes	include/pybind11/numpy.h	/^    ssize_t nbytes() const { return size() * itemsize(); }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:() const
nclasses	docs/benchmark.py	/^        nclasses = 2**i$/;"	v	access:public
nd	include/pybind11/numpy.h	/^    int nd;$/;"	m	struct:PyArray_Proxy	typeref:typename:int	access:public
ndim	include/pybind11/buffer_info.h	/^    ssize_t ndim = 0;             \/\/ Number of dimensions$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
ndim	include/pybind11/numpy.h	/^    ssize_t ndim() const { return detail::array_proxy(m_ptr)->nd; }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
ndim	include/pybind11/numpy.h	/^    ssize_t ndim() const { return dims_; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:() const
need_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool need_writeable = is_eigen_mutable_map<Type>::value;$/;"	m	struct:type_caster	typeref:typename:bool	access:private
needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<Type>::value;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<typename std::remove_pointer<$/;"	m	struct:type_caster	typeref:typename:bool	access:public
negation	include/pybind11/detail/common.h	/^struct negation : bool_constant<!T::value> {};$/;"	s	inherits:bool_constant<!T::value>
negativestrides	include/pybind11/eigen/matrix.h	/^    bool negativestrides = false; \/\/ If true, do not use stride!$/;"	m	struct:EigenConformable	typeref:typename:bool	access:public
new_instance	tests/test_class.cpp	/^        static NoConstructor *new_instance() {$/;"	f	struct:TEST_SUBMODULE::NoConstructor	typeref:typename:NoConstructor *	file:	access:public	signature:()
new_instance	tests/test_class.cpp	/^        static NoConstructorNew *new_instance() {$/;"	f	struct:TEST_SUBMODULE::NoConstructorNew	typeref:typename:NoConstructorNew *	file:	access:public	signature:()
next	include/pybind11/attr.h	/^        typename call_guard<Ts...>::type next{};$/;"	m	struct:call_guard::type	typeref:typename:call_guard<Ts...>::type	access:public
next	include/pybind11/attr.h	/^    function_record *next = nullptr;$/;"	m	struct:function_record	typeref:typename:function_record *	access:public
nfns	docs/benchmark.py	/^nfns = 4  # Functions per class$/;"	v	access:public
no_recompile	pybind11/setup_helpers.py	/^def no_recompile(obg: str, src: str) -> bool:  # noqa: ARG001$/;"	f	typeref:typename:bool	access:public	signature:(obg: str, src: str)
no_ref_T	include/pybind11/cast.h	/^    using no_ref_T = typename std::remove_reference<T>::type;$/;"	t	function:cast	typeref:typename:std::remove_reference<T>::type
noconvert	include/pybind11/cast.h	/^    arg &noconvert(bool flag = true) {$/;"	f	struct:arg	typeref:typename:arg &	access:public	signature:(bool flag=true)
noconvert	include/pybind11/cast.h	/^    arg_v &noconvert(bool flag = true) {$/;"	f	struct:arg_v	typeref:typename:arg_v &	access:public	signature:(bool flag=true)
nodelete	include/pybind11/detail/common.h	/^struct nodelete {$/;"	s
nodelete::operator ()	include/pybind11/detail/common.h	/^    void operator()(T *) {}$/;"	f	struct:nodelete	typeref:typename:void	access:public	signature:(T *)
noisy_funct_dual	tests/test_iostream.cpp	/^void noisy_funct_dual(const std::string &msg, const std::string &emsg) {$/;"	f	typeref:typename:void	signature:(const std::string & msg,const std::string & emsg)
noisy_function	tests/test_iostream.cpp	/^void noisy_function(const std::string &msg, bool flush) {$/;"	f	typeref:typename:void	signature:(const std::string & msg,bool flush)
non_trivial	include/pybind11/numpy.h	/^enum class broadcast_trivial { non_trivial, c_trivial, f_trivial };$/;"	e	enum:broadcast_trivial	access:public
nonconverting_arguments	docs/advanced/functions.rst	/^.. _nonconverting_arguments:$/;"	T	chapter:Positional-only arguments
none	include/pybind11/attr.h	/^    bool none : 1;     \/\/\/< True if None is allowed when loading$/;"	m	struct:argument_record	typeref:typename:bool:1	access:public
none	include/pybind11/cast.h	/^    arg &none(bool flag = true) {$/;"	f	struct:arg	typeref:typename:arg &	access:public	signature:(bool flag=true)
none	include/pybind11/cast.h	/^    arg_v &none(bool flag = true) {$/;"	f	struct:arg_v	typeref:typename:arg_v &	access:public	signature:(bool flag=true)
none	include/pybind11/cast.h	/^    bool none = false;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
none	include/pybind11/pytypes.h	/^class none : public object {$/;"	c	inherits:object
none1	tests/test_methods_and_attributes.cpp	/^int none1(const NoneTester &obj) { return obj.answer; }$/;"	f	typeref:typename:int	signature:(const NoneTester & obj)
none2	tests/test_methods_and_attributes.cpp	/^int none2(NoneTester *obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int	signature:(NoneTester * obj)
none3	tests/test_methods_and_attributes.cpp	/^int none3(std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int	signature:(std::shared_ptr<NoneTester> & obj)
none4	tests/test_methods_and_attributes.cpp	/^int none4(std::shared_ptr<NoneTester> *obj) { return obj && *obj ? (*obj)->answer : -1; }$/;"	f	typeref:typename:int	signature:(std::shared_ptr<NoneTester> * obj)
none5	tests/test_methods_and_attributes.cpp	/^int none5(const std::shared_ptr<NoneTester> &obj) { return obj ? obj->answer : -1; }$/;"	f	typeref:typename:int	signature:(const std::shared_ptr<NoneTester> & obj)
none::PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(none, object, detail::PyNone_Check)$/;"	f	class:none	access:public	signature:(none,object,detail::PyNone_Check)
none_arguments	docs/advanced/functions.rst	/^.. _none_arguments:$/;"	T	chapter:Non-converting arguments
none_of	include/pybind11/detail/common.h	/^using none_of = negation<any_of<Ts...>>;$/;"	t	typeref:typename:negation<any_of<Ts...>>
nonsimple	include/pybind11/detail/common.h	/^        nonsimple_values_and_holders nonsimple;$/;"	m	union:instance::__anonf1125e50010a	typeref:typename:nonsimple_values_and_holders	access:public
nonsimple_values_and_holders	include/pybind11/detail/common.h	/^struct nonsimple_values_and_holders {$/;"	s
nonsimple_values_and_holders::status	include/pybind11/detail/common.h	/^    uint8_t *status;$/;"	m	struct:nonsimple_values_and_holders	typeref:typename:uint8_t *	access:public
nonsimple_values_and_holders::values_and_holders	include/pybind11/detail/common.h	/^    void **values_and_holders;$/;"	m	struct:nonsimple_values_and_holders	typeref:typename:void **	access:public
nopython-mode	docs/compiling.rst	/^.. _nopython-mode:$/;"	T	section:Advanced: interface library targets
norecursedirs	tests/pytest.ini	/^norecursedirs = test_* extra_*$/;"	k	section:pytest
normalize_line_endings	tests/extra_python_package/test_files.py	/^def normalize_line_endings(value: bytes) -> bytes:$/;"	f	typeref:typename:bytes	access:public	signature:(value: bytes)
not_debug	tools/pybind11Common.cmake	/^    set(not_debug "$<NOT:${is_debug}>")$/;"	v	function:_pybind11_generate_lto
not_equal	include/pybind11/pytypes.h	/^    bool not_equal(object_api const &other) const { return rich_compare(other, Py_NE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
np	tests/test_buffers.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np	tests/test_eigen_matrix.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np	tests/test_eigen_tensor.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np	tests/test_numpy_array.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np	tests/test_numpy_dtypes.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np	tests/test_numpy_vectorize.py	/^np = pytest.importorskip("numpy")$/;"	v	access:public
np_complex256	tests/test_buffers.py	/^    np_complex256 = None$/;"	v	access:public
np_complex256	tests/test_buffers.py	/^    np_complex256 = getattr(np, *["complex256"] * 2)$/;"	v	access:public
np_float128	tests/test_buffers.py	/^    np_float128 = None$/;"	v	access:public
np_float128	tests/test_buffers.py	/^    np_float128 = getattr(np, *["float128"] * 2)$/;"	v	access:public
npy_api	include/pybind11/numpy.h	/^struct npy_api {$/;"	s
npy_api::API_PyArrayDescr_Type	include/pybind11/numpy.h	/^        API_PyArrayDescr_Type = 3,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_CopyInto	include/pybind11/numpy.h	/^        API_PyArray_CopyInto = 82,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_DescrConverter	include/pybind11/numpy.h	/^        API_PyArray_DescrConverter = 174,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_DescrFromScalar	include/pybind11/numpy.h	/^        API_PyArray_DescrFromScalar = 57,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_DescrFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrFromType = 45,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_DescrNewFromType	include/pybind11/numpy.h	/^        API_PyArray_DescrNewFromType = 96,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_EquivTypes	include/pybind11/numpy.h	/^        API_PyArray_EquivTypes = 182,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_FromAny	include/pybind11/numpy.h	/^        API_PyArray_FromAny = 69,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_GetArrayParamsFromObject	include/pybind11/numpy.h	/^        API_PyArray_GetArrayParamsFromObject = 278,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_GetNDArrayCFeatureVersion	include/pybind11/numpy.h	/^        API_PyArray_GetNDArrayCFeatureVersion = 211,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_NewCopy	include/pybind11/numpy.h	/^        API_PyArray_NewCopy = 85,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_NewFromDescr	include/pybind11/numpy.h	/^        API_PyArray_NewFromDescr = 94,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_Newshape	include/pybind11/numpy.h	/^        API_PyArray_Newshape = 135,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_Resize	include/pybind11/numpy.h	/^        API_PyArray_Resize = 80,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_SetBaseObject	include/pybind11/numpy.h	/^        API_PyArray_SetBaseObject = 282$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_Squeeze	include/pybind11/numpy.h	/^        API_PyArray_Squeeze = 136,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_Type	include/pybind11/numpy.h	/^        API_PyArray_Type = 2,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyArray_View	include/pybind11/numpy.h	/^        API_PyArray_View = 137,$/;"	e	enum:npy_api::functions	access:public
npy_api::API_PyVoidArrType_Type	include/pybind11/numpy.h	/^        API_PyVoidArrType_Type = 39,$/;"	e	enum:npy_api::functions	access:public
npy_api::NPY_ARRAY_ALIGNED_	include/pybind11/numpy.h	/^        NPY_ARRAY_ALIGNED_ = 0x0100,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_C_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_C_CONTIGUOUS_ = 0x0001,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_ENSUREARRAY_	include/pybind11/numpy.h	/^        NPY_ARRAY_ENSUREARRAY_ = 0x0040,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_FORCECAST_	include/pybind11/numpy.h	/^        NPY_ARRAY_FORCECAST_ = 0x0010,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_F_CONTIGUOUS_	include/pybind11/numpy.h	/^        NPY_ARRAY_F_CONTIGUOUS_ = 0x0002,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_OWNDATA_	include/pybind11/numpy.h	/^        NPY_ARRAY_OWNDATA_ = 0x0004,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ARRAY_WRITEABLE_	include/pybind11/numpy.h	/^        NPY_ARRAY_WRITEABLE_ = 0x0400,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_BOOL_	include/pybind11/numpy.h	/^        NPY_BOOL_ = 0,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_BYTE_	include/pybind11/numpy.h	/^        NPY_BYTE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_CDOUBLE_	include/pybind11/numpy.h	/^        NPY_CDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_CFLOAT_	include/pybind11/numpy.h	/^        NPY_CFLOAT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_CLONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_CLONGDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_DOUBLE_	include/pybind11/numpy.h	/^        NPY_DOUBLE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_FLOAT_	include/pybind11/numpy.h	/^        NPY_FLOAT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_INT16_	include/pybind11/numpy.h	/^        NPY_INT16_ = NPY_SHORT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_INT32_	include/pybind11/numpy.h	/^        NPY_INT32_$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_INT64_	include/pybind11/numpy.h	/^        NPY_INT64_$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_INT8_	include/pybind11/numpy.h	/^        NPY_INT8_ = NPY_BYTE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_INT_	include/pybind11/numpy.h	/^        NPY_INT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_LONGDOUBLE_	include/pybind11/numpy.h	/^        NPY_LONGDOUBLE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_LONGLONG_	include/pybind11/numpy.h	/^        NPY_LONGLONG_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_LONG_	include/pybind11/numpy.h	/^        NPY_LONG_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_OBJECT_	include/pybind11/numpy.h	/^        NPY_OBJECT_ = 17,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_SHORT_	include/pybind11/numpy.h	/^        NPY_SHORT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_STRING_	include/pybind11/numpy.h	/^        NPY_STRING_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UBYTE_	include/pybind11/numpy.h	/^        NPY_UBYTE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UINT16_	include/pybind11/numpy.h	/^        NPY_UINT16_ = NPY_USHORT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UINT32_	include/pybind11/numpy.h	/^        NPY_UINT32_ = platform_lookup<std::uint32_t, unsigned long, unsigned int, unsigned short/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UINT64_	include/pybind11/numpy.h	/^        NPY_UINT64_$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UINT8_	include/pybind11/numpy.h	/^        NPY_UINT8_ = NPY_UBYTE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UINT_	include/pybind11/numpy.h	/^        NPY_UINT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ULONGLONG_	include/pybind11/numpy.h	/^        NPY_ULONGLONG_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_ULONG_	include/pybind11/numpy.h	/^        NPY_ULONG_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_UNICODE_	include/pybind11/numpy.h	/^        NPY_UNICODE_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_USHORT_	include/pybind11/numpy.h	/^        NPY_USHORT_,$/;"	e	enum:npy_api::constants	access:public
npy_api::NPY_VOID_	include/pybind11/numpy.h	/^        NPY_VOID_,$/;"	e	enum:npy_api::constants	access:public
npy_api::PyArrayDescr_Check_	include/pybind11/numpy.h	/^    bool PyArrayDescr_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool	access:public	signature:(PyObject * obj) const
npy_api::PyArrayDescr_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArrayDescr_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
npy_api::PyArray_Check_	include/pybind11/numpy.h	/^    bool PyArray_Check_(PyObject *obj) const {$/;"	f	struct:npy_api	typeref:typename:bool	access:public	signature:(PyObject * obj) const
npy_api::PyArray_CopyInto_	include/pybind11/numpy.h	/^    int (*PyArray_CopyInto_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)	access:public
npy_api::PyArray_DescrConverter_	include/pybind11/numpy.h	/^    int (*PyArray_DescrConverter_)(PyObject *, PyObject **);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject **)	access:public
npy_api::PyArray_DescrFromScalar_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromScalar_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)	access:public
npy_api::PyArray_DescrFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)	access:public
npy_api::PyArray_DescrNewFromType_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_DescrNewFromType_)(int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(int)	access:public
npy_api::PyArray_Dims	include/pybind11/numpy.h	/^    struct PyArray_Dims {$/;"	s	struct:npy_api	access:public
npy_api::PyArray_Dims::len	include/pybind11/numpy.h	/^        int len;$/;"	m	struct:npy_api::PyArray_Dims	typeref:typename:int	access:public
npy_api::PyArray_Dims::ptr	include/pybind11/numpy.h	/^        Py_intptr_t *ptr;$/;"	m	struct:npy_api::PyArray_Dims	typeref:typename:Py_intptr_t *	access:public
npy_api::PyArray_EquivTypes_	include/pybind11/numpy.h	/^    bool (*PyArray_EquivTypes_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:bool (*)(PyObject *,PyObject *)	access:public
npy_api::PyArray_FromAny_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_FromAny_)(PyObject *, PyObject *, int, int, int, PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyObject *,int,int,int,PyObject *)	access:public
npy_api::PyArray_GetArrayParamsFromObject_	include/pybind11/numpy.h	/^    int (*PyArray_GetArrayParamsFromObject_)(PyObject *,$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *,unsigned char,PyObject **,int *,Py_intptr_t *,PyObject **,PyObject *)	access:public
npy_api::PyArray_GetNDArrayCFeatureVersion_	include/pybind11/numpy.h	/^    unsigned int (*PyArray_GetNDArrayCFeatureVersion_)();$/;"	m	struct:npy_api	typeref:typename:unsigned int (*)()	access:public
npy_api::PyArray_NewCopy_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewCopy_)(PyObject *, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,int)	access:public
npy_api::PyArray_NewFromDescr_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_NewFromDescr_)(PyTypeObject *,$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyTypeObject *,PyObject *,int,Py_intptr_t const *,Py_intptr_t const *,void *,int,PyObject *)	access:public
npy_api::PyArray_Newshape_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Newshape_)(PyObject *, PyArray_Dims *, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyArray_Dims *,int)	access:public
npy_api::PyArray_Resize_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Resize_)(PyObject *, PyArray_Dims *, int, int);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyArray_Dims *,int,int)	access:public
npy_api::PyArray_SetBaseObject_	include/pybind11/numpy.h	/^    int (*PyArray_SetBaseObject_)(PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:int (*)(PyObject *,PyObject *)	access:public
npy_api::PyArray_Squeeze_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_Squeeze_)(PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *)	access:public
npy_api::PyArray_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyArray_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
npy_api::PyArray_View_	include/pybind11/numpy.h	/^    PyObject *(*PyArray_View_)(PyObject *, PyObject *, PyObject *);$/;"	m	struct:npy_api	typeref:typename:PyObject * (*)(PyObject *,PyObject *,PyObject *)	access:public
npy_api::PyVoidArrType_Type_	include/pybind11/numpy.h	/^    PyTypeObject *PyVoidArrType_Type_;$/;"	m	struct:npy_api	typeref:typename:PyTypeObject *	access:public
npy_api::constants	include/pybind11/numpy.h	/^    enum constants {$/;"	g	struct:npy_api	access:public
npy_api::functions	include/pybind11/numpy.h	/^    enum functions {$/;"	g	struct:npy_api	access:private
npy_api::get	include/pybind11/numpy.h	/^    static npy_api &get() {$/;"	f	struct:npy_api	typeref:typename:npy_api &	access:public	signature:()
npy_api::lookup	include/pybind11/numpy.h	/^    static npy_api lookup() {$/;"	f	struct:npy_api	typeref:typename:npy_api	access:private	signature:()
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor {$/;"	s
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<$/;"	s	inherits:npy_format_descriptor_name<T>
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<T, enable_if_t<array_info<T>::is_array>> {$/;"	s
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<T, enable_if_t<is_same_ignoring_cvref<T, PyObject *>::value>> {$/;"	s
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<T, enable_if_t<std::is_enum<T>::value>> {$/;"	s
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<char[N]> {$/;"	s
npy_format_descriptor	include/pybind11/numpy.h	/^struct npy_format_descriptor<std::array<char, N>> {$/;"	s
npy_format_descriptor::base_descr	include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename array_info<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename array_info<T>::type>	access:private
npy_format_descriptor::base_descr	include/pybind11/numpy.h	/^    using base_descr = npy_format_descriptor<typename std::underlying_type<T>::type>;$/;"	t	struct:npy_format_descriptor	typeref:typename:npy_format_descriptor<typename std::underlying_type<T>::type>	access:private
npy_format_descriptor::direct_converter	include/pybind11/numpy.h	/^    static bool direct_converter(PyObject *obj, void *&value) {$/;"	f	struct:npy_format_descriptor	typeref:typename:bool	access:private	signature:(PyObject * obj,void * & value)
npy_format_descriptor::dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return base_descr::dtype(); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
npy_format_descriptor::dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return pybind11::dtype(\/*typenum*\/ value); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
npy_format_descriptor::dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() { return reinterpret_borrow<pybind11::dtype>(dtype_ptr()); }$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
npy_format_descriptor::dtype	include/pybind11/numpy.h	/^    static pybind11::dtype dtype() {$/;"	f	struct:npy_format_descriptor	typeref:typename:pybind11::dtype	access:public	signature:()
npy_format_descriptor::dtype_ptr	include/pybind11/numpy.h	/^    static PyObject *dtype_ptr() {$/;"	f	struct:npy_format_descriptor	typeref:typename:PyObject *	access:private	signature:()
npy_format_descriptor::format	include/pybind11/numpy.h	/^    static std::string format() {$/;"	f	struct:npy_format_descriptor	typeref:typename:std::string	access:public	signature:()
npy_format_descriptor::name	include/pybind11/numpy.h	/^    static constexpr auto name = base_descr::name;$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
npy_format_descriptor::name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name("object");$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
npy_format_descriptor::name	include/pybind11/numpy.h	/^    static constexpr auto name = make_caster<T>::name;$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
npy_format_descriptor::name	include/pybind11/numpy.h	/^    static constexpr auto name$/;"	m	struct:npy_format_descriptor	typeref:typename:auto	access:public
npy_format_descriptor::register_dtype	include/pybind11/numpy.h	/^    static void register_dtype(any_container<field_descriptor> fields) {$/;"	f	struct:npy_format_descriptor	typeref:typename:void	access:public	signature:(any_container<field_descriptor> fields)
npy_format_descriptor::value	include/pybind11/numpy.h	/^    static constexpr int value = npy_api::NPY_OBJECT_;$/;"	m	struct:npy_format_descriptor	typeref:typename:int	access:public
npy_format_descriptor::value	include/pybind11/numpy.h	/^    static constexpr int value = values[detail::is_fmt_numeric<T>::index];$/;"	m	struct:npy_format_descriptor	typeref:typename:int	access:public
npy_format_descriptor::values	include/pybind11/numpy.h	/^    constexpr static const int values[15] = {npy_api::NPY_BOOL_,$/;"	m	struct:npy_format_descriptor	typeref:typename:const int[15]	access:private
npy_format_descriptor_name	include/pybind11/numpy.h	/^struct npy_format_descriptor_name<T, enable_if_t<is_complex<T>::value>> {$/;"	s
npy_format_descriptor_name	include/pybind11/numpy.h	/^struct npy_format_descriptor_name<T, enable_if_t<std::is_floating_point<T>::value>> {$/;"	s
npy_format_descriptor_name	include/pybind11/numpy.h	/^struct npy_format_descriptor_name<T, enable_if_t<std::is_integral<T>::value>> {$/;"	s
npy_format_descriptor_name::name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name < std::is_same<T, float>::value$/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
npy_format_descriptor_name::name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name < std::is_same<typename T::value_type, float>::value$/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
npy_format_descriptor_name::name	include/pybind11/numpy.h	/^    static constexpr auto name = const_name<std::is_same<T, bool>::value>($/;"	m	struct:npy_format_descriptor_name	typeref:typename:auto	access:public
ns5a69c1c30101	docs/pybind11_vs_boost_python1.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" width/;"	n	uri:http://www.w3.org/2000/svg
ns5a7bda440101	docs/pybind11_vs_boost_python2.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" width/;"	n	uri:http://www.w3.org/2000/svg
num	include/pybind11/numpy.h	/^    int num() const {$/;"	f	class:dtype	typeref:typename:int	access:public	signature:() const
num	tests/test_pickling.cpp	/^    int num = 0;$/;"	m	struct:exercise_trampoline::SimpleBase	typeref:typename:int	file:	access:public
num_threads	tests/test_embed/test_interpreter.cpp	/^    constexpr auto num_threads = 10;$/;"	v	typeref:typename:auto
numpy	docs/advanced/pycpp/numpy.rst	/^.. _numpy:$/;"	T
numpy	tests/test_numpy_array.cpp	/^    py::dtype numpy{};$/;"	m	struct:DtypeCheck	typeref:typename:py::dtype	file:	access:public
numpy_internals	include/pybind11/numpy.h	/^struct numpy_internals {$/;"	s
numpy_internals::get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *	access:public	signature:(bool throw_if_missing=true)
numpy_internals::get_type_info	include/pybind11/numpy.h	/^    numpy_type_info *get_type_info(const std::type_info &tinfo, bool throw_if_missing = true) {$/;"	f	struct:numpy_internals	typeref:typename:numpy_type_info *	access:public	signature:(const std::type_info & tinfo,bool throw_if_missing=true)
numpy_internals::registered_dtypes	include/pybind11/numpy.h	/^    std::unordered_map<std::type_index, numpy_type_info> registered_dtypes;$/;"	m	struct:numpy_internals	typeref:typename:std::unordered_map<std::type_index,numpy_type_info>	access:public
numpy_type_info	include/pybind11/numpy.h	/^struct numpy_type_info {$/;"	s
numpy_type_info::dtype_ptr	include/pybind11/numpy.h	/^    PyObject *dtype_ptr;$/;"	m	struct:numpy_type_info	typeref:typename:PyObject *	access:public
numpy_type_info::format_str	include/pybind11/numpy.h	/^    std::string format_str;$/;"	m	struct:numpy_type_info	typeref:typename:std::string	access:public
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:accessor	typeref:typename:handle	access:private
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:dict_readonly	typeref:typename:handle	access:private
obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:sequence_slow_readwrite	typeref:typename:handle	access:private
obj_attr	include/pybind11/pytypes.h	/^struct obj_attr {$/;"	s
obj_attr::get	include/pybind11/pytypes.h	/^    static object get(handle obj, handle key) { return getattr(obj, key); }$/;"	f	struct:obj_attr	typeref:typename:object	access:public	signature:(handle obj,handle key)
obj_attr::key_type	include/pybind11/pytypes.h	/^    using key_type = object;$/;"	t	struct:obj_attr	typeref:typename:object	access:public
obj_attr::set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) { setattr(obj, key, val); }$/;"	f	struct:obj_attr	typeref:typename:void	access:public	signature:(handle obj,handle key,handle val)
obj_attr_accessor	include/pybind11/pytypes.h	/^using obj_attr_accessor = accessor<accessor_policies::obj_attr>;$/;"	t	typeref:typename:accessor<accessor_policies::obj_attr>
object	include/pybind11/pytypes.h	/^    object() = default;$/;"	p	class:object	access:public	signature:()
object	include/pybind11/pytypes.h	/^    object(const object &o) : handle(o) { inc_ref(); }$/;"	f	class:object	access:public	signature:(const object & o)
object	include/pybind11/pytypes.h	/^    object(handle h, bool is_borrowed) : handle(h) {$/;"	f	class:object	access:public	signature:(handle h,bool is_borrowed)
object	include/pybind11/pytypes.h	/^    object(handle h, borrowed_t) : handle(h) { inc_ref(); }$/;"	f	class:object	access:public	signature:(handle h,borrowed_t)
object	include/pybind11/pytypes.h	/^    object(handle h, stolen_t) : handle(h) {}$/;"	f	class:object	access:public	signature:(handle h,stolen_t)
object	include/pybind11/pytypes.h	/^    object(object &&other) noexcept : handle(other) { other.m_ptr = nullptr; }$/;"	f	class:object	access:public	signature:(object && other)
object	include/pybind11/pytypes.h	/^class object : public handle {$/;"	c	inherits:handle
object::PYBIND11_INPLACE_OP	include/pybind11/pytypes.h	/^    PYBIND11_INPLACE_OP(operator*=)$/;"	p	class:object	access:public	signature:(operator * =)
object::borrowed_t	include/pybind11/pytypes.h	/^    struct borrowed_t {};$/;"	s	class:object	access:protected
object::cast	include/pybind11/cast.h	/^T object::cast() && {$/;"	f	class:object	typeref:typename:T	signature:()
object::cast	include/pybind11/cast.h	/^T object::cast() const & {$/;"	f	class:object	typeref:typename:T	signature:() const
object::cast	include/pybind11/cast.h	/^inline void object::cast() && {$/;"	f	class:object	typeref:typename:void	signature:()
object::cast	include/pybind11/cast.h	/^inline void object::cast() const & {$/;"	f	class:object	typeref:typename:void	signature:() const
object::cast	include/pybind11/pytypes.h	/^    T cast() &&;$/;"	p	class:object	typeref:typename:T	access:public	signature:()
object::object	include/pybind11/pytypes.h	/^    object() = default;$/;"	p	class:object	access:public	signature:()
object::object	include/pybind11/pytypes.h	/^    object(const object &o) : handle(o) { inc_ref(); }$/;"	f	class:object	access:public	signature:(const object & o)
object::object	include/pybind11/pytypes.h	/^    object(handle h, bool is_borrowed) : handle(h) {$/;"	f	class:object	access:public	signature:(handle h,bool is_borrowed)
object::object	include/pybind11/pytypes.h	/^    object(handle h, borrowed_t) : handle(h) { inc_ref(); }$/;"	f	class:object	access:public	signature:(handle h,borrowed_t)
object::object	include/pybind11/pytypes.h	/^    object(handle h, stolen_t) : handle(h) {}$/;"	f	class:object	access:public	signature:(handle h,stolen_t)
object::object	include/pybind11/pytypes.h	/^    object(object &&other) noexcept : handle(other) { other.m_ptr = nullptr; }$/;"	f	class:object	access:public	signature:(object && other)
object::operator =	include/pybind11/pytypes.h	/^    object &operator=(const object &other) {$/;"	f	class:object	typeref:typename:object &	access:public	signature:(const object & other)
object::operator =	include/pybind11/pytypes.h	/^    object &operator=(object &&other) noexcept {$/;"	f	class:object	typeref:typename:object &	access:public	signature:(object && other)
object::release	include/pybind11/pytypes.h	/^    handle release() {$/;"	f	class:object	typeref:typename:handle	access:public	signature:()
object::stolen_t	include/pybind11/pytypes.h	/^    struct stolen_t {};$/;"	s	class:object	access:protected
object::~object	include/pybind11/pytypes.h	/^    ~object() { dec_ref(); }$/;"	f	class:object	access:public	signature:()
object_api	include/pybind11/pytypes.h	/^class object_api : public pyobject_tag {$/;"	c	inherits:pyobject_tag
object_api::attr	include/pybind11/pytypes.h	/^    obj_attr_accessor attr(handle key) const;$/;"	p	class:object_api	typeref:typename:obj_attr_accessor	access:public	signature:(handle key) const
object_api::attr	include/pybind11/pytypes.h	/^    obj_attr_accessor attr(object &&key) const;$/;"	p	class:object_api	typeref:typename:obj_attr_accessor	access:public	signature:(object && key) const
object_api::attr	include/pybind11/pytypes.h	/^    str_attr_accessor attr(const char *key) const;$/;"	p	class:object_api	typeref:typename:str_attr_accessor	access:public	signature:(const char * key) const
object_api::attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(handle key) const {$/;"	f	class:object_api	typeref:typename:obj_attr_accessor	signature:(handle key) const
object_api::attr	include/pybind11/pytypes.h	/^obj_attr_accessor object_api<D>::attr(object &&key) const {$/;"	f	class:object_api	typeref:typename:obj_attr_accessor	signature:(object && key) const
object_api::attr	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::attr(const char *key) const {$/;"	f	class:object_api	typeref:typename:str_attr_accessor	signature:(const char * key) const
object_api::begin	include/pybind11/pytypes.h	/^    iterator begin() const;$/;"	p	class:object_api	typeref:typename:iterator	access:public	signature:() const
object_api::call	include/pybind11/cast.h	/^object object_api<Derived>::call(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object	signature:(Args &&...args) const
object_api::call	include/pybind11/pytypes.h	/^    object call(Args &&...args) const;$/;"	p	class:object_api	access:public	signature:(Args &&...args) const
object_api::contains	include/pybind11/pytypes.h	/^    bool contains(T &&item) const;$/;"	p	class:object_api	typeref:typename:bool	access:public	signature:(T && item) const
object_api::contains	include/pybind11/pytypes.h	/^bool object_api<D>::contains(T &&item) const {$/;"	f	class:object_api	typeref:typename:bool	signature:(T && item) const
object_api::derived	include/pybind11/pytypes.h	/^    const Derived &derived() const { return static_cast<const Derived &>(*this); }$/;"	f	class:object_api	typeref:typename:const Derived &	access:private	signature:() const
object_api::doc	include/pybind11/pytypes.h	/^    str_attr_accessor doc() const;$/;"	p	class:object_api	typeref:typename:str_attr_accessor	access:public	signature:() const
object_api::doc	include/pybind11/pytypes.h	/^str_attr_accessor object_api<D>::doc() const {$/;"	f	class:object_api	typeref:typename:str_attr_accessor	signature:() const
object_api::end	include/pybind11/pytypes.h	/^    iterator end() const;$/;"	p	class:object_api	typeref:typename:iterator	access:public	signature:() const
object_api::end	include/pybind11/pytypes.h	/^iterator object_api<D>::end() const {$/;"	f	class:object_api	typeref:typename:iterator	signature:() const
object_api::equal	include/pybind11/pytypes.h	/^    bool equal(object_api const &other) const { return rich_compare(other, Py_EQ); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::get_type	include/pybind11/pytypes.h	/^    handle get_type() const;$/;"	p	class:object_api	typeref:typename:handle	access:public	signature:() const
object_api::get_type	include/pybind11/pytypes.h	/^handle object_api<D>::get_type() const {$/;"	f	class:object_api	typeref:typename:handle	signature:() const
object_api::is	include/pybind11/pytypes.h	/^    bool is(object_api const &other) const { return derived().ptr() == other.derived().ptr(); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::is_none	include/pybind11/pytypes.h	/^    bool is_none() const { return derived().ptr() == Py_None; }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:() const
object_api::not_equal	include/pybind11/pytypes.h	/^    bool not_equal(object_api const &other) const { return rich_compare(other, Py_NE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::operator &	include/pybind11/pytypes.h	/^    object operator&(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator &=	include/pybind11/pytypes.h	/^    object operator&=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator ()	include/pybind11/cast.h	/^object object_api<Derived>::operator()(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object	signature:(Args &&...args) const
object_api::operator ()	include/pybind11/pytypes.h	/^    object operator()(Args &&...args) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(Args &&...args) const
object_api::operator *	include/pybind11/pytypes.h	/^    args_proxy operator*() const;$/;"	p	class:object_api	typeref:typename:args_proxy	access:public	signature:() const
object_api::operator *	include/pybind11/pytypes.h	/^    object operator*(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator *	include/pybind11/pytypes.h	/^args_proxy object_api<D>::operator*() const {$/;"	f	class:object_api	typeref:typename:args_proxy	signature:() const
object_api::operator *=	include/pybind11/pytypes.h	/^    object operator*=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator +	include/pybind11/pytypes.h	/^    object operator+(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator +=	include/pybind11/pytypes.h	/^    object operator+=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator -	include/pybind11/pytypes.h	/^    object operator-() const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:() const
object_api::operator -	include/pybind11/pytypes.h	/^    object operator-(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator -=	include/pybind11/pytypes.h	/^    object operator-=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator /	include/pybind11/pytypes.h	/^    object operator\/(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator /=	include/pybind11/pytypes.h	/^    object operator\/=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator <	include/pybind11/pytypes.h	/^    bool operator<(object_api const &other) const { return rich_compare(other, Py_LT); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::operator <<	include/pybind11/pytypes.h	/^    object operator<<(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator <<=	include/pybind11/pytypes.h	/^    object operator<<=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator <=	include/pybind11/pytypes.h	/^    bool operator<=(object_api const &other) const { return rich_compare(other, Py_LE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::operator >	include/pybind11/pytypes.h	/^    bool operator>(object_api const &other) const { return rich_compare(other, Py_GT); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::operator >=	include/pybind11/pytypes.h	/^    bool operator>=(object_api const &other) const { return rich_compare(other, Py_GE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
object_api::operator >>	include/pybind11/pytypes.h	/^    object operator>>(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator >>=	include/pybind11/pytypes.h	/^    object operator>>=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](const char *key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(const char * key) const
object_api::operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](handle key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(handle key) const
object_api::operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](object &&key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(object && key) const
object_api::operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](const char *key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(const char * key) const
object_api::operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](handle key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(handle key) const
object_api::operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](object &&key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(object && key) const
object_api::operator ^	include/pybind11/pytypes.h	/^    object operator^(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator ^=	include/pybind11/pytypes.h	/^    object operator^=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator |	include/pybind11/pytypes.h	/^    object operator|(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
object_api::operator |=	include/pybind11/pytypes.h	/^    object operator|=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
object_api::operator ~	include/pybind11/pytypes.h	/^    object operator~() const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:() const
object_api::ref_count	include/pybind11/pytypes.h	/^    int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }$/;"	f	class:object_api	typeref:typename:int	access:public	signature:() const
object_api::rich_compare	include/pybind11/pytypes.h	/^    bool rich_compare(object_api const &other, int value) const;$/;"	p	class:object_api	typeref:typename:bool	access:private	signature:(object_api const & other,int value) const
object_api::rich_compare	include/pybind11/pytypes.h	/^bool object_api<D>::rich_compare(object_api const &other, int value) const {$/;"	f	class:object_api	typeref:typename:bool	signature:(object_api const & other,int value) const
object_api::str	include/pybind11/pytypes.h	/^    pybind11::str str() const;$/;"	p	class:object_api	access:public	signature:() const
object_api::str	include/pybind11/pytypes.h	/^pybind11::str object_api<D>::str() const {$/;"	f	class:object_api	typeref:typename:pybind11::str	signature:() const
object_or_cast	include/pybind11/pytypes.h	/^auto object_or_cast(T &&o) -> decltype(std::forward<T>(o)) {$/;"	f	typeref:typename:decltype(std::forward<T> (o))	signature:(T && o)
object_or_cast	include/pybind11/pytypes.h	/^inline handle object_or_cast(PyObject *ptr) { return ptr; }$/;"	f	typeref:typename:handle	signature:(PyObject * ptr)
object_or_cast	include/pybind11/pytypes.h	/^object object_or_cast(T &&o);$/;"	p	typeref:typename:object	signature:(T && o)
obval	include/pybind11/numpy.h	/^    PyObject_VAR_HEAD char *obval;$/;"	m	struct:PyVoidScalarObject_Proxy	typeref:typename:PyObject_VAR_HEAD char *	access:public
of	include/pybind11/numpy.h	/^    static dtype of() {$/;"	f	class:dtype	typeref:typename:dtype	access:public	signature:()
of	include/pybind11/pytypes.h	/^    static type of() {$/;"	f	class:type	typeref:typename:type	access:public	signature:()
of	include/pybind11/pytypes.h	/^    static type of(handle h) { return type(type::handle_of(h), borrowed_t{}); }$/;"	f	class:type	typeref:typename:type	access:public	signature:(handle h)
offset	include/pybind11/numpy.h	/^            pybind11::int_ offset;$/;"	m	struct:dtype::strip_padding::field_descr	typeref:typename:pybind11::int_	access:public
offset	include/pybind11/numpy.h	/^    ssize_t offset;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t	access:public
offset_at	include/pybind11/numpy.h	/^    ssize_t offset_at() const { return 0; }$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
offset_at	include/pybind11/numpy.h	/^    ssize_t offset_at(Ix... index) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(Ix...index) const
offset_at	tests/test_numpy_array.cpp	/^py::ssize_t offset_at(const arr &a, Ix... idx) {$/;"	f	typeref:typename:py::ssize_t	signature:(const arr & a,Ix...idx)
offset_at_t	tests/test_numpy_array.cpp	/^py::ssize_t offset_at_t(const arr_t &a, Ix... idx) {$/;"	f	typeref:typename:py::ssize_t	signature:(const arr_t & a,Ix...idx)
old	include/pybind11/iostream.h	/^    std::streambuf *old;$/;"	m	class:scoped_ostream_redirect	typeref:typename:std::streambuf *	access:protected
oldsize	tools/libsize.py	/^        oldsize = int(sf.readline())$/;"	v	access:public
oneValueArgs	tools/pybind11Common.cmake	/^    set(oneValueArgs "VERSION")$/;"	v	function:pybind11_find_import
one_char	include/pybind11/cast.h	/^    CharT one_char = 0;$/;"	m	struct:type_caster	typeref:typename:CharT	access:public
one_to_n	tests/test_stl_binders.cpp	/^Container *one_to_n(int n) {$/;"	f	typeref:typename:Container *	signature:(int n)
op	include/pybind11/operators.h	/^        using op = op_impl<id, ot, Base, L_type, R_type>;$/;"	t	function:op_::execute	typeref:typename:op_impl<id,ot,Base,L_type,R_type>
op	include/pybind11/operators.h	/^        using op = op_impl<id, ot, Base, L_type, R_type>;$/;"	t	function:op_::execute_cast	typeref:typename:op_impl<id,ot,Base,L_type,R_type>
op_	include/pybind11/operators.h	/^struct op_ {$/;"	s
op_::execute	include/pybind11/operators.h	/^    void execute(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra) const
op_::execute_cast	include/pybind11/operators.h	/^    void execute_cast(Class &cl, const Extra &...extra) const {$/;"	f	struct:op_	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra) const
op_::op_enable_if_hook	include/pybind11/operators.h	/^    static constexpr bool op_enable_if_hook = true;$/;"	m	struct:op_	typeref:typename:bool	access:public
op_abs	include/pybind11/operators.h	/^    op_abs,$/;"	e	enum:op_id	access:public
op_add	include/pybind11/operators.h	/^    op_add,$/;"	e	enum:op_id	access:public
op_and	include/pybind11/operators.h	/^    op_and,$/;"	e	enum:op_id	access:public
op_bool	include/pybind11/operators.h	/^    op_bool,$/;"	e	enum:op_id	access:public
op_cmp	include/pybind11/operators.h	/^    op_cmp,$/;"	e	enum:op_id	access:public
op_complex	include/pybind11/operators.h	/^    op_complex,$/;"	e	enum:op_id	access:public
op_div	include/pybind11/operators.h	/^    op_div,$/;"	e	enum:op_id	access:public
op_divmod	include/pybind11/operators.h	/^    op_divmod,$/;"	e	enum:op_id	access:public
op_enable_if_hook	include/pybind11/operators.h	/^    static constexpr bool op_enable_if_hook = true;$/;"	m	struct:op_	typeref:typename:bool	access:public
op_eq	include/pybind11/operators.h	/^    op_eq,$/;"	e	enum:op_id	access:public
op_float	include/pybind11/operators.h	/^    op_float,$/;"	e	enum:op_id	access:public
op_ge	include/pybind11/operators.h	/^    op_ge,$/;"	e	enum:op_id	access:public
op_gt	include/pybind11/operators.h	/^    op_gt,$/;"	e	enum:op_id	access:public
op_hash	include/pybind11/operators.h	/^    op_hash$/;"	e	enum:op_id	access:public
op_iadd	include/pybind11/operators.h	/^    op_iadd,$/;"	e	enum:op_id	access:public
op_iand	include/pybind11/operators.h	/^    op_iand,$/;"	e	enum:op_id	access:public
op_id	include/pybind11/operators.h	/^enum op_id : int {$/;"	g	typeref:typename:int
op_idiv	include/pybind11/operators.h	/^    op_idiv,$/;"	e	enum:op_id	access:public
op_ilshift	include/pybind11/operators.h	/^    op_ilshift,$/;"	e	enum:op_id	access:public
op_imod	include/pybind11/operators.h	/^    op_imod,$/;"	e	enum:op_id	access:public
op_impl	include/pybind11/operators.h	/^struct op_impl {};$/;"	s
op_imul	include/pybind11/operators.h	/^    op_imul,$/;"	e	enum:op_id	access:public
op_int	include/pybind11/operators.h	/^    op_int,$/;"	e	enum:op_id	access:public
op_invert	include/pybind11/operators.h	/^    op_invert,$/;"	e	enum:op_id	access:public
op_ior	include/pybind11/operators.h	/^    op_ior,$/;"	e	enum:op_id	access:public
op_irshift	include/pybind11/operators.h	/^    op_irshift,$/;"	e	enum:op_id	access:public
op_isub	include/pybind11/operators.h	/^    op_isub,$/;"	e	enum:op_id	access:public
op_itruediv	include/pybind11/operators.h	/^    op_itruediv,$/;"	e	enum:op_id	access:public
op_ixor	include/pybind11/operators.h	/^    op_ixor,$/;"	e	enum:op_id	access:public
op_l	include/pybind11/operators.h	/^    op_l, \/* base type on left *\/$/;"	e	enum:op_type	access:public
op_le	include/pybind11/operators.h	/^    op_le,$/;"	e	enum:op_id	access:public
op_long	include/pybind11/operators.h	/^    op_long,$/;"	e	enum:op_id	access:public
op_lshift	include/pybind11/operators.h	/^    op_lshift,$/;"	e	enum:op_id	access:public
op_lt	include/pybind11/operators.h	/^    op_lt,$/;"	e	enum:op_id	access:public
op_mod	include/pybind11/operators.h	/^    op_mod,$/;"	e	enum:op_id	access:public
op_mul	include/pybind11/operators.h	/^    op_mul,$/;"	e	enum:op_id	access:public
op_ne	include/pybind11/operators.h	/^    op_ne,$/;"	e	enum:op_id	access:public
op_neg	include/pybind11/operators.h	/^    op_neg,$/;"	e	enum:op_id	access:public
op_nonzero	include/pybind11/operators.h	/^    op_nonzero,$/;"	e	enum:op_id	access:public
op_or	include/pybind11/operators.h	/^    op_or,$/;"	e	enum:op_id	access:public
op_pos	include/pybind11/operators.h	/^    op_pos,$/;"	e	enum:op_id	access:public
op_pow	include/pybind11/operators.h	/^    op_pow,$/;"	e	enum:op_id	access:public
op_r	include/pybind11/operators.h	/^    op_r, \/* base type on right *\/$/;"	e	enum:op_type	access:public
op_repr	include/pybind11/operators.h	/^    op_repr,$/;"	e	enum:op_id	access:public
op_rshift	include/pybind11/operators.h	/^    op_rshift,$/;"	e	enum:op_id	access:public
op_str	include/pybind11/operators.h	/^    op_str,$/;"	e	enum:op_id	access:public
op_sub	include/pybind11/operators.h	/^    op_sub,$/;"	e	enum:op_id	access:public
op_truediv	include/pybind11/operators.h	/^    op_truediv,$/;"	e	enum:op_id	access:public
op_type	include/pybind11/operators.h	/^enum op_type : int {$/;"	g	typeref:typename:int
op_u	include/pybind11/operators.h	/^    op_u  \/* unary operator *\/$/;"	e	enum:op_type	access:public
op_xor	include/pybind11/operators.h	/^    op_xor,$/;"	e	enum:op_id	access:public
opaque	docs/advanced/cast/stl.rst	/^.. _opaque:$/;"	T	chapter:C++17 library containers
open	tests/test_embed/test_interpreter.cpp	/^    test_module.open(module_file);$/;"	p	typeref:typename:test_module.	file:	signature:(module_file)
operator !=	include/pybind11/detail/type_caster_base.h	/^        bool operator!=(const iterator &other) const { return curr.index != other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool	access:public	signature:(const iterator & other) const
operator !=	include/pybind11/pytypes.h	/^    bool operator!=(const handle &h) const { return m_ptr != h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use !obj1.is(obj2) instead")bool	access:public	signature:(const handle & h) const
operator !=	include/pybind11/pytypes.h	/^    friend bool operator!=(const It &a, const It &b) { return !(a == b); }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator !=	include/pybind11/pytypes.h	/^    friend bool operator!=(const iterator &a, const iterator &b) { return a->ptr() != b->ptr(); /;"	f	typeref:typename:bool	signature:(const iterator & a,const iterator & b)
operator !=	tests/object.h	/^    bool operator!=(const T *ptr) const { return m_ptr != ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const T * ptr) const
operator !=	tests/object.h	/^    bool operator!=(const ref &r) const { return m_ptr != r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const ref & r) const
operator !=	tests/test_operator_overloading.cpp	/^    bool operator!=(const Vector2 &v) const { return x != v.x || y != v.y; }$/;"	f	class:Vector2	typeref:typename:bool	file:	access:public	signature:(const Vector2 & v) const
operator !=	tests/test_sequences_and_iterators.cpp	/^        bool operator!=(const Sequence &s) const { return !operator==(s); }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(const Sequence & s) const
operator ""_a	include/pybind11/cast.h	/^constexpr arg operator"" _a(const char *name, size_t) { return arg(name); }$/;"	f	namespace:literals	typeref:typename:arg	signature:(const char * name,size_t)
operator ""_s	include/pybind11/pytypes.h	/^inline str operator"" _s(const char *s, size_t size) { return {s, size}; }$/;"	f	namespace:literals	typeref:typename:str	signature:(const char * s,size_t size)
operator &	include/pybind11/pytypes.h	/^    object operator&(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	typeref:typename:T **	file:	access:public	signature:()
operator &	tests/test_smart_ptr.cpp	/^    T **operator&() { throw std::logic_error("Call of overloaded operator& is not expected"); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T **	file:	access:public	signature:()
operator &=	include/pybind11/pytypes.h	/^    object operator&=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator ()	include/pybind11/cast.h	/^object object_api<Derived>::operator()(Args &&...args) const {$/;"	f	class:object_api	typeref:typename:object	signature:(Args &&...args) const
operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (*pf)(Args...)) const noexcept -> decltype(pf) {$/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (* pf)(Args...)) const
operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...) const, std::true_type) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (Class::* pmf)(Args...)const,std::true_type) const
operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...), std::false_type = {}) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (Class::* pmf)(Args...),std::false_type={}) const
operator ()	include/pybind11/detail/common.h	/^    void operator()(T *) {}$/;"	f	struct:nodelete	typeref:typename:void	access:public	signature:(T *)
operator ()	include/pybind11/detail/internals.h	/^    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {$/;"	f	struct:type_equal_to	typeref:typename:bool	access:public	signature:(const std::type_index & lhs,const std::type_index & rhs) const
operator ()	include/pybind11/detail/internals.h	/^    inline size_t operator()(const std::pair<const PyObject *, const char *> &v) const {$/;"	f	struct:override_hash	typeref:typename:size_t	access:public	signature:(const std::pair<const PyObject *,const char * > & v) const
operator ()	include/pybind11/detail/internals.h	/^    size_t operator()(const std::type_index &t) const {$/;"	f	struct:type_hash	typeref:typename:size_t	access:public	signature:(const std::type_index & t) const
operator ()	include/pybind11/embed.h	/^    void operator()(wchar_t *ptr) const {$/;"	f	struct:wide_char_arg_deleter	typeref:typename:void	access:public	signature:(wchar_t * ptr) const
operator ()	include/pybind11/functional.h	/^            Return operator()(Args... args) const {$/;"	f	struct:type_caster::load::func_wrapper	typeref:typename:Return	access:public	signature:(Args...args) const
operator ()	include/pybind11/numpy.h	/^    T &operator()(Ix... index) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T &	access:public	signature:(Ix...index)
operator ()	include/pybind11/numpy.h	/^    const T &operator()(Ix... index) const {$/;"	f	class:unchecked_reference	typeref:typename:const T &	access:public	signature:(Ix...index) const
operator ()	include/pybind11/numpy.h	/^    object operator()(typename vectorize_arg<Args>::type... args) {$/;"	f	struct:vectorize_helper	typeref:typename:object	access:public	signature:(typename vectorize_arg<Args>::type...args)
operator ()	include/pybind11/pybind11.h	/^        char *operator()(const char *s) {$/;"	f	class:cpp_function::strdup_guard	typeref:typename:char *	access:public	signature:(const char * s)
operator ()	include/pybind11/pybind11.h	/^        void operator()(detail::function_record *rec) { destruct(rec, false); }$/;"	f	struct:cpp_function::InitializingFunctionRecordDeleter	typeref:typename:void	access:public	signature:(detail::function_record * rec)
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).first; }$/;"	f	class:iterator_key_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return (*it).second; }$/;"	f	class:iterator_value_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
operator ()	include/pybind11/pybind11.h	/^    result_type operator()(Iterator &it) const { return *it; }$/;"	f	struct:iterator_access	typeref:typename:result_type	access:public	signature:(Iterator & it) const
operator ()	include/pybind11/pybind11.h	/^    void operator()(const char *message) { PyErr_SetString(m_ptr, message); }$/;"	f	class:exception	typeref:typename:void	access:public	signature:(const char * message)
operator ()	include/pybind11/pytypes.h	/^    object operator()(Args &&...args) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(Args &&...args) const
operator ()	include/pybind11/stl.h	/^    result_type operator()(T &&src) const {$/;"	f	struct:variant_caster_visitor	typeref:typename:result_type	access:public	signature:(T && src) const
operator ()	tests/test_buffers.cpp	/^        float &operator()(py::ssize_t i, py::ssize_t j) {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float &	file:	access:public	signature:(py::ssize_t i,py::ssize_t j)
operator ()	tests/test_buffers.cpp	/^        float operator()(py::ssize_t i, py::ssize_t j) const {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:float	file:	access:public	signature:(py::ssize_t i,py::ssize_t j) const
operator ()	tests/test_callbacks.cpp	/^        void operator()() {}$/;"	f	class:TEST_SUBMODULE::CppCallable	typeref:typename:void	file:	access:public	signature:()
operator ()	tests/test_operator_overloading.cpp	/^    size_t operator()(const Vector2 &) { return 4; }$/;"	f	struct:std::hash	typeref:typename:size_t	file:	access:public	signature:(const Vector2 &)
operator ()	tests/test_operator_overloading.cpp	/^    std::size_t operator()(const HashMe &selector) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t	file:	access:public	signature:(const HashMe & selector) const
operator ()	tests/test_stl.cpp	/^        result_type operator()(const std::string &) { return "std::string"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(const std::string &)
operator ()	tests/test_stl.cpp	/^        result_type operator()(double) { return "double"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(double)
operator ()	tests/test_stl.cpp	/^        result_type operator()(int) { return "int"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(int)
operator ()	tests/test_stl.cpp	/^        result_type operator()(std::monostate) { return "std::monostate"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(std::monostate)
operator ()	tests/test_stl.cpp	/^        result_type operator()(std::nullptr_t) { return "std::nullptr_t"; }$/;"	f	struct:TEST_SUBMODULE::visitor	typeref:typename:result_type	file:	access:public	signature:(std::nullptr_t)
operator ()	tests/test_stl.cpp	/^    size_t operator()(const TplCtorClass &) const { return 0; }$/;"	f	struct:std::hash	typeref:typename:size_t	file:	access:public	signature:(const TplCtorClass &) const
operator ()	tests/test_virtual_functions.cpp	/^    operator()(const Data &first, const Data &second, const DataVisitor &visitor) const override/;"	f	struct:Adder	typeref:typename:void	file:	access:public	signature:(const Data & first,const Data & second,const DataVisitor & visitor) const
operator ()	tests/test_virtual_functions.cpp	/^    operator()(const Data &first, const Data &second, const DataVisitor &visitor) const$/;"	p	struct:AdderBase	typeref:typename:void	file:	access:public	signature:(const Data & first,const Data & second,const DataVisitor & visitor) const
operator *	include/pybind11/detail/common.h	/^    const std::vector<T> &operator*() const { return v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> &	access:public	signature:() const
operator *	include/pybind11/detail/common.h	/^    std::vector<T> &operator*() { return v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> &	access:public	signature:()
operator *	include/pybind11/detail/type_caster_base.h	/^        value_and_holder &operator*() { return curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder &	access:public	signature:()
operator *	include/pybind11/pytypes.h	/^    args_proxy operator*() const;$/;"	p	class:object_api	typeref:typename:args_proxy	access:public	signature:() const
operator *	include/pybind11/pytypes.h	/^    kwargs_proxy operator*() const { return kwargs_proxy(*this); }$/;"	f	class:args_proxy	typeref:typename:kwargs_proxy	access:public	signature:() const
operator *	include/pybind11/pytypes.h	/^    object operator*(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator *	include/pybind11/pytypes.h	/^    reference operator*() const { return Policy::dereference(); }$/;"	f	class:generic_iterator	typeref:typename:reference	access:public	signature:() const
operator *	include/pybind11/pytypes.h	/^    reference operator*() const {$/;"	f	class:iterator	typeref:typename:reference	access:public	signature:() const
operator *	include/pybind11/pytypes.h	/^args_proxy object_api<D>::operator*() const {$/;"	f	class:object_api	typeref:typename:args_proxy	signature:() const
operator *	tests/object.h	/^    T &operator*() { return *m_ptr; }$/;"	f	class:ref	typeref:typename:T &	access:public	signature:()
operator *	tests/object.h	/^    const T &operator*() const { return *m_ptr; }$/;"	f	class:ref	typeref:typename:const T &	access:public	signature:() const
operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(const Vector2 &v) const { return Vector2(x * v.x, y * v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
operator *	tests/test_operator_overloading.cpp	/^    Vector2 operator*(float value) const { return Vector2(x * value, y * value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
operator *	tests/test_operator_overloading.cpp	/^    friend Vector2 operator*(float f, const Vector2 &v) { return Vector2(f * v.x, f * v.y); }$/;"	f	typeref:typename:Vector2	file:	signature:(float f,const Vector2 & v)
operator *	tests/test_sequences_and_iterators.cpp	/^    T operator*() const { return T(*ptr_); }$/;"	f	class:NonRefIterator	typeref:typename:T	file:	access:public	signature:() const
operator *	tests/test_sequences_and_iterators.cpp	/^    const T &operator*() const { return *ptr_; }$/;"	f	class:NonZeroIterator	typeref:typename:const T &	file:	access:public	signature:() const
operator *	tests/test_stl.cpp	/^    const T &operator*() const noexcept { return value(); }$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T &	file:	access:public	signature:() const
operator *=	include/pybind11/pytypes.h	/^    object operator*=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator *=	tests/test_operator_overloading.cpp	/^        NestC &operator*=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestC	typeref:typename:NestC &	file:	access:public	signature:(int i)
operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
operator *=	tests/test_operator_overloading.cpp	/^    Vector2 &operator*=(float v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(float v)
operator +	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> operator+(const descr<N1, Ts1...> &a,$/;"	f	typeref:typename:descr<N1+N2,Ts1...,Ts2...>	signature:(const descr<N1,Ts1...> & a,const descr<N2,Ts2...> & b)
operator +	include/pybind11/pytypes.h	/^    friend It operator+(const It &a, difference_type n) {$/;"	f	typeref:typename:It	signature:(const It & a,difference_type n)
operator +	include/pybind11/pytypes.h	/^    friend It operator+(difference_type n, const It &b) { return b + n; }$/;"	f	typeref:typename:It	signature:(difference_type n,const It & b)
operator +	include/pybind11/pytypes.h	/^    object operator+(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(const Vector2 &v) const { return Vector2(x + v.x, y + v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
operator +	tests/test_operator_overloading.cpp	/^    Vector2 operator+(float value) const { return Vector2(x + value, y + value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
operator +	tests/test_operator_overloading.cpp	/^    friend Vector2 operator+(float f, const Vector2 &v) { return Vector2(f + v.x, f + v.y); }$/;"	f	typeref:typename:Vector2	file:	signature:(float f,const Vector2 & v)
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C1 &) { return 11; }$/;"	f	typeref:typename:int	signature:(const C1 &,const C1 &)
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C1 &, const C2 &) { return 12; }$/;"	f	typeref:typename:int	signature:(const C1 &,const C2 &)
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C1 &) { return 21; }$/;"	f	typeref:typename:int	signature:(const C2 &,const C1 &)
operator +	tests/test_operator_overloading.cpp	/^int operator+(const C2 &, const C2 &) { return 22; }$/;"	f	typeref:typename:int	signature:(const C2 &,const C2 &)
operator ++	include/pybind11/detail/type_caster_base.h	/^        iterator &operator++() {$/;"	f	struct:values_and_holders::iterator	typeref:typename:iterator &	access:public	signature:()
operator ++	include/pybind11/numpy.h	/^    multi_array_iterator &operator++() {$/;"	f	class:multi_array_iterator	typeref:typename:multi_array_iterator &	access:public	signature:()
operator ++	include/pybind11/pytypes.h	/^    It &operator++() {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:()
operator ++	include/pybind11/pytypes.h	/^    It operator++(int) {$/;"	f	class:generic_iterator	typeref:typename:It	access:public	signature:(int)
operator ++	include/pybind11/pytypes.h	/^    iterator operator++(int) {$/;"	f	class:iterator	typeref:typename:iterator	access:public	signature:(int)
operator ++	tests/test_sequences_and_iterators.cpp	/^    NonRefIterator &operator++() {$/;"	f	class:NonRefIterator	typeref:typename:NonRefIterator &	file:	access:public	signature:()
operator ++	tests/test_sequences_and_iterators.cpp	/^    NonZeroIterator &operator++() {$/;"	f	class:NonZeroIterator	typeref:typename:NonZeroIterator &	file:	access:public	signature:()
operator +=	include/pybind11/pytypes.h	/^    It &operator+=(difference_type n) {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:(difference_type n)
operator +=	include/pybind11/pytypes.h	/^    object operator+=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator +=	tests/test_operator_overloading.cpp	/^        NestA &operator+=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestA	typeref:typename:NestA &	file:	access:public	signature:(int i)
operator +=	tests/test_operator_overloading.cpp	/^    Vector2 &operator+=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
operator ,	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2 + 2, Ts1..., Ts2...> operator,(const descr<N1, Ts1...> &a,$/;"	f	typeref:typename:descr<N1+N2+2,Ts1...,Ts2...>	signature:(const descr<N1,Ts1...> & a,const descr<N2,Ts2...> & b)
operator -	include/pybind11/pytypes.h	/^    friend It operator-(const It &a, difference_type n) {$/;"	f	typeref:typename:It	signature:(const It & a,difference_type n)
operator -	include/pybind11/pytypes.h	/^    friend difference_type operator-(const It &a, const It &b) { return a.distance_to(b); }$/;"	f	typeref:typename:difference_type	signature:(const It & a,const It & b)
operator -	include/pybind11/pytypes.h	/^    object operator-() const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:() const
operator -	include/pybind11/pytypes.h	/^    object operator-(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-() const { return Vector2(-x, -y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:() const
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(const Vector2 &v) const { return Vector2(x - v.x, y - v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
operator -	tests/test_operator_overloading.cpp	/^    Vector2 operator-(float value) const { return Vector2(x - value, y - value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
operator -	tests/test_operator_overloading.cpp	/^    friend Vector2 operator-(float f, const Vector2 &v) { return Vector2(f - v.x, f - v.y); }$/;"	f	typeref:typename:Vector2	file:	signature:(float f,const Vector2 & v)
operator --	include/pybind11/pytypes.h	/^    It &operator--() {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:()
operator --	include/pybind11/pytypes.h	/^    It operator--(int) {$/;"	f	class:generic_iterator	typeref:typename:It	access:public	signature:(int)
operator -=	include/pybind11/pytypes.h	/^    It &operator-=(difference_type n) {$/;"	f	class:generic_iterator	typeref:typename:It &	access:public	signature:(difference_type n)
operator -=	include/pybind11/pytypes.h	/^    object operator-=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator -=	tests/test_operator_overloading.cpp	/^        NestB &operator-=(int i) {$/;"	f	struct:TEST_SUBMODULE::NestB	typeref:typename:NestB &	file:	access:public	signature:(int i)
operator -=	tests/test_operator_overloading.cpp	/^    Vector2 &operator-=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
operator ->	include/pybind11/detail/common.h	/^    const std::vector<T> *operator->() const { return &v; }$/;"	f	class:any_container	typeref:typename:const std::vector<T> *	access:public	signature:() const
operator ->	include/pybind11/detail/common.h	/^    std::vector<T> *operator->() { return &v; }$/;"	f	class:any_container	typeref:typename:std::vector<T> *	access:public	signature:()
operator ->	include/pybind11/detail/type_caster_base.h	/^        value_and_holder *operator->() { return &curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder *	access:public	signature:()
operator ->	include/pybind11/pytypes.h	/^    T *operator->() const { return &value; }$/;"	f	struct:arrow_proxy	typeref:typename:T *	access:public	signature:() const
operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const { return **this; }$/;"	f	class:generic_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	include/pybind11/pytypes.h	/^    pointer operator->() const {$/;"	f	class:iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	tests/object.h	/^    T *operator->() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *	access:public	signature:()
operator ->	tests/object.h	/^    const T *operator->() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *	access:public	signature:() const
operator ->	tests/test_stl.cpp	/^    const T *operator->() const noexcept { return &value(); }$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T *	file:	access:public	signature:() const
operator /	include/pybind11/pytypes.h	/^    object operator\/(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(const Vector2 &v) const { return Vector2(x \/ v.x, y \/ v.y); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(const Vector2 & v) const
operator /	tests/test_operator_overloading.cpp	/^    Vector2 operator\/(float value) const { return Vector2(x \/ value, y \/ value); }$/;"	f	class:Vector2	typeref:typename:Vector2	file:	access:public	signature:(float value) const
operator /	tests/test_operator_overloading.cpp	/^    friend Vector2 operator\/(float f, const Vector2 &v) { return Vector2(f \/ v.x, f \/ v.y); }$/;"	f	typeref:typename:Vector2	file:	signature:(float f,const Vector2 & v)
operator /=	include/pybind11/pytypes.h	/^    object operator\/=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
operator /=	tests/test_operator_overloading.cpp	/^    Vector2 &operator\/=(float v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(float v)
operator <	include/pybind11/pytypes.h	/^    bool operator<(object_api const &other) const { return rich_compare(other, Py_LT); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
operator <	include/pybind11/pytypes.h	/^    friend bool operator<(const It &a, const It &b) { return b - a > 0; }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator <<	include/pybind11/pytypes.h	/^    object operator<<(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const ArrayStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const ArrayStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const ComplexStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const ComplexStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const EnumStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const EnumStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const NestedStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const NestedStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const PackedStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const PackedStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const SimpleStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const SimpleStruct & v)
operator <<	tests/test_numpy_dtypes.cpp	/^std::ostream &operator<<(std::ostream &os, const StringStruct &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & os,const StringStruct & v)
operator <<	tests/test_stl_binders.cpp	/^std::ostream &operator<<(std::ostream &s, El const &v) {$/;"	f	typeref:typename:std::ostream &	signature:(std::ostream & s,El const & v)
operator <<=	include/pybind11/pytypes.h	/^    object operator<<=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator <=	include/pybind11/pytypes.h	/^    bool operator<=(object_api const &other) const { return rich_compare(other, Py_LE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
operator <=	include/pybind11/pytypes.h	/^    friend bool operator<=(const It &a, const It &b) { return !(a > b); }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator =	include/pybind11/buffer_info.h	/^    buffer_info &operator=(buffer_info &&rhs) noexcept {$/;"	f	struct:buffer_info	typeref:typename:buffer_info &	access:public	signature:(buffer_info && rhs)
operator =	include/pybind11/buffer_info.h	/^    buffer_info &operator=(const buffer_info &) = delete;$/;"	p	struct:buffer_info	typeref:typename:buffer_info &	access:public	signature:(const buffer_info &)
operator =	include/pybind11/cast.h	/^    arg_v operator=(T &&value) const;$/;"	p	struct:arg	typeref:typename:arg_v	access:public	signature:(T && value) const
operator =	include/pybind11/cast.h	/^arg_v arg::operator=(T &&value) const {$/;"	f	class:arg	typeref:typename:arg_v	signature:(T && value) const
operator =	include/pybind11/detail/common.h	/^    error_scope &operator=(const error_scope &) = delete;$/;"	p	struct:error_scope	typeref:typename:error_scope &	access:public	signature:(const error_scope &)
operator =	include/pybind11/detail/internals.h	/^        gil_scoped_acquire_local &operator=(const gil_scoped_acquire_local &) = delete;$/;"	p	struct:get_internals::gil_scoped_acquire_local	typeref:typename:gil_scoped_acquire_local &	access:public	signature:(const gil_scoped_acquire_local &)
operator =	include/pybind11/detail/internals.h	/^    internals &operator=(const internals &other) = delete;$/;"	p	struct:internals	typeref:typename:internals &	access:public	signature:(const internals & other)
operator =	include/pybind11/embed.h	/^    scoped_interpreter &operator=(const scoped_interpreter &) = delete;$/;"	p	class:scoped_interpreter	typeref:typename:scoped_interpreter &	access:public	signature:(const scoped_interpreter &)
operator =	include/pybind11/embed.h	/^    scoped_interpreter &operator=(scoped_interpreter &&) = delete;$/;"	p	class:scoped_interpreter	typeref:typename:scoped_interpreter &	access:public	signature:(scoped_interpreter &&)
operator =	include/pybind11/functional.h	/^            func_handle &operator=(const func_handle &f_) {$/;"	f	struct:type_caster::load::func_handle	typeref:typename:func_handle &	access:public	signature:(const func_handle & f_)
operator =	include/pybind11/gil.h	/^    gil_scoped_acquire &operator=(const gil_scoped_acquire &) = delete;$/;"	p	class:gil_scoped_acquire	typeref:typename:gil_scoped_acquire &	access:public	signature:(const gil_scoped_acquire &)
operator =	include/pybind11/gil.h	/^    gil_scoped_release &operator=(const gil_scoped_release &) = delete;$/;"	p	class:gil_scoped_release	typeref:typename:gil_scoped_release &	access:public	signature:(const gil_scoped_release &)
operator =	include/pybind11/iostream.h	/^    scoped_ostream_redirect &operator=(const scoped_ostream_redirect &) = delete;$/;"	p	class:scoped_ostream_redirect	typeref:typename:scoped_ostream_redirect &	access:public	signature:(const scoped_ostream_redirect &)
operator =	include/pybind11/iostream.h	/^    scoped_ostream_redirect &operator=(scoped_ostream_redirect &&) = delete;$/;"	p	class:scoped_ostream_redirect	typeref:typename:scoped_ostream_redirect &	access:public	signature:(scoped_ostream_redirect &&)
operator =	include/pybind11/options.h	/^    options &operator=(const options &) = delete;$/;"	p	class:options	typeref:typename:options &	access:public	signature:(const options &)
operator =	include/pybind11/pybind11.h	/^        strdup_guard &operator=(const strdup_guard &) = delete;$/;"	p	class:cpp_function::strdup_guard	typeref:typename:strdup_guard &	access:public	signature:(const strdup_guard &)
operator =	include/pybind11/pytypes.h	/^    object &operator=(const object &other) {$/;"	f	class:object	typeref:typename:object &	access:public	signature:(const object & other)
operator =	include/pybind11/pytypes.h	/^    object &operator=(object &&other) noexcept {$/;"	f	class:object	typeref:typename:object &	access:public	signature:(object && other)
operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) & {$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(T && value)
operator =	include/pybind11/pytypes.h	/^    void operator=(T &&value) && {$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(T && value)
operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) & { operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(const accessor & a)
operator =	include/pybind11/pytypes.h	/^    void operator=(const accessor &a) && { std::move(*this).operator=(handle(a)); }$/;"	f	class:accessor	typeref:typename:void	access:public	signature:(const accessor & a)
operator =	tests/object.h	/^    ref &operator=(T *ptr) {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(T * ptr)
operator =	tests/object.h	/^    ref &operator=(const ref &r) {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(const ref & r)
operator =	tests/object.h	/^    ref &operator=(ref &&r) noexcept {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(ref && r)
operator =	tests/pybind11_tests.h	/^    IncType &operator=(IncType &&) = delete;$/;"	p	class:IncType	typeref:typename:IncType &	access:public	signature:(IncType &&)
operator =	tests/pybind11_tests.h	/^    IncType &operator=(const IncType &) = delete;$/;"	p	class:IncType	typeref:typename:IncType &	access:public	signature:(const IncType &)
operator =	tests/test_buffers.cpp	/^        Matrix &operator=(Matrix &&s) noexcept {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:Matrix &	file:	access:public	signature:(Matrix && s)
operator =	tests/test_buffers.cpp	/^        Matrix &operator=(const Matrix &s) {$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:Matrix &	file:	access:public	signature:(const Matrix & s)
operator =	tests/test_callbacks.cpp	/^        MovableObject &operator=(MovableObject &&o) noexcept {$/;"	f	struct:TEST_SUBMODULE::MovableObject	typeref:typename:MovableObject &	file:	access:public	signature:(MovableObject && o)
operator =	tests/test_callbacks.cpp	/^        MovableObject &operator=(const MovableObject &) = default;$/;"	p	struct:TEST_SUBMODULE::MovableObject	typeref:typename:MovableObject &	file:	access:public	signature:(const MovableObject &)
operator =	tests/test_copy_move.cpp	/^    CopyOnlyInt &operator=(const CopyOnlyInt &c) {$/;"	f	class:CopyOnlyInt	typeref:typename:CopyOnlyInt &	file:	access:public	signature:(const CopyOnlyInt & c)
operator =	tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(MoveOnlyInt &&m) noexcept {$/;"	f	class:MoveOnlyInt	typeref:typename:MoveOnlyInt &	file:	access:public	signature:(MoveOnlyInt && m)
operator =	tests/test_copy_move.cpp	/^    MoveOnlyInt &operator=(const MoveOnlyInt &) = delete;$/;"	p	class:MoveOnlyInt	typeref:typename:MoveOnlyInt &	file:	access:public	signature:(const MoveOnlyInt &)
operator =	tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(MoveOrCopyInt &&m) noexcept {$/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:	access:public	signature:(MoveOrCopyInt && m)
operator =	tests/test_copy_move.cpp	/^    MoveOrCopyInt &operator=(const MoveOrCopyInt &c) {$/;"	f	class:MoveOrCopyInt	typeref:typename:MoveOrCopyInt &	file:	access:public	signature:(const MoveOrCopyInt & c)
operator =	tests/test_copy_move.cpp	/^    NotCopyable &operator=(NotCopyable &&) = default;$/;"	p	struct:NotCopyable	typeref:typename:NotCopyable &	file:	access:public	signature:(NotCopyable &&)
operator =	tests/test_copy_move.cpp	/^    NotCopyable &operator=(NotCopyable const &) = delete;$/;"	p	struct:NotCopyable	typeref:typename:NotCopyable &	file:	access:public	signature:(NotCopyable const &)
operator =	tests/test_copy_move.cpp	/^    NotCopyableNotMovable &operator=(NotCopyableNotMovable &&) = delete;$/;"	p	struct:NotCopyableNotMovable	typeref:typename:NotCopyableNotMovable &	file:	access:public	signature:(NotCopyableNotMovable &&)
operator =	tests/test_copy_move.cpp	/^    NotCopyableNotMovable &operator=(NotCopyableNotMovable const &) = delete;$/;"	p	struct:NotCopyableNotMovable	typeref:typename:NotCopyableNotMovable &	file:	access:public	signature:(NotCopyableNotMovable const &)
operator =	tests/test_copy_move.cpp	/^    NotMovable &operator=(NotMovable &&) = delete;$/;"	p	struct:NotMovable	typeref:typename:NotMovable &	file:	access:public	signature:(NotMovable &&)
operator =	tests/test_copy_move.cpp	/^    NotMovable &operator=(NotMovable const &) = default;$/;"	p	struct:NotMovable	typeref:typename:NotMovable &	file:	access:public	signature:(NotMovable const &)
operator =	tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(DestructionTester &&) noexcept {$/;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:	access:public	signature:(DestructionTester &&)
operator =	tests/test_custom_type_casters.cpp	/^    DestructionTester &operator=(const DestructionTester &) {$/;"	f	class:DestructionTester	typeref:typename:DestructionTester &	file:	access:public	signature:(const DestructionTester &)
operator =	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	p	class:test_override_cache_helper	typeref:typename:test_override_cache_helper &	file:	access:public	signature:(test_override_cache_helper const & Right)
operator =	tests/test_exceptions.cpp	/^    MyException3 &operator=(MyException3 &&) = default;$/;"	p	class:MyException3	typeref:typename:MyException3 &	file:	access:public	signature:(MyException3 &&)
operator =	tests/test_exceptions.cpp	/^    MyException3 &operator=(const MyException3 &) = default;$/;"	p	class:MyException3	typeref:typename:MyException3 &	file:	access:public	signature:(const MyException3 &)
operator =	tests/test_factory_constructors.cpp	/^    TestFactory1 &operator=(TestFactory1 &&) = delete;$/;"	p	class:TestFactory1	typeref:typename:TestFactory1 &	file:	access:public	signature:(TestFactory1 &&)
operator =	tests/test_factory_constructors.cpp	/^    TestFactory1 &operator=(const TestFactory1 &) = delete;$/;"	p	class:TestFactory1	typeref:typename:TestFactory1 &	file:	access:public	signature:(const TestFactory1 &)
operator =	tests/test_factory_constructors.cpp	/^    TestFactory2 &operator=(TestFactory2 &&m) noexcept {$/;"	f	class:TestFactory2	typeref:typename:TestFactory2 &	file:	access:public	signature:(TestFactory2 && m)
operator =	tests/test_factory_constructors.cpp	/^    TestFactory3 &operator=(TestFactory3 &&m) noexcept {$/;"	f	class:TestFactory3	typeref:typename:TestFactory3 &	file:	access:public	signature:(TestFactory3 && m)
operator =	tests/test_methods_and_attributes.cpp	/^    void operator=(ExampleMandA &&e) noexcept {$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(ExampleMandA && e)
operator =	tests/test_methods_and_attributes.cpp	/^    void operator=(const ExampleMandA &e) {$/;"	f	class:ExampleMandA	typeref:typename:void	file:	access:public	signature:(const ExampleMandA & e)
operator =	tests/test_modules.cpp	/^        A &operator=(const A &copy) {$/;"	f	class:TEST_SUBMODULE::A	typeref:typename:A &	file:	access:public	signature:(const A & copy)
operator =	tests/test_modules.cpp	/^        B &operator=(const B &copy) {$/;"	f	class:TEST_SUBMODULE::B	typeref:typename:B &	file:	access:public	signature:(const B & copy)
operator =	tests/test_operator_overloading.cpp	/^    Vector2 &operator=(Vector2 &&v) noexcept {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(Vector2 && v)
operator =	tests/test_operator_overloading.cpp	/^    Vector2 &operator=(const Vector2 &v) {$/;"	f	class:Vector2	typeref:typename:Vector2 &	file:	access:public	signature:(const Vector2 & v)
operator =	tests/test_sequences_and_iterators.cpp	/^        Sequence &operator=(Sequence &&s) noexcept {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence &	file:	access:public	signature:(Sequence && s)
operator =	tests/test_sequences_and_iterators.cpp	/^        Sequence &operator=(const Sequence &s) {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence &	file:	access:public	signature:(const Sequence & s)
operator =	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt &operator=(NonCopyableInt &&other) noexcept {$/;"	f	class:NonCopyableInt	typeref:typename:NonCopyableInt &	file:	access:public	signature:(NonCopyableInt && other)
operator =	tests/test_sequences_and_iterators.cpp	/^    NonCopyableInt &operator=(const NonCopyableInt &) = delete;$/;"	p	class:NonCopyableInt	typeref:typename:NonCopyableInt &	file:	access:public	signature:(const NonCopyableInt &)
operator =	tests/test_stl.cpp	/^        NoAssign &operator=(NoAssign &&) = delete;$/;"	p	struct:TEST_SUBMODULE::NoAssign	typeref:typename:NoAssign &	file:	access:public	signature:(NoAssign &&)
operator =	tests/test_stl.cpp	/^        NoAssign &operator=(const NoAssign &) = delete;$/;"	p	struct:TEST_SUBMODULE::NoAssign	typeref:typename:NoAssign &	file:	access:public	signature:(const NoAssign &)
operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(T &&value) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:ReferenceSensitiveOptional &	file:	access:public	signature:(T && value)
operator =	tests/test_stl.cpp	/^    ReferenceSensitiveOptional &operator=(const T &value) {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:ReferenceSensitiveOptional &	file:	access:public	signature:(const T & value)
operator =	tests/test_stl_binders.cpp	/^    E_nc &operator=(E_nc &&) = default;$/;"	p	class:E_nc	typeref:typename:E_nc &	file:	access:public	signature:(E_nc &&)
operator =	tests/test_stl_binders.cpp	/^    E_nc &operator=(const E_nc &) = delete;$/;"	p	class:E_nc	typeref:typename:E_nc &	file:	access:public	signature:(const E_nc &)
operator =	tests/test_thread.cpp	/^    IntStruct &operator=(const IntStruct &) = default;$/;"	p	struct:__anon837ffe4f0111::IntStruct	typeref:typename:IntStruct &	file:	access:public	signature:(const IntStruct &)
operator =	tests/test_virtual_functions.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	p	class:test_override_cache_helper	typeref:typename:test_override_cache_helper &	file:	access:public	signature:(test_override_cache_helper const & Right)
operator =	tests/test_virtual_functions.cpp	/^    void operator=(NonCopyable &&) = delete;$/;"	p	class:NonCopyable	typeref:typename:void	file:	access:public	signature:(NonCopyable &&)
operator =	tests/test_virtual_functions.cpp	/^    void operator=(const NonCopyable &) = delete;$/;"	p	class:NonCopyable	typeref:typename:void	file:	access:public	signature:(const NonCopyable &)
operator ==	include/pybind11/detail/type_caster_base.h	/^        bool operator==(const iterator &other) const { return curr.index == other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool	access:public	signature:(const iterator & other) const
operator ==	include/pybind11/pytypes.h	/^    bool operator==(const handle &h) const { return m_ptr == h.m_ptr; }$/;"	f	class:handle	typeref:typename:PYBIND11_DEPRECATED ("Use obj1.is(obj2) instead")bool	access:public	signature:(const handle & h) const
operator ==	include/pybind11/pytypes.h	/^    friend bool operator==(const It &a, const It &b) { return a.equal(b); }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator ==	include/pybind11/pytypes.h	/^    friend bool operator==(const iterator &a, const iterator &b) { return a->ptr() == b->ptr(); /;"	f	typeref:typename:bool	signature:(const iterator & a,const iterator & b)
operator ==	tests/object.h	/^    bool operator==(const T *ptr) const { return m_ptr == ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const T * ptr) const
operator ==	tests/object.h	/^    bool operator==(const ref &r) const { return m_ptr == r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const ref & r) const
operator ==	tests/test_operator_overloading.cpp	/^        bool operator==(const Comparable &rhs) const { return value == rhs.value; }$/;"	f	struct:TEST_SUBMODULE::Comparable	typeref:typename:bool	file:	access:public	signature:(const Comparable & rhs) const
operator ==	tests/test_operator_overloading.cpp	/^    bool operator==(const Vector2 &v) const { return x == v.x && y == v.y; }$/;"	f	class:Vector2	typeref:typename:bool	file:	access:public	signature:(const Vector2 & v) const
operator ==	tests/test_operator_overloading.cpp	/^bool operator==(const HashMe &lhs, const HashMe &rhs) { return lhs.member == rhs.member; }$/;"	f	typeref:typename:bool	signature:(const HashMe & lhs,const HashMe & rhs)
operator ==	tests/test_sequences_and_iterators.cpp	/^        bool operator==(const Sequence &s) const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:bool	file:	access:public	signature:(const Sequence & s) const
operator ==	tests/test_sequences_and_iterators.cpp	/^    bool operator==(const NonRefIterator &other) const { return ptr_ == other.ptr_; }$/;"	f	class:NonRefIterator	typeref:typename:bool	file:	access:public	signature:(const NonRefIterator & other) const
operator ==	tests/test_sequences_and_iterators.cpp	/^bool operator==(const NonZeroIterator<std::pair<A, B>> &it, const NonZeroSentinel &) {$/;"	f	typeref:typename:bool	signature:(const NonZeroIterator<std::pair<A,B>> & it,const NonZeroSentinel &)
operator ==	tests/test_stl.cpp	/^    bool operator==(const TplCtorClass &) const { return true; }$/;"	f	struct:TplCtorClass	typeref:typename:bool	file:	access:public	signature:(const TplCtorClass &) const
operator >	include/pybind11/pytypes.h	/^    bool operator>(object_api const &other) const { return rich_compare(other, Py_GT); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
operator >	include/pybind11/pytypes.h	/^    friend bool operator>(const It &a, const It &b) { return b < a; }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator >=	include/pybind11/pytypes.h	/^    bool operator>=(object_api const &other) const { return rich_compare(other, Py_GE); }$/;"	f	class:object_api	typeref:typename:bool	access:public	signature:(object_api const & other) const
operator >=	include/pybind11/pytypes.h	/^    friend bool operator>=(const It &a, const It &b) { return !(a < b); }$/;"	f	typeref:typename:bool	signature:(const It & a,const It & b)
operator >>	include/pybind11/pytypes.h	/^    object operator>>(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator >>=	include/pybind11/pytypes.h	/^    object operator>>=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator CharT&	include/pybind11/cast.h	/^    explicit operator CharT &() {$/;"	f	struct:type_caster	access:public	signature:()
operator CharT*	include/pybind11/cast.h	/^    explicit operator CharT *() {$/;"	f	struct:type_caster	access:public	signature:()
operator ConstRefCasted&	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &() {$/;"	f	class:type_caster	file:	access:public	signature:()
operator ConstRefCasted&&	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &&() {$/;"	f	class:type_caster	file:	access:public	signature:()
operator ConstRefCasted*	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted *() {$/;"	f	class:type_caster	file:	access:public	signature:()
operator CopyOnlyInt&	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt &() { return value; }$/;"	f	struct:type_caster	file:	access:public	signature:()
operator CopyOnlyInt*	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt *() { return &value; }$/;"	f	struct:type_caster	file:	access:public	signature:()
operator MapType	include/pybind11/eigen/matrix.h	/^    operator MapType() = delete;$/;"	p	struct:eigen_map_caster	access:public	signature:()
operator MapType&	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &() { return *value; }$/;"	f	struct:type_caster	access:public	signature:()
operator MapType&&	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &&() && { return std::move(*value); }$/;"	f	struct:type_caster	access:public	signature:()
operator MapType*	include/pybind11/eigen/tensor.h	/^    explicit operator MapType *() { return value.get(); }$/;"	f	struct:type_caster	access:public	signature:()
operator PyObject*	include/pybind11/type_caster_pyobject_ptr.h	/^    explicit operator PyObject *() { return value.ptr(); }$/;"	f	class:type_caster	access:public	signature:()
operator PyObject*	tests/test_pytypes.cpp	/^    operator PyObject *() \/* *\/ { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:()
operator PyObject*	tests/test_pytypes.cpp	/^    operator PyObject *() const { return Py_None; } \/\/ NOLINT(google-explicit-constructor)$/;"	f	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:() const
operator T	include/pybind11/pytypes.h	/^    operator T() const {$/;"	f	class:int_	access:public	signature:() const
operator T*	include/pybind11/pytypes.h	/^    operator T *() const { \/\/ NOLINT(google-explicit-constructor)$/;"	f	class:capsule	access:public	signature:() const
operator T*	tests/object.h	/^    explicit operator T *() { return m_ptr; }$/;"	f	class:ref	access:public	signature:()
operator Type	include/pybind11/eigen/matrix.h	/^    operator Type() = delete;$/;"	p	struct:type_caster	access:public	signature:()
operator Type&	include/pybind11/eigen/matrix.h	/^    operator Type &() { return *ref; }$/;"	f	struct:type_caster	access:public	signature:()
operator Type&	include/pybind11/eigen/matrix.h	/^    operator Type &() { return value; }$/;"	f	struct:type_caster	access:public	signature:()
operator Type&&	include/pybind11/eigen/matrix.h	/^    operator Type &&() && { return std::move(value); }$/;"	f	struct:type_caster	access:public	signature:()
operator Type*	include/pybind11/eigen/matrix.h	/^    operator Type *() { return &value; }$/;"	f	struct:type_caster	access:public	signature:()
operator Type*	include/pybind11/eigen/matrix.h	/^    operator Type *() { return ref.get(); }$/;"	f	struct:type_caster	access:public	signature:()
operator []	include/pybind11/numpy.h	/^    T &operator[](ssize_t index) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T &	access:public	signature:(ssize_t index)
operator []	include/pybind11/numpy.h	/^    const T &operator[](ssize_t index) const {$/;"	f	class:unchecked_reference	typeref:typename:const T &	access:public	signature:(ssize_t index) const
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:list	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:sequence	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:tuple	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
operator []	include/pybind11/pytypes.h	/^    detail::list_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:list	typeref:typename:detail::list_accessor	access:public	signature:(size_t index) const
operator []	include/pybind11/pytypes.h	/^    detail::sequence_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_accessor	access:public	signature:(size_t index) const
operator []	include/pybind11/pytypes.h	/^    detail::tuple_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_accessor	access:public	signature:(size_t index) const
operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](const char *key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(const char * key) const
operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](handle key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(handle key) const
operator []	include/pybind11/pytypes.h	/^    item_accessor operator[](object &&key) const;$/;"	p	class:object_api	typeref:typename:item_accessor	access:public	signature:(object && key) const
operator []	include/pybind11/pytypes.h	/^    reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:generic_iterator	typeref:typename:reference	access:public	signature:(difference_type n) const
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](const char *key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(const char * key) const
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](handle key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(handle key) const
operator []	include/pybind11/pytypes.h	/^item_accessor object_api<D>::operator[](object &&key) const {$/;"	f	class:object_api	typeref:typename:item_accessor	signature:(object && key) const
operator []	tests/test_sequences_and_iterators.cpp	/^        float &operator[](size_t index) { return m_data[index]; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:float &	file:	access:public	signature:(size_t index)
operator []	tests/test_sequences_and_iterators.cpp	/^        float operator[](size_t index) const { return m_data[index]; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:float	file:	access:public	signature:(size_t index) const
operator ^	include/pybind11/pytypes.h	/^    object operator^(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator ^=	include/pybind11/pytypes.h	/^    object operator^=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator bool	include/pybind11/detail/type_caster_base.h	/^    explicit operator bool() const { return value_ptr() != nullptr; }$/;"	f	struct:value_and_holder	access:public	signature:() const
operator bool	include/pybind11/eigen/matrix.h	/^    operator bool() const { return conformable; }$/;"	f	struct:EigenConformable	access:public	signature:() const
operator bool	include/pybind11/pytypes.h	/^    explicit operator bool() const { return m_ptr != nullptr; }$/;"	f	class:handle	access:public	signature:() const
operator bool	include/pybind11/pytypes.h	/^    operator bool() const { return (m_ptr != nullptr) && PyLong_AsLong(m_ptr) != 0; }$/;"	f	class:bool_	access:public	signature:() const
operator bool	tests/test_stl.cpp	/^    explicit operator bool() const noexcept { return !storage.empty(); }$/;"	f	class:ReferenceSensitiveOptional	file:	access:public	signature:() const
operator const ConstRefCasted&	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted &() {$/;"	f	class:type_caster	file:	access:public	signature:()
operator const ConstRefCasted*	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted *() {$/;"	f	class:type_caster	file:	access:public	signature:()
operator delete	tests/test_class.cpp	/^        static void operator delete(void *p) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void	file:	access:public	signature:(void * p)
operator delete	tests/test_class.cpp	/^        static void operator delete(void *p) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void	file:	access:public	signature:(void * p)
operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
operator delete	tests/test_class.cpp	/^        static void operator delete(void *p, size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void	file:	access:public	signature:(void * p,size_t s)
operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *, void *) { py::print("noisy placement delete"); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void	file:	access:public	signature:(void *,void *)
operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *p) {$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:void	file:	access:public	signature:(void * p)
operator delete	tests/test_factory_constructors.cpp	/^        static void operator delete(void *p, size_t) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void	file:	access:public	signature:(void * p,size_t)
operator double	include/pybind11/pytypes.h	/^    operator double() const { return (double) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_	access:public	signature:() const
operator enable_if_t<std::is_same<T,accessor_policies::generic_item>::value,bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::generic_item>::value, bool>() const /;"	f	class:accessor	access:public	signature:() const
operator enable_if_t<std::is_same<T,accessor_policies::str_attr>::value||std::is_same<T,accessor_policies::obj_attr>::value,bool>	include/pybind11/pytypes.h	/^    operator enable_if_t<std::is_same<T, accessor_policies::str_attr>::value$/;"	f	class:accessor	access:public	signature:() const
operator float	include/pybind11/pytypes.h	/^    operator float() const { return (float) PyFloat_AsDouble(m_ptr); }$/;"	f	class:float_	access:public	signature:() const
operator holder_type&	include/pybind11/cast.h	/^    explicit operator holder_type &() { return holder; }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
operator holder_type*	include/pybind11/cast.h	/^    explicit operator holder_type *() { return std::addressof(holder); }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
operator itype&	include/pybind11/detail/type_caster_base.h	/^    operator itype &() {$/;"	f	class:type_caster_base	access:public	signature:()
operator itype*	include/pybind11/detail/type_caster_base.h	/^    operator itype *() { return (type *) value; }$/;"	f	class:type_caster_base	access:public	signature:()
operator new	include/pybind11/options.h	/^    void *operator new(size_t) = delete;$/;"	p	class:options	typeref:typename:void *	access:public	signature:(size_t)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void *	file:	access:public	signature:(size_t s)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void *	file:	access:public	signature:(size_t s)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDel	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelBoth	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
operator new	tests/test_class.cpp	/^        static void *operator new(size_t s, void *ptr) {$/;"	f	struct:TEST_SUBMODULE::HasOpNewDelSize	typeref:typename:void *	file:	access:public	signature:(size_t s,void * ptr)
operator new	tests/test_copy_move.cpp	/^        void *operator new(size_t bytes) {$/;"	f	struct:PYBIND11_NAMESPACE_END::PrivateOpNew	typeref:typename:void *	file:	access:private	signature:(size_t bytes)
operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(size_t s) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void *	file:	access:public	signature:(size_t s)
operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(size_t, void *p) {$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	typeref:typename:void *	file:	access:public	signature:(size_t,void * p)
operator new	tests/test_factory_constructors.cpp	/^        static void *operator new(std::size_t s) {$/;"	f	class:TEST_SUBMODULE::NoPlacementNew	typeref:typename:void *	file:	access:public	signature:(std::size_t s)
operator object	include/pybind11/pytypes.h	/^    operator object() const { return get_cache(); }$/;"	f	class:accessor	access:public	signature:() const
operator std::reference_wrapper<type>	include/pybind11/cast.h	/^    explicit operator std::reference_wrapper<type>() { return cast_op<type &>(subcaster); }$/;"	f	class:type_caster	access:public	signature:()
operator std::string	include/pybind11/pytypes.h	/^    explicit operator std::string() const {$/;"	f	class:bytearray	access:public	signature:() const
operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const { return string_op<std::string>(); }$/;"	f	class:bytes	access:public	signature:() const
operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const {$/;"	f	class:str	access:public	signature:() const
operator std::string	tests/test_builtin_casters.cpp	/^        operator std::string() const { return "success"; }$/;"	f	struct:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView	file:	access:public	signature:() const
operator std::string_view	include/pybind11/pytypes.h	/^    operator std::string_view() const { return string_op<std::string_view>(); }$/;"	f	class:bytes	access:public	signature:() const
operator std::string_view	tests/test_builtin_casters.cpp	/^        operator std::string_view() const { return "failure"; }$/;"	f	struct:PYBIND11_NAMESPACE_END::__anon9bfcdd028302::TypeWithBothOperatorStringAndStringView	file:	access:public	signature:() const
operator std::vector<T>&&	include/pybind11/detail/common.h	/^    operator std::vector<T> &&() && { return std::move(v); }$/;"	f	class:any_container	access:public	signature:()
operator type	include/pybind11/cast.h	/^    explicit operator type() & { return implicit_cast(indices{}); }$/;"	f	class:tuple_caster	access:public	signature:()
operator type	include/pybind11/cast.h	/^    explicit operator type() && { return std::move(*this).implicit_cast(indices{}); }$/;"	f	class:tuple_caster	access:public	signature:()
operator type&	include/pybind11/cast.h	/^    explicit operator type &() { return *(static_cast<type *>(this->value)); }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
operator type*	include/pybind11/cast.h	/^    explicit operator type *() { return this->value; }$/;"	f	struct:copyable_holder_caster	access:public	signature:()
operator value_and_holder&	include/pybind11/detail/init.h	/^    explicit operator value_and_holder &() { return *value; }$/;"	f	class:type_caster	access:public	signature:()
operator void*&	include/pybind11/cast.h	/^    explicit operator void *&() { return value; }$/;"	f	class:type_caster	access:public	signature:()
operator |	include/pybind11/pytypes.h	/^    object operator|(object_api const &other) const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other) const
operator |=	include/pybind11/pytypes.h	/^    object operator|=(object_api const &other);$/;"	p	class:object_api	typeref:typename:object	access:public	signature:(object_api const & other)
operator ~	include/pybind11/pytypes.h	/^    object operator~() const;$/;"	p	class:object_api	typeref:typename:object	access:public	signature:() const
operator_const	tests/test_pytypes.cpp	/^    operator_const() = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:()
operator_const	tests/test_pytypes.cpp	/^    operator_const(operator_const &&) = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_const	file:	access:public	signature:(operator_const &&)
operator_const	tests/test_pytypes.cpp	/^struct operator_const {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
operator_ncnst	tests/test_pytypes.cpp	/^    operator_ncnst() = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:()
operator_ncnst	tests/test_pytypes.cpp	/^    operator_ncnst(operator_ncnst &&) = default;$/;"	p	struct:handle_from_move_only_type_with_operator_PyObject::operator_ncnst	file:	access:public	signature:(operator_ncnst &&)
operator_ncnst	tests/test_pytypes.cpp	/^struct operator_ncnst {$/;"	s	namespace:handle_from_move_only_type_with_operator_PyObject	file:
operator_new	include/pybind11/attr.h	/^    void *(*operator_new)(size_t) = nullptr;$/;"	m	struct:type_record	typeref:typename:void * (*)(size_t)	access:public
operator_new	include/pybind11/detail/internals.h	/^    void *(*operator_new)(size_t);$/;"	m	struct:type_info	typeref:typename:void * (*)(size_t)	access:public
opt_boost_holder	tests/test_stl.cpp	/^    using opt_boost_holder = OptionalHolder<boost::optional, MoveOutDetector>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalHolder<boost::optional,MoveOutDetector>	file:
opt_boost_props	tests/test_stl.cpp	/^    using opt_boost_props = OptionalProperties<boost::optional>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalProperties<boost::optional>	file:
opt_exp_holder	tests/test_stl.cpp	/^    using opt_exp_holder = OptionalHolder<std::experimental::optional, MoveOutDetector>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalHolder<std::experimental::optional,MoveOutDetector>	file:
opt_exp_props	tests/test_stl.cpp	/^    using opt_exp_props = OptionalProperties<std::experimental::optional>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalProperties<std::experimental::optional>	file:
opt_holder	tests/test_stl.cpp	/^    using opt_holder = OptionalHolder<std::optional, MoveOutDetector>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalHolder<std::optional,MoveOutDetector>	file:
opt_int	tests/test_stl.cpp	/^    using opt_int = std::optional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::optional<int>	file:
opt_no_assign	tests/test_stl.cpp	/^    using opt_no_assign = std::optional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::optional<NoAssign>	file:
opt_props	tests/test_stl.cpp	/^    using opt_props = OptionalProperties<std::optional>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalProperties<std::optional>	file:
opt_refsensitive_holder	tests/test_stl.cpp	/^    using opt_refsensitive_holder = OptionalHolder<ReferenceSensitiveOptional, MoveOutDetector>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalHolder<ReferenceSensitiveOptional,MoveOutDetector>	file:
opt_refsensitive_props	tests/test_stl.cpp	/^    using opt_refsensitive_props = OptionalProperties<ReferenceSensitiveOptional>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:OptionalProperties<ReferenceSensitiveOptional>	file:
optional_caster	include/pybind11/stl.h	/^struct optional_caster {$/;"	s
optional_caster::cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:optional_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
optional_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:optional_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
optional_caster::value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:optional_caster	typeref:typename:make_caster<Value>	access:public
optional_global	tools/pybind11Common.cmake	/^  set(optional_global GLOBAL)$/;"	v
options	include/pybind11/options.h	/^    options() : previous_state(global_state()) {}$/;"	f	class:options	access:public	signature:()
options	include/pybind11/options.h	/^    options(const options &) = delete;$/;"	p	class:options	access:public	signature:(const options &)
options	include/pybind11/options.h	/^class options {$/;"	c
options	tools/pybind11Common.cmake	/^    set(options "REQUIRED;QUIET")$/;"	v	function:pybind11_find_import
options	tools/pybind11Tools.cmake	/^  set(options "MODULE;SHARED;EXCLUDE_FROM_ALL;NO_EXTRAS;SYSTEM;THIN_LTO;OPT_SIZE")$/;"	v	function:pybind11_add_module
options::disable_enum_members_docstring	include/pybind11/options.h	/^    options &disable_enum_members_docstring() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::disable_function_signatures	include/pybind11/options.h	/^    options &disable_function_signatures() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::disable_user_defined_docstrings	include/pybind11/options.h	/^    options &disable_user_defined_docstrings() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::enable_enum_members_docstring	include/pybind11/options.h	/^    options &enable_enum_members_docstring() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::enable_function_signatures	include/pybind11/options.h	/^    options &enable_function_signatures() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::enable_user_defined_docstrings	include/pybind11/options.h	/^    options &enable_user_defined_docstrings() & {$/;"	f	class:options	typeref:typename:options &	access:public	signature:()
options::global_state	include/pybind11/options.h	/^    static state &global_state() {$/;"	f	class:options	typeref:typename:state &	access:private	signature:()
options::operator =	include/pybind11/options.h	/^    options &operator=(const options &) = delete;$/;"	p	class:options	typeref:typename:options &	access:public	signature:(const options &)
options::operator new	include/pybind11/options.h	/^    void *operator new(size_t) = delete;$/;"	p	class:options	typeref:typename:void *	access:public	signature:(size_t)
options::options	include/pybind11/options.h	/^    options() : previous_state(global_state()) {}$/;"	f	class:options	access:public	signature:()
options::options	include/pybind11/options.h	/^    options(const options &) = delete;$/;"	p	class:options	access:public	signature:(const options &)
options::previous_state	include/pybind11/options.h	/^    state previous_state;$/;"	m	class:options	typeref:typename:state	access:private
options::show_enum_members_docstring	include/pybind11/options.h	/^    static bool show_enum_members_docstring() {$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
options::show_function_signatures	include/pybind11/options.h	/^    static bool show_function_signatures() { return global_state().show_function_signatures; }$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
options::show_user_defined_docstrings	include/pybind11/options.h	/^    static bool show_user_defined_docstrings() {$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
options::state	include/pybind11/options.h	/^    struct state {$/;"	s	class:options	access:private
options::state::show_enum_members_docstring	include/pybind11/options.h	/^        bool show_enum_members_docstring = true;  \/\/< Include auto-generated member list in en/;"	m	struct:options::state	typeref:typename:bool	access:public
options::state::show_function_signatures	include/pybind11/options.h	/^        bool show_function_signatures = true;     \/\/< Include auto-generated function signatur/;"	m	struct:options::state	typeref:typename:bool	access:public
options::state::show_user_defined_docstrings	include/pybind11/options.h	/^        bool show_user_defined_docstrings = true; \/\/< Include user-supplied texts in docstring/;"	m	struct:options::state	typeref:typename:bool	access:public
options::~options	include/pybind11/options.h	/^    ~options() { global_state() = previous_state; }$/;"	f	class:options	access:public	signature:()
ostream_redirect	docs/advanced/pycpp/utilities.rst	/^.. _ostream_redirect:$/;"	T	chapter:Using Python's print function in C++
other_lib	tests/test_custom_type_casters.cpp	/^namespace other_lib {$/;"	n	file:
other_lib::MyType	tests/test_custom_type_casters.cpp	/^struct MyType {};$/;"	s	namespace:other_lib	file:
other_lib::PYBIND11_NAMESPACE	tests/test_custom_type_casters.cpp	/^namespace PYBIND11_NAMESPACE {}$/;"	n	namespace:other_lib	file:
other_lib::my_caster	tests/test_custom_type_casters.cpp	/^struct my_caster {$/;"	s	namespace:other_lib	file:
other_lib::my_caster::cast	tests/test_custom_type_casters.cpp	/^    static py_::handle cast(const MyType &, py_::return_value_policy, py_::handle) {$/;"	f	struct:other_lib::my_caster	typeref:typename:py_::handle	file:	access:public	signature:(const MyType &,py_::return_value_policy,py_::handle)
other_lib::my_caster::load	tests/test_custom_type_casters.cpp	/^    bool load(py_::handle, bool) { return true; }$/;"	f	struct:other_lib::my_caster	typeref:typename:bool	file:	access:public	signature:(py_::handle,bool)
other_lib::py	tests/test_custom_type_casters.cpp	/^namespace py {}$/;"	n	namespace:other_lib	file:
overflow	include/pybind11/iostream.h	/^    int overflow(int c) override {$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:(int c)
overload_cast	include/pybind11/detail/common.h	/^struct overload_cast {$/;"	s
overload_cast_	tests/test_methods_and_attributes.cpp	/^using overload_cast_ = pybind11::detail::overload_cast_impl<Args...>;$/;"	t	typeref:typename:pybind11::detail::overload_cast_impl<Args...>	file:
overload_cast_impl	include/pybind11/detail/common.h	/^struct overload_cast_impl {$/;"	s
overload_cast_impl::operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (*pf)(Args...)) const noexcept -> decltype(pf) {$/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (* pf)(Args...)) const
overload_cast_impl::operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...) const, std::true_type) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (Class::* pmf)(Args...)const,std::true_type) const
overload_cast_impl::operator ()	include/pybind11/detail/common.h	/^    constexpr auto operator()(Return (Class::*pmf)(Args...), std::false_type = {}) const noexcep/;"	f	struct:overload_cast_impl	typeref:typename:auto	access:public	signature:(Return (Class::* pmf)(Args...),std::false_type={}) const
overload_resolution	docs/advanced/functions.rst	/^.. _overload_resolution:$/;"	T	chapter:Allow/Prohibiting None arguments
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded() { return "()"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:()
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) const { return "(float, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,float) const
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, float) { return "(float, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,float)
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) const { return "(float, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,int) const
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(float, int) { return "(float, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float,int)
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) const { return "(int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int) const
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int) { return "(int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int)
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) const { return "(int, float) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,float) const
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, float) { return "(int, float)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,float)
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) const { return "(int, int) const"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,int) const
overloaded	tests/test_methods_and_attributes.cpp	/^    py::str overloaded(int, int) { return "(int, int)"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(int,int)
overloaded	tests/test_methods_and_attributes.cpp	/^    static py::str overloaded(float) { return "static float"; }$/;"	f	class:ExampleMandA	typeref:typename:py::str	file:	access:public	signature:(float)
override_caster_t	include/pybind11/cast.h	/^using override_caster_t = conditional_t<cast_is_temporary_value_reference<ret_type>::value,$/;"	t	typeref:typename:conditional_t<cast_is_temporary_value_reference<ret_type>::value,make_caster<ret_type>,override_unused>
override_hash	include/pybind11/detail/internals.h	/^struct override_hash {$/;"	s
override_hash::operator ()	include/pybind11/detail/internals.h	/^    inline size_t operator()(const std::pair<const PyObject *, const char *> &v) const {$/;"	f	struct:override_hash	typeref:typename:size_t	access:public	signature:(const std::pair<const PyObject *,const char * > & v) const
override_unused	include/pybind11/cast.h	/^struct override_unused {};$/;"	s
overriding_virtuals	docs/advanced/classes.rst	/^.. _overriding_virtuals:$/;"	T	title:Classes
owndata	include/pybind11/numpy.h	/^    bool owndata() const {$/;"	f	class:array	typeref:typename:bool	access:public	signature:() const
owned	include/pybind11/detail/common.h	/^    bool owned : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
owner	.github/matchers/pylint.json	/^      "owner": "pylint-error"$/;"	s	object:problemMatcher.1
owner	.github/matchers/pylint.json	/^      "owner": "pylint-warning"$/;"	s	object:problemMatcher.0
ownview	include/pybind11/buffer_info.h	/^    bool ownview = false;$/;"	m	struct:buffer_info	typeref:typename:bool	access:private
p	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter p{&config};$/;"	v	typeref:typename:py::scoped_interpreter
p_obj	tests/test_embed/test_interpreter.cpp	/^        std::shared_ptr<test_override_cache_helper> p_obj;$/;"	v	typeref:typename:std::shared_ptr<test_override_cache_helper>
p_obj2	tests/test_embed/test_interpreter.cpp	/^        std::shared_ptr<test_override_cache_helper> p_obj2;$/;"	v	typeref:typename:std::shared_ptr<test_override_cache_helper>
p_ptr	include/pybind11/numpy.h	/^    char *p_ptr{nullptr};$/;"	m	class:common_iterator	typeref:typename:char *	access:private
pack_element	include/pybind11/detail/common.h	/^struct pack_element {$/;"	s
pack_element	include/pybind11/detail/common.h	/^struct pack_element<0, T, Ts...> {$/;"	s
pack_element::type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:pack_element	typeref:typename:T	access:public
pack_element::type	include/pybind11/detail/common.h	/^    using type = typename pack_element<N - 1, Ts...>::type;$/;"	t	struct:pack_element	typeref:typename:pack_element<N-1,Ts...>::type	access:public
packed_dtype	tests/test_numpy_dtypes.py	/^def packed_dtype():$/;"	f	access:public	signature:()
packed_dtype_fmt	tests/test_numpy_dtypes.py	/^def packed_dtype_fmt():$/;"	f	access:public	signature:()
padding	tests/test_smart_ptr.cpp	/^    uint64_t padding[10];$/;"	m	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:uint64_t[10]	file:	access:private
pair_type	include/pybind11/pybind11.h	/^    using pair_type = decltype(*std::declval<Iterator &>());$/;"	t	class:iterator_key_access	access:private
pair_type	include/pybind11/pybind11.h	/^    using pair_type = decltype(*std::declval<Iterator &>());$/;"	t	class:iterator_value_access	access:private
param_n_t	include/pybind11/numpy.h	/^    using param_n_t = typename std::tuple_element<Index, arg_call_types>::type;$/;"	t	struct:vectorize_helper	typeref:typename:std::tuple_element<Index,arg_call_types>::type	access:private
parent	include/pybind11/cast.h	/^    handle parent;$/;"	m	struct:function_call	typeref:typename:handle	access:public
parent	include/pybind11/detail/type_caster_base.h	/^    loader_life_support *parent = nullptr;$/;"	m	class:loader_life_support	typeref:typename:loader_life_support *	access:private
parent	include/pybind11/stl.h	/^    handle parent;$/;"	m	struct:variant_caster_visitor	typeref:typename:handle	access:public
partial_dtype_fmt	tests/test_numpy_dtypes.py	/^def partial_dtype_fmt():$/;"	f	access:public	signature:()
partial_ld_offset	tests/test_numpy_dtypes.py	/^def partial_ld_offset():$/;"	f	access:public	signature:()
partial_nested_fmt	tests/test_numpy_dtypes.py	/^def partial_nested_fmt():$/;"	f	access:public	signature:()
path_caster	include/pybind11/stl/filesystem.h	/^struct path_caster {$/;"	s
path_caster::cast	include/pybind11/stl/filesystem.h	/^    static handle cast(const T &path, return_value_policy, handle) {$/;"	f	struct:path_caster	typeref:typename:handle	access:public	signature:(const T & path,return_value_policy,handle)
path_caster::load	include/pybind11/stl/filesystem.h	/^    bool load(handle handle, bool) {$/;"	f	struct:path_caster	typeref:typename:bool	access:public	signature:(handle handle,bool)
path_caster::unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::string &w) {$/;"	f	struct:path_caster	typeref:typename:PyObject *	access:private	signature:(const std::string & w)
path_caster::unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::wstring &w) {$/;"	f	struct:path_caster	typeref:typename:PyObject *	access:private	signature:(const std::wstring & w)
path_size_add_program_dir_to_path_false	tests/test_embed/test_interpreter.cpp	/^    size_t path_size_add_program_dir_to_path_false = 0;$/;"	v	typeref:typename:size_t
patients	include/pybind11/detail/internals.h	/^    std::unordered_map<const PyObject *, std::vector<PyObject *>> patients;$/;"	m	struct:internals	typeref:typename:std::unordered_map<const PyObject *,std::vector<PyObject * >>	access:public
pattern	.github/matchers/pylint.json	/^      "pattern": [$/;"	a	object:problemMatcher.0
pattern	.github/matchers/pylint.json	/^      "pattern": [$/;"	a	object:problemMatcher.1
period	include/pybind11/chrono.h	/^    using period = typename type::period;$/;"	t	class:duration_caster	typeref:typename:type::period	access:public
pets	tests/local_bindings.h	/^namespace pets {$/;"	n
pets::Pet	tests/local_bindings.h	/^class Pet {$/;"	c	namespace:pets
pets::Pet::Pet	tests/local_bindings.h	/^    explicit Pet(std::string name) : name_(std::move(name)) {}$/;"	f	class:pets::Pet	access:public	signature:(std::string name)
pets::Pet::name	tests/local_bindings.h	/^    const std::string &name() const { return name_; }$/;"	f	class:pets::Pet	typeref:typename:const std::string &	access:public	signature:() const
pets::Pet::name_	tests/local_bindings.h	/^    std::string name_;$/;"	m	class:pets::Pet	typeref:typename:std::string	access:public
pickle	docs/Makefile	/^pickle:$/;"	t
pickle	include/pybind11/pybind11.h	/^detail::initimpl::pickle_factory<GetState, SetState> pickle(GetState &&g, SetState &&s) {$/;"	f	typeref:typename:detail::initimpl::pickle_factory<GetState,SetState>	signature:(GetState && g,SetState && s)
pickle_factory	include/pybind11/detail/init.h	/^    pickle_factory(Get get, Set set) : get(std::forward<Get>(get)), set(std::forward<Set>(set)) /;"	f	struct:pickle_factory	access:public	signature:(Get get,Set set)
pickle_factory	include/pybind11/detail/init.h	/^struct pickle_factory<Get, Set, RetState(Self), NewInstance(ArgState)> {$/;"	s
pickle_factory::execute	include/pybind11/detail/init.h	/^    void execute(Class &cl, const Extra &...extra) && {$/;"	f	struct:pickle_factory	typeref:typename:void	access:public	signature:(Class & cl,const Extra &...extra)
pickle_factory::get	include/pybind11/detail/init.h	/^    remove_reference_t<Get> get;$/;"	m	struct:pickle_factory	typeref:typename:remove_reference_t<Get>	access:public
pickle_factory::pickle_factory	include/pybind11/detail/init.h	/^    pickle_factory(Get get, Set set) : get(std::forward<Get>(get)), set(std::forward<Set>(set)) /;"	f	struct:pickle_factory	access:public	signature:(Get get,Set set)
pickle_factory::set	include/pybind11/detail/init.h	/^    remove_reference_t<Set> set;$/;"	m	struct:pickle_factory	typeref:typename:remove_reference_t<Set>	access:public
pickling	docs/advanced/classes.rst	/^.. _pickling:$/;"	T	chapter:Operator overloading
pkgconfig_files	tests/extra_python_package/test_files.py	/^pkgconfig_files = {$/;"	v	access:public
pkgconfig_files	tools/setup_global.py.in	/^pkgconfig_files = glob.glob("pybind11\/share\/pkgconfig\/*.pc")$/;"	v	access:public
platform_lookup	include/pybind11/numpy.h	/^constexpr int platform_lookup() {$/;"	f	typeref:typename:int	signature:()
platform_lookup	include/pybind11/numpy.h	/^constexpr int platform_lookup(int I, Ints... Is) {$/;"	f	typeref:typename:int	signature:(int I,Ints...Is)
plus_impl	include/pybind11/detail/descr.h	/^constexpr descr<N1 + N2, Ts1..., Ts2...> plus_impl(const descr<N1, Ts1...> &a,$/;"	f	typeref:typename:descr<N1+N2,Ts1...,Ts2...>	signature:(const descr<N1,Ts1...> & a,const descr<N2,Ts2...> & b,index_sequence<Is1...>,index_sequence<Is2...>)
pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const handle>;$/;"	t	class:sequence_fast_readonly	typeref:typename:arrow_proxy<const handle>	access:protected
pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const sequence_accessor>;$/;"	t	class:sequence_slow_readwrite	typeref:typename:arrow_proxy<const sequence_accessor>	access:protected
pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const value_type>;$/;"	t	class:dict_readonly	typeref:typename:arrow_proxy<const value_type>	access:protected
pointer	include/pybind11/pytypes.h	/^    using pointer = const handle *;$/;"	t	class:iterator	typeref:typename:const handle *	access:public
pointer	include/pybind11/pytypes.h	/^    using pointer = typename Policy::pointer;$/;"	t	class:generic_iterator	typeref:typename:Policy::pointer	access:public
policy	include/pybind11/attr.h	/^    return_value_policy policy = return_value_policy::automatic;$/;"	m	struct:function_record	typeref:typename:return_value_policy	access:public
policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) { return p; }$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy	access:public	signature:(return_value_policy p)
policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) {$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy	access:public	signature:(return_value_policy p)
policy	include/pybind11/stl.h	/^    return_value_policy policy;$/;"	m	struct:variant_caster_visitor	typeref:typename:return_value_policy	access:public
polymorphic_type_hook	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook : public polymorphic_type_hook_base<itype> {};$/;"	s	inherits:polymorphic_type_hook_base<itype>
polymorphic_type_hook	tests/test_tagbased_polymorphic.cpp	/^struct polymorphic_type_hook<itype, detail::enable_if_t<std::is_base_of<Animal, itype>::value>> /;"	s	namespace:PYBIND11_NAMESPACE	file:
polymorphic_type_hook_base	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook_base {$/;"	s
polymorphic_type_hook_base	include/pybind11/detail/type_caster_base.h	/^struct polymorphic_type_hook_base<itype, detail::enable_if_t<std::is_polymorphic<itype>::value>>/;"	s
polymorphic_type_hook_base::get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&) { return src; }$/;"	f	struct:polymorphic_type_hook_base	typeref:typename:const void *	access:public	signature:(const itype * src,const std::type_info * &)
polymorphic_type_hook_base::get	include/pybind11/detail/type_caster_base.h	/^    static const void *get(const itype *src, const std::type_info *&type) {$/;"	f	struct:polymorphic_type_hook_base	typeref:typename:const void *	access:public	signature:(const itype * src,const std::type_info * & type)
pos	include/pybind11/pytypes.h	/^    ssize_t pos = -1;$/;"	m	class:dict_readonly	typeref:typename:ssize_t	access:private
pos_only	include/pybind11/cast.h	/^struct pos_only {};$/;"	s
possibly_uninitialized	tests/CMakeLists.txt	/^macro(possibly_uninitialized)$/;"	m
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call &,handle)
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(function_call &,handle)
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle fn_ret) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(function_call & call,handle fn_ret)
postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle ret) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call & call,handle ret)
pr4220_tripped_over_this	tests/test_class.cpp	/^namespace pr4220_tripped_over_this { \/\/ PR #4227$/;"	n	namespace:test_class	file:
pre-commit	docs/changelog.rst	/^.. _pre-commit: https:\/\/pre-commit.com$/;"	T	chapter:v2.6.0 (Oct 21, 2020)
precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call &)
precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(function_call &)
precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call & call)
precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(function_call & call)
precheck_interpreter	include/pybind11/embed.h	/^inline void precheck_interpreter() {$/;"	f	typeref:typename:void	signature:()
prefix	tools/check-style.sh	/^function prefix(filename, lineno) {$/;"	f
prefix_for_pc_file	CMakeLists.txt	/^    set(prefix_for_pc_file "${CMAKE_INSTALL_PREFIX}")$/;"	v
prepare	docs/conf.py	/^def prepare(app):$/;"	f	access:public	signature:(app)
prepend	include/pybind11/attr.h	/^    bool prepend : 1;$/;"	m	struct:function_record	typeref:typename:bool:1	access:public
prepend	include/pybind11/attr.h	/^struct prepend {};$/;"	s
previous_state	include/pybind11/options.h	/^    state previous_state;$/;"	m	class:options	typeref:typename:state	access:private
primary_domain	docs/conf.py	/^primary_domain = "cpp"$/;"	v	access:public
print_bytes	tests/test_constants_and_functions.cpp	/^std::string print_bytes(const py::bytes &bytes) {$/;"	f	typeref:typename:std::string	signature:(const py::bytes & bytes)
print_constr_details	tests/constructor_stats.h	/^void print_constr_details(T *inst, const std::string &action, Output &&...output) {$/;"	f	typeref:typename:void	signature:(T * inst,const std::string & action,Output &&...output)
print_copy_assigned	tests/constructor_stats.h	/^void print_copy_assigned(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_copy_created	tests/constructor_stats.h	/^void print_copy_created(T *inst,$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_created	tests/constructor_stats.h	/^void print_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_default_created	tests/constructor_stats.h	/^void print_default_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_destroyed	tests/constructor_stats.h	/^void print_destroyed(T *inst, Values &&...values) { \/\/ Prints but doesn't store given values$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_includes	pybind11/__main__.py	/^def print_includes() -> None:$/;"	f	typeref:typename:None	access:public	signature:()
print_movable	tests/test_virtual_functions.cpp	/^    std::string print_movable(int a, int b) { return get_movable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:	access:public	signature:(int a,int b)
print_move_assigned	tests/constructor_stats.h	/^void print_move_assigned(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_move_created	tests/constructor_stats.h	/^void print_move_created(T *inst,$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
print_nc	tests/test_virtual_functions.cpp	/^    std::string print_nc(int a, int b) { return get_noncopyable(a, b).get_value(); }$/;"	f	class:NCVirt	typeref:typename:std::string	file:	access:public	signature:(int a,int b)
print_recarray	tests/test_numpy_dtypes.cpp	/^py::list print_recarray(py::array_t<S, 0> arr) {$/;"	f	typeref:typename:py::list	signature:(py::array_t<S,0> arr)
print_values	tests/constructor_stats.h	/^void print_values(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
private_ctor	include/pybind11/numpy.h	/^    struct private_ctor {};$/;"	s	class:array_t	access:private
private_ctr_tag	include/pybind11/buffer_info.h	/^    struct private_ctr_tag {};$/;"	s	struct:buffer_info	access:private
problemMatcher	.github/matchers/pylint.json	/^  "problemMatcher": [$/;"	a
process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, arg_v a) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list &,arg_v a)
process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, detail::kwargs_proxy kp) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list &,detail::kwargs_proxy kp)
process	include/pybind11/cast.h	/^    void process(list &args_list, T &&x) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list & args_list,T && x)
process	include/pybind11/cast.h	/^    void process(list &args_list, detail::args_proxy ap) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list & args_list,detail::args_proxy ap)
process_attribute	include/pybind11/attr.h	/^struct process_attribute<T, enable_if_t<is_pyobject<T>::value>>$/;"	s	inherits:process_attribute_default<handle>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arg> : process_attribute_default<arg> {$/;"	s	inherits:process_attribute_default<arg>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arg_v> : process_attribute_default<arg_v> {$/;"	s	inherits:process_attribute_default<arg_v>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<arithmetic> : process_attribute_default<arithmetic> {};$/;"	s	inherits:process_attribute_default<arithmetic>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<base<T>> : process_attribute_default<base<T>> {$/;"	s	inherits:process_attribute_default<base<T>>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<buffer_protocol> : process_attribute_default<buffer_protocol> {$/;"	s	inherits:process_attribute_default<buffer_protocol>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<call_guard<Ts...>> : process_attribute_default<call_guard<Ts...>> {};$/;"	s	inherits:process_attribute_default<call_guard<Ts...>>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<char *> : process_attribute<const char *> {};$/;"	s	inherits:process_attribute<constchar*>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<const char *> : process_attribute_default<const char *> {$/;"	s	inherits:process_attribute_default<constchar*>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<custom_type_setup> {$/;"	s
process_attribute	include/pybind11/attr.h	/^struct process_attribute<doc> : process_attribute_default<doc> {$/;"	s	inherits:process_attribute_default<doc>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<dynamic_attr> : process_attribute_default<dynamic_attr> {$/;"	s	inherits:process_attribute_default<dynamic_attr>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_final> : process_attribute_default<is_final> {$/;"	s	inherits:process_attribute_default<is_final>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_method> : process_attribute_default<is_method> {$/;"	s	inherits:process_attribute_default<is_method>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_new_style_constructor>$/;"	s	inherits:process_attribute_default<is_new_style_constructor>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_operator> : process_attribute_default<is_operator> {$/;"	s	inherits:process_attribute_default<is_operator>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<is_setter> : process_attribute_default<is_setter> {$/;"	s	inherits:process_attribute_default<is_setter>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<keep_alive<Nurse, Patient>>$/;"	s	inherits:process_attribute_default<keep_alive<Nurse,Patient>>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<kw_only> : process_attribute_default<kw_only> {$/;"	s	inherits:process_attribute_default<kw_only>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<metaclass> : process_attribute_default<metaclass> {$/;"	s	inherits:process_attribute_default<metaclass>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<module_local> : process_attribute_default<module_local> {$/;"	s	inherits:process_attribute_default<module_local>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<multiple_inheritance> : process_attribute_default<multiple_inheritance>/;"	s	inherits:process_attribute_default<multiple_inheritance>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<name> : process_attribute_default<name> {$/;"	s	inherits:process_attribute_default<name>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<pos_only> : process_attribute_default<pos_only> {$/;"	s	inherits:process_attribute_default<pos_only>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<prepend> : process_attribute_default<prepend> {$/;"	s	inherits:process_attribute_default<prepend>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<return_value_policy> : process_attribute_default<return_value_policy> {$/;"	s	inherits:process_attribute_default<return_value_policy>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<scope> : process_attribute_default<scope> {$/;"	s	inherits:process_attribute_default<scope>
process_attribute	include/pybind11/attr.h	/^struct process_attribute<sibling> : process_attribute_default<sibling> {$/;"	s	inherits:process_attribute_default<sibling>
process_attribute::init	include/pybind11/attr.h	/^    static void init(const arg &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const arg & a,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const arg_v &a, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const arg_v & a,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const base<T> &, type_record *r) { r->add_base(typeid(T), nullptr); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const base<T> &,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const buffer_protocol &, type_record *r) { r->buffer_protocol = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const buffer_protocol &,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const char *d, function_record *r) { r->doc = const_cast<char *>(d); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const char * d,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const char *d, type_record *r) { r->doc = d; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const char * d,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const custom_type_setup &value, type_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const custom_type_setup & value,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const doc &n, function_record *r) { r->doc = const_cast<char *>(n.value); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const doc & n,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const dynamic_attr &, type_record *r) { r->dynamic_attr = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const dynamic_attr &,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const handle &h, type_record *r) { r->bases.append(h); }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const handle & h,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const is_final &, type_record *r) { r->is_final = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_final &,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const is_method &s, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_method & s,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const is_new_style_constructor &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_new_style_constructor &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const is_operator &, function_record *r) { r->is_operator = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_operator &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const is_setter &, function_record *r) { r->is_setter = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const is_setter &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const kw_only &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const kw_only &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const metaclass &m, type_record *r) { r->metaclass = m.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const metaclass & m,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const module_local &l, type_record *r) { r->module_local = l.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const module_local & l,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const multiple_inheritance &, type_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const multiple_inheritance &,type_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const name &n, function_record *r) { r->name = const_cast<char *>(n.value);/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const name & n,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const pos_only &, function_record *r) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const pos_only &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const prepend &, function_record *r) { r->prepend = true; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const prepend &,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const return_value_policy &p, function_record *r) { r->policy = p; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const return_value_policy & p,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const scope &s, function_record *r) { r->scope = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const scope & s,function_record * r)
process_attribute::init	include/pybind11/attr.h	/^    static void init(const sibling &s, function_record *r) { r->sibling = s.value; }$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(const sibling & s,function_record * r)
process_attribute::postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call &,handle)
process_attribute::postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle ret) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call & call,handle ret)
process_attribute::precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call &)
process_attribute::precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attribute	typeref:typename:void	access:public	signature:(function_call & call)
process_attribute_default	include/pybind11/attr.h	/^struct process_attribute_default {$/;"	s
process_attribute_default::init	include/pybind11/attr.h	/^    static void init(const T &, function_record *) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(const T &,function_record *)
process_attribute_default::init	include/pybind11/attr.h	/^    static void init(const T &, type_record *) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(const T &,type_record *)
process_attribute_default::postcall	include/pybind11/attr.h	/^    static void postcall(function_call &, handle) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(function_call &,handle)
process_attribute_default::precall	include/pybind11/attr.h	/^    static void precall(function_call &) {}$/;"	f	struct:process_attribute_default	typeref:typename:void	access:public	signature:(function_call &)
process_attributes	include/pybind11/attr.h	/^struct process_attributes {$/;"	s
process_attributes::init	include/pybind11/attr.h	/^    static void init(const Args &...args, function_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(const Args &...args,function_record * r)
process_attributes::init	include/pybind11/attr.h	/^    static void init(const Args &...args, type_record *r) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(const Args &...args,type_record * r)
process_attributes::postcall	include/pybind11/attr.h	/^    static void postcall(function_call &call, handle fn_ret) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(function_call & call,handle fn_ret)
process_attributes::precall	include/pybind11/attr.h	/^    static void precall(function_call &call) {$/;"	f	struct:process_attributes	typeref:typename:void	access:public	signature:(function_call & call)
project	docs/conf.py	/^project = "pybind11"$/;"	v	access:public
properties	docs/classes.rst	/^.. _properties:$/;"	T	chapter:Binding lambda functions
props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<MapType>;$/;"	t	struct:eigen_map_caster	typeref:typename:EigenProps<MapType>	access:private
props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Matrix>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Matrix>	access:protected
props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Type>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Type>	access:private
props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Type>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Type>	access:public
pseudoxml	docs/Makefile	/^pseudoxml:$/;"	t
ptr	include/pybind11/buffer_info.h	/^    void *ptr = nullptr;          \/\/ Pointer to the underlying storage$/;"	m	struct:buffer_info	typeref:typename:void *	access:public
ptr	include/pybind11/numpy.h	/^        Py_intptr_t *ptr;$/;"	m	struct:npy_api::PyArray_Dims	typeref:typename:Py_intptr_t *	access:public
ptr	include/pybind11/pytypes.h	/^    PyObject *&ptr() { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject * &	access:public	signature:()
ptr	include/pybind11/pytypes.h	/^    PyObject **ptr;$/;"	m	class:sequence_fast_readonly	typeref:typename:PyObject **	access:private
ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return get_cache().ptr(); }$/;"	f	class:accessor	typeref:typename:PyObject *	access:public	signature:() const
ptr	include/pybind11/pytypes.h	/^    PyObject *ptr() const { return m_ptr; }$/;"	f	class:handle	typeref:typename:PyObject *	access:public	signature:() const
ptr	tests/test_class.cpp	/^        std::uintptr_t ptr() const { return (uintptr_t) this; }$/;"	f	struct:TEST_SUBMODULE::Aligned	typeref:typename:std::uintptr_t	file:	access:public	signature:() const
ptr	tests/test_smart_ptr.cpp	/^    std::unique_ptr<T> ptr;$/;"	m	class:__anond975f9d30111::huge_unique_ptr	typeref:typename:std::unique_ptr<T>	file:	access:private
ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonRefIterator	typeref:typename:const T *	file:	access:private
ptr_	tests/test_sequences_and_iterators.cpp	/^    const T *ptr_;$/;"	m	class:NonZeroIterator	typeref:typename:const T *	file:	access:private
pure_compile_tests_for_handle_from_PyObject_pointers	tests/test_pytypes.cpp	/^void pure_compile_tests_for_handle_from_PyObject_pointers() {$/;"	f	typeref:typename:void	signature:()
pure_virtual	tests/test_virtual_functions.cpp	/^    virtual void pure_virtual() = 0;$/;"	p	class:ExampleVirt	typeref:typename:void	file:	access:public	signature:()
pure_virtual	tests/test_virtual_functions.cpp	/^    void pure_virtual() override {$/;"	f	class:PyExampleVirt	typeref:typename:void	file:	access:public	signature:()
pure_virtual	tests/test_virtual_functions.py	/^        def pure_virtual(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
pure_virtual_func	tests/test_gil_scoped.cpp	/^    virtual void pure_virtual_func() = 0;$/;"	p	class:VirtClass	typeref:typename:void	file:	access:public	signature:()
pure_virtual_func	tests/test_gil_scoped.cpp	/^    void pure_virtual_func() override {$/;"	f	class:PyVirtClass	typeref:typename:void	file:	access:private	signature:()
pure_virtual_func	tests/test_gil_scoped.py	/^    def pure_virtual_func(self):$/;"	m	class:ExtendedVirtClass	access:public	signature:(self)
purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrowr"; }$/;"	f	struct:Cat	typeref:typename:std::string	file:	access:public	signature:() const
purr	tests/test_tagbased_polymorphic.cpp	/^    std::string purr() const { return "mrrrRRRRRR"; }$/;"	f	struct:Panther	typeref:typename:std::string	file:	access:public	signature:() const
py	tests/test_custom_type_casters.cpp	/^namespace py {}$/;"	n	namespace:other_lib	file:
py::finalize_interpreter	tests/test_embed/test_interpreter.cpp	/^    py::finalize_interpreter();$/;"	p	class:py	file:	signature:()
py::globals	tests/test_embed/test_interpreter.cpp	/^             py::globals(),$/;"	p	class:py	typeref:typename:py::exec ("__dict__",,locals)	file:	signature:()
py::globals	tests/test_embed/test_interpreter.cpp	/^             py::globals(),$/;"	p	class:py	typeref:typename:py::exec ("not set",,locals)	file:	signature:()
py::globals	tests/test_embed/test_interpreter.cpp	/^    REQUIRE(py::globals()["var"]["number"].cast<int>() == 42);$/;"	p	class:py	typeref:typename:REQUIRE (["var"]["number"].cast<int> ()==42)	file:	signature:()
py::initialize_interpreter	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_THROWS_WITH(py::initialize_interpreter(), "The interpreter is already running");$/;"	p	class:py	typeref:typename:REQUIRE_THROWS_WITH (,"The interpreter is already running")	file:	signature:()
py::initialize_interpreter	tests/test_embed/test_interpreter.cpp	/^    py::initialize_interpreter();$/;"	p	class:py	file:	signature:()
py::scoped_interpreter	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_THROWS_WITH(py::scoped_interpreter(), "The interpreter is already running");$/;"	p	class:py	typeref:typename:REQUIRE_THROWS_WITH (,"The interpreter is already running")	file:	signature:()
py_cast_VectorOwner_ptr	tests/test_vector_unique_ptr_member.cpp	/^py::object py_cast_VectorOwner_ptr(VectorOwner *ptr) { return py::cast(ptr); }$/;"	f	typeref:typename:py::object	signature:(VectorOwner * ptr)
py_files	tests/extra_python_package/test_files.py	/^py_files = {$/;"	v	access:public
py_module	tests/test_embed/test_interpreter.cpp	/^    auto py_module = py::module_::import("test_interpreter");$/;"	v	typeref:typename:auto
py_type	include/pybind11/cast.h	/^    using py_type = conditional_t<std::is_floating_point<T>::value, double, _py_type_1>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_floating_point<T>::value,double,_py_type_1>	access:public
py_widget	tests/test_embed/test_interpreter.cpp	/^        auto py_widget = module.attr("DerivedWidget")("The question");$/;"	v	typeref:typename:auto
py_widget	tests/test_embed/test_interpreter.cpp	/^    auto py_widget = module_.attr("DerivedWidget")("The question");$/;"	v	typeref:typename:auto
py_widget	tests/test_embed/test_interpreter.cpp	/^    auto py_widget = py_module.attr("DerivedWidget")("Hello after restart");$/;"	v	typeref:typename:auto
pybind11	CMakeLists.txt	/^  pybind11$/;"	p
pybind11	tests/test_numpy_array.cpp	/^    py::dtype pybind11{};$/;"	m	struct:DtypeCheck	typeref:typename:py::dtype	file:	access:public
pybind11	tests/test_stl_binders.cpp	/^namespace pybind11 {$/;"	n	file:
pybind11	tests/test_vector_unique_ptr_member.cpp	/^namespace pybind11 {$/;"	n	file:
pybind11-mkdoc	docs/changelog.rst	/^.. _pybind11-mkdoc: https:\/\/github.com\/pybind\/pybind11-mkdoc$/;"	T	chapter:v2.6.0 (Oct 21, 2020)
pybind11-mkdoc	docs/upgrade.rst	/^.. _pybind11-mkdoc: https:\/\/github.com\/pybind\/pybind11-mkdoc$/;"	T	chapter:v2.6
pybind11::detail	tests/test_stl_binders.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
pybind11::detail	tests/test_vector_unique_ptr_member.cpp	/^namespace detail {$/;"	n	namespace:pybind11	file:
pybind11::detail::get_internals	tests/test_embed/test_interpreter.cpp	/^    pybind11::detail::get_internals();$/;"	p	class:pybind11::detail	file:	signature:()
pybind11::detail::is_copy_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_copy_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:	inherits:std::false_type
pybind11::detail::is_move_constructible	tests/test_vector_unique_ptr_member.cpp	/^struct is_move_constructible<pybind11_tests::vector_unique_ptr_member::VectorOwner>$/;"	s	namespace:pybind11::detail	file:	inherits:std::false_type
pybind11::detail::recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairMV, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
pybind11::detail::recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairVM, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
pybind11::detail::recursive_container_traits::type_to_check_recursively	tests/test_stl_binders.cpp	/^    using type_to_check_recursively = recursive_bottom;$/;"	t	struct:pybind11::detail::recursive_container_traits	typeref:typename:recursive_bottom	file:	access:public
pybind11_DEFINITIONS	tools/pybind11Config.cmake.in	/^set(pybind11_DEFINITIONS USING_pybind11)$/;"	v
pybind11_FOUND	CMakeLists.txt	/^  set(pybind11_FOUND$/;"	v
pybind11_INCLUDEDIR	CMakeLists.txt	/^    set(pybind11_INCLUDEDIR "${CMAKE_INSTALL_FULL_INCLUDEDIR}")$/;"	v
pybind11_INCLUDEDIR	CMakeLists.txt	/^    set(pybind11_INCLUDEDIR "\\$\\{PACKAGE_PREFIX_DIR\\}\/${CMAKE_INSTALL_INCLUDEDIR}")$/;"	v
pybind11_INCLUDE_DIR	CMakeLists.txt	/^set(pybind11_INCLUDE_DIR$/;"	v
pybind11_INCLUDE_DIR	tools/pybind11Config.cmake.in	/^set(pybind11_INCLUDE_DIR "@pybind11_INCLUDEDIR@")$/;"	v
pybind11_INCLUDE_DIRS	tools/pybind11Common.cmake	/^set(pybind11_INCLUDE_DIRS$/;"	v
pybind11_INCLUDE_DIRS	tools/pybind11NewTools.cmake	/^  set(pybind11_INCLUDE_DIRS$/;"	v
pybind11_INCLUDE_DIRS	tools/pybind11Tools.cmake	/^set(pybind11_INCLUDE_DIRS$/;"	v
pybind11_LIBRARY	tools/pybind11Config.cmake.in	/^set(pybind11_LIBRARY "")$/;"	v
pybind11_VERSION_TYPE	CMakeLists.txt	/^  set(pybind11_VERSION_TYPE "${CMAKE_MATCH_1}")$/;"	v
pybind11_VERSION_TYPE	tools/pybind11Config.cmake.in	/^set(pybind11_VERSION_TYPE "@pybind11_VERSION_TYPE@")$/;"	v
pybind11_add_build_test	tests/test_cmake_build/CMakeLists.txt	/^function(pybind11_add_build_test name)$/;"	f
pybind11_add_module	docs/compiling.rst	/^pybind11_add_module$/;"	s	chapter:Building with CMake
pybind11_add_module	tools/pybind11NewTools.cmake	/^function(pybind11_add_module target_name)$/;"	f
pybind11_add_module	tools/pybind11Tools.cmake	/^function(pybind11_add_module target_name)$/;"	f
pybind11_clear	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_clear(PyObject *self) {$/;"	f	typeref:typename:int	signature:(PyObject * self)
pybind11_enable_warnings	tests/CMakeLists.txt	/^function(pybind11_enable_warnings target_name)$/;"	f
pybind11_extension	tools/pybind11NewTools.cmake	/^function(pybind11_extension name)$/;"	f
pybind11_extension	tools/pybind11Tools.cmake	/^function(pybind11_extension name)$/;"	f
pybind11_fail	include/pybind11/detail/common.h	/^[[noreturn]] PYBIND11_NOINLINE void pybind11_fail(const std::string &reason) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(const std::string & reason)
pybind11_filter_tests	tests/CMakeLists.txt	/^macro(pybind11_filter_tests LISTNAME)$/;"	m
pybind11_find_import	tools/pybind11Common.cmake	/^  function(pybind11_find_import PYPI_NAME)$/;"	f
pybind11_getbuffer	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_getbuffer(PyObject *obj, Py_buffer *view, int flags) {$/;"	f	typeref:typename:int	signature:(PyObject * obj,Py_buffer * view,int flags)
pybind11_headers	CMakeLists.txt	/^  add_library(pybind11_headers INTERFACE)$/;"	t
pybind11_meta_call	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_call(PyObject *type, PyObject *args, PyObject *kwargs)/;"	f	typeref:typename:PyObject *	signature:(PyObject * type,PyObject * args,PyObject * kwargs)
pybind11_meta_dealloc	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_meta_dealloc(PyObject *obj) {$/;"	f	typeref:typename:void	signature:(PyObject * obj)
pybind11_meta_getattro	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_meta_getattro(PyObject *obj, PyObject *name) {$/;"	f	typeref:typename:PyObject *	signature:(PyObject * obj,PyObject * name)
pybind11_meta_setattro	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_meta_setattro(PyObject *obj, PyObject *name, PyObject *value) {$/;"	f	typeref:typename:int	signature:(PyObject * obj,PyObject * name,PyObject * value)
pybind11_object_dealloc	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_object_dealloc(PyObject *self) {$/;"	f	typeref:typename:void	signature:(PyObject * self)
pybind11_object_init	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_object_init(PyObject *self, PyObject *, PyObject *) {$/;"	f	typeref:typename:int	signature:(PyObject * self,PyObject *,PyObject *)
pybind11_object_new	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_object_new(PyTypeObject *type, PyObject *, PyObject *) {$/;"	f	typeref:typename:PyObject *	signature:(PyTypeObject * type,PyObject *,PyObject *)
pybind11_releasebuffer	include/pybind11/detail/class.h	/^extern "C" inline void pybind11_releasebuffer(PyObject *, Py_buffer *view) {$/;"	f	typeref:typename:void	signature:(PyObject *,Py_buffer * view)
pybind11_static_get	include/pybind11/detail/class.h	/^extern "C" inline PyObject *pybind11_static_get(PyObject *self, PyObject * \/*ob*\/, PyObject *c/;"	f	typeref:typename:PyObject *	signature:(PyObject * self,PyObject *,PyObject * cls)
pybind11_static_set	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_static_set(PyObject *self, PyObject *obj, PyObject *value) {$/;"	f	typeref:typename:int	signature:(PyObject * self,PyObject * obj,PyObject * value)
pybind11_strip	tools/pybind11Common.cmake	/^function(pybind11_strip target_name)$/;"	f
pybind11_system	CMakeLists.txt	/^  set(pybind11_system "")$/;"	v
pybind11_system	CMakeLists.txt	/^  set(pybind11_system SYSTEM)$/;"	v
pybind11_tests	tests/CMakeLists.txt	/^project(pybind11_tests CXX)$/;"	p
pybind11_tests	tests/test_methods_and_attributes.cpp	/^namespace pybind11_tests {$/;"	n	file:
pybind11_tests	tests/test_vector_unique_ptr_member.cpp	/^namespace pybind11_tests {$/;"	n	file:
pybind11_tests::exercise_is_setter	tests/test_methods_and_attributes.cpp	/^namespace exercise_is_setter {$/;"	n	namespace:pybind11_tests	file:
pybind11_tests::exercise_is_setter::Field	tests/test_methods_and_attributes.cpp	/^struct Field : FieldBase {};$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:	inherits:FieldBase
pybind11_tests::exercise_is_setter::FieldBase	tests/test_methods_and_attributes.cpp	/^struct FieldBase {$/;"	s	namespace:pybind11_tests::exercise_is_setter	file:
pybind11_tests::exercise_is_setter::FieldBase::SetIntValue	tests/test_methods_and_attributes.cpp	/^    FieldBase &SetIntValue(int int_value) {$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:FieldBase &	file:	access:public	signature:(int int_value)
pybind11_tests::exercise_is_setter::FieldBase::int_value	tests/test_methods_and_attributes.cpp	/^    int int_value() const { return int_value_; }$/;"	f	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:int	file:	access:public	signature:() const
pybind11_tests::exercise_is_setter::FieldBase::int_value_	tests/test_methods_and_attributes.cpp	/^    int int_value_ = -99;$/;"	m	struct:pybind11_tests::exercise_is_setter::FieldBase	typeref:typename:int	file:	access:private
pybind11_tests::exercise_is_setter::add_bindings	tests/test_methods_and_attributes.cpp	/^void add_bindings(py::module &m) {$/;"	f	namespace:pybind11_tests::exercise_is_setter	typeref:typename:void	signature:(py::module & m)
pybind11_tests::vector_unique_ptr_member	tests/test_vector_unique_ptr_member.cpp	/^namespace vector_unique_ptr_member {$/;"	n	namespace:pybind11_tests	file:
pybind11_tests::vector_unique_ptr_member::DataType	tests/test_vector_unique_ptr_member.cpp	/^struct DataType {};$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
pybind11_tests::vector_unique_ptr_member::VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^struct VectorOwner {$/;"	s	namespace:pybind11_tests::vector_unique_ptr_member	file:
pybind11_tests::vector_unique_ptr_member::VectorOwner::Create	tests/test_vector_unique_ptr_member.cpp	/^    static std::unique_ptr<VectorOwner> Create(std::size_t num_elems) {$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:std::unique_ptr<VectorOwner>	file:	access:public	signature:(std::size_t num_elems)
pybind11_tests::vector_unique_ptr_member::VectorOwner::VectorOwner	tests/test_vector_unique_ptr_member.cpp	/^    explicit VectorOwner(std::vector<std::unique_ptr<DataType>> data) : data_(std::move(data)) {/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	file:	access:private	signature:(std::vector<std::unique_ptr<DataType>> data)
pybind11_tests::vector_unique_ptr_member::VectorOwner::data_	tests/test_vector_unique_ptr_member.cpp	/^    const std::vector<std::unique_ptr<DataType>> data_;$/;"	m	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:const std::vector<std::unique_ptr<DataType>>	file:	access:private
pybind11_tests::vector_unique_ptr_member::VectorOwner::data_size	tests/test_vector_unique_ptr_member.cpp	/^    std::size_t data_size() const { return data_.size(); }$/;"	f	struct:pybind11_tests::vector_unique_ptr_member::VectorOwner	typeref:typename:std::size_t	file:	access:public	signature:() const
pybind11_traverse	include/pybind11/detail/class.h	/^extern "C" inline int pybind11_traverse(PyObject *self, visitproc visit, void *arg) {$/;"	f	typeref:typename:int	signature:(PyObject * self,visitproc visit,void * arg)
pycatch	tests/test_exceptions.py	/^    def pycatch(exctype, f, *args):  # noqa: ARG001$/;"	f	function:test_nested_throws	file:	access:private	signature:(exctype, f, *args)
pyflush	include/pybind11/iostream.h	/^    object pyflush;$/;"	m	class:pythonbuf	typeref:typename:object	access:private
pyi1	tests/test_embed/test_interpreter.cpp	/^        auto pyi1 = py::scoped_interpreter();$/;"	v	typeref:typename:auto
pyi2	tests/test_embed/test_interpreter.cpp	/^        auto pyi2 = std::move(pyi1);$/;"	v	typeref:typename:auto
pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value() {}$/;"	f	struct:pyobject_caster	access:public	signature:()
pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value(reinterpret_steal<type>(handle())) {}$/;"	f	struct:pyobject_caster	access:public	signature:()
pyobject_caster	include/pybind11/cast.h	/^struct pyobject_caster {$/;"	s
pyobject_caster	include/pybind11/numpy.h	/^struct pyobject_caster<array_t<T, ExtraFlags>> {$/;"	s
pyobject_caster::PYBIND11_TYPE_CASTER	include/pybind11/cast.h	/^    PYBIND11_TYPE_CASTER(type, handle_type_name<type>::name);$/;"	p	struct:pyobject_caster	access:public	signature:(type,handle_type_name<type>::name)
pyobject_caster::PYBIND11_TYPE_CASTER	include/pybind11/numpy.h	/^    PYBIND11_TYPE_CASTER(type, handle_type_name<type>::name);$/;"	p	struct:pyobject_caster	access:public	signature:(type,handle_type_name<type>::name)
pyobject_caster::cast	include/pybind11/cast.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle	access:public	signature:(const handle & src,return_value_policy,handle)
pyobject_caster::cast	include/pybind11/numpy.h	/^    static handle cast(const handle &src, return_value_policy \/* policy *\/, handle \/* parent /;"	f	struct:pyobject_caster	typeref:typename:handle	access:public	signature:(const handle & src,return_value_policy,handle)
pyobject_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool \/* convert *\/) {$/;"	f	struct:pyobject_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
pyobject_caster::load	include/pybind11/numpy.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:pyobject_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
pyobject_caster::pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value() {}$/;"	f	struct:pyobject_caster	access:public	signature:()
pyobject_caster::pyobject_caster	include/pybind11/cast.h	/^    pyobject_caster() : value(reinterpret_steal<type>(handle())) {}$/;"	f	struct:pyobject_caster	access:public	signature:()
pyobject_caster::type	include/pybind11/numpy.h	/^    using type = array_t<T, ExtraFlags>;$/;"	t	struct:pyobject_caster	typeref:typename:array_t<T,ExtraFlags>	access:public
pyobject_tag	include/pybind11/pytypes.h	/^class pyobject_tag {};$/;"	c
pypa-build	docs/compiling.rst	/^.. _pypa-build: https:\/\/pypa-build.readthedocs.io\/en\/latest\/$/;"	T	section:PEP 518 requirements (Pip 10+ required)
pytest	tests/CMakeLists.txt	/^  pytest$/;"	t
pytest	tests/pytest.ini	/^[pytest]$/;"	s
pytest_assertrepr_compare	tests/conftest.py	/^def pytest_assertrepr_compare(op, left, right):  # noqa: ARG001$/;"	f	access:public	signature:(op, left, right)
pytest_configure	tests/conftest.py	/^def pytest_configure():$/;"	f	access:public	signature:()
pytest_report_header	tests/conftest.py	/^def pytest_report_header(config):$/;"	f	access:public	signature:(config)
python_example	docs/basics.rst	/^.. _python_example: https:\/\/github.com\/pybind\/python_example$/;"	T	chapter:Creating bindings for a simple function
python_example	docs/compiling.rst	/^.. [python_example] https:\/\/github.com\/pybind\/python_example$/;"	C	chapter:Building with setuptools
python_libs	docs/advanced/pycpp/object.rst	/^.. _python_libs:$/;"	T	chapter:Casting back and forth
python_objects_as_args	docs/advanced/functions.rst	/^.. _python_objects_as_args:$/;"	T	section:Call guard
pythonbuf	include/pybind11/iostream.h	/^    explicit pythonbuf(const object &pyostream, size_t buffer_size = 1024)$/;"	f	class:pythonbuf	access:public	signature:(const object & pyostream,size_t buffer_size=1024)
pythonbuf	include/pybind11/iostream.h	/^    pythonbuf(pythonbuf &&) = default;$/;"	p	class:pythonbuf	access:public	signature:(pythonbuf &&)
pythonbuf	include/pybind11/iostream.h	/^class pythonbuf : public std::streambuf {$/;"	c	inherits:std::streambuf
pythonbuf::_sync	include/pybind11/iostream.h	/^    int _sync() {$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:()
pythonbuf::buf_size	include/pybind11/iostream.h	/^    const size_t buf_size;$/;"	m	class:pythonbuf	typeref:typename:const size_t	access:private
pythonbuf::d_buffer	include/pybind11/iostream.h	/^    std::unique_ptr<char[]> d_buffer;$/;"	m	class:pythonbuf	typeref:typename:std::unique_ptr<char[]>	access:private
pythonbuf::overflow	include/pybind11/iostream.h	/^    int overflow(int c) override {$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:(int c)
pythonbuf::pyflush	include/pybind11/iostream.h	/^    object pyflush;$/;"	m	class:pythonbuf	typeref:typename:object	access:private
pythonbuf::pythonbuf	include/pybind11/iostream.h	/^    explicit pythonbuf(const object &pyostream, size_t buffer_size = 1024)$/;"	f	class:pythonbuf	access:public	signature:(const object & pyostream,size_t buffer_size=1024)
pythonbuf::pythonbuf	include/pybind11/iostream.h	/^    pythonbuf(pythonbuf &&) = default;$/;"	p	class:pythonbuf	access:public	signature:(pythonbuf &&)
pythonbuf::pywrite	include/pybind11/iostream.h	/^    object pywrite;$/;"	m	class:pythonbuf	typeref:typename:object	access:private
pythonbuf::sync	include/pybind11/iostream.h	/^    int sync() override { return _sync(); }$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:()
pythonbuf::traits_type	include/pybind11/iostream.h	/^    using traits_type = std::streambuf::traits_type;$/;"	t	class:pythonbuf	typeref:typename:std::streambuf::traits_type	access:private
pythonbuf::utf8_remainder	include/pybind11/iostream.h	/^    size_t utf8_remainder() const {$/;"	f	class:pythonbuf	typeref:typename:size_t	access:private	signature:() const
pythonbuf::~pythonbuf	include/pybind11/iostream.h	/^    ~pythonbuf() override { _sync(); }$/;"	f	class:pythonbuf	access:public	signature:()
pytypes_gotchas	docs/advanced/pycpp/object.rst	/^.. _pytypes_gotchas:$/;"	T	chapter:Handling exceptions
pywrite	include/pybind11/iostream.h	/^    object pywrite;$/;"	m	class:pythonbuf	typeref:typename:object	access:private
qthelp	docs/Makefile	/^qthelp:$/;"	t
raise_err	include/pybind11/detail/internals.h	/^inline bool raise_err(PyObject *exc_type, const char *msg) {$/;"	f	typeref:typename:bool	signature:(PyObject * exc_type,const char * msg)
raise_from	include/pybind11/pytypes.h	/^inline void raise_from(PyObject *type, const char *message) {$/;"	f	typeref:typename:void	signature:(PyObject * type,const char * message)
raise_from	include/pybind11/pytypes.h	/^inline void raise_from(error_already_set &err, PyObject *type, const char *message) {$/;"	f	typeref:typename:void	signature:(error_already_set & err,PyObject * type,const char * message)
ran	tests/test_embed/test_interpreter.cpp	/^    bool ran = false;$/;"	v	typeref:typename:bool
raw_array	include/pybind11/numpy.h	/^    static PyObject *raw_array(PyObject *ptr, int ExtraFlags = 0) {$/;"	f	class:array	typeref:typename:PyObject *	access:protected	signature:(PyObject * ptr,int ExtraFlags=0)
raw_array_t	include/pybind11/numpy.h	/^    static PyObject *raw_array_t(PyObject *ptr) {$/;"	f	class:array_t	typeref:typename:PyObject *	access:protected	signature:(PyObject * ptr)
raw_bool	include/pybind11/pytypes.h	/^    static PyObject *raw_bool(PyObject *op) {$/;"	f	class:bool_	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
raw_dict	include/pybind11/pytypes.h	/^    static PyObject *raw_dict(PyObject *op) {$/;"	f	class:dict	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
raw_str	include/pybind11/pytypes.h	/^    static PyObject *raw_str(PyObject *op) {$/;"	f	class:str	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
raw_weakref	include/pybind11/pytypes.h	/^    static PyObject *raw_weakref(PyObject *o) { return PyWeakref_NewRef(o, nullptr); }$/;"	f	class:weakref	typeref:typename:PyObject *	access:private	signature:(PyObject * o)
read_tz_file	tests/extra_python_package/test_files.py	/^def read_tz_file(tar: tarfile.TarFile, name: str) -> bytes:$/;"	f	typeref:typename:bytes	access:public	signature:(tar: tarfile.TarFile, name: str)
readonly	include/pybind11/buffer_info.h	/^    bool readonly = false;        \/\/ flag to indicate if the underlying storage may be written/;"	m	struct:buffer_info	typeref:typename:bool	access:public
readonly	tests/test_buffers.cpp	/^        bool readonly = false;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:bool	file:	access:public
recursive_bottom	include/pybind11/detail/type_caster_base.h	/^struct recursive_bottom {};$/;"	s
recursive_container_traits	include/pybind11/detail/type_caster_base.h	/^struct recursive_container_traits : impl_recursive_container_traits<Container> {};$/;"	s	inherits:impl_recursive_container_traits<Container>
recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairMV, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
recursive_container_traits	tests/test_stl_binders.cpp	/^struct recursive_container_traits<MutuallyRecursiveContainerPairVM, SFINAE> {$/;"	s	namespace:pybind11::detail	file:
redirect_stderr	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_estream_redirect> redirect_stderr;$/;"	m	class:OstreamRedirect	typeref:typename:std::unique_ptr<scoped_estream_redirect>	access:private
redirect_stdout	include/pybind11/iostream.h	/^    std::unique_ptr<scoped_ostream_redirect> redirect_stdout;$/;"	m	class:OstreamRedirect	typeref:typename:std::unique_ptr<scoped_ostream_redirect>	access:private
ref	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<Type> ref;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<Type>	access:private
ref	tests/object.h	/^    explicit ref(T *ptr) : m_ptr(ptr) {$/;"	f	class:ref	access:public	signature:(T * ptr)
ref	tests/object.h	/^    ref() : m_ptr(nullptr) {$/;"	f	class:ref	access:public	signature:()
ref	tests/object.h	/^    ref(const ref &r) : m_ptr(r.m_ptr) {$/;"	f	class:ref	access:public	signature:(const ref & r)
ref	tests/object.h	/^    ref(ref &&r) noexcept : m_ptr(r.m_ptr) {$/;"	f	class:ref	access:public	signature:(ref && r)
ref	tests/object.h	/^class ref {$/;"	c
ref	tests/test_eigen_matrix.cpp	/^        Eigen::Ref<Eigen::MatrixXd> ref() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Ref<Eigen::MatrixXd>	file:	access:public	signature:()
ref	tests/test_eigen_matrix.py	/^ref = np.array($/;"	v	access:public
ref::get_ptr	tests/object.h	/^    T *get_ptr() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *	access:public	signature:()
ref::get_ptr	tests/object.h	/^    const T *get_ptr() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *	access:public	signature:() const
ref::m_ptr	tests/object.h	/^    T *m_ptr;$/;"	m	class:ref	typeref:typename:T *	access:private
ref::operator !=	tests/object.h	/^    bool operator!=(const T *ptr) const { return m_ptr != ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const T * ptr) const
ref::operator !=	tests/object.h	/^    bool operator!=(const ref &r) const { return m_ptr != r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const ref & r) const
ref::operator *	tests/object.h	/^    T &operator*() { return *m_ptr; }$/;"	f	class:ref	typeref:typename:T &	access:public	signature:()
ref::operator *	tests/object.h	/^    const T &operator*() const { return *m_ptr; }$/;"	f	class:ref	typeref:typename:const T &	access:public	signature:() const
ref::operator ->	tests/object.h	/^    T *operator->() { return m_ptr; }$/;"	f	class:ref	typeref:typename:T *	access:public	signature:()
ref::operator ->	tests/object.h	/^    const T *operator->() const { return m_ptr; }$/;"	f	class:ref	typeref:typename:const T *	access:public	signature:() const
ref::operator =	tests/object.h	/^    ref &operator=(T *ptr) {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(T * ptr)
ref::operator =	tests/object.h	/^    ref &operator=(const ref &r) {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(const ref & r)
ref::operator =	tests/object.h	/^    ref &operator=(ref &&r) noexcept {$/;"	f	class:ref	typeref:typename:ref &	access:public	signature:(ref && r)
ref::operator ==	tests/object.h	/^    bool operator==(const T *ptr) const { return m_ptr == ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const T * ptr) const
ref::operator ==	tests/object.h	/^    bool operator==(const ref &r) const { return m_ptr == r.m_ptr; }$/;"	f	class:ref	typeref:typename:bool	access:public	signature:(const ref & r) const
ref::operator T*	tests/object.h	/^    explicit operator T *() { return m_ptr; }$/;"	f	class:ref	access:public	signature:()
ref::ref	tests/object.h	/^    explicit ref(T *ptr) : m_ptr(ptr) {$/;"	f	class:ref	access:public	signature:(T * ptr)
ref::ref	tests/object.h	/^    ref() : m_ptr(nullptr) {$/;"	f	class:ref	access:public	signature:()
ref::ref	tests/object.h	/^    ref(const ref &r) : m_ptr(r.m_ptr) {$/;"	f	class:ref	access:public	signature:(const ref & r)
ref::ref	tests/object.h	/^    ref(ref &&r) noexcept : m_ptr(r.m_ptr) {$/;"	f	class:ref	access:public	signature:(ref && r)
ref::~ref	tests/object.h	/^    ~ref() {$/;"	f	class:ref	access:public	signature:()
refConst	tests/test_eigen_matrix.cpp	/^        Eigen::Ref<const Eigen::MatrixXd> refConst() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:Eigen::Ref<const Eigen::MatrixXd>	file:	access:public	signature:()
refQualified	tests/test_methods_and_attributes.cpp	/^    void refQualified(int other) & { value += other; }$/;"	f	struct:RefQualified	typeref:typename:void	file:	access:public	signature:(int other)
ref_count	include/pybind11/pytypes.h	/^    int ref_count() const { return static_cast<int>(Py_REFCNT(derived().ptr())); }$/;"	f	class:object_api	typeref:typename:int	access:public	signature:() const
ref_tag	tests/object.h	/^class ref_tag {};$/;"	c
reference	docs/reference.rst	/^.. _reference:$/;"	T
reference	include/pybind11/detail/common.h	/^    reference,$/;"	e	enum:return_value_policy	access:public
reference	include/pybind11/pytypes.h	/^    using reference = const handle; \/\/ PR #3263$/;"	t	class:iterator	typeref:typename:const handle	access:public
reference	include/pybind11/pytypes.h	/^    using reference = const handle; \/\/ PR #3263$/;"	t	class:sequence_fast_readonly	typeref:typename:const handle	access:protected
reference	include/pybind11/pytypes.h	/^    using reference = const value_type; \/\/ PR #3263$/;"	t	class:dict_readonly	typeref:typename:const value_type	access:protected
reference	include/pybind11/pytypes.h	/^    using reference = sequence_accessor;$/;"	t	class:sequence_slow_readwrite	typeref:typename:sequence_accessor	access:protected
reference	include/pybind11/pytypes.h	/^    using reference = typename Policy::reference;$/;"	t	class:generic_iterator	typeref:typename:Policy::reference	access:public
reference_internal	include/pybind11/detail/common.h	/^    reference_internal$/;"	e	enum:return_value_policy	access:public
reference_t	include/pybind11/cast.h	/^    using reference_t = type &;$/;"	t	class:type_caster	typeref:typename:type &	access:private
refsensitive_opt_int	tests/test_stl.cpp	/^    using refsensitive_opt_int = ReferenceSensitiveOptional<int>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:ReferenceSensitiveOptional<int>	file:
refsensitive_opt_no_assign	tests/test_stl.cpp	/^    using refsensitive_opt_no_assign = ReferenceSensitiveOptional<NoAssign>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:ReferenceSensitiveOptional<NoAssign>	file:
regexp	.github/matchers/pylint.json	/^          "regexp": "^([^:]+):(\\\\d+):(\\\\d+): (E\\\\d+): \\\\033\\\\[[\\\\d;]+m([^\\\\033]+)./;"	s	object:problemMatcher.1.pattern.0
regexp	.github/matchers/pylint.json	/^          "regexp": "^([^:]+):(\\\\d+):(\\\\d+): ([A-DF-Z]\\\\d+): \\\\033\\\\[[\\\\d;]+m([^\\\\/;"	s	object:problemMatcher.0.pattern.0
register_dtype	include/pybind11/numpy.h	/^    static void register_dtype(any_container<field_descriptor> fields) {$/;"	f	struct:npy_format_descriptor	typeref:typename:void	access:public	signature:(any_container<field_descriptor> fields)
register_exception_impl	include/pybind11/pybind11.h	/^register_exception_impl(handle scope, const char *name, handle base, bool isLocal) {$/;"	f	typeref:typename:exception<CppException> &	signature:(handle scope,const char * name,handle base,bool isLocal)
register_exception_translator	include/pybind11/pybind11.h	/^inline void register_exception_translator(ExceptionTranslator &&translator) {$/;"	f	typeref:typename:void	signature:(ExceptionTranslator && translator)
register_instance	include/pybind11/detail/class.h	/^inline void register_instance(instance *self, void *valptr, const type_info *tinfo) {$/;"	f	typeref:typename:void	signature:(instance * self,void * valptr,const type_info * tinfo)
register_instance_impl	include/pybind11/detail/class.h	/^inline bool register_instance_impl(void *ptr, instance *self) {$/;"	f	typeref:typename:bool	signature:(void * ptr,instance * self)
register_local_exception	include/pybind11/pybind11.h	/^register_local_exception(handle scope, const char *name, handle base = PyExc_Exception) {$/;"	f	typeref:typename:exception<CppException> &	signature:(handle scope,const char * name,handle base=PyExc_Exception)
register_local_exception_translator	include/pybind11/pybind11.h	/^inline void register_local_exception_translator(ExceptionTranslator &&translator) {$/;"	f	typeref:typename:void	signature:(ExceptionTranslator && translator)
register_structured_dtype	include/pybind11/numpy.h	/^PYBIND11_NOINLINE void register_structured_dtype(any_container<field_descriptor> fields,$/;"	f	typeref:typename:PYBIND11_NOINLINE void	signature:(any_container<field_descriptor> fields,const std::type_info & tinfo,ssize_t itemsize,bool (* direct_converter)(PyObject *,void * &))
registered_dtypes	include/pybind11/numpy.h	/^    std::unordered_map<std::type_index, numpy_type_info> registered_dtypes;$/;"	m	struct:numpy_internals	typeref:typename:std::unordered_map<std::type_index,numpy_type_info>	access:public
registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:internals	typeref:typename:std::forward_list<ExceptionTranslator>	access:public
registered_exception_translators	include/pybind11/detail/internals.h	/^    std::forward_list<ExceptionTranslator> registered_exception_translators;$/;"	m	struct:local_internals	typeref:typename:std::forward_list<ExceptionTranslator>	access:public
registered_instances	include/pybind11/detail/internals.h	/^    std::unordered_multimap<const void *, instance *> registered_instances; \/\/ void * -> insta/;"	m	struct:internals	typeref:typename:std::unordered_multimap<const void *,instance * >	access:public
registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:internals	typeref:typename:type_map<type_info * >	access:public
registered_types_cpp	include/pybind11/detail/internals.h	/^    type_map<type_info *> registered_types_cpp;$/;"	m	struct:local_internals	typeref:typename:type_map<type_info * >	access:public
registered_types_py	include/pybind11/detail/internals.h	/^    std::unordered_map<PyTypeObject *, std::vector<type_info *>> registered_types_py;$/;"	m	struct:internals	typeref:typename:std::unordered_map<PyTypeObject *,std::vector<type_info * >>	access:public
reinterpret_borrow	include/pybind11/pytypes.h	/^T reinterpret_borrow(handle h) {$/;"	f	typeref:typename:T	signature:(handle h)
reinterpret_steal	include/pybind11/pytypes.h	/^T reinterpret_steal(handle h) {$/;"	f	typeref:typename:T	signature:(handle h)
release	include/pybind11/gil.h	/^    bool release = true;$/;"	m	class:gil_scoped_acquire	typeref:typename:bool	access:private
release	include/pybind11/pybind11.h	/^        void release() { strings.clear(); }$/;"	f	class:cpp_function::strdup_guard	typeref:typename:void	access:public	signature:()
release	include/pybind11/pytypes.h	/^    handle release() {$/;"	f	class:object	typeref:typename:handle	access:public	signature:()
release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anond975f9d30111::custom_unique_ptr	typeref:typename:T *	file:	access:public	signature:()
release_ptr	tests/test_smart_ptr.cpp	/^    T *release_ptr() { return impl.release(); }$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	typeref:typename:T *	file:	access:public	signature:()
reload	include/pybind11/pybind11.h	/^    void reload() {$/;"	f	class:module_	typeref:typename:void	access:public	signature:()
reload	tests/test_embed/test_interpreter.cpp	/^    module_.reload();$/;"	p	typeref:typename:module_.	file:	signature:()
remove_all_extents_t	include/pybind11/numpy.h	/^using remove_all_extents_t = typename array_info<T>::type;$/;"	t	typeref:typename:array_info<T>::type
remove_class	include/pybind11/detail/common.h	/^struct remove_class {};$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) const noexcept> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) const> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...) noexcept> {$/;"	s
remove_class	include/pybind11/detail/common.h	/^struct remove_class<R (C::*)(A...)> {$/;"	s
remove_class::type	include/pybind11/detail/common.h	/^    using type = R(A...);$/;"	t	struct:remove_class	access:public
remove_cv_t	include/pybind11/detail/common.h	/^using remove_cv_t = typename std::remove_cv<T>::type;$/;"	t	typeref:typename:std::remove_cv<T>::type
remove_cvref	include/pybind11/detail/common.h	/^struct remove_cvref {$/;"	s
remove_cvref::type	include/pybind11/detail/common.h	/^    using type = remove_cv_t<remove_reference_t<T>>;$/;"	t	struct:remove_cvref	typeref:typename:remove_cv_t<remove_reference_t<T>>	access:public
remove_cvref_t	include/pybind11/detail/common.h	/^using remove_cvref_t = typename remove_cvref<T>::type;$/;"	t	typeref:typename:remove_cvref<T>::type
remove_output	setup.py	/^def remove_output(*sources: str) -> Iterator[None]:$/;"	f	typeref:typename:Iterator[None]	access:public	signature:(*sources: str)
remove_reference_t	include/pybind11/detail/common.h	/^using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	typeref:typename:std::remove_reference<T>::type
rep	include/pybind11/chrono.h	/^    using rep = typename type::rep;$/;"	t	class:duration_caster	typeref:typename:type::rep	access:public
report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:CustomGuard	typeref:typename:const char *	file:	access:public	signature:()
report_status	tests/test_call_policies.cpp	/^    static const char *report_status() { return enabled ? "guarded" : "unguarded"; }$/;"	f	struct:DependentGuard	typeref:typename:const char *	file:	access:public	signature:()
repr	include/pybind11/pytypes.h	/^inline str repr(handle h) {$/;"	f	typeref:typename:str	signature:(handle h)
require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_bool_caster	file:	access:private	signature:(v)
require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_numpy_int_convert	file:	access:private	signature:(v)
require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<!R, size_t> size) {$/;"	f	struct:array_caster	typeref:typename:bool	access:private	signature:(enable_if_t<!R,size_t> size)
require_size	include/pybind11/stl.h	/^    bool require_size(enable_if_t<R, size_t> size) {$/;"	f	struct:array_caster	typeref:typename:bool	access:private	signature:(enable_if_t<R,size_t> size)
requires_col_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_col_major$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
requires_conversion	tests/test_builtin_casters.py	/^    def requires_conversion(v):$/;"	f	function:test_int_convert	file:	access:private	signature:(v)
requires_row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool requires_row_major$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &, void *) {}$/;"	f	struct:set_caster	typeref:typename:void	access:private	signature:(const anyset &,void *)
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &s, Type *) {$/;"	f	struct:set_caster	typeref:typename:void	access:private	signature:(const anyset & s,Type *)
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &, void *) {}$/;"	f	struct:map_caster	typeref:typename:void	access:private	signature:(const dict &,void *)
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const dict &d, Type *) {$/;"	f	struct:map_caster	typeref:typename:void	access:private	signature:(const dict & d,Type *)
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &, void *) {}$/;"	f	struct:list_caster	typeref:typename:void	access:private	signature:(const sequence &,void *)
reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const sequence &s, Type *) {$/;"	f	struct:list_caster	typeref:typename:void	access:private	signature:(const sequence & s,Type *)
reset_dont_write_bytecode	tests/test_embed/test_interpreter.cpp	/^    scope_exit reset_dont_write_bytecode($/;"	v	typeref:typename:scope_exit
reset_ref	tests/test_eigen_matrix.cpp	/^void reset_ref(M &x) {$/;"	f	typeref:typename:void	signature:(M & x)
reset_refs	tests/test_eigen_matrix.cpp	/^void reset_refs() {$/;"	f	typeref:typename:void	signature:()
reset_tensor	tests/test_eigen_tensor.inl	/^void reset_tensor(M &x) {$/;"	f	typeref:typename:PYBIND11_WARNING_DISABLE_MSVC (4127)void	signature:(M & x)
reshape	include/pybind11/numpy.h	/^    array reshape(ShapeContainer new_shape) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(ShapeContainer new_shape)
resize	include/pybind11/numpy.h	/^    void resize(ShapeContainer new_shape, bool refcheck = true) {$/;"	f	class:array	typeref:typename:void	access:public	signature:(ShapeContainer new_shape,bool refcheck=true)
restore	include/pybind11/pytypes.h	/^    void restore() { m_fetched_error->restore(); }$/;"	f	class:error_already_set	typeref:typename:void	access:public	signature:()
restore	include/pybind11/pytypes.h	/^    void restore() {$/;"	f	struct:error_fetch_and_normalize	typeref:typename:void	access:public	signature:()
result	tests/test_embed/test_interpreter.cpp	/^    int result = module_.attr("test")().cast<int>();$/;"	v	typeref:typename:int
result_type	include/pybind11/pybind11.h	/^    using result_type = decltype(*std::declval<Iterator &>());$/;"	t	struct:iterator_access	access:public
result_type	include/pybind11/pybind11.h	/^    using result_type$/;"	t	class:iterator_key_access	access:public
result_type	include/pybind11/pybind11.h	/^    using result_type$/;"	t	class:iterator_value_access	access:public
result_type	include/pybind11/stl.h	/^    using result_type = handle; \/\/ required by boost::variant in C++11$/;"	t	struct:variant_caster_visitor	typeref:typename:handle	access:public
result_type	tests/test_stl.cpp	/^        using result_type = const char *;$/;"	t	struct:TEST_SUBMODULE::visitor	typeref:typename:const char *	file:	access:public
ret	tests/test_embed/test_interpreter.cpp	/^        int ret = p_obj->func();$/;"	v	typeref:typename:int
returnChild	tests/test_call_policies.cpp	/^        Child *returnChild() { return new Child(); }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:()
returnNullChild	tests/test_call_policies.cpp	/^        Child *returnNullChild() { return nullptr; }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:()
return_bytes	tests/test_constants_and_functions.cpp	/^py::bytes return_bytes() {$/;"	f	typeref:typename:py::bytes	signature:()
return_value_policies	docs/advanced/functions.rst	/^.. _return_value_policies:$/;"	T	title:Functions
return_value_policy	include/pybind11/detail/common.h	/^enum class return_value_policy : uint8_t {$/;"	g	typeref:typename:uint8_t
return_value_policy_override	include/pybind11/cast.h	/^struct return_value_policy_override {$/;"	s
return_value_policy_override	include/pybind11/cast.h	/^struct return_value_policy_override<$/;"	s
return_value_policy_override::policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) { return p; }$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy	access:public	signature:(return_value_policy p)
return_value_policy_override::policy	include/pybind11/cast.h	/^    static return_value_policy policy(return_value_policy p) {$/;"	f	struct:return_value_policy_override	typeref:typename:return_value_policy	access:public	signature:(return_value_policy p)
returned_array	include/pybind11/numpy.h	/^    using returned_array = vectorize_returned_array<Func, Return, Args...>;$/;"	t	struct:vectorize_helper	typeref:typename:vectorize_returned_array<Func,Return,Args...>	access:private
retval_type	include/pybind11/functional.h	/^    using retval_type = conditional_t<std::is_same<Return, void>::value, void_type, Return>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_same<Return,void>::value,void_type,Return>	access:public
reversed	tests/test_sequences_and_iterators.cpp	/^        Sequence reversed() const {$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:Sequence	file:	access:public	signature:() const
rich_compare	include/pybind11/pytypes.h	/^    bool rich_compare(object_api const &other, int value) const;$/;"	p	class:object_api	typeref:typename:bool	access:private	signature:(object_api const & other,int value) const
rich_compare	include/pybind11/pytypes.h	/^bool object_api<D>::rich_compare(object_api const &other, int value) const {$/;"	f	class:object_api	typeref:typename:bool	signature:(object_api const & other,int value) const
ro_value	tests/test_methods_and_attributes.cpp	/^    double ro_value = 1.25;$/;"	m	class:UnregisteredBase	typeref:typename:double	file:	access:public
robotpy-build	docs/compiling.rst	/^.. [robotpy-build] https:\/\/robotpy-build.readthedocs.io$/;"	C	chapter:Generating binding code automatically
rowMajor	include/pybind11/eigen/matrix.h	/^    static constexpr bool rowMajor = Type::IsRowMajor;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
row_major	include/pybind11/eigen/matrix.h	/^    static constexpr bool row_major = Type::IsRowMajor,$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
rows	include/pybind11/eigen/matrix.h	/^    EigenIndex rows = 0, cols = 0;$/;"	m	struct:EigenConformable	typeref:typename:EigenIndex	access:public
rows	include/pybind11/eigen/matrix.h	/^    static constexpr EigenIndex rows = Type::RowsAtCompileTime, cols = Type::ColsAtCompileTime,$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
rows	tests/test_buffers.cpp	/^        py::ssize_t rows() const { return m_rows; }$/;"	f	class:TEST_SUBMODULE::Matrix	typeref:typename:py::ssize_t	file:	access:public	signature:() const
run	include/pybind11/numpy.h	/^    object run(typename vectorize_arg<Args>::type &...args,$/;"	f	struct:vectorize_helper	typeref:typename:object	access:private	signature:(typename vectorize_arg<Args>::type &...args,index_sequence<Index...> i_seq,index_sequence<VIndex...> vi_seq,index_sequence<BIndex...> bi_seq)
run	tests/test_thread.py	/^    def run(self):$/;"	m	class:Thread	access:public	signature:(self)
run	tests/test_virtual_functions.cpp	/^    int run(int value) override {$/;"	f	class:PyExampleVirt	typeref:typename:int	file:	access:public	signature:(int value)
run	tests/test_virtual_functions.cpp	/^    virtual int run(int value) {$/;"	f	class:ExampleVirt	typeref:typename:int	file:	access:public	signature:(int value)
run	tests/test_virtual_functions.py	/^        def run(self, value):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self, value)
run	tools/codespell_ignore_lines_from_errors.py	/^def run(args: List[str]) -> None:$/;"	f	typeref:typename:None	access:public	signature:(args: List[str])
run	tools/setup_global.py.in	/^    def run(self):$/;"	m	class:InstallHeadersNested	access:public	signature:(self)
run_bool	tests/test_virtual_functions.cpp	/^    bool run_bool() override {$/;"	f	class:PyExampleVirt	typeref:typename:bool	file:	access:public	signature:()
run_bool	tests/test_virtual_functions.cpp	/^    virtual bool run_bool() = 0;$/;"	p	class:ExampleVirt	typeref:typename:bool	file:	access:public	signature:()
run_bool	tests/test_virtual_functions.py	/^        def run_bool(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
rvp	tests/test_eigen_matrix.cpp	/^    using rvp = py::return_value_policy;$/;"	t	function:TEST_SUBMODULE	typeref:typename:py::return_value_policy	file:
rw_value	tests/test_methods_and_attributes.cpp	/^    int rw_value = 42;$/;"	m	class:UnregisteredBase	typeref:typename:int	file:	access:public
s	tests/test_exceptions.cpp	/^    py::str s;$/;"	m	struct:PythonAlreadySetInDestructor	typeref:typename:py::str	file:	access:public
same_size	include/pybind11/numpy.h	/^struct same_size {$/;"	s
same_size::as	include/pybind11/numpy.h	/^    using as = bool_constant<sizeof(T) == sizeof(U)>;$/;"	t	struct:same_size	access:public
same_type	include/pybind11/detail/internals.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) { return lhs == rhs;/;"	f	typeref:typename:bool	signature:(const std::type_info & lhs,const std::type_info & rhs)
same_type	include/pybind11/detail/internals.h	/^inline bool same_type(const std::type_info &lhs, const std::type_info &rhs) {$/;"	f	typeref:typename:bool	signature:(const std::type_info & lhs,const std::type_info & rhs)
satisfies_all_of	include/pybind11/detail/common.h	/^using satisfies_all_of = all_of<Predicates<T>...>;$/;"	t	typeref:typename:all_of<Predicates<T>...>
satisfies_any_of	include/pybind11/detail/common.h	/^using satisfies_any_of = any_of<Predicates<T>...>;$/;"	t	typeref:typename:any_of<Predicates<T>...>
satisfies_none_of	include/pybind11/detail/common.h	/^using satisfies_none_of = none_of<Predicates<T>...>;$/;"	t	typeref:typename:none_of<Predicates<T>...>
save	tests/cross_module_gil_utils.cpp	/^    PyThreadState *save;$/;"	m	struct:__anonf105cff20111::CustomAutoNoGIL	typeref:typename:PyThreadState *	file:	access:public
save	tools/libsize.py	/^save = sys.argv[2]$/;"	v	access:public
say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyA_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyA_Tpl	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyB_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyC_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
say_something	tests/test_virtual_functions.cpp	/^    std::string say_something(unsigned times) override {$/;"	f	class:PyD_Repeat	typeref:typename:std::string	file:	access:public	signature:(unsigned times)
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self, times)
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self, times)
say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT2	access:public	signature:(self, times)
scope	include/pybind11/attr.h	/^    explicit scope(const handle &s) : value(s) {}$/;"	f	struct:scope	access:public	signature:(const handle & s)
scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:function_record	typeref:typename:handle	access:public
scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:type_record	typeref:typename:handle	access:public
scope	include/pybind11/attr.h	/^struct scope {$/;"	s
scope::scope	include/pybind11/attr.h	/^    explicit scope(const handle &s) : value(s) {}$/;"	f	struct:scope	access:public	signature:(const handle & s)
scope::value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:scope	typeref:typename:handle	access:public
scope_exit	tests/test_embed/test_interpreter.cpp	/^    explicit scope_exit(std::function<void()> f) noexcept : f_(std::move(f)) {}$/;"	f	struct:scope_exit	file:	access:public	signature:(std::function<void ()> f)
scope_exit	tests/test_embed/test_interpreter.cpp	/^struct scope_exit {$/;"	s	file:
scope_exit::f_	tests/test_embed/test_interpreter.cpp	/^    std::function<void()> f_;$/;"	m	struct:scope_exit	typeref:typename:std::function<void ()>	file:	access:public
scope_exit::scope_exit	tests/test_embed/test_interpreter.cpp	/^    explicit scope_exit(std::function<void()> f) noexcept : f_(std::move(f)) {}$/;"	f	struct:scope_exit	file:	access:public	signature:(std::function<void ()> f)
scope_exit::~scope_exit	tests/test_embed/test_interpreter.cpp	/^    ~scope_exit() {$/;"	f	struct:scope_exit	file:	access:public	signature:()
scoped_estream_redirect	include/pybind11/iostream.h	/^    explicit scoped_estream_redirect(std::ostream &costream = std::cerr,$/;"	f	class:scoped_estream_redirect	access:public	signature:(std::ostream & costream=std::cerr,const object & pyostream=module_::import ("sys").attr ("stderr"))
scoped_estream_redirect	include/pybind11/iostream.h	/^class scoped_estream_redirect : public scoped_ostream_redirect {$/;"	c	inherits:scoped_ostream_redirect
scoped_estream_redirect::scoped_estream_redirect	include/pybind11/iostream.h	/^    explicit scoped_estream_redirect(std::ostream &costream = std::cerr,$/;"	f	class:scoped_estream_redirect	access:public	signature:(std::ostream & costream=std::cerr,const object & pyostream=module_::import ("sys").attr ("stderr"))
scoped_interp	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter scoped_interp{&config, 0, nullptr, false};$/;"	v	typeref:typename:py::scoped_interpreter
scoped_interp	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter scoped_interp{&config};$/;"	v	typeref:typename:py::scoped_interpreter
scoped_interp	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter scoped_interp{true, 0, nullptr, false};$/;"	v	typeref:typename:py::scoped_interpreter
scoped_interp	tests/test_embed/test_interpreter.cpp	/^        py::scoped_interpreter scoped_interp{};$/;"	v	typeref:typename:py::scoped_interpreter
scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(PyConfig *config,$/;"	f	class:scoped_interpreter	access:public	signature:(PyConfig * config,int argc=0,const char * const * argv=nullptr,bool add_program_dir_to_path=true)
scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(bool init_signal_handlers = true,$/;"	f	class:scoped_interpreter	access:public	signature:(bool init_signal_handlers=true,int argc=0,const char * const * argv=nullptr,bool add_program_dir_to_path=true)
scoped_interpreter	include/pybind11/embed.h	/^    scoped_interpreter(const scoped_interpreter &) = delete;$/;"	p	class:scoped_interpreter	access:public	signature:(const scoped_interpreter &)
scoped_interpreter	include/pybind11/embed.h	/^    scoped_interpreter(scoped_interpreter &&other) noexcept { other.is_valid = false; }$/;"	f	class:scoped_interpreter	access:public	signature:(scoped_interpreter && other)
scoped_interpreter	include/pybind11/embed.h	/^class scoped_interpreter {$/;"	c
scoped_interpreter	tests/test_embed/test_interpreter.cpp	/^    REQUIRE_THROWS_WITH(py::scoped_interpreter(), "The interpreter is already running");$/;"	p	class:py	typeref:typename:REQUIRE_THROWS_WITH (,"The interpreter is already running")	file:	signature:()
scoped_interpreter::is_valid	include/pybind11/embed.h	/^    bool is_valid = true;$/;"	m	class:scoped_interpreter	typeref:typename:bool	access:private
scoped_interpreter::operator =	include/pybind11/embed.h	/^    scoped_interpreter &operator=(const scoped_interpreter &) = delete;$/;"	p	class:scoped_interpreter	typeref:typename:scoped_interpreter &	access:public	signature:(const scoped_interpreter &)
scoped_interpreter::operator =	include/pybind11/embed.h	/^    scoped_interpreter &operator=(scoped_interpreter &&) = delete;$/;"	p	class:scoped_interpreter	typeref:typename:scoped_interpreter &	access:public	signature:(scoped_interpreter &&)
scoped_interpreter::scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(PyConfig *config,$/;"	f	class:scoped_interpreter	access:public	signature:(PyConfig * config,int argc=0,const char * const * argv=nullptr,bool add_program_dir_to_path=true)
scoped_interpreter::scoped_interpreter	include/pybind11/embed.h	/^    explicit scoped_interpreter(bool init_signal_handlers = true,$/;"	f	class:scoped_interpreter	access:public	signature:(bool init_signal_handlers=true,int argc=0,const char * const * argv=nullptr,bool add_program_dir_to_path=true)
scoped_interpreter::scoped_interpreter	include/pybind11/embed.h	/^    scoped_interpreter(const scoped_interpreter &) = delete;$/;"	p	class:scoped_interpreter	access:public	signature:(const scoped_interpreter &)
scoped_interpreter::scoped_interpreter	include/pybind11/embed.h	/^    scoped_interpreter(scoped_interpreter &&other) noexcept { other.is_valid = false; }$/;"	f	class:scoped_interpreter	access:public	signature:(scoped_interpreter && other)
scoped_interpreter::~scoped_interpreter	include/pybind11/embed.h	/^    ~scoped_interpreter() {$/;"	f	class:scoped_interpreter	access:public	signature:()
scoped_ostream_redirect	include/pybind11/iostream.h	/^    explicit scoped_ostream_redirect(std::ostream &costream = std::cout,$/;"	f	class:scoped_ostream_redirect	access:public	signature:(std::ostream & costream=std::cout,const object & pyostream=module_::import ("sys").attr ("stdout"))
scoped_ostream_redirect	include/pybind11/iostream.h	/^    scoped_ostream_redirect(const scoped_ostream_redirect &) = delete;$/;"	p	class:scoped_ostream_redirect	access:public	signature:(const scoped_ostream_redirect &)
scoped_ostream_redirect	include/pybind11/iostream.h	/^    scoped_ostream_redirect(scoped_ostream_redirect &&other) = default;$/;"	p	class:scoped_ostream_redirect	access:public	signature:(scoped_ostream_redirect && other)
scoped_ostream_redirect	include/pybind11/iostream.h	/^class scoped_ostream_redirect {$/;"	c
scoped_ostream_redirect::buffer	include/pybind11/iostream.h	/^    detail::pythonbuf buffer;$/;"	m	class:scoped_ostream_redirect	typeref:typename:detail::pythonbuf	access:protected
scoped_ostream_redirect::costream	include/pybind11/iostream.h	/^    std::ostream &costream;$/;"	m	class:scoped_ostream_redirect	typeref:typename:std::ostream &	access:protected
scoped_ostream_redirect::old	include/pybind11/iostream.h	/^    std::streambuf *old;$/;"	m	class:scoped_ostream_redirect	typeref:typename:std::streambuf *	access:protected
scoped_ostream_redirect::operator =	include/pybind11/iostream.h	/^    scoped_ostream_redirect &operator=(const scoped_ostream_redirect &) = delete;$/;"	p	class:scoped_ostream_redirect	typeref:typename:scoped_ostream_redirect &	access:public	signature:(const scoped_ostream_redirect &)
scoped_ostream_redirect::operator =	include/pybind11/iostream.h	/^    scoped_ostream_redirect &operator=(scoped_ostream_redirect &&) = delete;$/;"	p	class:scoped_ostream_redirect	typeref:typename:scoped_ostream_redirect &	access:public	signature:(scoped_ostream_redirect &&)
scoped_ostream_redirect::scoped_ostream_redirect	include/pybind11/iostream.h	/^    explicit scoped_ostream_redirect(std::ostream &costream = std::cout,$/;"	f	class:scoped_ostream_redirect	access:public	signature:(std::ostream & costream=std::cout,const object & pyostream=module_::import ("sys").attr ("stdout"))
scoped_ostream_redirect::scoped_ostream_redirect	include/pybind11/iostream.h	/^    scoped_ostream_redirect(const scoped_ostream_redirect &) = delete;$/;"	p	class:scoped_ostream_redirect	access:public	signature:(const scoped_ostream_redirect &)
scoped_ostream_redirect::scoped_ostream_redirect	include/pybind11/iostream.h	/^    scoped_ostream_redirect(scoped_ostream_redirect &&other) = default;$/;"	p	class:scoped_ostream_redirect	access:public	signature:(scoped_ostream_redirect && other)
scoped_ostream_redirect::~scoped_ostream_redirect	include/pybind11/iostream.h	/^    ~scoped_ostream_redirect() { costream.rdbuf(old); }$/;"	f	class:scoped_ostream_redirect	access:public	signature:()
sdist_files	tests/extra_python_package/test_files.py	/^sdist_files = {$/;"	v	access:public
select_indices	include/pybind11/detail/common.h	/^using select_indices = typename select_indices_impl<index_sequence<>, 0, Bs...>::type;$/;"	t	typeref:typename:select_indices_impl<index_sequence<>,0,Bs...>::type
select_indices_impl	include/pybind11/detail/common.h	/^struct select_indices_impl {$/;"	s
select_indices_impl	include/pybind11/detail/common.h	/^struct select_indices_impl<index_sequence<IPrev...>, I, B, Bs...>$/;"	s	inherits:select_indices_impl<conditional_t<B,index_sequence<IPrev...,I>,index_sequence<IPrev...>>,I+1,Bs...>
select_indices_impl::type	include/pybind11/detail/common.h	/^    using type = ISeq;$/;"	t	struct:select_indices_impl	typeref:typename:ISeq	access:public
self	include/pybind11/operators.h	/^static const self_t self = self_t();$/;"	v	typeref:typename:const self_t
self1	tests/test_methods_and_attributes.cpp	/^    ExampleMandA self1() { return *this; }              \/\/ return by value$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA	file:	access:public	signature:()
self2	tests/test_methods_and_attributes.cpp	/^    ExampleMandA &self2() { return *this; }             \/\/ return by reference$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA &	file:	access:public	signature:()
self3	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA &self3() const { return *this; } \/\/ return by const reference$/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA &	file:	access:public	signature:() const
self4	tests/test_methods_and_attributes.cpp	/^    ExampleMandA *self4() { return this; }              \/\/ return by pointer$/;"	f	class:ExampleMandA	typeref:typename:ExampleMandA *	file:	access:public	signature:()
self5	tests/test_methods_and_attributes.cpp	/^    const ExampleMandA *self5() const { return this; }  \/\/ return by const pointer$/;"	f	class:ExampleMandA	typeref:typename:const ExampleMandA *	file:	access:public	signature:() const
self_t	include/pybind11/operators.h	/^struct self_t {};$/;"	s
sentinel	include/pybind11/pytypes.h	/^    static iterator sentinel() { return {}; }$/;"	f	class:iterator	typeref:typename:iterator	access:public	signature:()
sequence	include/pybind11/pytypes.h	/^class sequence : public object {$/;"	c	inherits:object
sequence::PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(sequence, object, PySequence_Check)$/;"	f	class:sequence	access:public	signature:(sequence,object,PySequence_Check)
sequence::begin	include/pybind11/pytypes.h	/^    detail::sequence_iterator begin() const { return {*this, 0}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator	access:public	signature:() const
sequence::empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:sequence	typeref:typename:bool	access:public	signature:() const
sequence::end	include/pybind11/pytypes.h	/^    detail::sequence_iterator end() const { return {*this, PySequence_Size(m_ptr)}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_iterator	access:public	signature:() const
sequence::operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:sequence	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
sequence::operator []	include/pybind11/pytypes.h	/^    detail::sequence_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:sequence	typeref:typename:detail::sequence_accessor	access:public	signature:(size_t index) const
sequence_accessor	include/pybind11/pytypes.h	/^using sequence_accessor = accessor<accessor_policies::sequence_item>;$/;"	t	typeref:typename:accessor<accessor_policies::sequence_item>
sequence_fast_readonly	include/pybind11/pytypes.h	/^    sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}$/;"	f	class:sequence_fast_readonly	access:protected	signature:(handle obj,ssize_t n)
sequence_fast_readonly	include/pybind11/pytypes.h	/^class sequence_fast_readonly {$/;"	c
sequence_fast_readonly::advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { ptr += n; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:(ssize_t n)
sequence_fast_readonly::decrement	include/pybind11/pytypes.h	/^    void decrement() { --ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:()
sequence_fast_readonly::dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return *ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:reference	access:protected	signature:() const
sequence_fast_readonly::distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_fast_readonly &b) const { return ptr - b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:ssize_t	access:protected	signature:(const sequence_fast_readonly & b) const
sequence_fast_readonly::equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_fast_readonly &b) const { return ptr == b.ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:bool	access:protected	signature:(const sequence_fast_readonly & b) const
sequence_fast_readonly::increment	include/pybind11/pytypes.h	/^    void increment() { ++ptr; }$/;"	f	class:sequence_fast_readonly	typeref:typename:void	access:protected	signature:()
sequence_fast_readonly::iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_fast_readonly	typeref:typename:std::random_access_iterator_tag	access:protected
sequence_fast_readonly::pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const handle>;$/;"	t	class:sequence_fast_readonly	typeref:typename:arrow_proxy<const handle>	access:protected
sequence_fast_readonly::ptr	include/pybind11/pytypes.h	/^    PyObject **ptr;$/;"	m	class:sequence_fast_readonly	typeref:typename:PyObject **	access:private
sequence_fast_readonly::reference	include/pybind11/pytypes.h	/^    using reference = const handle; \/\/ PR #3263$/;"	t	class:sequence_fast_readonly	typeref:typename:const handle	access:protected
sequence_fast_readonly::sequence_fast_readonly	include/pybind11/pytypes.h	/^    sequence_fast_readonly(handle obj, ssize_t n) : ptr(PySequence_Fast_ITEMS(obj.ptr()) + n) {}$/;"	f	class:sequence_fast_readonly	access:protected	signature:(handle obj,ssize_t n)
sequence_fast_readonly::value_type	include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:sequence_fast_readonly	typeref:typename:handle	access:protected
sequence_item	include/pybind11/pytypes.h	/^struct sequence_item {$/;"	s
sequence_item::get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:sequence_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
sequence_item::key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:sequence_item	typeref:typename:size_t	access:public
sequence_item::set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:sequence_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
sequence_iterator	include/pybind11/pytypes.h	/^using sequence_iterator = generic_iterator<iterator_policies::sequence_slow_readwrite>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_slow_readwrite>
sequence_slow_readwrite	include/pybind11/pytypes.h	/^    sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}$/;"	f	class:sequence_slow_readwrite	access:protected	signature:(handle obj,ssize_t index)
sequence_slow_readwrite	include/pybind11/pytypes.h	/^class sequence_slow_readwrite {$/;"	c
sequence_slow_readwrite::advance	include/pybind11/pytypes.h	/^    void advance(ssize_t n) { index += n; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:(ssize_t n)
sequence_slow_readwrite::decrement	include/pybind11/pytypes.h	/^    void decrement() { --index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:()
sequence_slow_readwrite::dereference	include/pybind11/pytypes.h	/^    reference dereference() const { return {obj, static_cast<size_t>(index)}; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:reference	access:protected	signature:() const
sequence_slow_readwrite::distance_to	include/pybind11/pytypes.h	/^    ssize_t distance_to(const sequence_slow_readwrite &b) const { return index - b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:ssize_t	access:protected	signature:(const sequence_slow_readwrite & b) const
sequence_slow_readwrite::equal	include/pybind11/pytypes.h	/^    bool equal(const sequence_slow_readwrite &b) const { return index == b.index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:bool	access:protected	signature:(const sequence_slow_readwrite & b) const
sequence_slow_readwrite::increment	include/pybind11/pytypes.h	/^    void increment() { ++index; }$/;"	f	class:sequence_slow_readwrite	typeref:typename:void	access:protected	signature:()
sequence_slow_readwrite::index	include/pybind11/pytypes.h	/^    ssize_t index;$/;"	m	class:sequence_slow_readwrite	typeref:typename:ssize_t	access:private
sequence_slow_readwrite::iterator_category	include/pybind11/pytypes.h	/^    using iterator_category = std::random_access_iterator_tag;$/;"	t	class:sequence_slow_readwrite	typeref:typename:std::random_access_iterator_tag	access:protected
sequence_slow_readwrite::obj	include/pybind11/pytypes.h	/^    handle obj;$/;"	m	class:sequence_slow_readwrite	typeref:typename:handle	access:private
sequence_slow_readwrite::pointer	include/pybind11/pytypes.h	/^    using pointer = arrow_proxy<const sequence_accessor>;$/;"	t	class:sequence_slow_readwrite	typeref:typename:arrow_proxy<const sequence_accessor>	access:protected
sequence_slow_readwrite::reference	include/pybind11/pytypes.h	/^    using reference = sequence_accessor;$/;"	t	class:sequence_slow_readwrite	typeref:typename:sequence_accessor	access:protected
sequence_slow_readwrite::sequence_slow_readwrite	include/pybind11/pytypes.h	/^    sequence_slow_readwrite(handle obj, ssize_t index) : obj(obj), index(index) {}$/;"	f	class:sequence_slow_readwrite	access:protected	signature:(handle obj,ssize_t index)
sequence_slow_readwrite::value_type	include/pybind11/pytypes.h	/^    using value_type = object;$/;"	t	class:sequence_slow_readwrite	typeref:typename:object	access:protected
set	include/pybind11/detail/init.h	/^    remove_reference_t<Set> set;$/;"	m	struct:pickle_factory	typeref:typename:remove_reference_t<Set>	access:public
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:list_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:sequence_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:tuple_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
set	include/pybind11/pytypes.h	/^    static void set(handle obj, const char *key, handle val) { setattr(obj, key, val); }$/;"	f	struct:str_attr	typeref:typename:void	access:public	signature:(handle obj,const char * key,handle val)
set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) { setattr(obj, key, val); }$/;"	f	struct:obj_attr	typeref:typename:void	access:public	signature:(handle obj,handle key,handle val)
set	include/pybind11/pytypes.h	/^    static void set(handle obj, handle key, handle val) {$/;"	f	struct:generic_item	typeref:typename:void	access:public	signature:(handle obj,handle key,handle val)
set	include/pybind11/pytypes.h	/^class set : public anyset {$/;"	c	inherits:anyset
set	tests/pybind11_tests.h	/^    void set(int set) { i = set; }$/;"	f	class:UserType	typeref:typename:void	access:public	signature:(int set)
set	tests/test_methods_and_attributes.cpp	/^    void set(int v) { value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:	access:public	signature:(int v)
set	tests/test_sequences_and_iterators.cpp	/^        void set(const std::string &key, std::string val) { map[key] = std::move(val); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:void	file:	access:public	signature:(const std::string & key,std::string val)
set	tests/test_sequences_and_iterators.cpp	/^    void set(int value) { value_ = value; }$/;"	f	class:NonCopyableInt	typeref:typename:void	file:	access:public	signature:(int value)
set1	tests/test_methods_and_attributes.cpp	/^    void set1(int v) { v1.set(v); }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:	access:public	signature:(int v)
set2	tests/test_methods_and_attributes.cpp	/^    void set2(int v) { v2.set(v); }$/;"	f	struct:TestPropRVP	typeref:typename:void	file:	access:public	signature:(int v)
set::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(set, anyset, PySet_Check, PySet_New)$/;"	f	class:set	access:public	signature:(set,anyset,PySet_Check,PySet_New)
set::add	include/pybind11/pytypes.h	/^    bool add(T &&val) \/* py-non-const *\/ {$/;"	f	class:set	typeref:typename:bool	access:public	signature:(T && val)
set::clear	include/pybind11/pytypes.h	/^    void clear() \/* py-non-const *\/ { PySet_Clear(m_ptr); }$/;"	f	class:set	typeref:typename:void	access:public	signature:()
setExtra1	tests/test_pickling.cpp	/^        void setExtra1(int extra1) { m_extra1 = extra1; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:void	file:	access:public	signature:(int extra1)
setExtra2	tests/test_pickling.cpp	/^        void setExtra2(int extra2) { m_extra2 = extra2; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:void	file:	access:public	signature:(int extra2)
setValue	tests/test_docstring_options.cpp	/^            void setValue(int v) { value = v; }$/;"	f	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:void	file:	access:public	signature:(int v)
set_caster	include/pybind11/stl.h	/^struct set_caster {$/;"	s
set_caster::cast	include/pybind11/stl.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	struct:set_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
set_caster::key_conv	include/pybind11/stl.h	/^    using key_conv = make_caster<Key>;$/;"	t	struct:set_caster	typeref:typename:make_caster<Key>	access:public
set_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:set_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
set_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &, void *) {}$/;"	f	struct:set_caster	typeref:typename:void	access:private	signature:(const anyset &,void *)
set_caster::reserve_maybe	include/pybind11/stl.h	/^    void reserve_maybe(const anyset &s, Type *) {$/;"	f	struct:set_caster	typeref:typename:void	access:private	signature:(const anyset & s,Type *)
set_caster::type	include/pybind11/stl.h	/^    using type = Type;$/;"	t	struct:set_caster	typeref:typename:Type	access:public
set_error	include/pybind11/detail/common.h	/^    virtual void set_error() const = 0;$/;"	p	class:builtin_exception	typeref:typename:void	access:public	signature:() const
set_error	tests/test_exceptions.h	/^    void set_error() const override { PyErr_SetString(PyExc_RuntimeError, what()); }$/;"	f	class:shared_exception	typeref:typename:void	access:public	signature:() const
set_flag	include/pybind11/pybind11.h	/^        explicit set_flag(bool &flag_) : flag(flag_) { flag_ = true; }$/;"	f	struct:implicitly_convertible::set_flag	access:public	signature:(bool & flag_)
set_flag	include/pybind11/pybind11.h	/^    struct set_flag {$/;"	s	function:implicitly_convertible
set_holder_constructed	include/pybind11/detail/type_caster_base.h	/^    void set_holder_constructed(bool v = true) {$/;"	f	struct:value_and_holder	typeref:typename:void	access:public	signature:(bool v=true)
set_instance_registered	include/pybind11/detail/type_caster_base.h	/^    void set_instance_registered(bool v = true) {$/;"	f	struct:value_and_holder	typeref:typename:void	access:public	signature:(bool v=true)
set_int	tests/test_methods_and_attributes.cpp	/^    void set_int(int v) { rw_value = v; }$/;"	f	class:UnregisteredBase	typeref:typename:void	file:	access:public	signature:(int v)
set_name	include/pybind11/pytypes.h	/^    void set_name(const char *new_name) {$/;"	f	class:capsule	typeref:typename:void	access:public	signature:(const char * new_name)
set_operator_new	include/pybind11/pybind11.h	/^void set_operator_new(...) {}$/;"	f	typeref:typename:void	signature:(...)
set_operator_new	include/pybind11/pybind11.h	/^void set_operator_new(type_record *r) {$/;"	f	typeref:typename:void	signature:(type_record * r)
set_pointer	include/pybind11/pytypes.h	/^    void set_pointer(const void *value) {$/;"	f	class:capsule	typeref:typename:void	access:public	signature:(const void * value)
set_shared_data	include/pybind11/detail/internals.h	/^PYBIND11_NOINLINE void *set_shared_data(const std::string &name, void *data) {$/;"	f	typeref:typename:PYBIND11_NOINLINE void *	signature:(const std::string & name,void * data)
set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) { *get_stack_pp() = value; }$/;"	f	class:loader_life_support	typeref:typename:void	access:private	signature:(loader_life_support * value)
set_stack_top	include/pybind11/detail/type_caster_base.h	/^    static void set_stack_top(loader_life_support *value) {$/;"	f	class:loader_life_support	typeref:typename:void	access:private	signature:(loader_life_support * value)
set_value	tests/test_buffers.cpp	/^        void set_value(int32_t v) { *value = v; }$/;"	f	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:void	file:	access:public	signature:(int32_t v)
setattr	include/pybind11/pytypes.h	/^inline void setattr(handle obj, const char *name, handle value) {$/;"	f	typeref:typename:void	signature:(handle obj,const char * name,handle value)
setattr	include/pybind11/pytypes.h	/^inline void setattr(handle obj, handle name, handle value) {$/;"	f	typeref:typename:void	signature:(handle obj,handle name,handle value)
setstate	include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, T &&result, bool need_alias) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,T && result,bool need_alias)
setstate	include/pybind11/detail/init.h	/^void setstate(value_and_holder &v_h, std::pair<T, O> &&result, bool need_alias) {$/;"	f	typeref:typename:void	signature:(value_and_holder & v_h,std::pair<T,O> && result,bool need_alias)
setup	docs/conf.py	/^def setup(app):$/;"	f	access:public	signature:(app)
setup_helpers-copy-manually	docs/compiling.rst	/^.. _setup_helpers-copy-manually:$/;"	T	section:Classic ``setup_requires``
setup_helpers-pep518	docs/compiling.rst	/^.. _setup_helpers-pep518:$/;"	T	chapter:Building with setuptools
setup_helpers-setup_requires	docs/compiling.rst	/^.. _setup_helpers-setup_requires:$/;"	T	section:PEP 518 requirements (Pip 10+ required)
setup_py	setup.py	/^setup_py = Path($/;"	v	access:public
setuptools_scm	docs/compiling.rst	/^.. [setuptools_scm] https:\/\/github.com\/pypa\/setuptools_scm$/;"	C	chapter:Building with setuptools
severity	.github/matchers/pylint.json	/^      "severity": "error",$/;"	s	object:problemMatcher.1
severity	.github/matchers/pylint.json	/^      "severity": "warning",$/;"	s	object:problemMatcher.0
shape	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> shape;   \/\/ Shape of the tensor (1 entry per dimension)$/;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>	access:public
shape	include/pybind11/numpy.h	/^    const ssize_t *shape() const { return detail::array_proxy(m_ptr)->dimensions; }$/;"	f	class:array	typeref:typename:const ssize_t *	access:public	signature:() const
shape	include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const { return shape_[(size_t) dim]; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
shape	include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
shape_	include/pybind11/numpy.h	/^    conditional_t<Dynamic, const ssize_t *, std::array<ssize_t, (size_t) Dims>> shape_, strides_/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>	access:protected
shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<A> shared = std::make_shared<A>();$/;"	m	struct:__anond975f9d30111::SharedPtrRef	typeref:typename:std::shared_ptr<A>	file:	access:public
shared	tests/test_smart_ptr.cpp	/^    std::shared_ptr<B> shared = std::make_shared<B>();$/;"	m	struct:__anond975f9d30111::SharedFromThisRef	typeref:typename:std::shared_ptr<B>	file:	access:public
shared_data	include/pybind11/detail/internals.h	/^    std::unordered_map<std::string, void *> shared_data; \/\/ Custom data to be shared across$/;"	m	struct:internals	typeref:typename:std::unordered_map<std::string,void * >	access:public
shared_exception	tests/test_exceptions.h	/^    explicit shared_exception() : shared_exception("") {}$/;"	f	class:shared_exception	access:public	signature:()
shared_exception	tests/test_exceptions.h	/^class PYBIND11_EXPORT_EXCEPTION shared_exception : public pybind11::builtin_exception {$/;"	c	inherits:pybind11::builtin_exception
shared_exception::set_error	tests/test_exceptions.h	/^    void set_error() const override { PyErr_SetString(PyExc_RuntimeError, what()); }$/;"	f	class:shared_exception	typeref:typename:void	access:public	signature:() const
shared_exception::shared_exception	tests/test_exceptions.h	/^    explicit shared_exception() : shared_exception("") {}$/;"	f	class:shared_exception	access:public	signature:()
shared_loader_life_support_data	include/pybind11/detail/internals.h	/^        shared_loader_life_support_data() {$/;"	f	struct:local_internals::shared_loader_life_support_data	typeref:typename:loader_life_support_tls_key	access:public	signature:()
shared_loader_life_support_data	include/pybind11/detail/internals.h	/^    struct shared_loader_life_support_data {$/;"	s	struct:local_internals	access:public
shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit shared_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::shared_ptr_with_addressof_operator	file:	access:public	signature:(T * p)
shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    shared_ptr_with_addressof_operator() = default;$/;"	p	class:__anond975f9d30111::shared_ptr_with_addressof_operator	file:	access:public	signature:()
shared_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class shared_ptr_with_addressof_operator {$/;"	c	namespace:__anond975f9d30111	file:
show_c_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_c_contiguous = show_order && requires_row_major;$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
show_enum_members_docstring	include/pybind11/options.h	/^        bool show_enum_members_docstring = true;  \/\/< Include auto-generated member list in en/;"	m	struct:options::state	typeref:typename:bool	access:public
show_enum_members_docstring	include/pybind11/options.h	/^    static bool show_enum_members_docstring() {$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
show_f_contiguous	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_f_contiguous$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
show_function_signatures	include/pybind11/options.h	/^        bool show_function_signatures = true;     \/\/< Include auto-generated function signatur/;"	m	struct:options::state	typeref:typename:bool	access:public
show_function_signatures	include/pybind11/options.h	/^    static bool show_function_signatures() { return global_state().show_function_signatures; }$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
show_order	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_order = is_eigen_dense_map<Type>::value;$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
show_user_defined_docstrings	include/pybind11/options.h	/^        bool show_user_defined_docstrings = true; \/\/< Include user-supplied texts in docstring/;"	m	struct:options::state	typeref:typename:bool	access:public
show_user_defined_docstrings	include/pybind11/options.h	/^    static bool show_user_defined_docstrings() {$/;"	f	class:options	typeref:typename:bool	access:public	signature:()
show_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool show_writeable$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
sibling	include/pybind11/attr.h	/^    explicit sibling(const handle &value) : value(value.ptr()) {}$/;"	f	struct:sibling	access:public	signature:(const handle & value)
sibling	include/pybind11/attr.h	/^    handle sibling;$/;"	m	struct:function_record	typeref:typename:handle	access:public
sibling	include/pybind11/attr.h	/^struct sibling {$/;"	s
sibling::sibling	include/pybind11/attr.h	/^    explicit sibling(const handle &value) : value(value.ptr()) {}$/;"	f	struct:sibling	access:public	signature:(const handle & value)
sibling::value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:sibling	typeref:typename:handle	access:public
signature	include/pybind11/attr.h	/^    char *signature = nullptr;$/;"	m	struct:function_record	typeref:typename:char *	access:public
silence_unused_warnings	include/pybind11/detail/common.h	/^    silence_unused_warnings(Args &&...) {$/;"	f	typeref:typename:void	signature:(Args &&...)
simple namespace	docs/advanced/pycpp/object.rst	/^.. _simple namespace: https:\/\/docs.python.org\/3\/library\/types.html#types.SimpleNamespace$/;"	T	chapter:Instantiating compound Python types from C++
simple_ancestors	include/pybind11/detail/internals.h	/^    bool simple_ancestors : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
simple_collector	include/pybind11/cast.h	/^    explicit simple_collector(Ts &&...values)$/;"	f	class:simple_collector	access:public	signature:(Ts &&...values)
simple_collector	include/pybind11/cast.h	/^class simple_collector {$/;"	c
simple_collector::args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:simple_collector	typeref:typename:const tuple &	access:public	signature:() const
simple_collector::args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:simple_collector	typeref:typename:tuple	access:public	signature:()
simple_collector::call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:simple_collector	typeref:typename:object	access:public	signature:(PyObject * ptr) const
simple_collector::kwargs	include/pybind11/cast.h	/^    dict kwargs() const { return {}; }$/;"	f	class:simple_collector	typeref:typename:dict	access:public	signature:() const
simple_collector::m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:simple_collector	typeref:typename:tuple	access:private
simple_collector::simple_collector	include/pybind11/cast.h	/^    explicit simple_collector(Ts &&...values)$/;"	f	class:simple_collector	access:public	signature:(Ts &&...values)
simple_dtype	tests/test_numpy_dtypes.py	/^def simple_dtype():$/;"	f	access:public	signature:()
simple_dtype_fmt	tests/test_numpy_dtypes.py	/^def simple_dtype_fmt():$/;"	f	access:public	signature:()
simple_example	docs/basics.rst	/^.. _simple_example:$/;"	T	chapter:Header and namespace conventions
simple_holder_constructed	include/pybind11/detail/common.h	/^    bool simple_holder_constructed : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
simple_instance_registered	include/pybind11/detail/common.h	/^    bool simple_instance_registered : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
simple_layout	include/pybind11/detail/common.h	/^    bool simple_layout : 1;$/;"	m	struct:instance	typeref:typename:bool:1	access:public
simple_type	include/pybind11/detail/internals.h	/^    bool simple_type : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
simple_value_holder	include/pybind11/detail/common.h	/^        void *simple_value_holder[1 + instance_simple_holder_in_ptrs()];$/;"	m	union:instance::__anonf1125e50010a	typeref:typename:void * []	access:public
singlehtml	docs/Makefile	/^singlehtml:$/;"	t
size	docs/benchmark.py	/^        size = os.stat("test.so").st_size$/;"	v	access:public
size	include/pybind11/buffer_info.h	/^    ssize_t size = 0;             \/\/ Total number of entries$/;"	m	struct:buffer_info	typeref:typename:ssize_t	access:public
size	include/pybind11/cast.h	/^    static constexpr auto size = sizeof...(Ts);$/;"	m	class:tuple_caster	typeref:typename:auto	access:private
size	include/pybind11/detail/type_caster_base.h	/^    size_t size() { return tinfo.size(); }$/;"	f	struct:values_and_holders	typeref:typename:size_t	access:public	signature:()
size	include/pybind11/eigen/matrix.h	/^                                size = Type::SizeAtCompileTime;$/;"	m	struct:EigenProps	typeref:typename:EigenIndex	access:public
size	include/pybind11/numpy.h	/^    enable_if_t<!Dyn, ssize_t> size() const {$/;"	f	class:unchecked_reference	typeref:typename:enable_if_t<!Dyn,ssize_t>	access:public	signature:() const
size	include/pybind11/numpy.h	/^    enable_if_t<Dyn, ssize_t> size() const {$/;"	f	class:unchecked_reference	typeref:typename:enable_if_t<Dyn,ssize_t>	access:public	signature:() const
size	include/pybind11/numpy.h	/^    ssize_t size() const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:() const
size	include/pybind11/numpy.h	/^    ssize_t size;$/;"	m	struct:field_descriptor	typeref:typename:ssize_t	access:public
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyDict_Size(m_ptr); }$/;"	f	class:dict	typeref:typename:size_t	access:public	signature:() const
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyList_Size(m_ptr); }$/;"	f	class:list	typeref:typename:size_t	access:public	signature:() const
size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyTuple_Size(m_ptr); }$/;"	f	class:tuple	typeref:typename:size_t	access:public	signature:() const
size	include/pybind11/pytypes.h	/^    size_t size() const { return static_cast<size_t>(PyByteArray_Size(m_ptr)); }$/;"	f	class:bytearray	typeref:typename:size_t	access:public	signature:() const
size	tests/test_sequences_and_iterators.cpp	/^        int size;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
size	tests/test_sequences_and_iterators.cpp	/^        size_t size() const { return m_size; }$/;"	f	class:TEST_SUBMODULE::Sequence	typeref:typename:size_t	file:	access:public	signature:() const
size	tests/test_sequences_and_iterators.cpp	/^        size_t size() const { return map.size(); }$/;"	f	class:TEST_SUBMODULE::StringMap	typeref:typename:size_t	file:	access:public	signature:() const
size_cpp	tests/test_numpy_array.cpp	/^    int size_cpp{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:int	file:	access:public
size_in_ptrs	include/pybind11/detail/common.h	/^inline static constexpr size_t size_in_ptrs(size_t s) {$/;"	f	typeref:typename:size_t	signature:(size_t s)
size_numpy	tests/test_numpy_array.cpp	/^    int size_numpy{};$/;"	m	struct:DtypeSizeCheck	typeref:typename:int	file:	access:public
size_t	include/pybind11/detail/common.h	/^using size_t = std::size_t;$/;"	t	typeref:typename:std::size_t
size_type	include/pybind11/numpy.h	/^    using size_type = container_type::size_type;$/;"	t	class:common_iterator	typeref:typename:container_type::size_type	access:public
size_type	include/pybind11/stl_bind.h	/^    using size_type = typename Vector::size_type;$/;"	t	function:vector_if_insertion_operator	typeref:typename:Vector::size_type
sleep	tests/test_iostream.cpp	/^    void sleep() {$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:()
slice	include/pybind11/pytypes.h	/^    slice(ssize_t start_, ssize_t stop_, ssize_t step_)$/;"	f	class:slice	access:public	signature:(ssize_t start_,ssize_t stop_,ssize_t step_)
slice	include/pybind11/pytypes.h	/^    slice(std::optional<ssize_t> start, std::optional<ssize_t> stop, std::optional<ssize_t> step/;"	f	class:slice	access:public	signature:(std::optional<ssize_t> start,std::optional<ssize_t> stop,std::optional<ssize_t> step)
slice	include/pybind11/pytypes.h	/^class slice : public object {$/;"	c	inherits:object
slice::PYBIND11_OBJECT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_DEFAULT(slice, object, PySlice_Check)$/;"	f	class:slice	access:public	signature:(slice,object,PySlice_Check)
slice::compute	include/pybind11/pytypes.h	/^    bool compute($/;"	f	class:slice	typeref:typename:bool	access:public	signature:(ssize_t length,ssize_t * start,ssize_t * stop,ssize_t * step,ssize_t * slicelength) const
slice::compute	include/pybind11/pytypes.h	/^    compute(size_t length, size_t *start, size_t *stop, size_t *step, size_t *slicelength) const/;"	f	class:slice	typeref:typename:bool	access:public	signature:(size_t length,size_t * start,size_t * stop,size_t * step,size_t * slicelength) const
slice::index_to_object	include/pybind11/pytypes.h	/^    static object index_to_object(T index) {$/;"	f	class:slice	typeref:typename:object	access:private	signature:(T index)
slice::slice	include/pybind11/pytypes.h	/^    slice(ssize_t start_, ssize_t stop_, ssize_t step_)$/;"	f	class:slice	access:public	signature:(ssize_t start_,ssize_t stop_,ssize_t step_)
slice::slice	include/pybind11/pytypes.h	/^    slice(std::optional<ssize_t> start, std::optional<ssize_t> stop, std::optional<ssize_t> step/;"	f	class:slice	access:public	signature:(std::optional<ssize_t> start,std::optional<ssize_t> stop,std::optional<ssize_t> step)
smart_pointers	docs/advanced/smart_ptrs.rst	/^.. _smart_pointers:$/;"	T	chapter:std::shared_ptr
sound	tests/test_tagbased_polymorphic.cpp	/^    std::string sound = "WOOF!";$/;"	m	struct:Dog	typeref:typename:std::string	file:	access:public
source_output	tests/CMakeLists.txt	/^    set(source_output "${CMAKE_CURRENT_SOURCE_DIR}\/${target}${suffix}")$/;"	v
source_suffix	docs/conf.py	/^source_suffix = ".rst"$/;"	v	access:public
species	tests/test_class.cpp	/^        std::string species() const { return m_species; }$/;"	f	class:TEST_SUBMODULE::Pet	typeref:typename:std::string	file:	access:public	signature:() const
squeeze	include/pybind11/numpy.h	/^    array squeeze() {$/;"	f	class:array	typeref:typename:array	access:public	signature:()
src_and_type	include/pybind11/detail/type_caster_base.h	/^    src_and_type(const void *src,$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE std::pair<const void *,const type_info * >	access:public	signature:(const void * src,const std::type_info & cast_type,const std::type_info * rtti_type=nullptr)
src_and_type	include/pybind11/detail/type_caster_base.h	/^    static std::pair<const void *, const type_info *> src_and_type(const itype *src) {$/;"	f	class:type_caster_base	typeref:typename:std::pair<const void *,const type_info * >	access:public	signature:(const itype * src)
src_files	tests/extra_python_package/test_files.py	/^src_files = headers | cmake_files | pkgconfig_files$/;"	v	access:public
ss_t	include/pybind11/chrono.h	/^        using ss_t = duration<int, std::ratio<1>>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::ratio<1>>
ssize_t	include/pybind11/detail/common.h	/^using ssize_t = Py_ssize_t;$/;"	t	typeref:typename:Py_ssize_t
ssize_t_cast	include/pybind11/detail/common.h	/^inline ssize_t ssize_t_cast(const IntType &val) {$/;"	f	typeref:typename:ssize_t	signature:(const IntType & val)
start	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
state	include/pybind11/detail/internals.h	/^        const PyGILState_STATE state;$/;"	m	struct:get_internals::gil_scoped_acquire_local	typeref:typename:const PyGILState_STATE	access:public
state	include/pybind11/options.h	/^    struct state {$/;"	s	class:options	access:private
state	include/pybind11/pybind11.h	/^    using state = detail::iterator_state<Access, Policy, Iterator, Sentinel, ValueType, Extra.../;"	t	function:make_iterator_impl	typeref:typename:detail::iterator_state<Access,Policy,Iterator,Sentinel,ValueType,Extra...>
state	tests/test_virtual_functions.cpp	/^    int state;$/;"	m	class:ExampleVirt	typeref:typename:int	file:	access:private
staticFunction	tests/test_call_policies.cpp	/^        static Child *staticFunction(Parent *) { return new Child(); }$/;"	f	class:TEST_SUBMODULE::Parent	typeref:typename:Child *	file:	access:public	signature:(Parent *)
static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix1"; }$/;"	f	struct:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:std::string	file:	access:public	signature:()
static_func	tests/test_multiple_inheritance.cpp	/^    static std::string static_func() { return "VanillaStaticMix2"; }$/;"	f	struct:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:std::string	file:	access:public	signature:()
static_func1	tests/test_multiple_inheritance.cpp	/^    static std::string static_func1() { return "WithStatic1"; };$/;"	f	struct:__anon9ca8d76c0111::WithStatic1	typeref:typename:std::string	file:	access:public	signature:()
static_func2	tests/test_multiple_inheritance.cpp	/^    static std::string static_func2() { return "WithStatic2"; };$/;"	f	struct:__anon9ca8d76c0111::WithStatic2	typeref:typename:std::string	file:	access:public	signature:()
static_get	tests/test_methods_and_attributes.cpp	/^    static int static_get() { return static_value; }$/;"	f	struct:TestProperties	typeref:typename:int	file:	access:public	signature:()
static_properties	docs/advanced/classes.rst	/^.. _static_properties:$/;"	T	chapter:Implicit conversions
static_property_type	include/pybind11/detail/internals.h	/^    PyTypeObject *static_property_type;$/;"	m	struct:internals	typeref:typename:PyTypeObject *	access:public
static_set	tests/test_methods_and_attributes.cpp	/^    static void static_set(int v) { static_value = v; }$/;"	f	struct:TestProperties	typeref:typename:void	file:	access:public	signature:(int v)
static_strings	include/pybind11/detail/internals.h	/^    std::forward_list<std::string> static_strings; \/\/ Stores the std::strings backing$/;"	m	struct:internals	typeref:typename:std::forward_list<std::string>	access:public
static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestProperties	typeref:typename:int	file:	access:public
static_value	tests/test_methods_and_attributes.cpp	/^    static int static_value;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:	access:public
static_value	tests/test_methods_and_attributes.cpp	/^int TestProperties::static_value = 1;$/;"	m	class:TestProperties	typeref:typename:int
static_value	tests/test_methods_and_attributes.cpp	/^int TestPropertiesOverride::static_value = 99;$/;"	m	class:TestPropertiesOverride	typeref:typename:int
static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:int	file:	access:public
static_value	tests/test_multiple_inheritance.cpp	/^    static int static_value;$/;"	m	struct:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:int	file:	access:public
static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix1::static_value = 12;$/;"	m	class:__anon9ca8d76c0111::VanillaStaticMix1	typeref:typename:int
static_value	tests/test_multiple_inheritance.cpp	/^int VanillaStaticMix2::static_value = 12;$/;"	m	class:__anon9ca8d76c0111::VanillaStaticMix2	typeref:typename:int
static_value1	tests/test_multiple_inheritance.cpp	/^    static int static_value1;$/;"	m	struct:__anon9ca8d76c0111::WithStatic1	typeref:typename:int	file:	access:public
static_value1	tests/test_multiple_inheritance.cpp	/^int WithStatic1::static_value1 = 1;$/;"	m	class:__anon9ca8d76c0111::WithStatic1	typeref:typename:int
static_value2	tests/test_multiple_inheritance.cpp	/^    static int static_value2;$/;"	m	struct:__anon9ca8d76c0111::WithStatic2	typeref:typename:int	file:	access:public
static_value2	tests/test_multiple_inheritance.cpp	/^int WithStatic2::static_value2 = 2;$/;"	m	class:__anon9ca8d76c0111::WithStatic2	typeref:typename:int
staticmethod	include/pybind11/pytypes.h	/^class staticmethod : public object {$/;"	c	inherits:object
status	include/pybind11/detail/common.h	/^    uint8_t *status;$/;"	m	struct:nonsimple_values_and_holders	typeref:typename:uint8_t *	access:public
status_holder_constructed	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_holder_constructed = 1;$/;"	m	struct:instance	typeref:typename:uint8_t	access:public
status_instance_registered	include/pybind11/detail/common.h	/^    static constexpr uint8_t status_instance_registered = 2;$/;"	m	struct:instance	typeref:typename:uint8_t	access:public
status_level	tools/pybind11Common.cmake	/^      set(status_level FATAL_ERROR)$/;"	v	function:pybind11_find_import
status_level	tools/pybind11Common.cmake	/^      set(status_level WARNING)$/;"	v	function:pybind11_find_import
std	tests/test_operator_overloading.cpp	/^namespace std {$/;"	n	file:
std	tests/test_stl.cpp	/^namespace std {$/;"	n	file:
std::free	tests/test_embed/test_interpreter.cpp	/^        std::free(argv[0]);$/;"	p	class:std	file:	signature:(argv[0])
std::free	tests/test_embed/test_interpreter.cpp	/^        std::free(argv[1]);$/;"	p	class:std	file:	signature:(argv[1])
std::hash	tests/test_operator_overloading.cpp	/^struct hash<HashMe> {$/;"	s	namespace:std	file:
std::hash	tests/test_operator_overloading.cpp	/^struct hash<Vector2> {$/;"	s	namespace:std	file:
std::hash	tests/test_stl.cpp	/^struct hash<TplCtorClass> {$/;"	s	namespace:std	file:
std::hash::operator ()	tests/test_operator_overloading.cpp	/^    size_t operator()(const Vector2 &) { return 4; }$/;"	f	struct:std::hash	typeref:typename:size_t	file:	access:public	signature:(const Vector2 &)
std::hash::operator ()	tests/test_operator_overloading.cpp	/^    std::size_t operator()(const HashMe &selector) const {$/;"	f	struct:std::hash	typeref:typename:std::size_t	file:	access:public	signature:(const HashMe & selector) const
std::hash::operator ()	tests/test_stl.cpp	/^    size_t operator()(const TplCtorClass &) const { return 0; }$/;"	f	struct:std::hash	typeref:typename:size_t	file:	access:public	signature:(const TplCtorClass &) const
std::shared_ptr	docs/advanced/smart_ptrs.rst	/^std::shared_ptr$/;"	c	title:Smart pointers
std::unique_ptr	docs/advanced/smart_ptrs.rst	/^std::unique_ptr$/;"	c	title:Smart pointers
stderr	tests/conftest.py	/^    def stderr(self):$/;"	m	class:Capture	access:public	signature:(self)
steady_time	tests/test_chrono.cpp	/^    using steady_time = std::chrono::steady_clock::time_point;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::chrono::steady_clock::time_point	file:
step	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
stl_bind	docs/advanced/cast/stl.rst	/^.. _stl_bind:$/;"	T	chapter:Making opaque types
stl_headers	tests/extra_python_package/test_files.py	/^stl_headers = {$/;"	v	access:public
stl_headers	tools/setup_global.py.in	/^stl_headers = glob.glob("pybind11\/include\/pybind11\/stl\/*.h")$/;"	v	access:public
stolen_t	include/pybind11/pytypes.h	/^    struct stolen_t {};$/;"	s	class:object	access:protected
stop	tests/test_iostream.cpp	/^    void stop() { stop_ = true; }$/;"	f	struct:TestThread	typeref:typename:void	file:	access:public	signature:()
stop	tests/test_sequences_and_iterators.cpp	/^        int start, stop, step;$/;"	m	class:TEST_SUBMODULE::Sliceable	typeref:typename:int	file:	access:public
stop_	tests/test_iostream.cpp	/^    std::atomic<bool> stop_;$/;"	m	struct:TestThread	typeref:typename:std::atomic<bool>	file:	access:public
storage	tests/test_stl.cpp	/^    std::vector<T> storage;$/;"	m	class:ReferenceSensitiveOptional	typeref:typename:std::vector<T>	file:	access:private
storage_orders	docs/advanced/cast/eigen.rst	/^.. _storage_orders:$/;"	T	chapter:Returning values to Python
str	include/pybind11/pytypes.h	/^    explicit str(const bytes &b);$/;"	p	class:str	access:public	signature:(const bytes & b)
str	include/pybind11/pytypes.h	/^    explicit str(handle h) : object(raw_str(h.ptr()), stolen_t{}) {$/;"	f	class:str	access:public	signature:(handle h)
str	include/pybind11/pytypes.h	/^    pybind11::str str() const;$/;"	p	class:object_api	access:public	signature:() const
str	include/pybind11/pytypes.h	/^    str(T s) : str(s.data(), s.size()) {}$/;"	f	class:str	access:public	signature:(T s)
str	include/pybind11/pytypes.h	/^    str(const char *c = "") : object(PyUnicode_FromString(c), stolen_t{}) {$/;"	f	class:str	access:public	signature:(const char * c="")
str	include/pybind11/pytypes.h	/^    str(const std::string &s) : str(s.data(), s.size()) {}$/;"	f	class:str	access:public	signature:(const std::string & s)
str	include/pybind11/pytypes.h	/^    str(std::u8string_view s) : str(reinterpret_cast<const char *>(s.data()), s.size()) {}$/;"	f	class:str	access:public	signature:(std::u8string_view s)
str	include/pybind11/pytypes.h	/^class str : public object {$/;"	c	inherits:object
str	include/pybind11/pytypes.h	/^inline str::str(const bytes &b) {$/;"	f	class:str	signature:(const bytes & b)
str	include/pybind11/pytypes.h	/^pybind11::str object_api<D>::str() const {$/;"	f	class:object_api	typeref:typename:pybind11::str	signature:() const
str	tests/test_class.cpp	/^        std::string str;$/;"	m	struct:TEST_SUBMODULE::StringWrapper	typeref:typename:std::string	file:	access:public
str1	tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:	access:private
str2	tests/test_virtual_functions.cpp	/^    const std::string str1{"default1"}, str2{"default2"};$/;"	m	class:ExampleVirt	typeref:typename:const std::string	file:	access:private
str::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(str, object, PYBIND11_STR_CHECK_FUN, raw_str)$/;"	f	class:str	access:public	signature:(str,object,PYBIND11_STR_CHECK_FUN,raw_str)
str::format	include/pybind11/pytypes.h	/^    str format(Args &&...args) const {$/;"	f	class:str	typeref:typename:str	access:public	signature:(Args &&...args) const
str::operator std::string	include/pybind11/pytypes.h	/^    operator std::string() const {$/;"	f	class:str	access:public	signature:() const
str::raw_str	include/pybind11/pytypes.h	/^    static PyObject *raw_str(PyObject *op) {$/;"	f	class:str	typeref:typename:PyObject *	access:private	signature:(PyObject * op)
str::str	include/pybind11/pytypes.h	/^    explicit str(const bytes &b);$/;"	p	class:str	access:public	signature:(const bytes & b)
str::str	include/pybind11/pytypes.h	/^    explicit str(handle h) : object(raw_str(h.ptr()), stolen_t{}) {$/;"	f	class:str	access:public	signature:(handle h)
str::str	include/pybind11/pytypes.h	/^    str(T s) : str(s.data(), s.size()) {}$/;"	f	class:str	access:public	signature:(T s)
str::str	include/pybind11/pytypes.h	/^    str(const char *c = "") : object(PyUnicode_FromString(c), stolen_t{}) {$/;"	f	class:str	access:public	signature:(const char * c="")
str::str	include/pybind11/pytypes.h	/^    str(const std::string &s) : str(s.data(), s.size()) {}$/;"	f	class:str	access:public	signature:(const std::string & s)
str::str	include/pybind11/pytypes.h	/^    str(std::u8string_view s) : str(reinterpret_cast<const char *>(s.data()), s.size()) {}$/;"	f	class:str	access:public	signature:(std::u8string_view s)
str::str	include/pybind11/pytypes.h	/^inline str::str(const bytes &b) {$/;"	f	class:str	signature:(const bytes & b)
str_attr	include/pybind11/pytypes.h	/^struct str_attr {$/;"	s
str_attr::get	include/pybind11/pytypes.h	/^    static object get(handle obj, const char *key) { return getattr(obj, key); }$/;"	f	struct:str_attr	typeref:typename:object	access:public	signature:(handle obj,const char * key)
str_attr::key_type	include/pybind11/pytypes.h	/^    using key_type = const char *;$/;"	t	struct:str_attr	typeref:typename:const char *	access:public
str_attr::set	include/pybind11/pytypes.h	/^    static void set(handle obj, const char *key, handle val) { setattr(obj, key, val); }$/;"	f	struct:str_attr	typeref:typename:void	access:public	signature:(handle obj,const char * key,handle val)
str_attr_accessor	include/pybind11/pytypes.h	/^using str_attr_accessor = accessor<accessor_policies::str_attr>;$/;"	t	typeref:typename:accessor<accessor_policies::str_attr>
str_caster	include/pybind11/cast.h	/^    StringCaster str_caster;$/;"	m	struct:type_caster	typeref:typename:StringCaster	access:public
str_ref	tests/test_virtual_functions.cpp	/^        std::string &str_ref() override { return _tmp = str_ref_helper(); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
str_ref	tests/test_virtual_functions.cpp	/^        std::string &str_ref() override {$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
str_ref	tests/test_virtual_functions.cpp	/^        virtual std::string &str_ref() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string &	file:	access:public	signature:()
str_ref_helper	tests/test_virtual_functions.cpp	/^        std::string str_ref_helper() { PYBIND11_OVERRIDE(std::string, OverrideTest, str_ref); }$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:private	signature:()
str_value	tests/test_virtual_functions.cpp	/^        std::string str_value() override {$/;"	f	class:TEST_SUBMODULE::PyOverrideTest	typeref:typename:std::string	file:	access:public	signature:()
str_value	tests/test_virtual_functions.cpp	/^        virtual std::string str_value() { return v; }$/;"	f	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:	access:public	signature:()
strdup_guard	include/pybind11/pybind11.h	/^        strdup_guard() = default;$/;"	p	class:cpp_function::strdup_guard	access:public	signature:()
strdup_guard	include/pybind11/pybind11.h	/^        strdup_guard(const strdup_guard &) = delete;$/;"	p	class:cpp_function::strdup_guard	access:public	signature:(const strdup_guard &)
strdup_guard	include/pybind11/pybind11.h	/^    class strdup_guard {$/;"	c	class:cpp_function	access:protected
stride	include/pybind11/eigen/matrix.h	/^    EigenDStride stride{0, 0};    \/\/ Only valid if negativestrides is false!$/;"	m	struct:EigenConformable	typeref:typename:EigenDStride	access:public
stride_compatible	include/pybind11/eigen/matrix.h	/^    bool stride_compatible() const {$/;"	f	struct:EigenConformable	typeref:typename:bool	access:public	signature:() const
stride_ctor_default	include/pybind11/eigen/matrix.h	/^    using stride_ctor_default = bool_constant<S::InnerStrideAtCompileTime != Eigen::Dynamic$/;"	t	struct:type_caster	typeref:typename:bool_constant<S::InnerStrideAtCompileTime!=Eigen::Dynamic && S::OuterStrideAtCompileTime!=Eigen::Dynamic && std::is_default_constructible<S>::value>	access:private
stride_ctor_dual	include/pybind11/eigen/matrix.h	/^    using stride_ctor_dual$/;"	t	struct:type_caster	typeref:typename:bool_constant<!stride_ctor_default<S>::value && std::is_constructible<S,EigenIndex,EigenIndex>::value>	access:private
stride_ctor_inner	include/pybind11/eigen/matrix.h	/^    using stride_ctor_inner$/;"	t	struct:type_caster	access:private
stride_ctor_outer	include/pybind11/eigen/matrix.h	/^    using stride_ctor_outer$/;"	t	struct:type_caster	access:private
strides	include/pybind11/buffer_info.h	/^    std::vector<ssize_t> strides; \/\/ Number of bytes between adjacent entries$/;"	m	struct:buffer_info	typeref:typename:std::vector<ssize_t>	access:public
strides	include/pybind11/numpy.h	/^    const ssize_t *strides() const { return detail::array_proxy(m_ptr)->strides; }$/;"	f	class:array	typeref:typename:const ssize_t *	access:public	signature:() const
strides	include/pybind11/numpy.h	/^    ssize_t *strides;$/;"	m	struct:PyArray_Proxy	typeref:typename:ssize_t *	access:public
strides	include/pybind11/numpy.h	/^    ssize_t strides(ssize_t dim) const {$/;"	f	class:array	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
strides_	include/pybind11/numpy.h	/^    conditional_t<Dynamic, const ssize_t *, std::array<ssize_t, (size_t) Dims>> shape_, strides_/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>	access:protected
stringList	tests/test_opaque_types.cpp	/^        StringList stringList;$/;"	m	class:TEST_SUBMODULE::ClassWithSTLVecProperty	typeref:typename:StringList	file:	access:public
string_caster	include/pybind11/cast.h	/^struct string_caster {$/;"	s
string_caster::CharT	include/pybind11/cast.h	/^    using CharT = typename StringType::value_type;$/;"	t	struct:string_caster	typeref:typename:StringType::value_type	access:public
string_caster::PYBIND11_TYPE_CASTER	include/pybind11/cast.h	/^    PYBIND11_TYPE_CASTER(StringType, const_name(PYBIND11_STRING_NAME));$/;"	p	struct:string_caster	access:public	signature:(StringType,const_name (PYBIND11_STRING_NAME))
string_caster::UTF_N	include/pybind11/cast.h	/^    static constexpr size_t UTF_N = 8 * sizeof(CharT);$/;"	m	struct:string_caster	typeref:typename:size_t	access:public
string_caster::cast	include/pybind11/cast.h	/^    cast(const StringType &src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:string_caster	typeref:typename:handle	access:public	signature:(const StringType & src,return_value_policy,handle)
string_caster::decode_utfN	include/pybind11/cast.h	/^    static handle decode_utfN(const char *buffer, ssize_t nbytes) {$/;"	f	struct:string_caster	typeref:typename:handle	access:private	signature:(const char * buffer,ssize_t nbytes)
string_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:string_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
string_caster::load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<!std::is_same<C, char>::value, handle>) {$/;"	f	struct:string_caster	typeref:typename:bool	access:private	signature:(enable_if_t<!std::is_same<C,char>::value,handle>)
string_caster::load_raw	include/pybind11/cast.h	/^    bool load_raw(enable_if_t<std::is_same<C, char>::value, handle> src) {$/;"	f	struct:string_caster	typeref:typename:bool	access:private	signature:(enable_if_t<std::is_same<C,char>::value,handle> src)
string_op	include/pybind11/pytypes.h	/^    T string_op() const {$/;"	f	class:bytes	typeref:typename:T	access:private	signature:() const
strings	include/pybind11/pybind11.h	/^        std::vector<char *> strings;$/;"	m	class:cpp_function::strdup_guard	typeref:typename:std::vector<char * >	access:private
strip_comments	tests/test_factory_constructors.py	/^def strip_comments(s):$/;"	f	access:public	signature:(s)
strip_function_object	include/pybind11/detail/common.h	/^struct strip_function_object {$/;"	s
strip_function_object::type	include/pybind11/detail/common.h	/^    using type = typename remove_class<decltype(&F::operator())>::type;$/;"	t	struct:strip_function_object	access:public
strip_padding	include/pybind11/numpy.h	/^    dtype strip_padding(ssize_t itemsize) {$/;"	f	class:dtype	typeref:typename:dtype	access:private	signature:(ssize_t itemsize)
sub	tests/test_pytypes.py	/^        sub = SubTestObject()$/;"	v	class:test_accessors.TestObject	access:public
sub_tstate	tests/test_embed/test_interpreter.cpp	/^    auto *sub_tstate = Py_NewInterpreter();$/;"	v	typeref:typename:auto *
subarray	include/pybind11/numpy.h	/^    char *subarray;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char *	access:public
subcaster	include/pybind11/cast.h	/^    caster_t subcaster;$/;"	m	class:type_caster	typeref:typename:caster_t	access:private
subcaster_cast_op_type	include/pybind11/cast.h	/^    using subcaster_cast_op_type = typename caster_t::template cast_op_type<reference_t>;$/;"	t	class:type_caster	typeref:typename:caster_t::template cast_op_type<reference_t>	access:private
subcasters	include/pybind11/cast.h	/^    Tuple<make_caster<Ts>...> subcasters;$/;"	m	class:tuple_caster	typeref:typename:Tuple<make_caster<Ts>...>	access:protected
submodules	tests/test_eigen_tensor.py	/^submodules = [eigen_tensor.c_style, eigen_tensor.f_style]$/;"	v	access:public
sum	tests/test_methods_and_attributes.cpp	/^    double sum() const { return rw_value + ro_value; }$/;"	f	class:RegisteredDerived	typeref:typename:double	file:	access:public	signature:() const
supported_standards	tools/pybind11Common.cmake	/^    set(supported_standards 11 14 17 20)$/;"	v
supported_types	docs/basics.rst	/^.. _supported_types:$/;"	T	chapter:Exporting variables
surface11	docs/pybind11_vs_boost_python1.svg	/^<g id="surface11">$/;"	i
surface18	docs/pybind11_vs_boost_python2.svg	/^<g id="surface18">$/;"	i
sv1	tests/test_methods_and_attributes.cpp	/^    static UserType sv1;$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
sv1	tests/test_methods_and_attributes.cpp	/^UserType TestPropRVP::sv1(1);$/;"	m	class:TestPropRVP	typeref:typename:UserType
sv2	tests/test_methods_and_attributes.cpp	/^    static UserType sv2;$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
sv2	tests/test_methods_and_attributes.cpp	/^UserType TestPropRVP::sv2(1);$/;"	m	class:TestPropRVP	typeref:typename:UserType
sync	include/pybind11/iostream.h	/^    int sync() override { return _sync(); }$/;"	f	class:pythonbuf	typeref:typename:int	access:private	signature:()
sys	tests/test_embed/test_interpreter.cpp	/^    auto sys = py::module_::import("sys");$/;"	v	typeref:typename:auto
sys_path	tests/test_embed/test_interpreter.cpp	/^    auto sys_path = py::str(py::module_::import("sys").attr("path")).cast<std::string>();$/;"	v	typeref:typename:auto
system_time	tests/test_chrono.cpp	/^    using system_time = std::chrono::system_clock::time_point;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::chrono::system_clock::time_point	file:
t_	tests/test_iostream.cpp	/^    std::thread *t_{nullptr};$/;"	m	struct:TestThread	typeref:typename:std::thread *	file:	access:public
tag	tests/test_builtin_casters.cpp	/^    int tag;$/;"	m	struct:ConstRefCasted	typeref:typename:int	file:	access:public
take_ownership	include/pybind11/detail/common.h	/^    take_ownership,$/;"	e	enum:return_value_policy	access:public
temp_name	include/pybind11/eigen/tensor.h	/^    static constexpr auto temp_name = get_tensor_descriptor<Type, false>::value;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
temp_path	tools/JoinPaths.cmake	/^                set(temp_path "${current_segment}")$/;"	v	function:join_paths
temp_path	tools/JoinPaths.cmake	/^                set(temp_path "${temp_path}\/${current_segment}")$/;"	v	function:join_paths
temp_path	tools/JoinPaths.cmake	/^    set(temp_path "${first_path_segment}")$/;"	v	function:join_paths
templates_path	docs/conf.py	/^templates_path = [".templates"]$/;"	v	access:public
tensor_ref	tests/test_eigen_tensor.py	/^tensor_ref = np.empty((3, 5, 2), dtype=np.int64)$/;"	v	access:public
test_accepts_none	tests/test_methods_and_attributes.py	/^def test_accepts_none(msg):$/;"	f	access:public	signature:(msg)
test_accessor_moves	tests/test_pytypes.py	/^def test_accessor_moves():$/;"	f	access:public	signature:()
test_accessors	tests/test_pytypes.py	/^def test_accessors():$/;"	f	access:public	signature:()
test_accessors.SubTestObject	tests/test_pytypes.py	/^    class SubTestObject:$/;"	c	function:test_accessors	file:	inherits:	access:private
test_accessors.SubTestObject.attr_char	tests/test_pytypes.py	/^        attr_char = 2$/;"	v	class:test_accessors.SubTestObject	access:public
test_accessors.SubTestObject.attr_obj	tests/test_pytypes.py	/^        attr_obj = 1$/;"	v	class:test_accessors.SubTestObject	access:public
test_accessors.TestObject	tests/test_pytypes.py	/^    class TestObject:$/;"	c	function:test_accessors	file:	inherits:	access:private
test_accessors.TestObject.basic_attr	tests/test_pytypes.py	/^        basic_attr = 1$/;"	v	class:test_accessors.TestObject	access:public
test_accessors.TestObject.begin_end	tests/test_pytypes.py	/^        begin_end = [1, 2, 3]$/;"	v	class:test_accessors.TestObject	access:public
test_accessors.TestObject.d	tests/test_pytypes.py	/^        d = {"operator[object]": 1, "operator[char *]": 2}$/;"	v	class:test_accessors.TestObject	access:public
test_accessors.TestObject.func	tests/test_pytypes.py	/^        def func(self, x, *args):$/;"	m	class:test_accessors.TestObject	access:public	signature:(self, x, *args)
test_accessors.TestObject.sub	tests/test_pytypes.py	/^        sub = SubTestObject()$/;"	v	class:test_accessors.TestObject	access:public
test_alias_delay_initialization1	tests/test_virtual_functions.py	/^def test_alias_delay_initialization1(capture):$/;"	f	access:public	signature:(capture)
test_alias_delay_initialization1.B	tests/test_virtual_functions.py	/^    class B(m.A):$/;"	c	function:test_alias_delay_initialization1	file:	inherits:m.A	access:private
test_alias_delay_initialization1.B.__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization1.B	access:public	signature:(self)
test_alias_delay_initialization1.B.f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization1.B	access:public	signature:(self)
test_alias_delay_initialization2	tests/test_virtual_functions.py	/^def test_alias_delay_initialization2(capture):$/;"	f	access:public	signature:(capture)
test_alias_delay_initialization2.B2	tests/test_virtual_functions.py	/^    class B2(m.A2):$/;"	c	function:test_alias_delay_initialization2	file:	inherits:m.A2	access:private
test_alias_delay_initialization2.B2.__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_alias_delay_initialization2.B2	access:public	signature:(self)
test_alias_delay_initialization2.B2.f	tests/test_virtual_functions.py	/^        def f(self):$/;"	m	class:test_alias_delay_initialization2.B2	access:public	signature:(self)
test_aligned	tests/test_class.py	/^def test_aligned():$/;"	f	access:public	signature:()
test_alive_gc	tests/test_call_policies.py	/^def test_alive_gc(capture):$/;"	f	access:public	signature:(capture)
test_alive_gc_derived	tests/test_call_policies.py	/^def test_alive_gc_derived(capture):$/;"	f	access:public	signature:(capture)
test_alive_gc_derived.Derived	tests/test_call_policies.py	/^    class Derived(m.Parent):$/;"	c	function:test_alive_gc_derived	file:	inherits:m.Parent	access:private
test_alive_gc_multi_derived	tests/test_call_policies.py	/^def test_alive_gc_multi_derived(capture):$/;"	f	access:public	signature:(capture)
test_alive_gc_multi_derived.Derived	tests/test_call_policies.py	/^    class Derived(m.Parent, m.Child):$/;"	c	function:test_alive_gc_multi_derived	file:	inherits:m.Parent, m.Child	access:private
test_alive_gc_multi_derived.Derived.__init__	tests/test_call_policies.py	/^        def __init__(self):$/;"	m	class:test_alive_gc_multi_derived.Derived	access:public	signature:(self)
test_all_basic_tests_completeness	tests/test_gil_scoped.py	/^def test_all_basic_tests_completeness():$/;"	f	access:public	signature:()
test_arg_and_kwargs	tests/test_kwargs_and_defaults.py	/^def test_arg_and_kwargs():$/;"	f	access:public	signature:()
test_args_refcount	tests/test_kwargs_and_defaults.py	/^def test_args_refcount():$/;"	f	access:public	signature:()
test_argument_conversions	tests/test_numpy_array.py	/^def test_argument_conversions(forcecast, contiguity, noconvert):$/;"	f	access:public	signature:(forcecast, contiguity, noconvert)
test_array	tests/test_stl.py	/^def test_array(doc):$/;"	f	access:public	signature:(doc)
test_array_array	tests/test_numpy_dtypes.py	/^def test_array_array():$/;"	f	access:public	signature:()
test_array_attributes	tests/test_numpy_array.py	/^def test_array_attributes():$/;"	f	access:public	signature:()
test_array_cast_sequence	tests/test_stl.py	/^def test_array_cast_sequence():$/;"	f	access:public	signature:()
test_array_collapse	tests/test_numpy_vectorize.py	/^def test_array_collapse():$/;"	f	access:public	signature:()
test_array_constructors	tests/test_numpy_dtypes.py	/^def test_array_constructors():$/;"	f	access:public	signature:()
test_array_create_and_resize	tests/test_numpy_array.py	/^def test_array_create_and_resize():$/;"	f	access:public	signature:()
test_array_ctors	tests/test_numpy_dtypes.cpp	/^py::array_t<int32_t, 0> test_array_ctors(int i) {$/;"	f	typeref:typename:py::array_t<int32_t,0>	signature:(int i)
test_array_failure	tests/test_numpy_array.py	/^def test_array_failure():$/;"	f	access:public	signature:()
test_array_resize	tests/test_numpy_array.py	/^def test_array_resize():$/;"	f	access:public	signature:()
test_array_unchecked_dyn_dims	tests/test_numpy_array.py	/^def test_array_unchecked_dyn_dims():$/;"	f	access:public	signature:()
test_array_unchecked_fixed_dims	tests/test_numpy_array.py	/^def test_array_unchecked_fixed_dims(msg):$/;"	f	access:public	signature:(msg)
test_array_view	tests/test_numpy_array.py	/^def test_array_view():$/;"	f	access:public	signature:()
test_array_view_invalid	tests/test_numpy_array.py	/^def test_array_view_invalid():$/;"	f	access:public	signature:()
test_as_type_py	tests/test_class.py	/^def test_as_type_py():$/;"	f	access:public	signature:()
test_async_async_callbacks	tests/test_callbacks.py	/^def test_async_async_callbacks():$/;"	f	access:public	signature:()
test_async_callbacks	tests/test_callbacks.py	/^def test_async_callbacks():$/;"	f	access:public	signature:()
test_async_callbacks.Item	tests/test_callbacks.py	/^    class Item:$/;"	c	function:test_async_callbacks	file:	inherits:	access:private
test_async_callbacks.Item.__init__	tests/test_callbacks.py	/^        def __init__(self, value):$/;"	m	class:test_async_callbacks.Item	access:public	signature:(self, value)
test_async_callbacks.gen_f	tests/test_callbacks.py	/^    def gen_f():$/;"	f	function:test_async_callbacks	file:	access:private	signature:()
test_at	tests/test_numpy_array.py	/^def test_at(arr):$/;"	f	access:public	signature:(arr)
test_at_fail	tests/test_numpy_array.py	/^def test_at_fail(arr, dim):$/;"	f	access:public	signature:(arr, dim)
test_automatic_upcasting	tests/test_class.py	/^def test_automatic_upcasting():$/;"	f	access:public	signature:()
test_await	tests/test_async.py	/^def test_await(event_loop):$/;"	f	access:public	signature:(event_loop)
test_await_missing	tests/test_async.py	/^def test_await_missing(event_loop):$/;"	f	access:public	signature:(event_loop)
test_bad_arg_default	tests/test_methods_and_attributes.py	/^def test_bad_arg_default(msg):$/;"	f	access:public	signature:(msg)
test_bad_cpp_to_python_casts	tests/test_eigen_tensor.py	/^def test_bad_cpp_to_python_casts(m):$/;"	f	access:public	signature:(m)
test_bad_python_to_cpp_casts	tests/test_eigen_tensor.py	/^def test_bad_python_to_cpp_casts(m):$/;"	f	access:public	signature:(m)
test_base_and_derived_nested_scope	tests/test_class.py	/^def test_base_and_derived_nested_scope():$/;"	f	access:public	signature:()
test_binary_operators	tests/test_enum.py	/^def test_binary_operators():$/;"	f	access:public	signature:()
test_bind_protected_functions	tests/test_class.py	/^def test_bind_protected_functions():$/;"	f	access:public	signature:()
test_bind_protected_functions.C	tests/test_class.py	/^    class C(m.ProtectedB):$/;"	c	function:test_bind_protected_functions	file:	inherits:m.ProtectedB	access:private
test_bind_protected_functions.C.__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_bind_protected_functions.C	access:public	signature:(self)
test_bind_protected_functions.C.foo	tests/test_class.py	/^        def foo(self):$/;"	m	class:test_bind_protected_functions.C	access:public	signature:(self)
test_block_runtime_error_type_caster_eigen_ref_made_a_copy	tests/test_eigen_matrix.py	/^def test_block_runtime_error_type_caster_eigen_ref_made_a_copy():$/;"	f	access:public	signature:()
test_bool	tests/test_pytypes.py	/^def test_bool(doc):$/;"	f	access:public	signature:(doc)
test_bool_caster	tests/test_builtin_casters.py	/^def test_bool_caster():$/;"	f	access:public	signature:()
test_bool_caster.A	tests/test_builtin_casters.py	/^    class A:$/;"	c	function:test_bool_caster	file:	inherits:	access:private
test_bool_caster.A.__bool__	tests/test_builtin_casters.py	/^        def __bool__(self):$/;"	m	class:test_bool_caster.A	access:public	signature:(self)
test_bool_caster.A.__init__	tests/test_builtin_casters.py	/^        def __init__(self, x):$/;"	m	class:test_bool_caster.A	access:public	signature:(self, x)
test_bool_caster.A.__nonzero__	tests/test_builtin_casters.py	/^        def __nonzero__(self):$/;"	m	class:test_bool_caster.A	access:public	signature:(self)
test_bool_caster.B	tests/test_builtin_casters.py	/^    class B:$/;"	c	function:test_bool_caster	file:	inherits:	access:private
test_bool_caster.cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_bool_caster	file:	access:private	signature:(v)
test_bool_caster.require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_bool_caster	file:	access:private	signature:(v)
test_bool_underlying_enum	tests/test_enum.py	/^def test_bool_underlying_enum():$/;"	f	access:public	signature:()
test_boost_optional	tests/test_stl.py	/^def test_boost_optional():$/;"	f	access:public	signature:()
test_both_ref_mutators	tests/test_eigen_matrix.py	/^def test_both_ref_mutators():$/;"	f	access:public	signature:()
test_bound_method_callback	tests/test_callbacks.py	/^def test_bound_method_callback():$/;"	f	access:public	signature:()
test_bound_method_callback.MyClass	tests/test_callbacks.py	/^    class MyClass:$/;"	c	function:test_bound_method_callback	file:	inherits:	access:private
test_bound_method_callback.MyClass.double	tests/test_callbacks.py	/^        def double(self, val):$/;"	m	class:test_bound_method_callback.MyClass	access:public	signature:(self, val)
test_bounds_check	tests/test_numpy_array.py	/^def test_bounds_check(arr):$/;"	f	access:public	signature:(arr)
test_brace_initialization	tests/test_class.py	/^def test_brace_initialization():$/;"	f	access:public	signature:()
test_build_global_dist	tests/extra_python_package/test_files.py	/^def test_build_global_dist(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
test_build_sdist	tests/extra_python_package/test_files.py	/^def test_build_sdist(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
test_builtin_functions	tests/test_pytypes.py	/^def test_builtin_functions():$/;"	f	access:public	signature:()
test_builtin_key_type	tests/test_modules.py	/^def test_builtin_key_type():$/;"	f	access:public	signature:()
test_builtins_cast_return_none	tests/test_builtin_casters.py	/^def test_builtins_cast_return_none():$/;"	f	access:public	signature:()
test_bytearray	tests/test_pytypes.py	/^def test_bytearray():$/;"	f	access:public	signature:()
test_bytearray_to_string	tests/test_builtin_casters.py	/^def test_bytearray_to_string():$/;"	f	access:public	signature:()
test_bytes	tests/test_constants_and_functions.py	/^def test_bytes():$/;"	f	access:public	signature:()
test_bytes	tests/test_pytypes.py	/^def test_bytes(doc):$/;"	f	access:public	signature:(doc)
test_bytes_to_string	tests/test_builtin_casters.py	/^def test_bytes_to_string():$/;"	f	access:public	signature:()
test_call_callback_with_object_return	tests/test_type_caster_pyobject_ptr.py	/^def test_call_callback_with_object_return(call_callback):$/;"	f	access:public	signature:(call_callback)
test_call_callback_with_object_return.cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(value):$/;"	f	function:test_call_callback_with_object_return	file:	access:private	signature:(value)
test_call_callback_with_pyobject_ptr_arg	tests/test_type_caster_pyobject_ptr.py	/^def test_call_callback_with_pyobject_ptr_arg():$/;"	f	access:public	signature:()
test_call_callback_with_pyobject_ptr_arg.cb	tests/test_type_caster_pyobject_ptr.py	/^    def cb(obj):$/;"	f	function:test_call_callback_with_pyobject_ptr_arg	file:	access:private	signature:(obj)
test_call_guard	tests/test_call_policies.py	/^def test_call_guard():$/;"	f	access:public	signature:()
test_callback_num_times	tests/test_callbacks.py	/^def test_callback_num_times():$/;"	f	access:public	signature:()
test_callback_pure_virtual_func	tests/test_gil_scoped.py	/^def test_callback_pure_virtual_func():$/;"	f	access:public	signature:()
test_callback_py_obj	tests/test_gil_scoped.py	/^def test_callback_py_obj():$/;"	f	access:public	signature:()
test_callback_std_func	tests/test_gil_scoped.py	/^def test_callback_std_func():$/;"	f	access:public	signature:()
test_callback_virtual_func	tests/test_gil_scoped.py	/^def test_callback_virtual_func():$/;"	f	access:public	signature:()
test_callbacks	tests/test_callbacks.py	/^def test_callbacks():$/;"	f	access:public	signature:()
test_callbacks.func1	tests/test_callbacks.py	/^    def func1():$/;"	f	function:test_callbacks	file:	access:private	signature:()
test_callbacks.func2	tests/test_callbacks.py	/^    def func2(a, b, c, d):$/;"	f	function:test_callbacks	file:	access:private	signature:(a, b, c, d)
test_callbacks.func3	tests/test_callbacks.py	/^    def func3(a):$/;"	f	function:test_callbacks	file:	access:private	signature:(a)
test_capsule	tests/test_pytypes.py	/^def test_capsule(capture):$/;"	f	access:public	signature:(capture)
test_captured	tests/test_iostream.py	/^def test_captured(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_large_string	tests/test_iostream.py	/^def test_captured_large_string(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_2byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_2byte_offset0(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_2byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_2byte_offset1(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_3byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset0(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_3byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset1(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_3byte_offset2	tests/test_iostream.py	/^def test_captured_utf8_3byte_offset2(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_4byte_offset0	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset0(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_4byte_offset1	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset1(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_4byte_offset2	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset2(capsys):$/;"	f	access:public	signature:(capsys)
test_captured_utf8_4byte_offset3	tests/test_iostream.py	/^def test_captured_utf8_4byte_offset3(capsys):$/;"	f	access:public	signature:(capsys)
test_carray_iterator	tests/test_sequences_and_iterators.py	/^def test_carray_iterator():$/;"	f	access:public	signature:()
test_cast	tests/test_vector_unique_ptr_member.py	/^def test_cast():$/;"	f	access:public	signature:()
test_cast_from_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_from_pyobject_ptr():$/;"	f	access:public	signature:()
test_cast_handle_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_handle_to_pyobject_ptr():$/;"	f	access:public	signature:()
test_cast_list_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_list_to_pyobject_ptr():$/;"	f	access:public	signature:()
test_cast_numpy_int64_to_uint64	tests/test_numpy_array.py	/^def test_cast_numpy_int64_to_uint64():$/;"	f	access:public	signature:()
test_cast_object_to_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_object_to_pyobject_ptr():$/;"	f	access:public	signature:()
test_cast_to_python_non_nullptr_with_error_set	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_to_python_non_nullptr_with_error_set():$/;"	f	access:public	signature:()
test_cast_to_python_nullptr	tests/test_type_caster_pyobject_ptr.py	/^def test_cast_to_python_nullptr(set_error):$/;"	f	access:public	signature:(set_error)
test_casts_none	tests/test_methods_and_attributes.py	/^def test_casts_none():$/;"	f	access:public	signature:()
test_char_underlying_enum	tests/test_enum.py	/^def test_char_underlying_enum():  # Issue #1331\/PR #1334:$/;"	f	access:public	signature:()
test_chrono_different_resolutions	tests/test_chrono.py	/^def test_chrono_different_resolutions():$/;"	f	access:public	signature:()
test_chrono_duration_roundtrip	tests/test_chrono.py	/^def test_chrono_duration_roundtrip():$/;"	f	access:public	signature:()
test_chrono_duration_subtraction_equivalence	tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence():$/;"	f	access:public	signature:()
test_chrono_duration_subtraction_equivalence_date	tests/test_chrono.py	/^def test_chrono_duration_subtraction_equivalence_date():$/;"	f	access:public	signature:()
test_chrono_steady_clock	tests/test_chrono.py	/^def test_chrono_steady_clock():$/;"	f	access:public	signature:()
test_chrono_steady_clock_roundtrip	tests/test_chrono.py	/^def test_chrono_steady_clock_roundtrip():$/;"	f	access:public	signature:()
test_chrono_system_clock	tests/test_chrono.py	/^def test_chrono_system_clock():$/;"	f	access:public	signature:()
test_chrono_system_clock_roundtrip	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip():$/;"	f	access:public	signature:()
test_chrono_system_clock_roundtrip_date	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_date():$/;"	f	access:public	signature:()
test_chrono_system_clock_roundtrip_time	tests/test_chrono.py	/^def test_chrono_system_clock_roundtrip_time(time1, tz, monkeypatch):$/;"	f	access:public	signature:(time1, tz, monkeypatch)
test_class	tests/test_class.cpp	/^namespace test_class {$/;"	n	file:
test_class::pr4220_tripped_over_this	tests/test_class.cpp	/^namespace pr4220_tripped_over_this { \/\/ PR #4227$/;"	n	namespace:test_class	file:
test_class::pr4220_tripped_over_this::Empty0	tests/test_class.cpp	/^using Empty0 = SoEmpty<0x0>;$/;"	t	namespace:test_class::pr4220_tripped_over_this	typeref:typename:SoEmpty<0x0>	file:
test_class::pr4220_tripped_over_this::SoEmpty	tests/test_class.cpp	/^struct SoEmpty {};$/;"	s	namespace:test_class::pr4220_tripped_over_this	file:
test_class::pr4220_tripped_over_this::bind_empty0	tests/test_class.cpp	/^void bind_empty0(py::module_ &m) {$/;"	f	namespace:test_class::pr4220_tripped_over_this	typeref:typename:void	signature:(py::module_ & m)
test_class::pr4220_tripped_over_this::get_msg	tests/test_class.cpp	/^std::string get_msg(const T &) {$/;"	f	namespace:test_class::pr4220_tripped_over_this	typeref:typename:std::string	signature:(const T &)
test_class_refcount	tests/test_class.py	/^def test_class_refcount():$/;"	f	access:public	signature:()
test_class_refcount.PyDog	tests/test_class.py	/^    class PyDog(m.Dog):$/;"	c	function:test_class_refcount	file:	inherits:m.Dog	access:private
test_cls_and_dtype_conversion	tests/test_numpy_dtypes.py	/^def test_cls_and_dtype_conversion(simple_dtype):$/;"	f	access:public	signature:(simple_dtype)
test_cmake_build	tests/test_cmake_build/CMakeLists.txt	/^add_custom_target(test_cmake_build)$/;"	t
test_comparable	include/pybind11/stl_bind.h	/^    static std::false_type test_comparable(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
test_compare_buffer_info	tests/test_numpy_dtypes.py	/^def test_compare_buffer_info():$/;"	f	access:public	signature:()
test_complex_array	tests/test_numpy_dtypes.py	/^def test_complex_array():$/;"	f	access:public	signature:()
test_complex_cast	tests/test_builtin_casters.py	/^def test_complex_cast():$/;"	f	access:public	signature:()
test_const_name	tests/test_const_name.py	/^def test_const_name(func, selector, expected):$/;"	f	access:public	signature:(func, selector, expected)
test_const_ref_caster	tests/test_builtin_casters.py	/^def test_const_ref_caster():$/;"	f	access:public	signature:()
test_constants	tests/test_constants_and_functions.py	/^def test_constants():$/;"	f	access:public	signature:()
test_constructors	tests/test_numpy_array.py	/^def test_constructors():$/;"	f	access:public	signature:()
test_constructors	tests/test_pytypes.py	/^def test_constructors():$/;"	f	access:public	signature:()
test_convert_tensor_to_py	tests/test_eigen_tensor.py	/^def test_convert_tensor_to_py(m, func_name):$/;"	f	access:public	signature:(m, func_name)
test_copy_method	tests/test_methods_and_attributes.py	/^def test_copy_method():$/;"	f	access:public	signature:()
test_cpp_callable_cleanup	tests/test_callbacks.py	/^def test_cpp_callable_cleanup():$/;"	f	access:public	signature:()
test_cpp_casting	tests/test_eigen_matrix.py	/^def test_cpp_casting():$/;"	f	access:public	signature:()
test_cpp_function_roundtrip	tests/test_callbacks.py	/^def test_cpp_function_roundtrip():$/;"	f	access:public	signature:()
test_cpp_iterators	tests/test_pytypes.py	/^def test_cpp_iterators():$/;"	f	access:public	signature:()
test_create	tests/test_vector_unique_ptr_member.py	/^def test_create(num_elems):$/;"	f	access:public	signature:(num_elems)
test_cross_module_calls	tests/test_local_bindings.py	/^def test_cross_module_calls():$/;"	f	access:public	signature:()
test_cross_module_calls.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_cross_module_calls	file:	access:private	nameref:module:pybind11_cross_module_tests
test_cross_module_exception_translator	tests/test_exceptions.py	/^def test_cross_module_exception_translator():$/;"	f	access:public	signature:()
test_cross_module_exceptions	tests/test_exceptions.py	/^def test_cross_module_exceptions(msg):$/;"	f	access:public	signature:(msg)
test_cross_module_gil_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_acquired():$/;"	f	access:public	signature:()
test_cross_module_gil_inner_custom_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_custom_acquired():$/;"	f	access:public	signature:()
test_cross_module_gil_inner_custom_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_custom_released():$/;"	f	access:public	signature:()
test_cross_module_gil_inner_pybind11_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_pybind11_acquired():$/;"	f	access:public	signature:()
test_cross_module_gil_inner_pybind11_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_inner_pybind11_released():$/;"	f	access:public	signature:()
test_cross_module_gil_nested_custom_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_custom_acquired():$/;"	f	access:public	signature:()
test_cross_module_gil_nested_custom_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_custom_released():$/;"	f	access:public	signature:()
test_cross_module_gil_nested_pybind11_acquired	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_pybind11_acquired():$/;"	f	access:public	signature:()
test_cross_module_gil_nested_pybind11_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_nested_pybind11_released():$/;"	f	access:public	signature:()
test_cross_module_gil_released	tests/test_gil_scoped.py	/^def test_cross_module_gil_released():$/;"	f	access:public	signature:()
test_cross_module_interleaved_error_already_set	tests/test_exceptions.py	/^def test_cross_module_interleaved_error_already_set():$/;"	f	access:public	signature:()
test_ctypes_array_1d	tests/test_buffers.py	/^def test_ctypes_array_1d():$/;"	f	access:public	signature:()
test_ctypes_array_2d	tests/test_buffers.py	/^def test_ctypes_array_2d():$/;"	f	access:public	signature:()
test_ctypes_from_buffer	tests/test_buffers.py	/^def test_ctypes_from_buffer():$/;"	f	access:public	signature:()
test_custom	tests/test_exceptions.py	/^def test_custom(msg):$/;"	f	access:public	signature:(msg)
test_custom_caster_destruction	tests/test_custom_type_casters.py	/^def test_custom_caster_destruction():$/;"	f	access:public	signature:()
test_custom_caster_other_lib	tests/test_custom_type_casters.py	/^def test_custom_caster_other_lib():$/;"	f	access:public	signature:()
test_custom_func	tests/test_callbacks.py	/^def test_custom_func():$/;"	f	access:public	signature:()
test_custom_func2	tests/test_callbacks.py	/^def test_custom_func2():$/;"	f	access:public	signature:()
test_custom_operator_new	tests/test_eigen_matrix.py	/^def test_custom_operator_new():$/;"	f	access:public	signature:()
test_cyclic_gc	tests/test_methods_and_attributes.py	/^def test_cyclic_gc():$/;"	f	access:public	signature:()
test_data	tests/test_numpy_array.py	/^def test_data(arr, args, ret):$/;"	f	access:public	signature:(arr, args, ret)
test_def_submodule_failures	tests/test_modules.py	/^def test_def_submodule_failures():$/;"	f	access:public	signature:()
test_dense	tests/test_eigen_matrix.py	/^def test_dense():$/;"	f	access:public	signature:()
test_dense_signature	tests/test_eigen_matrix.py	/^def test_dense_signature(doc):$/;"	f	access:public	signature:(doc)
test_deque	tests/test_stl.py	/^def test_deque():$/;"	f	access:public	signature:()
test_diamond_inheritance	tests/test_multiple_inheritance.py	/^def test_diamond_inheritance():$/;"	f	access:public	signature:()
test_dict	tests/test_pytypes.py	/^def test_dict(capture, doc):$/;"	f	access:public	signature:(capture, doc)
test_dim_check_fail	tests/test_numpy_array.py	/^def test_dim_check_fail(arr):$/;"	f	access:public	signature:(arr)
test_dispatch_issue	tests/test_virtual_functions.py	/^def test_dispatch_issue(msg):$/;"	f	access:public	signature:(msg)
test_dispatch_issue.PyClass1	tests/test_virtual_functions.py	/^    class PyClass1(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:	inherits:m.DispatchIssue	access:private
test_dispatch_issue.PyClass1.dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass1	access:public	signature:(self)
test_dispatch_issue.PyClass2	tests/test_virtual_functions.py	/^    class PyClass2(m.DispatchIssue):$/;"	c	function:test_dispatch_issue	file:	inherits:m.DispatchIssue	access:private
test_dispatch_issue.PyClass2.dispatch	tests/test_virtual_functions.py	/^        def dispatch(self):$/;"	m	class:test_dispatch_issue.PyClass2	access:public	signature:(self)
test_doc_string	tests/test_eigen_tensor.py	/^def test_doc_string(m, doc):$/;"	f	access:public	signature:(m, doc)
test_docs	tests/test_numpy_vectorize.py	/^def test_docs(doc):$/;"	f	access:public	signature:(doc)
test_docstring_options	tests/test_docstring_options.py	/^def test_docstring_options():$/;"	f	access:public	signature:()
test_docstring_signatures	tests/test_enum.py	/^def test_docstring_signatures():$/;"	f	access:public	signature:()
test_docstrings	tests/test_class.py	/^def test_docstrings(doc):$/;"	f	access:public	signature:(doc)
test_downcast	tests/test_tagbased_polymorphic.py	/^def test_downcast():$/;"	f	access:public	signature:()
test_dtype	tests/test_numpy_dtypes.py	/^def test_dtype(simple_dtype):$/;"	f	access:public	signature:(simple_dtype)
test_dtype_ctors	tests/test_numpy_dtypes.cpp	/^py::list test_dtype_ctors() {$/;"	f	typeref:typename:py::list	signature:()
test_dtype_refcount_leak	tests/test_numpy_array.py	/^def test_dtype_refcount_leak():$/;"	f	access:public	signature:()
test_dtypes	tests/test_numpy_array.py	/^def test_dtypes():$/;"	f	access:public	signature:()
test_dual	tests/test_iostream.py	/^def test_dual(capsys):$/;"	f	access:public	signature:(capsys)
test_duplicate_enum_name	tests/test_enum.py	/^def test_duplicate_enum_name():$/;"	f	access:public	signature:()
test_duplicate_local	tests/test_local_bindings.py	/^def test_duplicate_local():$/;"	f	access:public	signature:()
test_duplicate_registration	tests/test_modules.py	/^def test_duplicate_registration():$/;"	f	access:public	signature:()
test_dynamic_attributes	tests/test_methods_and_attributes.py	/^def test_dynamic_attributes():$/;"	f	access:public	signature:()
test_dynamic_attributes.PythonDerivedDynamicClass	tests/test_methods_and_attributes.py	/^    class PythonDerivedDynamicClass(m.DynamicClass):$/;"	c	function:test_dynamic_attributes	file:	inherits:m.DynamicClass	access:private
test_eigen_keepalive	tests/test_eigen_matrix.py	/^def test_eigen_keepalive():$/;"	f	access:public	signature:()
test_eigen_ref_life_support	tests/test_eigen_matrix.py	/^def test_eigen_ref_life_support():$/;"	f	access:public	signature:()
test_eigen_ref_mutators	tests/test_eigen_matrix.py	/^def test_eigen_ref_mutators():$/;"	f	access:public	signature:()
test_eigen_ref_to_python	tests/test_eigen_matrix.py	/^def test_eigen_ref_to_python():$/;"	f	access:public	signature:()
test_eigen_return_references	tests/test_eigen_matrix.py	/^def test_eigen_return_references():$/;"	f	access:public	signature:()
test_embed	tests/test_embed/CMakeLists.txt	/^add_executable(test_embed catch.cpp test_interpreter.cpp)$/;"	t
test_embed_lib	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^add_library(test_embed_lib ..\/embed.cpp)$/;"	t
test_enum_array	tests/test_numpy_dtypes.py	/^def test_enum_array():$/;"	f	access:public	signature:()
test_enum_pickle	tests/test_pickling.py	/^def test_enum_pickle():$/;"	f	access:public	signature:()
test_enum_pickle.e	tests/test_pickling.py	/^    from pybind11_tests import enums as e$/;"	Y	function:test_enum_pickle	file:	access:private	nameref:unknown:enums
test_enum_to_int	tests/test_enum.py	/^def test_enum_to_int():$/;"	f	access:public	signature:()
test_err	tests/test_iostream.py	/^def test_err(capfd):$/;"	f	access:public	signature:(capfd)
test_error_after_conversions	tests/test_class.py	/^def test_error_after_conversions():$/;"	f	access:public	signature:()
test_error_already_set	tests/test_exceptions.py	/^def test_error_already_set(msg):$/;"	f	access:public	signature:(msg)
test_error_already_set_double_restore	tests/test_exceptions.py	/^def test_error_already_set_double_restore():$/;"	f	access:public	signature:()
test_error_already_set_message_with_malformed_utf8	tests/test_exceptions.py	/^def test_error_already_set_message_with_malformed_utf8():$/;"	f	access:public	signature:()
test_error_already_set_message_with_unicode_surrogate	tests/test_exceptions.py	/^def test_error_already_set_message_with_unicode_surrogate():  # Issue #4288$/;"	f	access:public	signature:()
test_error_already_set_what_with_happy_exceptions	tests/test_exceptions.py	/^def test_error_already_set_what_with_happy_exceptions($/;"	f	access:public	signature:( exc_type, exc_value, expected_what )
test_eval_closure	tests/test_eval.py	/^def test_eval_closure():$/;"	f	access:public	signature:()
test_eval_empty_globals	tests/test_eval.py	/^def test_eval_empty_globals():$/;"	f	access:public	signature:()
test_eval_file	tests/test_eval.py	/^def test_eval_file():$/;"	f	access:public	signature:()
test_evals	tests/test_eval.py	/^def test_evals(capture):$/;"	f	access:public	signature:(capture)
test_exc_sp	tests/test_constants_and_functions.cpp	/^namespace test_exc_sp {$/;"	n	file:
test_exc_sp::C	tests/test_constants_and_functions.cpp	/^struct C {$/;"	s	namespace:test_exc_sp	file:
test_exc_sp::C::m1	tests/test_constants_and_functions.cpp	/^    int m1(int x) noexcept { return x - 1; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
test_exc_sp::C::m2	tests/test_constants_and_functions.cpp	/^    int m2(int x) const noexcept { return x - 2; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
test_exc_sp::C::m3	tests/test_constants_and_functions.cpp	/^    int m3(int x) noexcept(true) { return x - 3; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
test_exc_sp::C::m4	tests/test_constants_and_functions.cpp	/^    int m4(int x) const noexcept(true) { return x - 4; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
test_exc_sp::C::m5	tests/test_constants_and_functions.cpp	/^    int m5(int x) noexcept(false) { return x - 5; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x)
test_exc_sp::C::m6	tests/test_constants_and_functions.cpp	/^    int m6(int x) const noexcept(false) { return x - 6; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
test_exc_sp::C::m7	tests/test_constants_and_functions.cpp	/^    int m7(int x) throw() { return x - 7; }$/;"	f	struct:test_exc_sp::C	file:	access:public	signature:(int x)
test_exc_sp::C::m8	tests/test_constants_and_functions.cpp	/^    int m8(int x) const throw() { return x - 8; }$/;"	f	struct:test_exc_sp::C	typeref:typename:int	file:	access:public	signature:(int x) const
test_exc_sp::f1	tests/test_constants_and_functions.cpp	/^int f1(int x) noexcept(true) { return x + 1; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
test_exc_sp::f2	tests/test_constants_and_functions.cpp	/^int f2(int x) noexcept(true) { return x + 2; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
test_exc_sp::f3	tests/test_constants_and_functions.cpp	/^int f3(int x) noexcept(false) { return x + 3; }$/;"	f	namespace:test_exc_sp	typeref:typename:int	signature:(int x)
test_exc_sp::f4	tests/test_constants_and_functions.cpp	/^int f4(int x) throw() { return x + 4; } \/\/ Deprecated equivalent to noexcept(true)$/;"	f	namespace:test_exc_sp	signature:(int x)
test_exception_matches	tests/test_exceptions.py	/^def test_exception_matches():$/;"	f	access:public	signature:()
test_exception_rvalue_abort	tests/test_class.py	/^def test_exception_rvalue_abort():$/;"	f	access:public	signature:()
test_exception_specifiers	tests/test_constants_and_functions.py	/^def test_exception_specifiers():$/;"	f	access:public	signature:()
test_exp_optional	tests/test_stl.py	/^def test_exp_optional():$/;"	f	access:public	signature:()
test_external_float_	tests/test_pytypes.py	/^def test_external_float_():$/;"	f	access:public	signature:()
test_files	tests/CMakeLists.txt	/^    set(test_files "")$/;"	v
test_files	tests/CMakeLists.txt	/^  set(test_files ${PYBIND11_TEST_FILES})$/;"	v
test_final	tests/test_class.py	/^def test_final():$/;"	f	access:public	signature:()
test_final.PyFinalChild	tests/test_class.py	/^        class PyFinalChild(m.IsFinal):$/;"	c	function:test_final	file:	inherits:m.IsFinal	access:private
test_fixed	tests/test_eigen_matrix.py	/^def test_fixed():$/;"	f	access:public	signature:()
test_flaky_exception_failure_point_init	tests/test_exceptions.py	/^def test_flaky_exception_failure_point_init():$/;"	f	access:public	signature:()
test_flaky_exception_failure_point_str	tests/test_exceptions.py	/^def test_flaky_exception_failure_point_str():$/;"	f	access:public	signature:()
test_float	tests/test_pytypes.py	/^def test_float(doc):$/;"	f	access:public	signature:(doc)
test_floating_point_duration	tests/test_chrono.py	/^def test_floating_point_duration():$/;"	f	access:public	signature:()
test_flush	tests/test_iostream.py	/^def test_flush(capfd):$/;"	f	access:public	signature:(capfd)
test_fn_cast_int_exception	tests/test_exceptions.py	/^def test_fn_cast_int_exception():$/;"	f	access:public	signature:()
test_format_descriptor_format_buffer_info_equiv	tests/test_buffers.py	/^def test_format_descriptor_format_buffer_info_equiv(cpp_name, np_dtype):$/;"	f	access:public	signature:(cpp_name, np_dtype)
test_format_descriptors	tests/test_numpy_dtypes.py	/^def test_format_descriptors():$/;"	f	access:public	signature:()
test_format_descriptors_for_floating_point_types	tests/test_numpy_array.py	/^def test_format_descriptors_for_floating_point_types(test_func):$/;"	f	access:public	signature:(test_func)
test_from_iterable	tests/test_pytypes.py	/^def test_from_iterable(pytype, from_iter_func):$/;"	f	access:public	signature:(pytype, from_iter_func)
test_from_python	tests/test_buffers.py	/^def test_from_python():$/;"	f	access:public	signature:()
test_frozenset	tests/test_pytypes.py	/^def test_frozenset(capture, doc):$/;"	f	access:public	signature:(capture, doc)
test_fs_path	tests/test_stl.py	/^def test_fs_path():$/;"	f	access:public	signature:()
test_fs_path.PseudoBytesPath	tests/test_stl.py	/^    class PseudoBytesPath:$/;"	c	function:test_fs_path	file:	inherits:	access:private
test_fs_path.PseudoBytesPath.__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoBytesPath	access:public	signature:(self)
test_fs_path.PseudoStrPath	tests/test_stl.py	/^    class PseudoStrPath:$/;"	c	function:test_fs_path	file:	inherits:	access:private
test_fs_path.PseudoStrPath.__fspath__	tests/test_stl.py	/^        def __fspath__(self):$/;"	m	class:test_fs_path.PseudoStrPath	access:public	signature:(self)
test_function	tests/test_enum.cpp	/^        static EMode test_function(EMode mode) { return mode; }$/;"	f	class:TEST_SUBMODULE::ClassWithUnscopedEnum	typeref:typename:EMode	file:	access:public	signature:(EMode mode)
test_function1	tests/test_constants_and_functions.cpp	/^std::string test_function1() { return "test_function()"; }$/;"	f	typeref:typename:std::string	signature:()
test_function2	tests/test_constants_and_functions.cpp	/^std::string test_function2(MyEnum k) { return "test_function(enum=" + std::to_string(k) + ")"; }$/;"	f	typeref:typename:std::string	signature:(MyEnum k)
test_function3	tests/test_constants_and_functions.cpp	/^std::string test_function3(int i) { return "test_function(" + std::to_string(i) + ")"; }$/;"	f	typeref:typename:std::string	signature:(int i)
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4() { return "test_function()"; }$/;"	f	typeref:typename:py::str	signature:()
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(char *) { return "test_function(char *)"; }$/;"	f	typeref:typename:py::str	signature:(char *)
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(float, int) { return "test_function(float, int)"; }$/;"	f	typeref:typename:py::str	signature:(float,int)
test_function4	tests/test_constants_and_functions.cpp	/^py::str test_function4(int, float) { return "test_function(int, float)"; }$/;"	f	typeref:typename:py::str	signature:(int,float)
test_function_overloading	tests/test_constants_and_functions.py	/^def test_function_overloading():$/;"	f	access:public	signature:()
test_function_record_leaks	tests/test_constants_and_functions.py	/^def test_function_record_leaks():$/;"	f	access:public	signature:()
test_function_record_leaks.RaisingRepr	tests/test_constants_and_functions.py	/^    class RaisingRepr:$/;"	c	function:test_function_record_leaks	file:	inherits:	access:private
test_function_record_leaks.RaisingRepr.__repr__	tests/test_constants_and_functions.py	/^        def __repr__(self):$/;"	m	class:test_function_record_leaks.RaisingRepr	access:public	signature:(self)
test_function_signatures	tests/test_callbacks.py	/^def test_function_signatures(doc):$/;"	f	access:public	signature:(doc)
test_function_signatures	tests/test_kwargs_and_defaults.py	/^def test_function_signatures(doc):$/;"	f	access:public	signature:(doc)
test_function_with_string_and_vector_string_arg	tests/test_stl.py	/^def test_function_with_string_and_vector_string_arg():$/;"	f	access:public	signature:()
test_generalized_iterators	tests/test_sequences_and_iterators.py	/^def test_generalized_iterators():$/;"	f	access:public	signature:()
test_generalized_iterators_simple	tests/test_sequences_and_iterators.py	/^def test_generalized_iterators_simple():$/;"	f	access:public	signature:()
test_gil	tests/test_virtual_functions.cpp	/^static void test_gil() {$/;"	f	typeref:typename:void	file:	signature:()
test_gil_from_thread	tests/test_virtual_functions.cpp	/^static void test_gil_from_thread() {$/;"	f	typeref:typename:void	file:	signature:()
test_greedy_string_overload	tests/test_numpy_array.py	/^def test_greedy_string_overload():$/;"	f	access:public	signature:()
test_guard_capture	tests/test_iostream.py	/^def test_guard_capture(capsys):$/;"	f	access:public	signature:(capsys)
test_handle_from_move_only_type_with_operator_PyObject	tests/test_pytypes.py	/^def test_handle_from_move_only_type_with_operator_PyObject():$/;"	f	access:public	signature:()
test_hash	tests/test_pytypes.py	/^def test_hash():$/;"	f	access:public	signature:()
test_hash.Hashable	tests/test_pytypes.py	/^    class Hashable:$/;"	c	function:test_hash	file:	inherits:	access:private
test_hash.Hashable.__hash__	tests/test_pytypes.py	/^        def __hash__(self):$/;"	m	class:test_hash.Hashable	access:public	signature:(self)
test_hash.Hashable.__init__	tests/test_pytypes.py	/^        def __init__(self, value):$/;"	m	class:test_hash.Hashable	access:public	signature:(self, value)
test_hash.Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_hash	file:	inherits:	access:private
test_hash.Unhashable.__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_hash.Unhashable	file:	access:private
test_have_at_least_one_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_at_least_one_class_any_struct():$/;"	f	access:public	signature:()
test_have_attr_any_struct	tests/test_unnamed_namespace_b.py	/^def test_have_attr_any_struct():$/;"	f	access:public	signature:()
test_have_both_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_both_class_any_struct():$/;"	f	access:public	signature:()
test_have_class_any_struct	tests/test_unnamed_namespace_a.py	/^def test_have_class_any_struct(any_struct):$/;"	f	access:public	signature:(any_struct)
test_holder_with_addressof_operator	tests/test_smart_ptr.py	/^def test_holder_with_addressof_operator():$/;"	f	access:public	signature:()
test_implementation_details	tests/test_pytypes.py	/^def test_implementation_details():$/;"	f	access:public	signature:()
test_implicit_casting	tests/test_pytypes.py	/^def test_implicit_casting():$/;"	f	access:public	signature:()
test_implicit_conversion	tests/test_enum.py	/^def test_implicit_conversion():$/;"	f	access:public	signature:()
test_implicit_conversion	tests/test_thread.py	/^def test_implicit_conversion():$/;"	f	access:public	signature:()
test_implicit_conversion_life_support	tests/test_class.py	/^def test_implicit_conversion_life_support():$/;"	f	access:public	signature:()
test_implicit_conversion_no_gil	tests/test_thread.py	/^def test_implicit_conversion_no_gil():$/;"	f	access:public	signature:()
test_import_avoid_stl_array	tests/test_eigen_tensor.py	/^def test_import_avoid_stl_array():$/;"	f	access:public	signature:()
test_importing	tests/test_modules.py	/^def test_importing():$/;"	f	access:public	signature:()
test_index_offset	tests/test_numpy_array.py	/^def test_index_offset(arr, args, ret):$/;"	f	access:public	signature:(arr, args, ret)
test_index_using_ellipsis	tests/test_numpy_array.py	/^def test_index_using_ellipsis():$/;"	f	access:public	signature:()
test_indirect_cycle	tests/test_custom_type_setup.py	/^def test_indirect_cycle(gc_tester):$/;"	f	access:public	signature:(gc_tester)
test_inheritance	tests/test_class.py	/^def test_inheritance(msg):$/;"	f	access:public	signature:(msg)
test_inheritance_init	tests/test_class.py	/^def test_inheritance_init(msg):$/;"	f	access:public	signature:(msg)
test_inheritance_init.Python	tests/test_class.py	/^    class Python(m.Pet):$/;"	c	function:test_inheritance_init	file:	inherits:m.Pet	access:private
test_inheritance_init.Python.__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.Python	access:public	signature:(self)
test_inheritance_init.RabbitHamster	tests/test_class.py	/^    class RabbitHamster(m.Rabbit, m.Hamster):$/;"	c	function:test_inheritance_init	file:	inherits:m.Rabbit, m.Hamster	access:private
test_inheritance_init.RabbitHamster.__init__	tests/test_class.py	/^        def __init__(self):$/;"	m	class:test_inheritance_init.RabbitHamster	access:public	signature:(self)
test_inherited_protocol	tests/test_buffers.py	/^def test_inherited_protocol():$/;"	f	access:public	signature:()
test_inherited_virtuals	tests/test_virtual_functions.py	/^def test_inherited_virtuals():$/;"	f	access:public	signature:()
test_inherited_virtuals.AR	tests/test_virtual_functions.py	/^    class AR(m.A_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.A_Repeat	access:private
test_inherited_virtuals.AR.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AR	access:public	signature:(self)
test_inherited_virtuals.AT	tests/test_virtual_functions.py	/^    class AT(m.A_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.A_Tpl	access:private
test_inherited_virtuals.AT.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AT	access:public	signature:(self)
test_inherited_virtuals.BT	tests/test_virtual_functions.py	/^    class BT(m.B_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.B_Tpl	access:private
test_inherited_virtuals.BT.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self)
test_inherited_virtuals.BT.say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self, times)
test_inherited_virtuals.BT.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self)
test_inherited_virtuals.CCR	tests/test_virtual_functions.py	/^    class CCR(CR):$/;"	c	function:test_inherited_virtuals	file:	inherits:CR	access:private
test_inherited_virtuals.CCR.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCR	access:public	signature:(self)
test_inherited_virtuals.CCT	tests/test_virtual_functions.py	/^    class CCT(CT):$/;"	c	function:test_inherited_virtuals	file:	inherits:CT	access:private
test_inherited_virtuals.CCT.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CCT	access:public	signature:(self)
test_inherited_virtuals.CR	tests/test_virtual_functions.py	/^    class CR(m.C_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.C_Repeat	access:private
test_inherited_virtuals.CR.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.CR	access:public	signature:(self)
test_inherited_virtuals.CT	tests/test_virtual_functions.py	/^    class CT(m.C_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.C_Tpl	access:private
test_inherited_virtuals.DR	tests/test_virtual_functions.py	/^    class DR(m.D_Repeat):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.D_Repeat	access:private
test_inherited_virtuals.DR.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DR	access:public	signature:(self)
test_inherited_virtuals.DR.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DR	access:public	signature:(self)
test_inherited_virtuals.DT	tests/test_virtual_functions.py	/^    class DT(m.D_Tpl):$/;"	c	function:test_inherited_virtuals	file:	inherits:m.D_Tpl	access:private
test_inherited_virtuals.DT.lucky_number	tests/test_virtual_functions.py	/^        def lucky_number(self):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self)
test_inherited_virtuals.DT.say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self, times)
test_inherited_virtuals.DT.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self)
test_inherited_virtuals.DT2	tests/test_virtual_functions.py	/^    class DT2(DT):$/;"	c	function:test_inherited_virtuals	file:	inherits:DT	access:private
test_inherited_virtuals.DT2.say_something	tests/test_virtual_functions.py	/^        def say_something(self, times):$/;"	m	class:test_inherited_virtuals.DT2	access:public	signature:(self, times)
test_inherited_virtuals.DT2.unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT2	access:public	signature:(self)
test_init_factory_alias	tests/test_factory_constructors.py	/^def test_init_factory_alias():$/;"	f	access:public	signature:()
test_init_factory_alias.MyTest	tests/test_factory_constructors.py	/^    class MyTest(m.TestFactory6):$/;"	c	function:test_init_factory_alias	file:	inherits:m.TestFactory6	access:private
test_init_factory_alias.MyTest.__init__	tests/test_factory_constructors.py	/^        def __init__(self, *args):$/;"	m	class:test_init_factory_alias.MyTest	access:public	signature:(self, *args)
test_init_factory_alias.MyTest.get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_alias.MyTest	access:public	signature:(self)
test_init_factory_basic	tests/test_factory_constructors.py	/^def test_init_factory_basic():$/;"	f	access:public	signature:()
test_init_factory_casting	tests/test_factory_constructors.py	/^def test_init_factory_casting():$/;"	f	access:public	signature:()
test_init_factory_dual	tests/test_factory_constructors.py	/^def test_init_factory_dual():$/;"	f	access:public	signature:()
test_init_factory_dual.PythFactory7	tests/test_factory_constructors.py	/^    class PythFactory7(TestFactory7):$/;"	c	function:test_init_factory_dual	file:	inherits:TestFactory7	access:private
test_init_factory_dual.PythFactory7.get	tests/test_factory_constructors.py	/^        def get(self):$/;"	m	class:test_init_factory_dual.PythFactory7	access:public	signature:(self)
test_init_factory_signature	tests/test_factory_constructors.py	/^def test_init_factory_signature(msg):$/;"	f	access:public	signature:(msg)
test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(Initializer init) { initializers().emplace_back(init); }$/;"	f	class:test_initializer	signature:(Initializer init)
test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(const char *submodule_name, Initializer init) {$/;"	f	class:test_initializer	signature:(const char * submodule_name,Initializer init)
test_initializer	tests/pybind11_tests.h	/^    explicit test_initializer(Initializer init);$/;"	p	class:test_initializer	access:public	signature:(Initializer init)
test_initializer	tests/pybind11_tests.h	/^    test_initializer(const char *submodule_name, Initializer init);$/;"	p	class:test_initializer	access:public	signature:(const char * submodule_name,Initializer init)
test_initializer	tests/pybind11_tests.h	/^class test_initializer {$/;"	c
test_initializer::Initializer	tests/pybind11_tests.h	/^    using Initializer = void (*)(py::module_ &);$/;"	t	class:test_initializer	access:private
test_initializer::test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(Initializer init) { initializers().emplace_back(init); }$/;"	f	class:test_initializer	signature:(Initializer init)
test_initializer::test_initializer	tests/pybind11_tests.cpp	/^test_initializer::test_initializer(const char *submodule_name, Initializer init) {$/;"	f	class:test_initializer	signature:(const char * submodule_name,Initializer init)
test_initializer::test_initializer	tests/pybind11_tests.h	/^    explicit test_initializer(Initializer init);$/;"	p	class:test_initializer	access:public	signature:(Initializer init)
test_initializer::test_initializer	tests/pybind11_tests.h	/^    test_initializer(const char *submodule_name, Initializer init);$/;"	p	class:test_initializer	access:public	signature:(const char * submodule_name,Initializer init)
test_initializer_list	tests/test_numpy_array.py	/^def test_initializer_list():$/;"	f	access:public	signature:()
test_inplace_and	tests/test_pytypes.py	/^def test_inplace_and(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_append	tests/test_pytypes.py	/^def test_inplace_append(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_divide	tests/test_pytypes.py	/^def test_inplace_divide(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_lshift	tests/test_pytypes.py	/^def test_inplace_lshift(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_multiply	tests/test_pytypes.py	/^def test_inplace_multiply(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_or	tests/test_pytypes.py	/^def test_inplace_or(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_rshift	tests/test_pytypes.py	/^def test_inplace_rshift(a, b):$/;"	f	access:public	signature:(a, b)
test_inplace_subtract	tests/test_pytypes.py	/^def test_inplace_subtract(a, b):$/;"	f	access:public	signature:(a, b)
test_installed_embed	tests/test_cmake_build/installed_embed/CMakeLists.txt	/^add_executable(test_installed_embed ..\/embed.cpp)$/;"	t
test_installed_embed	tests/test_cmake_build/installed_embed/CMakeLists.txt	/^project(test_installed_embed CXX)$/;"	p
test_installed_function	tests/test_cmake_build/installed_function/CMakeLists.txt	/^project(test_installed_function CXX)$/;"	p
test_installed_module	tests/test_cmake_build/installed_function/CMakeLists.txt	/^project(test_installed_module CXX)$/;"	p
test_installed_target	tests/test_cmake_build/installed_target/CMakeLists.txt	/^add_library(test_installed_target MODULE ..\/main.cpp)$/;"	t
test_installed_target	tests/test_cmake_build/installed_target/CMakeLists.txt	/^project(test_installed_target CXX)$/;"	p
test_instance	tests/test_class.py	/^def test_instance(msg):$/;"	f	access:public	signature:(msg)
test_instance_new	tests/test_class.py	/^def test_instance_new():$/;"	f	access:public	signature:()
test_int	tests/test_pytypes.py	/^def test_int(doc):$/;"	f	access:public	signature:(doc)
test_int_convert	tests/test_builtin_casters.py	/^def test_int_convert():$/;"	f	access:public	signature:()
test_int_convert.Float	tests/test_builtin_casters.py	/^    class Float:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.Float.__float__	tests/test_builtin_casters.py	/^        def __float__(self):$/;"	m	class:test_int_convert.Float	access:public	signature:(self)
test_int_convert.Index	tests/test_builtin_casters.py	/^    class Index:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.Index.__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.Index	access:public	signature:(self)
test_int_convert.Int	tests/test_builtin_casters.py	/^    class Int:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.Int.__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.Int	access:public	signature:(self)
test_int_convert.IntAndIndex	tests/test_builtin_casters.py	/^    class IntAndIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.IntAndIndex.__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.IntAndIndex	access:public	signature:(self)
test_int_convert.IntAndIndex.__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.IntAndIndex	access:public	signature:(self)
test_int_convert.NotInt	tests/test_builtin_casters.py	/^    class NotInt:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.RaisingTypeErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingTypeErrorOnIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.RaisingTypeErrorOnIndex.__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	access:public	signature:(self)
test_int_convert.RaisingTypeErrorOnIndex.__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingTypeErrorOnIndex	access:public	signature:(self)
test_int_convert.RaisingValueErrorOnIndex	tests/test_builtin_casters.py	/^    class RaisingValueErrorOnIndex:$/;"	c	function:test_int_convert	file:	inherits:	access:private
test_int_convert.RaisingValueErrorOnIndex.__index__	tests/test_builtin_casters.py	/^        def __index__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	access:public	signature:(self)
test_int_convert.RaisingValueErrorOnIndex.__int__	tests/test_builtin_casters.py	/^        def __int__(self):$/;"	m	class:test_int_convert.RaisingValueErrorOnIndex	access:public	signature:(self)
test_int_convert.cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_int_convert	file:	access:private	signature:(v)
test_int_convert.requires_conversion	tests/test_builtin_casters.py	/^    def requires_conversion(v):$/;"	f	function:test_int_convert	file:	access:private	signature:(v)
test_int_long	tests/test_builtin_casters.py	/^def test_int_long():$/;"	f	access:public	signature:()
test_integer_casting	tests/test_builtin_casters.py	/^def test_integer_casting():$/;"	f	access:public	signature:()
test_internal_locals_differ	tests/test_local_bindings.py	/^def test_internal_locals_differ():$/;"	f	access:public	signature:()
test_internal_locals_differ.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_internal_locals_differ	file:	access:private	nameref:module:pybind11_cross_module_tests
test_intree_extensions	tests/extra_setuptools/test_setuphelper.py	/^def test_intree_extensions(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
test_intree_extensions_package_dir	tests/extra_setuptools/test_setuphelper.py	/^def test_intree_extensions_package_dir(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
test_invalid_repr	tests/test_exceptions.py	/^def test_invalid_repr():$/;"	f	access:public	signature:()
test_invalid_repr.MyRepr	tests/test_exceptions.py	/^    class MyRepr:$/;"	c	function:test_invalid_repr	file:	inherits:	access:private
test_invalid_repr.MyRepr.__repr__	tests/test_exceptions.py	/^        def __repr__(self):$/;"	m	class:test_invalid_repr.MyRepr	access:public	signature:(self)
test_invalid_self	tests/test_factory_constructors.py	/^def test_invalid_self():$/;"	f	access:public	signature:()
test_invalid_self.BrokenTF1	tests/test_factory_constructors.py	/^    class BrokenTF1(m.TestFactory1):$/;"	c	function:test_invalid_self	file:	inherits:m.TestFactory1	access:private
test_invalid_self.BrokenTF1.__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF1	access:public	signature:(self, bad)
test_invalid_self.BrokenTF6	tests/test_factory_constructors.py	/^    class BrokenTF6(m.TestFactory6):$/;"	c	function:test_invalid_self	file:	inherits:m.TestFactory6	access:private
test_invalid_self.BrokenTF6.__init__	tests/test_factory_constructors.py	/^        def __init__(self, bad):$/;"	m	class:test_invalid_self.BrokenTF6	access:public	signature:(self, bad)
test_invalid_self.NotPybindDerived	tests/test_factory_constructors.py	/^    class NotPybindDerived:$/;"	c	function:test_invalid_self	file:	inherits:	access:private
test_is_setter	tests/test_methods_and_attributes.py	/^def test_is_setter():$/;"	f	access:public	signature:()
test_isinstance	tests/test_class.py	/^def test_isinstance():$/;"	f	access:public	signature:()
test_isinstance	tests/test_numpy_array.py	/^def test_isinstance():$/;"	f	access:public	signature:()
test_isinstance_string_types	tests/test_pytypes.py	/^def test_isinstance_string_types():$/;"	f	access:public	signature:()
test_issue1105	tests/test_eigen_matrix.py	/^def test_issue1105():$/;"	f	access:public	signature:()
test_issue2361	tests/test_pytypes.py	/^def test_issue2361():$/;"	f	access:public	signature:()
test_issue738	tests/test_eigen_matrix.py	/^def test_issue738():$/;"	f	access:public	signature:()
test_issue_1454	tests/test_virtual_functions.py	/^def test_issue_1454():$/;"	f	access:public	signature:()
test_issue_1561	tests/test_stl.py	/^def test_issue_1561():$/;"	f	access:public	signature:()
test_iterable	tests/test_pytypes.py	/^def test_iterable(doc):$/;"	f	access:public	signature:(doc)
test_iterator	tests/test_pytypes.py	/^def test_iterator(doc):$/;"	f	access:public	signature:(doc)
test_iterator_passthrough	tests/test_sequences_and_iterators.py	/^def test_iterator_passthrough():$/;"	f	access:public	signature:()
test_iterator_referencing	tests/test_sequences_and_iterators.py	/^def test_iterator_referencing():$/;"	f	access:public	signature:()
test_iterator_rvp	tests/test_sequences_and_iterators.py	/^def test_iterator_rvp():$/;"	f	access:public	signature:()
test_iterator_rvp.m	tests/test_sequences_and_iterators.py	/^    import pybind11_tests.sequences_and_iterators as m$/;"	I	function:test_iterator_rvp	file:	access:private	nameref:module:pybind11_tests.sequences_and_iterators
test_keep_alive_argument	tests/test_call_policies.py	/^def test_keep_alive_argument(capture):$/;"	f	access:public	signature:(capture)
test_keep_alive_constructor	tests/test_call_policies.py	/^def test_keep_alive_constructor(capture):$/;"	f	access:public	signature:(capture)
test_keep_alive_return_value	tests/test_call_policies.py	/^def test_keep_alive_return_value(capture):$/;"	f	access:public	signature:(capture)
test_keyword_args_and_generalized_unpacking	tests/test_callbacks.py	/^def test_keyword_args_and_generalized_unpacking():$/;"	f	access:public	signature:()
test_keyword_args_and_generalized_unpacking.f	tests/test_callbacks.py	/^    def f(*args, **kwargs):$/;"	f	function:test_keyword_args_and_generalized_unpacking	file:	access:private	signature:(*args, **kwargs)
test_keyword_only_args	tests/test_kwargs_and_defaults.py	/^def test_keyword_only_args(msg):$/;"	f	access:public	signature:(msg)
test_lacking_copy_ctor	tests/test_copy_move.py	/^def test_lacking_copy_ctor():$/;"	f	access:public	signature:()
test_lacking_move_ctor	tests/test_copy_move.py	/^def test_lacking_move_ctor():$/;"	f	access:public	signature:()
test_lambda_closure_cleanup	tests/test_callbacks.py	/^def test_lambda_closure_cleanup():$/;"	f	access:public	signature:()
test_large_holder	tests/test_smart_ptr.py	/^def test_large_holder():$/;"	f	access:public	signature:()
test_list	tests/test_pytypes.py	/^def test_list(capture, doc):$/;"	f	access:public	signature:(capture, doc)
test_list_rvalue_getter	tests/test_pytypes.py	/^def test_list_rvalue_getter():$/;"	f	access:public	signature:()
test_list_slicing	tests/test_pytypes.py	/^def test_list_slicing():$/;"	f	access:public	signature:()
test_load_external	tests/test_local_bindings.py	/^def test_load_external():$/;"	f	access:public	signature:()
test_load_external.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_load_external	file:	access:private	nameref:module:pybind11_cross_module_tests
test_local_bindings	tests/test_local_bindings.py	/^def test_local_bindings():$/;"	f	access:public	signature:()
test_local_bindings.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_local_bindings	file:	access:private	nameref:module:pybind11_cross_module_tests
test_local_translator	tests/test_exceptions.py	/^def test_local_translator(msg):$/;"	f	access:public	signature:(msg)
test_make_c_f_array	tests/test_numpy_array.py	/^def test_make_c_f_array():$/;"	f	access:public	signature:()
test_make_empty_shaped_array	tests/test_numpy_array.py	/^def test_make_empty_shaped_array():$/;"	f	access:public	signature:()
test_map	tests/test_stl.py	/^def test_map(doc):$/;"	f	access:public	signature:(doc)
test_map_delitem	tests/test_stl_binders.py	/^def test_map_delitem():$/;"	f	access:public	signature:()
test_map_iterator	tests/test_sequences_and_iterators.py	/^def test_map_iterator():$/;"	f	access:public	signature:()
test_map_string_double	tests/test_stl_binders.py	/^def test_map_string_double():$/;"	f	access:public	signature:()
test_map_string_double_const	tests/test_stl_binders.py	/^def test_map_string_double_const():$/;"	f	access:public	signature:()
test_map_view_types	tests/test_stl_binders.py	/^def test_map_view_types():$/;"	f	access:public	signature:()
test_memoryview	tests/test_pytypes.py	/^def test_memoryview(method, args, fmt, expected_view):$/;"	f	access:public	signature:(method, args, fmt, expected_view)
test_memoryview_from_buffer_empty_shape	tests/test_pytypes.py	/^def test_memoryview_from_buffer_empty_shape():$/;"	f	access:public	signature:()
test_memoryview_from_memory	tests/test_pytypes.py	/^def test_memoryview_from_memory():$/;"	f	access:public	signature:()
test_memoryview_refcount	tests/test_pytypes.py	/^def test_memoryview_refcount(method):$/;"	f	access:public	signature:(method)
test_metaclass_override	tests/test_methods_and_attributes.py	/^def test_metaclass_override():$/;"	f	access:public	signature:()
test_method_vectorization	tests/test_numpy_vectorize.py	/^def test_method_vectorization():$/;"	f	access:public	signature:()
test_methods_and_attributes	tests/test_methods_and_attributes.py	/^def test_methods_and_attributes():$/;"	f	access:public	signature:()
test_mi_base_return	tests/test_multiple_inheritance.py	/^def test_mi_base_return():$/;"	f	access:public	signature:()
test_mi_dynamic_attributes	tests/test_multiple_inheritance.py	/^def test_mi_dynamic_attributes():$/;"	f	access:public	signature:()
test_mi_static_properties	tests/test_multiple_inheritance.py	/^def test_mi_static_properties():$/;"	f	access:public	signature:()
test_mi_unaligned_base	tests/test_multiple_inheritance.py	/^def test_mi_unaligned_base():$/;"	f	access:public	signature:()
test_mismatched_holder	tests/test_class.py	/^def test_mismatched_holder():$/;"	f	access:public	signature:()
test_missing_header_message	tests/test_stl.py	/^def test_missing_header_message():$/;"	f	access:public	signature:()
test_missing_header_message.cm	tests/test_stl.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_missing_header_message	file:	access:private	nameref:module:pybind11_cross_module_tests
test_mixed_args_and_kwargs	tests/test_kwargs_and_defaults.py	/^def test_mixed_args_and_kwargs(msg):$/;"	f	access:public	signature:(msg)
test_mixed_local_global	tests/test_local_bindings.py	/^def test_mixed_local_global():$/;"	f	access:public	signature:()
test_mixed_local_global.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_mixed_local_global	file:	access:private	nameref:module:pybind11_cross_module_tests
test_module	tests/test_eigen_tensor.inl	/^void test_module(py::module_ &m) {$/;"	f	typeref:typename:void	signature:(py::module_ & m)
test_module	tests/test_embed/test_interpreter.cpp	/^    std::ofstream test_module(module_file);$/;"	p	typeref:typename:std::ofstream	file:	signature:(module_file)
test_movable_object	tests/test_callbacks.py	/^def test_movable_object():$/;"	f	access:public	signature:()
test_move_and_copy_casts	tests/test_copy_move.py	/^def test_move_and_copy_casts():$/;"	f	access:public	signature:()
test_move_and_copy_load_optional	tests/test_copy_move.py	/^def test_move_and_copy_load_optional():$/;"	f	access:public	signature:()
test_move_and_copy_loads	tests/test_copy_move.py	/^def test_move_and_copy_loads():$/;"	f	access:public	signature:()
test_move_fallback	tests/test_copy_move.py	/^def test_move_fallback():$/;"	f	access:public	signature:()
test_move_only_holder	tests/test_smart_ptr.py	/^def test_move_only_holder():$/;"	f	access:public	signature:()
test_move_only_holder_with_addressof_operator	tests/test_smart_ptr.py	/^def test_move_only_holder_with_addressof_operator():$/;"	f	access:public	signature:()
test_move_out_container	tests/test_stl.py	/^def test_move_out_container():$/;"	f	access:public	signature:()
test_move_support	tests/test_virtual_functions.py	/^def test_move_support():$/;"	f	access:public	signature:()
test_move_support.NCVirtExt	tests/test_virtual_functions.py	/^    class NCVirtExt(m.NCVirt):$/;"	c	function:test_move_support	file:	inherits:m.NCVirt	access:private
test_move_support.NCVirtExt.get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt	access:public	signature:(self, a, b)
test_move_support.NCVirtExt.get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt	access:public	signature:(self, a, b)
test_move_support.NCVirtExt2	tests/test_virtual_functions.py	/^    class NCVirtExt2(m.NCVirt):$/;"	c	function:test_move_support	file:	inherits:m.NCVirt	access:private
test_move_support.NCVirtExt2.get_movable	tests/test_virtual_functions.py	/^        def get_movable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2	access:public	signature:(self, a, b)
test_move_support.NCVirtExt2.get_noncopyable	tests/test_virtual_functions.py	/^        def get_noncopyable(self, a, b):$/;"	m	class:test_move_support.NCVirtExt2	access:public	signature:(self, a, b)
test_multi_acquire_release_cross_module	tests/test_gil_scoped.py	/^def test_multi_acquire_release_cross_module():$/;"	f	access:public	signature:()
test_multi_captured	tests/test_iostream.py	/^def test_multi_captured(capfd):$/;"	f	access:public	signature:(capfd)
test_multiple_inheritance	tests/test_factory_constructors.py	/^def test_multiple_inheritance():$/;"	f	access:public	signature:()
test_multiple_inheritance.MITest	tests/test_factory_constructors.py	/^    class MITest(m.TestFactory1, m.TestFactory2):$/;"	c	function:test_multiple_inheritance	file:	inherits:m.TestFactory1, m.TestFactory2	access:private
test_multiple_inheritance.MITest.__init__	tests/test_factory_constructors.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance.MITest	access:public	signature:(self)
test_multiple_inheritance_cpp	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_cpp():$/;"	f	access:public	signature:()
test_multiple_inheritance_mix1	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix1():$/;"	f	access:public	signature:()
test_multiple_inheritance_mix1.Base1	tests/test_multiple_inheritance.py	/^    class Base1:$/;"	c	function:test_multiple_inheritance_mix1	file:	inherits:	access:private
test_multiple_inheritance_mix1.Base1.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix1.Base1	access:public	signature:(self, i)
test_multiple_inheritance_mix1.Base1.foo	tests/test_multiple_inheritance.py	/^        def foo(self):$/;"	m	class:test_multiple_inheritance_mix1.Base1	access:public	signature:(self)
test_multiple_inheritance_mix1.MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_mix1	file:	inherits:Base1, m.Base2	access:private
test_multiple_inheritance_mix1.MITypePy.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix1.MITypePy	access:public	signature:(self, i, j)
test_multiple_inheritance_mix2	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_mix2():$/;"	f	access:public	signature:()
test_multiple_inheritance_mix2.Base2	tests/test_multiple_inheritance.py	/^    class Base2:$/;"	c	function:test_multiple_inheritance_mix2	file:	inherits:	access:private
test_multiple_inheritance_mix2.Base2.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_mix2.Base2	access:public	signature:(self, i)
test_multiple_inheritance_mix2.Base2.bar	tests/test_multiple_inheritance.py	/^        def bar(self):$/;"	m	class:test_multiple_inheritance_mix2.Base2	access:public	signature:(self)
test_multiple_inheritance_mix2.MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base1, Base2):$/;"	c	function:test_multiple_inheritance_mix2	file:	inherits:m.Base1, Base2	access:private
test_multiple_inheritance_mix2.MITypePy.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_mix2.MITypePy	access:public	signature:(self, i, j)
test_multiple_inheritance_python	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python():$/;"	f	access:public	signature:()
test_multiple_inheritance_python.B1	tests/test_multiple_inheritance.py	/^    class B1:$/;"	c	function:test_multiple_inheritance_python	file:	inherits:	access:private
test_multiple_inheritance_python.B1.v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B1	access:public	signature:(self)
test_multiple_inheritance_python.B2	tests/test_multiple_inheritance.py	/^    class B2(B1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B1	access:private
test_multiple_inheritance_python.B2.v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B2	access:public	signature:(self)
test_multiple_inheritance_python.B3	tests/test_multiple_inheritance.py	/^    class B3:$/;"	c	function:test_multiple_inheritance_python	file:	inherits:	access:private
test_multiple_inheritance_python.B3.v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B3	access:public	signature:(self)
test_multiple_inheritance_python.B4	tests/test_multiple_inheritance.py	/^    class B4(B3, B2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B3, B2	access:private
test_multiple_inheritance_python.B4.v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B4	access:public	signature:(self)
test_multiple_inheritance_python.MI1	tests/test_multiple_inheritance.py	/^    class MI1(m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base1, m.Base2	access:private
test_multiple_inheritance_python.MI1.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI1	access:public	signature:(self, i, j)
test_multiple_inheritance_python.MI2	tests/test_multiple_inheritance.py	/^    class MI2(B1, m.Base1, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B1, m.Base1, m.Base2	access:private
test_multiple_inheritance_python.MI2.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI2	access:public	signature:(self, i, j)
test_multiple_inheritance_python.MI3	tests/test_multiple_inheritance.py	/^    class MI3(MI2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI2	access:private
test_multiple_inheritance_python.MI3.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI3	access:public	signature:(self, i, j)
test_multiple_inheritance_python.MI4	tests/test_multiple_inheritance.py	/^    class MI4(MI3, m.Base2):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI3, m.Base2	access:private
test_multiple_inheritance_python.MI4.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI4	access:public	signature:(self, i, j)
test_multiple_inheritance_python.MI5	tests/test_multiple_inheritance.py	/^    class MI5(m.Base2, B1, m.Base1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base2, B1, m.Base1	access:private
test_multiple_inheritance_python.MI5.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_python.MI5	access:public	signature:(self, i, j)
test_multiple_inheritance_python.MI6	tests/test_multiple_inheritance.py	/^    class MI6(m.Base2, B1):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:m.Base2, B1	access:private
test_multiple_inheritance_python.MI6.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI6	access:public	signature:(self, i)
test_multiple_inheritance_python.MI7	tests/test_multiple_inheritance.py	/^    class MI7(B4, MI6):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B4, MI6	access:private
test_multiple_inheritance_python.MI7.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI7	access:public	signature:(self, i)
test_multiple_inheritance_python.MI8	tests/test_multiple_inheritance.py	/^    class MI8(MI6, B3):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:MI6, B3	access:private
test_multiple_inheritance_python.MI8.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8	access:public	signature:(self, i)
test_multiple_inheritance_python.MI8b	tests/test_multiple_inheritance.py	/^    class MI8b(B3, MI6):$/;"	c	function:test_multiple_inheritance_python	file:	inherits:B3, MI6	access:private
test_multiple_inheritance_python.MI8b.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i):$/;"	m	class:test_multiple_inheritance_python.MI8b	access:public	signature:(self, i)
test_multiple_inheritance_python_many_bases	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_python_many_bases():$/;"	f	access:public	signature:()
test_multiple_inheritance_python_many_bases.MIMany117	tests/test_multiple_inheritance.py	/^    class MIMany117(MIMany14, MIMany58, MIMany916, m.BaseN17):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:MIMany14, MIMany58, MIMany916, m.BaseN17	access:private
test_multiple_inheritance_python_many_bases.MIMany117.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany117	access:public	signature:(self)
test_multiple_inheritance_python_many_bases.MIMany14	tests/test_multiple_inheritance.py	/^    class MIMany14(m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN1, m.BaseN2, m.BaseN3, m.BaseN4	access:private
test_multiple_inheritance_python_many_bases.MIMany14.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany14	access:public	signature:(self)
test_multiple_inheritance_python_many_bases.MIMany19	tests/test_multiple_inheritance.py	/^    class MIMany19(MIMany14, MIMany58, m.BaseN9):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:MIMany14, MIMany58, m.BaseN9	access:private
test_multiple_inheritance_python_many_bases.MIMany19.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany19	access:public	signature:(self)
test_multiple_inheritance_python_many_bases.MIMany58	tests/test_multiple_inheritance.py	/^    class MIMany58(m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8):$/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN5, m.BaseN6, m.BaseN7, m.BaseN8	access:private
test_multiple_inheritance_python_many_bases.MIMany58.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany58	access:public	signature:(self)
test_multiple_inheritance_python_many_bases.MIMany916	tests/test_multiple_inheritance.py	/^    class MIMany916($/;"	c	function:test_multiple_inheritance_python_many_bases	file:	inherits:m.BaseN9, m.BaseN10, m.BaseN11, m.BaseN12, m.BaseN13, m.BaseN14, m.BaseN15, m.BaseN16, 	access:private
test_multiple_inheritance_python_many_bases.MIMany916.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self):$/;"	m	class:test_multiple_inheritance_python_many_bases.MIMany916	access:public	signature:(self)
test_multiple_inheritance_virtbase	tests/test_multiple_inheritance.py	/^def test_multiple_inheritance_virtbase():$/;"	f	access:public	signature:()
test_multiple_inheritance_virtbase.MITypePy	tests/test_multiple_inheritance.py	/^    class MITypePy(m.Base12a):$/;"	c	function:test_multiple_inheritance_virtbase	file:	inherits:m.Base12a	access:private
test_multiple_inheritance_virtbase.MITypePy.__init__	tests/test_multiple_inheritance.py	/^        def __init__(self, i, j):$/;"	m	class:test_multiple_inheritance_virtbase.MITypePy	access:public	signature:(self, i, j)
test_multiple_instances_with_same_pointer	tests/test_class.py	/^def test_multiple_instances_with_same_pointer():$/;"	f	access:public	signature:()
test_mutate_data	tests/test_numpy_array.py	/^def test_mutate_data(arr):$/;"	f	access:public	signature:(arr)
test_mutate_readonly	tests/test_numpy_array.py	/^def test_mutate_readonly(arr):$/;"	f	access:public	signature:(arr)
test_mutator_descriptors	tests/test_eigen_matrix.py	/^def test_mutator_descriptors():$/;"	f	access:public	signature:()
test_named_arguments	tests/test_eigen_matrix.py	/^def test_named_arguments():$/;"	f	access:public	signature:()
test_named_arguments	tests/test_kwargs_and_defaults.py	/^def test_named_arguments():$/;"	f	access:public	signature:()
test_nano_timepoint	tests/test_chrono.py	/^def test_nano_timepoint():$/;"	f	access:public	signature:()
test_negative_stride_from_python	tests/test_eigen_matrix.py	/^def test_negative_stride_from_python(msg):$/;"	f	access:public	signature:(msg)
test_nested	tests/test_operator_overloading.py	/^def test_nested():$/;"	f	access:public	signature:()
test_nested_acquire	tests/test_gil_scoped.py	/^def test_nested_acquire():$/;"	f	access:public	signature:()
test_nested_modules	tests/test_modules.py	/^def test_nested_modules():$/;"	f	access:public	signature:()
test_nested_throws	tests/test_exceptions.py	/^def test_nested_throws(capture):$/;"	f	access:public	signature:(capture)
test_nested_throws.pycatch	tests/test_exceptions.py	/^    def pycatch(exctype, f, *args):  # noqa: ARG001$/;"	f	function:test_nested_throws	file:	access:private	signature:(exctype, f, *args)
test_nested_throws.throw_myex	tests/test_exceptions.py	/^    def throw_myex():$/;"	f	function:test_nested_throws	file:	access:private	signature:()
test_nested_throws.throw_myex5	tests/test_exceptions.py	/^    def throw_myex5():$/;"	f	function:test_nested_throws	file:	access:private	signature:()
test_no_mixed_overloads	tests/test_methods_and_attributes.py	/^def test_no_mixed_overloads():$/;"	f	access:public	signature:()
test_no_placement_new	tests/test_factory_constructors.py	/^def test_no_placement_new(capture):$/;"	f	access:public	signature:(capture)
test_noconvert_args	tests/test_custom_type_casters.py	/^def test_noconvert_args(msg):$/;"	f	access:public	signature:(msg)
test_nocopy_wrapper	tests/test_eigen_matrix.py	/^def test_nocopy_wrapper():$/;"	f	access:public	signature:()
test_noexcept_lambda	tests/test_constants_and_functions.py	/^def test_noexcept_lambda():$/;"	f	access:public	signature:()
test_non_converting_constructors	tests/test_pytypes.py	/^def test_non_converting_constructors():$/;"	f	access:public	signature:()
test_non_final_final	tests/test_class.py	/^def test_non_final_final():$/;"	f	access:public	signature:()
test_non_final_final.PyNonFinalFinalChild	tests/test_class.py	/^        class PyNonFinalFinalChild(m.IsNonFinalFinal):$/;"	c	function:test_non_final_final	file:	inherits:m.IsNonFinalFinal	access:private
test_noncopyable_containers	tests/test_stl_binders.py	/^def test_noncopyable_containers():$/;"	f	access:public	signature:()
test_none	tests/test_pytypes.py	/^def test_none(doc):$/;"	f	access:public	signature:(doc)
test_none_deferred	tests/test_builtin_casters.py	/^def test_none_deferred():$/;"	f	access:public	signature:()
test_nonlocal_failure	tests/test_local_bindings.py	/^def test_nonlocal_failure():$/;"	f	access:public	signature:()
test_nonlocal_failure.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_nonlocal_failure	file:	access:private	nameref:module:pybind11_cross_module_tests
test_nonref_iterators	tests/test_sequences_and_iterators.py	/^def test_nonref_iterators():$/;"	f	access:public	signature:()
test_nonunit_stride_from_python	tests/test_eigen_matrix.py	/^def test_nonunit_stride_from_python():$/;"	f	access:public	signature:()
test_nonunit_stride_to_python	tests/test_eigen_matrix.py	/^def test_nonunit_stride_to_python():$/;"	f	access:public	signature:()
test_not_captured	tests/test_iostream.py	/^def test_not_captured(capfd):$/;"	f	access:public	signature:(capfd)
test_number_protocol	tests/test_pytypes.py	/^def test_number_protocol():$/;"	f	access:public	signature:()
test_numpy_bool	tests/test_builtin_casters.py	/^def test_numpy_bool():$/;"	f	access:public	signature:()
test_numpy_bool.cant_convert	tests/test_builtin_casters.py	/^    def cant_convert(v):$/;"	f	function:test_numpy_bool	file:	access:private	signature:(v)
test_numpy_int_convert	tests/test_builtin_casters.py	/^def test_numpy_int_convert():$/;"	f	access:public	signature:()
test_numpy_int_convert.require_implicit	tests/test_builtin_casters.py	/^    def require_implicit(v):$/;"	f	function:test_numpy_int_convert	file:	access:private	signature:(v)
test_numpy_ref_mutators	tests/test_eigen_matrix.py	/^def test_numpy_ref_mutators():$/;"	f	access:public	signature:()
test_numpy_view	tests/test_numpy_array.py	/^def test_numpy_view(capture):$/;"	f	access:public	signature:(capture)
test_obj_class_name	tests/test_class.py	/^def test_obj_class_name():$/;"	f	access:public	signature:()
test_obj_class_name	tests/test_pytypes.py	/^def test_obj_class_name():$/;"	f	access:public	signature:()
test_operator_new_delete	tests/test_class.py	/^def test_operator_new_delete(capture):$/;"	f	access:public	signature:(capture)
test_operator_new_delete.SubAliased	tests/test_class.py	/^    class SubAliased(m.AliasedHasOpNewDelSize):$/;"	c	function:test_operator_new_delete	file:	inherits:m.AliasedHasOpNewDelSize	access:private
test_operator_overloading	tests/test_operator_overloading.py	/^def test_operator_overloading():$/;"	f	access:public	signature:()
test_operators_notimplemented	tests/test_operator_overloading.py	/^def test_operators_notimplemented():$/;"	f	access:public	signature:()
test_optional	tests/test_stl.py	/^def test_optional():$/;"	f	access:public	signature:()
test_overload_ordering	tests/test_methods_and_attributes.py	/^def test_overload_ordering():$/;"	f	access:public	signature:()
test_overload_resolution	tests/test_numpy_array.py	/^def test_overload_resolution(msg):$/;"	f	access:public	signature:(msg)
test_override	tests/test_virtual_functions.py	/^def test_override(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_override.ExtendedExampleVirt	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt(m.ExampleVirt):$/;"	c	function:test_override	file:	inherits:m.ExampleVirt	access:private
test_override.ExtendedExampleVirt.__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self, state)
test_override.ExtendedExampleVirt.get_string1	tests/test_virtual_functions.py	/^        def get_string1(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
test_override.ExtendedExampleVirt.pure_virtual	tests/test_virtual_functions.py	/^        def pure_virtual(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
test_override.ExtendedExampleVirt.run	tests/test_virtual_functions.py	/^        def run(self, value):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self, value)
test_override.ExtendedExampleVirt.run_bool	tests/test_virtual_functions.py	/^        def run_bool(self):$/;"	m	class:test_override.ExtendedExampleVirt	access:public	signature:(self)
test_override.ExtendedExampleVirt2	tests/test_virtual_functions.py	/^    class ExtendedExampleVirt2(ExtendedExampleVirt):$/;"	c	function:test_override	file:	inherits:ExtendedExampleVirt	access:private
test_override.ExtendedExampleVirt2.__init__	tests/test_virtual_functions.py	/^        def __init__(self, state):$/;"	m	class:test_override.ExtendedExampleVirt2	access:public	signature:(self, state)
test_override.ExtendedExampleVirt2.get_string2	tests/test_virtual_functions.py	/^        def get_string2(self):$/;"	m	class:test_override.ExtendedExampleVirt2	access:public	signature:(self)
test_override_cache	tests/test_virtual_functions.cpp	/^inline int test_override_cache(std::shared_ptr<test_override_cache_helper> const &instance) {$/;"	f	typeref:typename:int	signature:(std::shared_ptr<test_override_cache_helper> const & instance)
test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:(test_override_cache_helper const & Copy)
test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^class test_override_cache_helper {$/;"	c	file:
test_override_cache_helper	tests/test_virtual_functions.cpp	/^    test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper	tests/test_virtual_functions.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:(test_override_cache_helper const & Copy)
test_override_cache_helper	tests/test_virtual_functions.cpp	/^class test_override_cache_helper {$/;"	c	file:
test_override_cache_helper::func	tests/test_embed/test_interpreter.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper	typeref:typename:int	file:	access:public	signature:()
test_override_cache_helper::func	tests/test_virtual_functions.cpp	/^    virtual int func() { return 0; }$/;"	f	class:test_override_cache_helper	typeref:typename:int	file:	access:public	signature:()
test_override_cache_helper::operator =	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	p	class:test_override_cache_helper	typeref:typename:test_override_cache_helper &	file:	access:public	signature:(test_override_cache_helper const & Right)
test_override_cache_helper::operator =	tests/test_virtual_functions.cpp	/^    test_override_cache_helper &operator=(test_override_cache_helper const &Right) = delete;$/;"	p	class:test_override_cache_helper	typeref:typename:test_override_cache_helper &	file:	access:public	signature:(test_override_cache_helper const & Right)
test_override_cache_helper::test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper::test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:(test_override_cache_helper const & Copy)
test_override_cache_helper::test_override_cache_helper	tests/test_virtual_functions.cpp	/^    test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper::test_override_cache_helper	tests/test_virtual_functions.cpp	/^    test_override_cache_helper(test_override_cache_helper const &Copy) = delete;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:(test_override_cache_helper const & Copy)
test_override_cache_helper::~test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    virtual ~test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper::~test_override_cache_helper	tests/test_virtual_functions.cpp	/^    virtual ~test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
test_override_cache_helper_trampoline	tests/test_embed/test_interpreter.cpp	/^class test_override_cache_helper_trampoline : public test_override_cache_helper {$/;"	c	file:	inherits:test_override_cache_helper
test_override_cache_helper_trampoline	tests/test_virtual_functions.cpp	/^class test_override_cache_helper_trampoline : public test_override_cache_helper {$/;"	c	file:	inherits:test_override_cache_helper
test_override_cache_helper_trampoline::func	tests/test_embed/test_interpreter.cpp	/^    int func() override { PYBIND11_OVERRIDE(int, test_override_cache_helper, func); }$/;"	f	class:test_override_cache_helper_trampoline	typeref:typename:int	file:	access:private	signature:()
test_override_cache_helper_trampoline::func	tests/test_virtual_functions.cpp	/^    int func() override { PYBIND11_OVERRIDE(int, test_override_cache_helper, func); }$/;"	f	class:test_override_cache_helper_trampoline	typeref:typename:int	file:	access:private	signature:()
test_override_ref	tests/test_virtual_functions.py	/^def test_override_ref():$/;"	f	access:public	signature:()
test_override_static	tests/test_class.py	/^def test_override_static():$/;"	f	access:public	signature:()
test_overriding_eq_reset_hash	tests/test_operator_overloading.py	/^def test_overriding_eq_reset_hash():$/;"	f	access:public	signature:()
test_pair	include/pybind11/stl_bind.h	/^    static std::false_type test_pair(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
test_pair	include/pybind11/stl_bind.h	/^    static std::true_type test_pair(typename T2::first_type *, typename T2::second_type *);$/;"	p	struct:container_traits	typeref:typename:std::true_type	access:public	signature:(typename T2::first_type *,typename T2::second_type *)
test_partially_fixed	tests/test_eigen_matrix.py	/^def test_partially_fixed():$/;"	f	access:public	signature:()
test_pass_array_pyobject_ptr_return_as_list	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_as_list():$/;"	f	access:public	signature:()
test_pass_array_pyobject_ptr_return_sum_str_values_list	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_sum_str_values_list():$/;"	f	access:public	signature:()
test_pass_array_pyobject_ptr_return_sum_str_values_ndarray	tests/test_numpy_array.py	/^def test_pass_array_pyobject_ptr_return_sum_str_values_ndarray():$/;"	f	access:public	signature:()
test_pass_bytes_or_unicode_to_string_types	tests/test_pytypes.py	/^def test_pass_bytes_or_unicode_to_string_types():$/;"	f	access:public	signature:()
test_pass_list_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_pass_list_pyobject_ptr():$/;"	f	access:public	signature:()
test_pass_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_pass_pyobject_ptr():$/;"	f	access:public	signature:()
test_pass_readonly_array	tests/test_eigen_matrix.py	/^def test_pass_readonly_array():$/;"	f	access:public	signature:()
test_passthrough_arguments	tests/test_numpy_vectorize.py	/^def test_passthrough_arguments(doc):$/;"	f	access:public	signature:(doc)
test_pickle_simple_callable	tests/test_pickling.py	/^def test_pickle_simple_callable():$/;"	f	access:public	signature:()
test_pointer_to_member_fn	tests/test_buffers.py	/^def test_pointer_to_member_fn():$/;"	f	access:public	signature:()
test_pointers	tests/test_opaque_types.py	/^def test_pointers(msg):$/;"	f	access:public	signature:(msg)
test_populate_dict_rvalue	tests/test_pytypes.py	/^def test_populate_dict_rvalue():$/;"	f	access:public	signature:()
test_populate_obj_str_attrs	tests/test_pytypes.py	/^def test_populate_obj_str_attrs():$/;"	f	access:public	signature:()
test_positional_only_args	tests/test_kwargs_and_defaults.py	/^def test_positional_only_args():$/;"	f	access:public	signature:()
test_pr3635_diamond_b	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_b():$/;"	f	access:public	signature:()
test_pr3635_diamond_c	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_c():$/;"	f	access:public	signature:()
test_pr3635_diamond_d0	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_d0():$/;"	f	access:public	signature:()
test_pr3635_diamond_d1	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_d1():$/;"	f	access:public	signature:()
test_pr3635_diamond_e	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_e():$/;"	f	access:public	signature:()
test_pr3635_diamond_f	tests/test_multiple_inheritance.py	/^def test_pr3635_diamond_f():$/;"	f	access:public	signature:()
test_pr4220_tripped_over_this	tests/test_class.py	/^def test_pr4220_tripped_over_this():$/;"	f	access:public	signature:()
test_print	tests/test_pytypes.py	/^def test_print(capture):$/;"	f	access:public	signature:(capture)
test_private_op_new	tests/test_copy_move.py	/^def test_private_op_new():$/;"	f	access:public	signature:()
test_properties	tests/test_methods_and_attributes.py	/^def test_properties():$/;"	f	access:public	signature:()
test_property_return_value_policies	tests/test_methods_and_attributes.py	/^def test_property_return_value_policies(access):$/;"	f	access:public	signature:(access)
test_property_rvalue_policy	tests/test_methods_and_attributes.py	/^def test_property_rvalue_policy():$/;"	f	access:public	signature:()
test_pybind11_str_raw_str	tests/test_pytypes.py	/^def test_pybind11_str_raw_str():$/;"	f	access:public	signature:()
test_pydoc	tests/test_modules.py	/^def test_pydoc():$/;"	f	access:public	signature:()
test_pypy_oserror_normalization	tests/test_exceptions.py	/^def test_pypy_oserror_normalization():$/;"	f	access:public	signature:()
test_python_alreadyset_in_destructor	tests/test_exceptions.py	/^def test_python_alreadyset_in_destructor(monkeypatch, capsys):$/;"	f	access:public	signature:(monkeypatch, capsys)
test_python_alreadyset_in_destructor.hook	tests/test_exceptions.py	/^        def hook(unraisable_hook_args):$/;"	f	function:test_python_alreadyset_in_destructor	file:	access:private	signature:(unraisable_hook_args)
test_python_builtins	tests/test_callbacks.py	/^def test_python_builtins():$/;"	f	access:public	signature:()
test_python_call_in_catch	tests/test_exceptions.py	/^def test_python_call_in_catch():$/;"	f	access:public	signature:()
test_python_inherit_from_mi	tests/test_multiple_inheritance.py	/^def test_python_inherit_from_mi():$/;"	f	access:public	signature:()
test_python_inherit_from_mi.PyMVF	tests/test_multiple_inheritance.py	/^    class PyMVF(m.MVF):$/;"	c	function:test_python_inherit_from_mi	file:	inherits:m.MVF	access:private
test_python_inherit_from_mi.PyMVF.g	tests/test_multiple_inheritance.py	/^        g = 7$/;"	v	class:test_python_inherit_from_mi.PyMVF	access:public
test_python_inherit_from_mi.PyMVF.get_g_g	tests/test_multiple_inheritance.py	/^        def get_g_g(self):$/;"	m	class:test_python_inherit_from_mi.PyMVF	access:public	signature:(self)
test_python_iterator_in_cpp	tests/test_sequences_and_iterators.py	/^def test_python_iterator_in_cpp():$/;"	f	access:public	signature:()
test_python_iterator_in_cpp.bad_next_call	tests/test_sequences_and_iterators.py	/^    def bad_next_call():$/;"	f	function:test_python_iterator_in_cpp	file:	access:private	signature:()
test_python_override	tests/test_virtual_functions.py	/^def test_python_override():$/;"	f	access:public	signature:()
test_python_override.func	tests/test_virtual_functions.py	/^    def func():$/;"	f	function:test_python_override	file:	access:private	signature:()
test_python_override.func.Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func	file:	inherits:m.test_override_cache_helper	access:private
test_python_override.func.Test.func	tests/test_virtual_functions.py	/^            def func(self):$/;"	m	class:test_python_override.func.Test	access:public	signature:(self)
test_python_override.func2	tests/test_virtual_functions.py	/^    def func2():$/;"	f	function:test_python_override	file:	access:private	signature:()
test_python_override.func2.Test	tests/test_virtual_functions.py	/^        class Test(m.test_override_cache_helper):$/;"	c	function:test_python_override.func2	file:	inherits:m.test_override_cache_helper	access:private
test_pytype_rvalue_cast	tests/test_copy_move.py	/^def test_pytype_rvalue_cast():$/;"	f	access:public	signature:()
test_qualname	tests/test_class.py	/^def test_qualname(doc):$/;"	f	access:public	signature:(doc)
test_raise_from	tests/test_exceptions.py	/^def test_raise_from(msg):$/;"	f	access:public	signature:(msg)
test_raise_from_already_set	tests/test_exceptions.py	/^def test_raise_from_already_set(msg):$/;"	f	access:public	signature:(msg)
test_random_access_iterator	tests/test_sequences_and_iterators.cpp	/^py::list test_random_access_iterator(PythonType x) {$/;"	f	typeref:typename:py::list	signature:(PythonType x)
test_readonly_buffer	tests/test_buffers.py	/^def test_readonly_buffer():$/;"	f	access:public	signature:()
test_reallocation_a	tests/test_factory_constructors.py	/^def test_reallocation_a(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_b	tests/test_factory_constructors.py	/^def test_reallocation_b(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_c	tests/test_factory_constructors.py	/^def test_reallocation_c(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_d	tests/test_factory_constructors.py	/^def test_reallocation_d(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_e	tests/test_factory_constructors.py	/^def test_reallocation_e(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_f	tests/test_factory_constructors.py	/^def test_reallocation_f(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_reallocation_g	tests/test_factory_constructors.py	/^def test_reallocation_g(capture, msg):$/;"	f	access:public	signature:(capture, msg)
test_recarray	tests/test_numpy_dtypes.py	/^def test_recarray(simple_dtype, packed_dtype):$/;"	f	access:public	signature:(simple_dtype, packed_dtype)
test_recursive_casting	tests/test_stl.py	/^def test_recursive_casting():$/;"	f	access:public	signature:()
test_recursive_dispatch_issue	tests/test_virtual_functions.py	/^def test_recursive_dispatch_issue():$/;"	f	access:public	signature:()
test_recursive_dispatch_issue.Adder	tests/test_virtual_functions.py	/^    class Adder(m.Adder):$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:m.Adder	access:private
test_recursive_dispatch_issue.Adder.__call__	tests/test_virtual_functions.py	/^        def __call__(self, first, second, visitor):$/;"	m	class:test_recursive_dispatch_issue.Adder	access:public	signature:(self, first, second, visitor)
test_recursive_dispatch_issue.Data	tests/test_virtual_functions.py	/^    class Data(m.Data):$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:m.Data	access:private
test_recursive_dispatch_issue.Data.__init__	tests/test_virtual_functions.py	/^        def __init__(self, value):$/;"	m	class:test_recursive_dispatch_issue.Data	access:public	signature:(self, value)
test_recursive_dispatch_issue.StoreResultVisitor	tests/test_virtual_functions.py	/^    class StoreResultVisitor:$/;"	c	function:test_recursive_dispatch_issue	file:	inherits:	access:private
test_recursive_dispatch_issue.StoreResultVisitor.__call__	tests/test_virtual_functions.py	/^        def __call__(self, data):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor	access:public	signature:(self, data)
test_recursive_dispatch_issue.StoreResultVisitor.__init__	tests/test_virtual_functions.py	/^        def __init__(self):$/;"	m	class:test_recursive_dispatch_issue.StoreResultVisitor	access:public	signature:(self)
test_recursive_map	tests/test_stl_binders.py	/^def test_recursive_map():$/;"	f	access:public	signature:()
test_recursive_vector	tests/test_stl_binders.py	/^def test_recursive_vector():$/;"	f	access:public	signature:()
test_redirect	tests/test_iostream.py	/^def test_redirect(capfd):$/;"	f	access:public	signature:(capfd)
test_redirect_both	tests/test_iostream.py	/^def test_redirect_both(capfd):$/;"	f	access:public	signature:(capfd)
test_redirect_err	tests/test_iostream.py	/^def test_redirect_err(capfd):$/;"	f	access:public	signature:(capfd)
test_reentrant_implicit_conversion_failure	tests/test_class.py	/^def test_reentrant_implicit_conversion_failure(msg):$/;"	f	access:public	signature:(msg)
test_ref_qualified	tests/test_methods_and_attributes.py	/^def test_ref_qualified():$/;"	f	access:public	signature:()
test_reference_internal	tests/test_eigen_tensor.py	/^def test_reference_internal(m, member_name):$/;"	f	access:public	signature:(m, member_name)
test_reference_internal	tests/test_modules.py	/^def test_reference_internal():$/;"	f	access:public	signature:()
test_reference_sensitive_optional	tests/test_stl.py	/^def test_reference_sensitive_optional():$/;"	f	access:public	signature:()
test_reference_wrapper	tests/test_builtin_casters.py	/^def test_reference_wrapper():$/;"	f	access:public	signature:()
test_references_actually_refer	tests/test_eigen_tensor.py	/^def test_references_actually_refer(m):$/;"	f	access:public	signature:(m)
test_register_dtype	tests/test_numpy_dtypes.py	/^def test_register_dtype():$/;"	f	access:public	signature:()
test_register_duplicate_class	tests/test_class.py	/^def test_register_duplicate_class():$/;"	f	access:public	signature:()
test_register_duplicate_class.ClassScope	tests/test_class.py	/^    class ClassScope:$/;"	c	function:test_register_duplicate_class	file:	inherits:	access:private
test_release_acquire	tests/test_gil_scoped.py	/^def test_release_acquire():$/;"	f	access:public	signature:()
test_repr	tests/test_class.py	/^def test_repr():$/;"	f	access:public	signature:()
test_reshape_initializer_list	tests/test_numpy_array.py	/^def test_reshape_initializer_list():$/;"	f	access:public	signature:()
test_reshape_tuple	tests/test_numpy_array.py	/^def test_reshape_tuple():$/;"	f	access:public	signature:()
test_return_array_pyobject_ptr_cpp_loop	tests/test_numpy_array.py	/^def test_return_array_pyobject_ptr_cpp_loop(return_array_pyobject_ptr, unwrap):$/;"	f	access:public	signature:(return_array_pyobject_ptr, unwrap)
test_return_list_pyobject_ptr_reference	tests/test_type_caster_pyobject_ptr.py	/^def test_return_list_pyobject_ptr_reference():$/;"	f	access:public	signature:()
test_return_list_pyobject_ptr_take_ownership	tests/test_type_caster_pyobject_ptr.py	/^def test_return_list_pyobject_ptr_take_ownership():$/;"	f	access:public	signature:()
test_return_none	tests/test_call_policies.py	/^def test_return_none(capture):$/;"	f	access:public	signature:(capture)
test_return_pyobject_ptr	tests/test_type_caster_pyobject_ptr.py	/^def test_return_pyobject_ptr():$/;"	f	access:public	signature:()
test_return_set_of_unhashable	tests/test_operator_overloading.py	/^def test_return_set_of_unhashable():$/;"	f	access:public	signature:()
test_return_vector_bool_raw_ptr	tests/test_stl.py	/^def test_return_vector_bool_raw_ptr():$/;"	f	access:public	signature:()
test_round_trip	tests/test_eigen_tensor.py	/^def test_round_trip(m):$/;"	f	access:public	signature:(m)
test_round_trip_float	tests/test_numpy_array.py	/^def test_round_trip_float():$/;"	f	access:public	signature:()
test_round_trip_references_actually_refer	tests/test_eigen_tensor.py	/^def test_round_trip_references_actually_refer(m):$/;"	f	access:public	signature:(m)
test_roundtrip	tests/test_pickling.py	/^def test_roundtrip(cls_name):$/;"	f	access:public	signature:(cls_name)
test_roundtrip_simple_cpp_derived	tests/test_pickling.py	/^def test_roundtrip_simple_cpp_derived():$/;"	f	access:public	signature:()
test_roundtrip_simple_py_derived	tests/test_pickling.py	/^def test_roundtrip_simple_py_derived():$/;"	f	access:public	signature:()
test_roundtrip_with_dict	tests/test_pickling.py	/^def test_roundtrip_with_dict(cls_name):$/;"	f	access:public	signature:(cls_name)
test_run_in_process_direct	tests/test_gil_scoped.py	/^def test_run_in_process_direct(test_fn):$/;"	f	access:public	signature:(test_fn)
test_run_in_process_multiple_threads_parallel	tests/test_gil_scoped.py	/^def test_run_in_process_multiple_threads_parallel(test_fn):$/;"	f	access:public	signature:(test_fn)
test_run_in_process_multiple_threads_sequential	tests/test_gil_scoped.py	/^def test_run_in_process_multiple_threads_sequential(test_fn):$/;"	f	access:public	signature:(test_fn)
test_run_in_process_one_thread	tests/test_gil_scoped.py	/^def test_run_in_process_one_thread(test_fn):$/;"	f	access:public	signature:(test_fn)
test_rvalue_ref_param	tests/test_methods_and_attributes.py	/^def test_rvalue_ref_param():$/;"	f	access:public	signature:()
test_scalar_conversion	tests/test_numpy_dtypes.py	/^def test_scalar_conversion():$/;"	f	access:public	signature:()
test_scoped_enum	tests/test_enum.py	/^def test_scoped_enum():$/;"	f	access:public	signature:()
test_selective_readonly_buffer	tests/test_buffers.py	/^def test_selective_readonly_buffer():$/;"	f	access:public	signature:()
test_self_cycle	tests/test_custom_type_setup.py	/^def test_self_cycle(gc_tester):$/;"	f	access:public	signature:(gc_tester)
test_sequence	tests/test_sequences_and_iterators.py	/^def test_sequence():$/;"	f	access:public	signature:()
test_sequence_length	tests/test_sequences_and_iterators.py	/^def test_sequence_length():$/;"	f	access:public	signature:()
test_sequence_length.BadLen	tests/test_sequences_and_iterators.py	/^    class BadLen(RuntimeError):$/;"	c	function:test_sequence_length	file:	inherits:RuntimeError	access:private
test_sequence_length.SequenceLike	tests/test_sequences_and_iterators.py	/^    class SequenceLike:$/;"	c	function:test_sequence_length	file:	inherits:	access:private
test_sequence_length.SequenceLike.__getitem__	tests/test_sequences_and_iterators.py	/^        def __getitem__(self, i):$/;"	m	class:test_sequence_length.SequenceLike	access:public	signature:(self, i)
test_sequence_length.SequenceLike.__len__	tests/test_sequences_and_iterators.py	/^        def __len__(self):$/;"	m	class:test_sequence_length.SequenceLike	access:public	signature:(self)
test_series_captured	tests/test_iostream.py	/^def test_series_captured(capture):$/;"	f	access:public	signature:(capture)
test_set	tests/test_pytypes.py	/^def test_set(capture, doc):$/;"	f	access:public	signature:(capture, doc)
test_set	tests/test_stl.py	/^def test_set(doc):$/;"	f	access:public	signature:(doc)
test_shared_ptr_and_references	tests/test_smart_ptr.py	/^def test_shared_ptr_and_references():$/;"	f	access:public	signature:()
test_shared_ptr_from_this_and_references	tests/test_smart_ptr.py	/^def test_shared_ptr_from_this_and_references():$/;"	f	access:public	signature:()
test_shared_ptr_gc	tests/test_smart_ptr.py	/^def test_shared_ptr_gc():$/;"	f	access:public	signature:()
test_signature	tests/test_numpy_dtypes.py	/^def test_signature(doc):$/;"	f	access:public	signature:(doc)
test_signatures	tests/test_kwargs_and_defaults.py	/^def test_signatures():$/;"	f	access:public	signature:()
test_simple_namespace	tests/test_pytypes.py	/^def test_simple_namespace():$/;"	f	access:public	signature:()
test_simple_setup_py	tests/extra_setuptools/test_setuphelper.py	/^def test_simple_setup_py(monkeypatch, tmpdir, parallel, std):$/;"	f	access:public	signature:(monkeypatch, tmpdir, parallel, std)
test_simple_string	tests/test_builtin_casters.py	/^def test_simple_string():$/;"	f	access:public	signature:()
test_single_char_arguments	tests/test_builtin_casters.py	/^def test_single_char_arguments():$/;"	f	access:public	signature:()
test_single_char_arguments.toobig_message	tests/test_builtin_casters.py	/^    def toobig_message(r):$/;"	f	function:test_single_char_arguments	file:	access:private	signature:(r)
test_slice_constructors	tests/test_sequences_and_iterators.py	/^def test_slice_constructors():$/;"	f	access:public	signature:()
test_slice_constructors_explicit_optional	tests/test_sequences_and_iterators.py	/^def test_slice_constructors_explicit_optional():$/;"	f	access:public	signature:()
test_sliceable	tests/test_sequences_and_iterators.py	/^def test_sliceable():$/;"	f	access:public	signature:()
test_smart_ptr	tests/test_smart_ptr.py	/^def test_smart_ptr(capture):$/;"	f	access:public	signature:(capture)
test_smart_ptr_from_default	tests/test_smart_ptr.py	/^def test_smart_ptr_from_default():$/;"	f	access:public	signature:()
test_smart_ptr_refcounting	tests/test_smart_ptr.py	/^def test_smart_ptr_refcounting():$/;"	f	access:public	signature:()
test_sparse	tests/test_eigen_matrix.py	/^def test_sparse():$/;"	f	access:public	signature:()
test_sparse_signature	tests/test_eigen_matrix.py	/^def test_sparse_signature(doc):$/;"	f	access:public	signature:(doc)
test_special_matrix_objects	tests/test_eigen_matrix.py	/^def test_special_matrix_objects():$/;"	f	access:public	signature:()
test_static_cls	tests/test_methods_and_attributes.py	/^def test_static_cls():$/;"	f	access:public	signature:()
test_static_cls.check_self	tests/test_methods_and_attributes.py	/^    def check_self(self):$/;"	f	function:test_static_cls	file:	access:private	signature:(self)
test_static_properties	tests/test_methods_and_attributes.py	/^def test_static_properties():$/;"	f	access:public	signature:()
test_std_exception	tests/test_exceptions.py	/^def test_std_exception(msg):$/;"	f	access:public	signature:(msg)
test_stl_bind_global	tests/test_local_bindings.py	/^def test_stl_bind_global():$/;"	f	access:public	signature:()
test_stl_bind_global.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_bind_global	file:	access:private	nameref:module:pybind11_cross_module_tests
test_stl_bind_local	tests/test_local_bindings.py	/^def test_stl_bind_local():$/;"	f	access:public	signature:()
test_stl_bind_local.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_bind_local	file:	access:private	nameref:module:pybind11_cross_module_tests
test_stl_caster_vs_stl_bind	tests/test_local_bindings.py	/^def test_stl_caster_vs_stl_bind(msg):$/;"	f	access:public	signature:(msg)
test_stl_caster_vs_stl_bind.cm	tests/test_local_bindings.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_stl_caster_vs_stl_bind	file:	access:private	nameref:module:pybind11_cross_module_tests
test_stl_ownership	tests/test_stl.py	/^def test_stl_ownership():$/;"	f	access:public	signature:()
test_stl_pass_by_pointer	tests/test_stl.py	/^def test_stl_pass_by_pointer(msg):$/;"	f	access:public	signature:(msg)
test_str	tests/test_pytypes.py	/^def test_str(doc):$/;"	f	access:public	signature:(doc)
test_str.A	tests/test_pytypes.py	/^    class A:$/;"	c	function:test_str	file:	inherits:	access:private
test_str.A.__repr__	tests/test_pytypes.py	/^        def __repr__(self):$/;"	m	class:test_str.A	access:public	signature:(self)
test_str.A.__str__	tests/test_pytypes.py	/^        def __str__(self):$/;"	m	class:test_str.A	access:public	signature:(self)
test_str_issue	tests/test_methods_and_attributes.py	/^def test_str_issue(msg):$/;"	f	access:public	signature:(msg)
test_str_leak	tests/test_numpy_dtypes.py	/^def test_str_leak():$/;"	f	access:public	signature:()
test_string_array	tests/test_numpy_dtypes.py	/^def test_string_array():$/;"	f	access:public	signature:()
test_string_list	tests/test_opaque_types.py	/^def test_string_list():$/;"	f	access:public	signature:()
test_string_view	tests/test_builtin_casters.py	/^def test_string_view(capture):$/;"	f	access:public	signature:(capture)
test_subdirectory_embed	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^add_executable(test_subdirectory_embed ..\/embed.cpp)$/;"	t
test_subdirectory_embed	tests/test_cmake_build/subdirectory_embed/CMakeLists.txt	/^project(test_subdirectory_embed CXX)$/;"	p
test_subdirectory_function	tests/test_cmake_build/subdirectory_function/CMakeLists.txt	/^project(test_subdirectory_function CXX)$/;"	p
test_subdirectory_target	tests/test_cmake_build/subdirectory_target/CMakeLists.txt	/^add_library(test_subdirectory_target MODULE ..\/main.cpp)$/;"	t
test_subdirectory_target	tests/test_cmake_build/subdirectory_target/CMakeLists.txt	/^project(test_subdirectory_target CXX)$/;"	p
test_surrogate_pairs_unicode_error	tests/test_pytypes.py	/^def test_surrogate_pairs_unicode_error(func):$/;"	f	access:public	signature:(func)
test_targets	tests/CMakeLists.txt	/^set(test_targets pybind11_tests)$/;"	v
test_test_memoryview_from_buffer_invalid_strides	tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_invalid_strides():$/;"	f	access:public	signature:()
test_test_memoryview_from_buffer_nullptr	tests/test_pytypes.py	/^def test_test_memoryview_from_buffer_nullptr():$/;"	f	access:public	signature:()
test_threading	tests/test_iostream.py	/^def test_threading():$/;"	f	access:public	signature:()
test_throw_nested_exception	tests/test_exceptions.py	/^def test_throw_nested_exception():$/;"	f	access:public	signature:()
test_to_python	tests/test_buffers.py	/^def test_to_python():$/;"	f	access:public	signature:()
test_trivial_broadcasting	tests/test_numpy_vectorize.py	/^def test_trivial_broadcasting():$/;"	f	access:public	signature:()
test_tuple	tests/test_builtin_casters.py	/^def test_tuple(doc):$/;"	f	access:public	signature:(doc)
test_tuple	tests/test_pytypes.py	/^def test_tuple():$/;"	f	access:public	signature:()
test_tuple_rvalue_getter	tests/test_pytypes.py	/^def test_tuple_rvalue_getter():$/;"	f	access:public	signature:()
test_type	tests/test_class.py	/^def test_type():$/;"	f	access:public	signature:()
test_type_caster_name_via_incompatible_function_arguments_type_error	tests/test_type_caster_pyobject_ptr.py	/^def test_type_caster_name_via_incompatible_function_arguments_type_error():$/;"	f	access:public	signature:()
test_type_of_classic	tests/test_class.py	/^def test_type_of_classic():$/;"	f	access:public	signature:()
test_type_of_py	tests/test_class.py	/^def test_type_of_py():$/;"	f	access:public	signature:()
test_type_of_py_nodelete	tests/test_class.py	/^def test_type_of_py_nodelete():$/;"	f	access:public	signature:()
test_type_selection	tests/test_numpy_vectorize.py	/^def test_type_selection():$/;"	f	access:public	signature:()
test_unhashable_exceptions	tests/test_pytypes.py	/^def test_unhashable_exceptions(arg, func):$/;"	f	access:public	signature:(arg, func)
test_unhashable_exceptions.Unhashable	tests/test_pytypes.py	/^    class Unhashable:$/;"	c	function:test_unhashable_exceptions	file:	inherits:	access:private
test_unhashable_exceptions.Unhashable.__hash__	tests/test_pytypes.py	/^        __hash__ = None$/;"	v	class:test_unhashable_exceptions.Unhashable	file:	access:private
test_unicode_conversion	tests/test_builtin_casters.py	/^def test_unicode_conversion():$/;"	f	access:public	signature:()
test_union	tests/test_union.py	/^def test_union():$/;"	f	access:public	signature:()
test_unions	tests/test_opaque_types.py	/^def test_unions():$/;"	f	access:public	signature:()
test_unique_deleter	tests/test_smart_ptr.py	/^def test_unique_deleter():$/;"	f	access:public	signature:()
test_unique_nodelete	tests/test_smart_ptr.py	/^def test_unique_nodelete():$/;"	f	access:public	signature:()
test_unique_nodelete4a	tests/test_smart_ptr.py	/^def test_unique_nodelete4a():$/;"	f	access:public	signature:()
test_unregistered_base_implementations	tests/test_methods_and_attributes.py	/^def test_unregistered_base_implementations():$/;"	f	access:public	signature:()
test_unscoped_enum	tests/test_enum.py	/^def test_unscoped_enum():$/;"	f	access:public	signature:()
test_valarray	tests/test_stl.py	/^def test_valarray(doc):$/;"	f	access:public	signature:(doc)
test_value	include/pybind11/stl_bind.h	/^    static std::false_type test_value(...);$/;"	p	struct:container_traits	typeref:typename:std::false_type	access:public	signature:(...)
test_value	include/pybind11/stl_bind.h	/^    static std::true_type test_value(typename T2::value_type *);$/;"	p	struct:container_traits	typeref:typename:std::true_type	access:public	signature:(typename T2::value_type *)
test_variant	tests/test_stl.py	/^def test_variant(doc):$/;"	f	access:public	signature:(doc)
test_variant_monostate	tests/test_stl.py	/^def test_variant_monostate(doc):$/;"	f	access:public	signature:(doc)
test_vec_of_reference_wrapper	tests/test_stl.py	/^def test_vec_of_reference_wrapper():$/;"	f	access:public	signature:()
test_vector	tests/test_stl.py	/^def test_vector(doc):$/;"	f	access:public	signature:(doc)
test_vector_bool	tests/test_stl_binders.py	/^def test_vector_bool():$/;"	f	access:public	signature:()
test_vector_bool.cm	tests/test_stl_binders.py	/^    import pybind11_cross_module_tests as cm$/;"	I	function:test_vector_bool	file:	access:private	nameref:module:pybind11_cross_module_tests
test_vector_buffer	tests/test_stl_binders.py	/^def test_vector_buffer():$/;"	f	access:public	signature:()
test_vector_buffer_numpy	tests/test_stl_binders.py	/^def test_vector_buffer_numpy():$/;"	f	access:public	signature:()
test_vector_custom	tests/test_stl_binders.py	/^def test_vector_custom():$/;"	f	access:public	signature:()
test_vector_int	tests/test_stl_binders.py	/^def test_vector_int():$/;"	f	access:public	signature:()
test_vectorize	tests/test_numpy_dtypes.py	/^def test_vectorize():$/;"	f	access:public	signature:()
test_vectorize	tests/test_numpy_vectorize.py	/^def test_vectorize(capture):$/;"	f	access:public	signature:(capture)
test_vectorized_noreturn	tests/test_numpy_vectorize.py	/^def test_vectorized_noreturn():$/;"	f	access:public	signature:()
test_void_caster	tests/test_builtin_casters.py	/^def test_void_caster():$/;"	f	access:public	signature:()
test_void_caster_2	tests/test_builtin_casters.py	/^def test_void_caster_2():$/;"	f	access:public	signature:()
test_weakref	tests/test_pytypes.py	/^def test_weakref(create_weakref, create_weakref_with_callback):$/;"	f	access:public	signature:(create_weakref, create_weakref_with_callback)
test_weakref.WeaklyReferenced	tests/test_pytypes.py	/^    class WeaklyReferenced:$/;"	c	function:test_weakref	file:	inherits:	access:private
test_weakref.callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref	file:	access:private	signature:(_)
test_weakref_err	tests/test_pytypes.py	/^def test_weakref_err(create_weakref, has_callback):$/;"	f	access:public	signature:(create_weakref, has_callback)
test_weakref_err.C	tests/test_pytypes.py	/^    class C:$/;"	c	function:test_weakref_err	file:	inherits:	access:private
test_weakref_err.C.__slots__	tests/test_pytypes.py	/^        __slots__ = []$/;"	v	class:test_weakref_err.C	file:	access:private
test_weakref_err.callback	tests/test_pytypes.py	/^    def callback(_):$/;"	f	function:test_weakref_err	file:	access:private	signature:(_)
test_wrap	tests/test_numpy_array.py	/^def test_wrap():$/;"	f	access:public	signature:()
test_wrap.assert_references	tests/test_numpy_array.py	/^    def assert_references(a, b, base=None):$/;"	f	function:test_wrap	file:	access:private	signature:(a, b, base=None)
test_zero_length	tests/test_eigen_matrix.py	/^def test_zero_length(func, sizes):$/;"	f	access:public	signature:(func, sizes)
tests	noxfile.py	/^def tests(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
tests_build_global_wheel	tests/extra_python_package/test_files.py	/^def tests_build_global_wheel(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
tests_build_wheel	tests/extra_python_package/test_files.py	/^def tests_build_wheel(monkeypatch, tmpdir):$/;"	f	access:public	signature:(monkeypatch, tmpdir)
tests_extra_targets	tests/CMakeLists.txt	/^macro(tests_extra_targets needles additions)$/;"	m
tests_packaging	noxfile.py	/^def tests_packaging(session: nox.Session) -> None:$/;"	f	typeref:typename:None	access:public	signature:(session: nox.Session)
texinfo	docs/Makefile	/^texinfo:$/;"	t
texinfo_documents	docs/conf.py	/^texinfo_documents = [$/;"	v	access:public
text	docs/Makefile	/^text:$/;"	t
text	include/pybind11/detail/descr.h	/^    char text[N + 1]{'\\0'};$/;"	m	struct:descr	typeref:typename:char[]	access:public
the_answer	tests/test_embed/test_interpreter.cpp	/^    int the_answer() const override { PYBIND11_OVERRIDE_PURE(int, Widget, the_answer); }$/;"	f	class:PyWidget	typeref:typename:int	file:	access:private	signature:() const
the_answer	tests/test_embed/test_interpreter.cpp	/^    virtual int the_answer() const = 0;$/;"	p	class:Widget	typeref:typename:int	file:	access:public	signature:() const
the_answer	tests/test_embed/test_interpreter.py	/^    def the_answer(self):$/;"	m	class:DerivedWidget	access:public	signature:(self)
the_message	tests/test_embed/test_interpreter.cpp	/^    std::string the_message() const { return message; }$/;"	f	class:Widget	typeref:typename:std::string	file:	access:public	signature:() const
thread	tests/test_embed/test_interpreter.cpp	/^        for (auto &thread : threads) {$/;"	v	typeref:typename:auto &
threads	tests/test_embed/test_interpreter.cpp	/^        auto threads = std::vector<std::thread>();$/;"	v	typeref:typename:auto
throw_gilstate_error	include/pybind11/pytypes.h	/^    void throw_gilstate_error(const std::string &function_name) const {$/;"	f	class:handle	typeref:typename:void	access:private	signature:(const std::string & function_name) const
throw_myex	tests/test_exceptions.py	/^    def throw_myex():$/;"	f	function:test_nested_throws	file:	access:private	signature:()
throw_myex5	tests/test_exceptions.py	/^    def throw_myex5():$/;"	f	function:test_nested_throws	file:	access:private	signature:()
throw_something	tests/test_class.cpp	/^        void throw_something() { throw std::runtime_error("error"); }$/;"	f	struct:TEST_SUBMODULE::PyPrintDestructor	typeref:typename:void	file:	access:public	signature:()
time_point_h	tests/test_chrono.cpp	/^    using time_point_h = std::chrono::time_point<std::chrono::system_clock, std::chrono::hours>;$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::hours>	file:	access:public
time_point_m	tests/test_chrono.cpp	/^    using time_point_m = std::chrono::time_point<std::chrono::system_clock, std::chrono::minutes/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::minutes>	file:	access:public
time_point_ms	tests/test_chrono.cpp	/^    using time_point_ms$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::milliseconds>	file:	access:public
time_point_s	tests/test_chrono.cpp	/^    using time_point_s = std::chrono::time_point<std::chrono::system_clock, std::chrono::seconds/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::seconds>	file:	access:public
time_point_us	tests/test_chrono.cpp	/^    using time_point_us$/;"	t	struct:different_resolutions	typeref:typename:std::chrono::time_point<std::chrono::system_clock,std::chrono::microseconds>	file:	access:public
times_hundred	tests/test_stl_binders.cpp	/^NestMap *times_hundred(int n) {$/;"	f	typeref:typename:NestMap *	signature:(int n)
times_ten	tests/test_stl_binders.cpp	/^Map *times_ten(int n) {$/;"	f	typeref:typename:Map *	signature:(int n)
timespan	tests/test_chrono.cpp	/^    using timespan = std::chrono::duration<int64_t, std::nano>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::chrono::duration<int64_t,std::nano>	file:
timestamp	tests/test_chrono.cpp	/^    using timestamp = std::chrono::time_point<std::chrono::system_clock, timespan>;$/;"	t	function:TEST_SUBMODULE	typeref:typename:std::chrono::time_point<std::chrono::system_clock,timespan>	file:
timestamp_h	tests/test_chrono.cpp	/^    time_point_h timestamp_h;$/;"	m	struct:different_resolutions	typeref:typename:time_point_h	file:	access:public
timestamp_m	tests/test_chrono.cpp	/^    time_point_m timestamp_m;$/;"	m	struct:different_resolutions	typeref:typename:time_point_m	file:	access:public
timestamp_ms	tests/test_chrono.cpp	/^    time_point_ms timestamp_ms;$/;"	m	struct:different_resolutions	typeref:typename:time_point_ms	file:	access:public
timestamp_s	tests/test_chrono.cpp	/^    time_point_s timestamp_s;$/;"	m	struct:different_resolutions	typeref:typename:time_point_s	file:	access:public
timestamp_us	tests/test_chrono.cpp	/^    time_point_us timestamp_us;$/;"	m	struct:different_resolutions	typeref:typename:time_point_us	file:	access:public
tinfo	include/pybind11/detail/type_caster_base.h	/^    const type_vec &tinfo;$/;"	m	struct:values_and_holders	typeref:typename:const type_vec &	access:private
tls_replace_value	include/pybind11/detail/internals.h	/^inline void tls_replace_value(PYBIND11_TLS_KEY_REF key, void *value) {$/;"	f	typeref:typename:void	signature:(PYBIND11_TLS_KEY_REF key,void * value)
tmp_chdir	pybind11/setup_helpers.py	/^def tmp_chdir() -> Iterator[str]:$/;"	f	typeref:typename:Iterator[str]	access:public	signature:()
tmp_chdir_lock	pybind11/setup_helpers.py	/^tmp_chdir_lock = threading.Lock()$/;"	v	access:public
toString	tests/object.h	/^    virtual std::string toString() const = 0;$/;"	p	class:Object	typeref:typename:std::string	access:public	signature:() const
toString	tests/test_methods_and_attributes.cpp	/^    std::string toString() const { return "ExampleMandA[value=" + std::to_string(value) + "]"; }$/;"	f	class:ExampleMandA	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_modules.cpp	/^        std::string toString() const { return "A[" + std::to_string(v) + "]"; }$/;"	f	class:TEST_SUBMODULE::A	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_operator_overloading.cpp	/^    std::string toString() const {$/;"	f	class:Vector2	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const override { return "MyObject1[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject1	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject2[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject2	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const { return "MyObject3[" + std::to_string(value) + "]"; }$/;"	f	class:__anond975f9d30111::MyObject3	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	typeref:typename:std::string	file:	access:public	signature:() const
toString	tests/test_smart_ptr.cpp	/^    std::string toString() const {$/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	typeref:typename:std::string	file:	access:public	signature:() const
to_src	setup.py	/^to_src = ($/;"	v	access:public
todo_include_todos	docs/conf.py	/^todo_include_todos = False$/;"	v	access:public
toobig_message	tests/test_builtin_casters.py	/^    def toobig_message(r):$/;"	f	function:test_single_char_arguments	file:	access:private	signature:(r)
trace	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
trace	include/pybind11/pytypes.h	/^    const object &trace() const { return m_fetched_error->m_trace; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
track_copy_assigned	tests/constructor_stats.h	/^void track_copy_assigned(T *, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T *,Values &&...values)
track_copy_created	tests/constructor_stats.h	/^void track_copy_created(T *inst) {$/;"	f	typeref:typename:void	signature:(T * inst)
track_created	tests/constructor_stats.h	/^void track_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
track_default_created	tests/constructor_stats.h	/^void track_default_created(T *inst, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T * inst,Values &&...values)
track_destroyed	tests/constructor_stats.h	/^void track_destroyed(T *inst) {$/;"	f	typeref:typename:void	signature:(T * inst)
track_move_assigned	tests/constructor_stats.h	/^void track_move_assigned(T *, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T *,Values &&...values)
track_move_created	tests/constructor_stats.h	/^void track_move_created(T *inst) {$/;"	f	typeref:typename:void	signature:(T * inst)
track_values	tests/constructor_stats.h	/^void track_values(T *, Values &&...values) {$/;"	f	typeref:typename:void	signature:(T *,Values &&...values)
traits_type	include/pybind11/iostream.h	/^    using traits_type = std::streambuf::traits_type;$/;"	t	class:pythonbuf	typeref:typename:std::streambuf::traits_type	access:private
translate_exception	include/pybind11/detail/internals.h	/^inline void translate_exception(std::exception_ptr p) {$/;"	f	typeref:typename:void	signature:(std::exception_ptr p)
translate_exception	include/pybind11/detail/internals.h	/^inline void translate_exception(std::exception_ptr);$/;"	p	typeref:typename:void	signature:(std::exception_ptr)
translate_local_exception	include/pybind11/detail/internals.h	/^inline void translate_local_exception(std::exception_ptr p) {$/;"	f	typeref:typename:void	signature:(std::exception_ptr p)
traverse_offset_bases	include/pybind11/detail/class.h	/^inline void traverse_offset_bases(void *valueptr,$/;"	f	typeref:typename:void	signature:(void * valueptr,const detail::type_info * tinfo,instance * self,bool (* f)(void *,instance *))
try_direct_conversions	include/pybind11/cast.h	/^    static bool try_direct_conversions(handle) { return false; }$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle)
try_direct_conversions	include/pybind11/detail/type_caster_base.h	/^    bool try_direct_conversions(handle src) {$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src)
try_get_shared_from_this	include/pybind11/detail/common.h	/^try_get_shared_from_this(std::enable_shared_from_this<T> *holder_value_ptr) {$/;"	f	typeref:typename:std::shared_ptr<T>	signature:(std::enable_shared_from_this<T> * holder_value_ptr)
try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle src,bool convert)
try_implicit_casts	include/pybind11/cast.h	/^    bool try_implicit_casts(handle, bool) {$/;"	f	struct:copyable_holder_caster	typeref:typename:bool	access:protected	signature:(handle,bool)
try_implicit_casts	include/pybind11/detail/type_caster_base.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src,bool convert)
try_load_foreign_module_local	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool try_load_foreign_module_local(handle src) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE bool	access:public	signature:(handle src)
tstate	include/pybind11/gil.h	/^    PyThreadState *tstate = nullptr;$/;"	m	class:gil_scoped_acquire	typeref:typename:PyThreadState *	access:private
tstate	include/pybind11/gil.h	/^    PyThreadState *tstate;$/;"	m	class:gil_scoped_release	typeref:typename:PyThreadState *	access:private
tuple	include/pybind11/pytypes.h	/^class tuple : public object {$/;"	c	inherits:object
tuple::PYBIND11_OBJECT_CVT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT(tuple, object, PyTuple_Check, PySequence_Tuple)$/;"	f	class:tuple	access:public	signature:(tuple,object,PyTuple_Check,PySequence_Tuple)
tuple::begin	include/pybind11/pytypes.h	/^    detail::tuple_iterator begin() const { return {*this, 0}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator	access:public	signature:() const
tuple::empty	include/pybind11/pytypes.h	/^    bool empty() const { return size() == 0; }$/;"	f	class:tuple	typeref:typename:bool	access:public	signature:() const
tuple::end	include/pybind11/pytypes.h	/^    detail::tuple_iterator end() const { return {*this, PyTuple_GET_SIZE(m_ptr)}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_iterator	access:public	signature:() const
tuple::operator []	include/pybind11/pytypes.h	/^    detail::item_accessor operator[](T &&o) const {$/;"	f	class:tuple	typeref:typename:detail::item_accessor	access:public	signature:(T && o) const
tuple::operator []	include/pybind11/pytypes.h	/^    detail::tuple_accessor operator[](size_t index) const { return {*this, index}; }$/;"	f	class:tuple	typeref:typename:detail::tuple_accessor	access:public	signature:(size_t index) const
tuple::size	include/pybind11/pytypes.h	/^    size_t size() const { return (size_t) PyTuple_Size(m_ptr); }$/;"	f	class:tuple	typeref:typename:size_t	access:public	signature:() const
tuple_accessor	include/pybind11/pytypes.h	/^using tuple_accessor = accessor<accessor_policies::tuple_item>;$/;"	t	typeref:typename:accessor<accessor_policies::tuple_item>
tuple_caster	include/pybind11/cast.h	/^class tuple_caster {$/;"	c
tuple_caster::cast	include/pybind11/cast.h	/^    static handle cast(T &&src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:public	signature:(T && src,return_value_policy policy,handle parent)
tuple_caster::cast	include/pybind11/cast.h	/^    static handle cast(T *src, return_value_policy policy, handle parent) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:public	signature:(T * src,return_value_policy policy,handle parent)
tuple_caster::cast_impl	include/pybind11/cast.h	/^    cast_impl(T &&src, return_value_policy policy, handle parent, index_sequence<Is...>) {$/;"	f	class:tuple_caster	typeref:typename:handle	access:protected	signature:(T && src,return_value_policy policy,handle parent,index_sequence<Is...>)
tuple_caster::cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = type;$/;"	t	class:tuple_caster	typeref:typename:type	access:public
tuple_caster::implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) & {$/;"	f	class:tuple_caster	typeref:typename:type	access:protected	signature:(index_sequence<Is...>)
tuple_caster::implicit_cast	include/pybind11/cast.h	/^    type implicit_cast(index_sequence<Is...>) && {$/;"	f	class:tuple_caster	typeref:typename:type	access:protected	signature:(index_sequence<Is...>)
tuple_caster::indices	include/pybind11/cast.h	/^    using indices = make_index_sequence<size>;$/;"	t	class:tuple_caster	typeref:typename:make_index_sequence<size>	access:private
tuple_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:tuple_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
tuple_caster::load_impl	include/pybind11/cast.h	/^    bool load_impl(const sequence &seq, bool convert, index_sequence<Is...>) {$/;"	f	class:tuple_caster	typeref:typename:bool	access:protected	signature:(const sequence & seq,bool convert,index_sequence<Is...>)
tuple_caster::load_impl	include/pybind11/cast.h	/^    static constexpr bool load_impl(const sequence &, bool, index_sequence<>) { return true; }$/;"	f	class:tuple_caster	typeref:typename:bool	access:protected	signature:(const sequence &,bool,index_sequence<>)
tuple_caster::name	include/pybind11/cast.h	/^    static constexpr auto name$/;"	m	class:tuple_caster	typeref:typename:auto	access:public
tuple_caster::operator type	include/pybind11/cast.h	/^    explicit operator type() & { return implicit_cast(indices{}); }$/;"	f	class:tuple_caster	access:public	signature:()
tuple_caster::operator type	include/pybind11/cast.h	/^    explicit operator type() && { return std::move(*this).implicit_cast(indices{}); }$/;"	f	class:tuple_caster	access:public	signature:()
tuple_caster::size	include/pybind11/cast.h	/^    static constexpr auto size = sizeof...(Ts);$/;"	m	class:tuple_caster	typeref:typename:auto	access:private
tuple_caster::subcasters	include/pybind11/cast.h	/^    Tuple<make_caster<Ts>...> subcasters;$/;"	m	class:tuple_caster	typeref:typename:Tuple<make_caster<Ts>...>	access:protected
tuple_caster::type	include/pybind11/cast.h	/^    using type = Tuple<Ts...>;$/;"	t	class:tuple_caster	typeref:typename:Tuple<Ts...>	access:private
tuple_item	include/pybind11/pytypes.h	/^struct tuple_item {$/;"	s
tuple_item::get	include/pybind11/pytypes.h	/^    static object get(handle obj, const IdxType &index) {$/;"	f	struct:tuple_item	typeref:typename:object	access:public	signature:(handle obj,const IdxType & index)
tuple_item::key_type	include/pybind11/pytypes.h	/^    using key_type = size_t;$/;"	t	struct:tuple_item	typeref:typename:size_t	access:public
tuple_item::set	include/pybind11/pytypes.h	/^    static void set(handle obj, const IdxType &index, handle val) {$/;"	f	struct:tuple_item	typeref:typename:void	access:public	signature:(handle obj,const IdxType & index,handle val)
tuple_iterator	include/pybind11/pytypes.h	/^using tuple_iterator = generic_iterator<iterator_policies::sequence_fast_readonly>;$/;"	t	typeref:typename:generic_iterator<iterator_policies::sequence_fast_readonly>
txt	setup.py	/^    txt = get_and_replace(setup_py, version=version, extra_cmd=extra_cmd)$/;"	v	access:public
type	include/pybind11/attr.h	/^    const std::type_info *type = nullptr;$/;"	m	struct:type_record	typeref:typename:const std::type_info *	access:public
type	include/pybind11/attr.h	/^    struct type {$/;"	s	struct:call_guard	access:public
type	include/pybind11/attr.h	/^    using type = T;$/;"	t	struct:call_guard	typeref:typename:T	access:public
type	include/pybind11/attr.h	/^    using type = detail::void_type;$/;"	t	struct:call_guard	typeref:typename:detail::void_type	access:public
type	include/pybind11/cast.h	/^    std::string type;$/;"	m	struct:arg_v	typeref:typename:std::string	access:public
type	include/pybind11/cast.h	/^    using type = Tuple<Ts...>;$/;"	t	class:tuple_caster	typeref:typename:Tuple<Ts...>	access:private
type	include/pybind11/chrono.h	/^    using type = std::chrono::time_point<std::chrono::system_clock, Duration>;$/;"	t	class:type_caster	typeref:typename:std::chrono::time_point<std::chrono::system_clock,Duration>	access:public
type	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
type	include/pybind11/detail/common.h	/^    using type = Default;$/;"	t	struct:exactly_one	typeref:typename:Default	access:public
type	include/pybind11/detail/common.h	/^    using type = ISeq;$/;"	t	struct:select_indices_impl	typeref:typename:ISeq	access:public
type	include/pybind11/detail/common.h	/^    using type = R(A...);$/;"	t	struct:remove_class	access:public
type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:deferred_type	typeref:typename:T	access:public
type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:intrinsic_type	typeref:typename:T	access:public
type	include/pybind11/detail/common.h	/^    using type = T;$/;"	t	struct:pack_element	typeref:typename:T	access:public
type	include/pybind11/detail/common.h	/^    using type = conditional_t<found, typename pack_element<index, Ts...>::type, Default>;$/;"	t	struct:exactly_one	typeref:typename:conditional_t<found,typename pack_element<index,Ts...>::type,Default>	access:public
type	include/pybind11/detail/common.h	/^    using type = index_sequence<S...>;$/;"	t	struct:make_index_sequence_impl	typeref:typename:index_sequence<S...>	access:public
type	include/pybind11/detail/common.h	/^    using type = remove_cv_t<remove_reference_t<T>>;$/;"	t	struct:remove_cvref	typeref:typename:remove_cv_t<remove_reference_t<T>>	access:public
type	include/pybind11/detail/common.h	/^    using type = typename intrinsic_type<T>::type;$/;"	t	struct:intrinsic_type	typeref:typename:intrinsic_type<T>::type	access:public
type	include/pybind11/detail/common.h	/^    using type = typename pack_element<N - 1, Ts...>::type;$/;"	t	struct:pack_element	typeref:typename:pack_element<N-1,Ts...>::type	access:public
type	include/pybind11/detail/common.h	/^    using type = typename remove_class<decltype(&F::operator())>::type;$/;"	t	struct:strip_function_object	access:public
type	include/pybind11/detail/common.h	/^    using type = void;$/;"	t	struct:void_t_impl	typeref:typename:void	access:public
type	include/pybind11/detail/internals.h	/^    PyTypeObject *type;$/;"	m	struct:type_info	typeref:typename:PyTypeObject *	access:public
type	include/pybind11/detail/type_caster_base.h	/^    const detail::type_info *type = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:const detail::type_info *	access:public
type	include/pybind11/eigen/matrix.h	/^    using type = StrideType;$/;"	t	struct:eigen_extract_stride	typeref:typename:StrideType	access:public
type	include/pybind11/eigen/matrix.h	/^    using type = Type;$/;"	t	struct:eigen_extract_stride	typeref:typename:Type	access:public
type	include/pybind11/functional.h	/^    using type = std::function<Return(Args...)>;$/;"	t	struct:type_caster	access:public
type	include/pybind11/numpy.h	/^    char type;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:char	access:public
type	include/pybind11/numpy.h	/^    using type = T;$/;"	t	struct:array_info_scalar	typeref:typename:T	access:public
type	include/pybind11/numpy.h	/^    using type = array_t<T, ExtraFlags>;$/;"	t	struct:pyobject_caster	typeref:typename:array_t<T,ExtraFlags>	access:public
type	include/pybind11/numpy.h	/^    using type = conditional_t<vectorize, array_t<remove_cv_t<call_type>, array::forcecast>, T>;$/;"	t	struct:vectorize_arg	typeref:typename:conditional_t<vectorize,array_t<remove_cv_t<call_type>,array::forcecast>,T>	access:public
type	include/pybind11/numpy.h	/^    using type = typename array_info<T>::type;$/;"	t	struct:array_info	typeref:typename:array_info<T>::type	access:public
type	include/pybind11/pybind11.h	/^    using type = int16_t;$/;"	t	struct:equivalent_integer	typeref:typename:int16_t	access:public
type	include/pybind11/pybind11.h	/^    using type = int32_t;$/;"	t	struct:equivalent_integer	typeref:typename:int32_t	access:public
type	include/pybind11/pybind11.h	/^    using type = int64_t;$/;"	t	struct:equivalent_integer	typeref:typename:int64_t	access:public
type	include/pybind11/pybind11.h	/^    using type = int8_t;$/;"	t	struct:equivalent_integer	typeref:typename:int8_t	access:public
type	include/pybind11/pybind11.h	/^    using type = type_;$/;"	t	class:class_	typeref:typename:type_	access:public
type	include/pybind11/pybind11.h	/^    using type = uint16_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint16_t	access:public
type	include/pybind11/pybind11.h	/^    using type = uint32_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint32_t	access:public
type	include/pybind11/pybind11.h	/^    using type = uint64_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint64_t	access:public
type	include/pybind11/pybind11.h	/^    using type = uint8_t;$/;"	t	struct:equivalent_integer	typeref:typename:uint8_t	access:public
type	include/pybind11/pytypes.h	/^    const object &type() const { return m_fetched_error->m_type; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
type	include/pybind11/pytypes.h	/^class type : public object {$/;"	c	inherits:object
type	include/pybind11/stl.h	/^    using type = Type;$/;"	t	struct:set_caster	typeref:typename:Type	access:public
type-conversions	docs/advanced/cast/index.rst	/^.. _type-conversions:$/;"	T
type::PYBIND11_OBJECT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT(type, object, PyType_Check)$/;"	f	class:type	access:public	signature:(type,object,PyType_Check)
type::handle_of	include/pybind11/pytypes.h	/^    static handle handle_of();$/;"	p	class:type	typeref:typename:handle	access:public	signature:()
type::of	include/pybind11/pytypes.h	/^    static type of() {$/;"	f	class:type	typeref:typename:type	access:public	signature:()
type::of	include/pybind11/pytypes.h	/^    static type of(handle h) { return type(type::handle_of(h), borrowed_t{}); }$/;"	f	class:type	typeref:typename:type	access:public	signature:(handle h)
type_alias	include/pybind11/pybind11.h	/^    using type_alias = detail::exactly_one_t<is_subtype, void, options...>;$/;"	t	class:class_	typeref:typename:detail::exactly_one_t<is_subtype,void,options...>	access:public
type_align	include/pybind11/attr.h	/^    size_t type_align = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
type_align	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
type_caster	include/pybind11/cast.h	/^class type_caster : public type_caster_base<type> {};$/;"	c	inherits:type_caster_base<type>
type_caster	include/pybind11/cast.h	/^class type_caster<T, enable_if_t<is_pyobject<T>::value>> : public pyobject_caster<T> {};$/;"	c	inherits:pyobject_caster<T>
type_caster	include/pybind11/cast.h	/^class type_caster<bool> {$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::nullptr_t> : public void_caster<std::nullptr_t> {};$/;"	c	inherits:void_caster<std::nullptr_t>
type_caster	include/pybind11/cast.h	/^class type_caster<std::pair<T1, T2>> : public tuple_caster<std::pair, T1, T2> {};$/;"	c	inherits:tuple_caster<std::pair,T1,T2>
type_caster	include/pybind11/cast.h	/^class type_caster<std::reference_wrapper<type>> {$/;"	c
type_caster	include/pybind11/cast.h	/^class type_caster<std::shared_ptr<T>> : public copyable_holder_caster<T, std::shared_ptr<T>> {};$/;"	c	inherits:copyable_holder_caster<T,std::shared_ptr<T>>
type_caster	include/pybind11/cast.h	/^class type_caster<std::tuple<Ts...>> : public tuple_caster<std::tuple, Ts...> {};$/;"	c	inherits:tuple_caster<std::tuple,Ts...>
type_caster	include/pybind11/cast.h	/^class type_caster<std::unique_ptr<type, deleter>>$/;"	c	inherits:move_only_holder_caster<type,std::unique_ptr<type,deleter>>
type_caster	include/pybind11/cast.h	/^class type_caster<void> : public type_caster<void_type> {$/;"	c	inherits:type_caster<void_type>
type_caster	include/pybind11/cast.h	/^class type_caster<void_type> : public void_caster<void_type> {};$/;"	c	inherits:void_caster<void_type>
type_caster	include/pybind11/cast.h	/^struct type_caster<CharT, enable_if_t<is_std_char_type<CharT>::value>> {$/;"	s
type_caster	include/pybind11/cast.h	/^struct type_caster<T, enable_if_t<std::is_arithmetic<T>::value && !is_std_char_type<T>::value>> /;"	s
type_caster	include/pybind11/cast.h	/^struct type_caster<std::basic_string<CharT, Traits, Allocator>,$/;"	s	inherits:string_caster<std::basic_string<CharT,Traits,Allocator>>
type_caster	include/pybind11/cast.h	/^struct type_caster<std::basic_string_view<CharT, Traits>,$/;"	s	inherits:string_caster<std::basic_string_view<CharT,Traits>,true>
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::duration<Rep, Period>>$/;"	c	inherits:duration_caster<std::chrono::duration<Rep,Period>>
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::time_point<Clock, Duration>>$/;"	c	inherits:duration_caster<std::chrono::time_point<Clock,Duration>>
type_caster	include/pybind11/chrono.h	/^class type_caster<std::chrono::time_point<std::chrono::system_clock, Duration>> {$/;"	c
type_caster	include/pybind11/complex.h	/^class type_caster<std::complex<T>> {$/;"	c
type_caster	include/pybind11/detail/init.h	/^class type_caster<value_and_holder> {$/;"	c
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<$/;"	s	inherits:eigen_map_caster<Eigen::Ref<PlainObjectType,0,StrideType>>
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_map<Type>::value>> : eigen_map_caster<Type> /;"	s	inherits:eigen_map_caster<Type>
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_dense_plain<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_other<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/matrix.h	/^struct type_caster<Type, enable_if_t<is_eigen_sparse<Type>::value>> {$/;"	s
type_caster	include/pybind11/eigen/tensor.h	/^struct type_caster<Eigen::TensorMap<Type, Options>,$/;"	s
type_caster	include/pybind11/eigen/tensor.h	/^struct type_caster<Type, typename eigen_tensor_helper<Type>::ValidType> {$/;"	s
type_caster	include/pybind11/functional.h	/^struct type_caster<std::function<Return(Args...)>> {$/;"	s
type_caster	include/pybind11/numpy.h	/^struct type_caster<unchecked_mutable_reference<T, Dim>>$/;"	s	inherits:type_caster<unchecked_reference<T,Dim>>
type_caster	include/pybind11/numpy.h	/^struct type_caster<unchecked_reference<T, Dim>> {$/;"	s
type_caster	include/pybind11/stl.h	/^struct type_caster<std::array<Type, Size>>$/;"	s	inherits:array_caster<std::array<Type,Size>,Type,false,Size>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::deque<Type, Alloc>> : list_caster<std::deque<Type, Alloc>, Type> {};$/;"	s	inherits:list_caster<std::deque<Type,Alloc>,Type>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::experimental::nullopt_t>$/;"	s	inherits:void_caster<std::experimental::nullopt_t>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::experimental::optional<T>>$/;"	s	inherits:optional_caster<std::experimental::optional<T>>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::list<Type, Alloc>> : list_caster<std::list<Type, Alloc>, Type> {};$/;"	s	inherits:list_caster<std::list<Type,Alloc>,Type>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::map<Key, Value, Compare, Alloc>>$/;"	s	inherits:map_caster<std::map<Key,Value,Compare,Alloc>,Key,Value>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::monostate> : public void_caster<std::monostate> {};$/;"	s	inherits:void_caster<std::monostate>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::nullopt_t> : public void_caster<std::nullopt_t> {};$/;"	s	inherits:void_caster<std::nullopt_t>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::optional<T>> : public optional_caster<std::optional<T>> {};$/;"	s	inherits:optional_caster<std::optional<T>>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::set<Key, Compare, Alloc>>$/;"	s	inherits:set_caster<std::set<Key,Compare,Alloc>,Key>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::unordered_map<Key, Value, Hash, Equal, Alloc>>$/;"	s	inherits:map_caster<std::unordered_map<Key,Value,Hash,Equal,Alloc>,Key,Value>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::unordered_set<Key, Hash, Equal, Alloc>>$/;"	s	inherits:set_caster<std::unordered_set<Key,Hash,Equal,Alloc>,Key>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::valarray<Type>> : array_caster<std::valarray<Type>, Type, true> {};$/;"	s	inherits:array_caster<std::valarray<Type>,Type,true>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::variant<Ts...>> : variant_caster<std::variant<Ts...>> {};$/;"	s	inherits:variant_caster<std::variant<Ts...>>
type_caster	include/pybind11/stl.h	/^struct type_caster<std::vector<Type, Alloc>> : list_caster<std::vector<Type, Alloc>, Type> {};$/;"	s	inherits:list_caster<std::vector<Type,Alloc>,Type>
type_caster	include/pybind11/stl/filesystem.h	/^struct type_caster<std::experimental::filesystem::path>$/;"	s	inherits:path_caster<std::experimental::filesystem::path>
type_caster	include/pybind11/stl/filesystem.h	/^struct type_caster<std::filesystem::path> : public path_caster<std::filesystem::path> {};$/;"	s	inherits:path_caster<std::filesystem::path>
type_caster	include/pybind11/type_caster_pyobject_ptr.h	/^class type_caster<PyObject> {$/;"	c
type_caster	tests/pybind11_tests.h	/^class type_caster<RValueCaster> {$/;"	c
type_caster	tests/test_builtin_casters.cpp	/^class type_caster<ConstRefCasted> {$/;"	c	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<CopyOnlyInt> {$/;"	s	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<MoveOnlyInt> {$/;"	s	file:
type_caster	tests/test_copy_move.cpp	/^struct type_caster<MoveOrCopyInt> {$/;"	s	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgAlwaysConverts> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector1> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<ArgInspector2> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<DestructionTester> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
type_caster	tests/test_custom_type_casters.cpp	/^struct type_caster<other_lib::MyType> : public other_lib::my_caster {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:other_lib::my_caster
type_caster	tests/test_stl.cpp	/^struct type_caster<ReferenceSensitiveOptional<T>>$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:optional_caster<ReferenceSensitiveOptional<T>>
type_caster	tests/test_stl.cpp	/^struct type_caster<boost::none_t> : void_caster<boost::none_t> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:void_caster<boost::none_t>
type_caster	tests/test_stl.cpp	/^struct type_caster<boost::optional<T>> : optional_caster<boost::optional<T>> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:optional_caster<boost::optional<T>>
type_caster	tests/test_stl.cpp	/^struct type_caster<boost::variant<Ts...>> : variant_caster<boost::variant<Ts...>> {};$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:	inherits:variant_caster<boost::variant<Ts...>>
type_caster::Array	include/pybind11/eigen/matrix.h	/^    using Array$/;"	t	struct:type_caster	access:private
type_caster::Helper	include/pybind11/eigen/tensor.h	/^    using Helper = eigen_tensor_helper<Type>;$/;"	t	struct:type_caster	typeref:typename:eigen_tensor_helper<Type>	access:public
type_caster::Helper	include/pybind11/eigen/tensor.h	/^    using Helper = eigen_tensor_helper<remove_cv_t<Type>>;$/;"	t	struct:type_caster	typeref:typename:eigen_tensor_helper<remove_cv_t<Type>>	access:public
type_caster::Index	include/pybind11/eigen/matrix.h	/^    using Index = typename Type::Index;$/;"	t	struct:type_caster	typeref:typename:Type::Index	access:public
type_caster::MapType	include/pybind11/eigen/matrix.h	/^    using MapType = Eigen::Map<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Map<PlainObjectType,0,StrideType>	access:private
type_caster::MapType	include/pybind11/eigen/tensor.h	/^    using MapType = Eigen::TensorMap<Type, Options>;$/;"	t	struct:type_caster	typeref:typename:Eigen::TensorMap<Type,Options>	access:public
type_caster::Matrix	include/pybind11/eigen/matrix.h	/^    using Matrix$/;"	t	struct:type_caster	typeref:typename:Eigen::Matrix<typename Type::Scalar,Type::RowsAtCompileTime,Type::ColsAtCompileTime>	access:protected
type_caster::PYBIND11_TYPE_CASTER	include/pybind11/eigen/tensor.h	/^    PYBIND11_TYPE_CASTER(Type, temp_name);$/;"	p	struct:type_caster	access:public	signature:(Type,temp_name)
type_caster::Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename Type::Scalar;$/;"	t	struct:type_caster	typeref:typename:Type::Scalar	access:public
type_caster::Scalar	include/pybind11/eigen/matrix.h	/^    using Scalar = typename props::Scalar;$/;"	t	struct:type_caster	typeref:typename:props::Scalar	access:private
type_caster::StorageIndex	include/pybind11/eigen/matrix.h	/^    using StorageIndex = remove_reference_t<decltype(*std::declval<Type>().outerIndexPtr())>;$/;"	t	struct:type_caster	access:public
type_caster::StringCaster	include/pybind11/cast.h	/^    using StringCaster = make_caster<StringType>;$/;"	t	struct:type_caster	typeref:typename:make_caster<StringType>	access:public
type_caster::StringType	include/pybind11/cast.h	/^    using StringType = std::basic_string<CharT>;$/;"	t	struct:type_caster	typeref:typename:std::basic_string<CharT>	access:public
type_caster::Type	include/pybind11/eigen/matrix.h	/^    using Type = Eigen::Ref<PlainObjectType, 0, StrideType>;$/;"	t	struct:type_caster	typeref:typename:Eigen::Ref<PlainObjectType,0,StrideType>	access:private
type_caster::_py_type_0	include/pybind11/cast.h	/^    using _py_type_0 = conditional_t<sizeof(T) <= sizeof(long), long, long long>;$/;"	t	struct:type_caster	access:public
type_caster::_py_type_1	include/pybind11/cast.h	/^    using _py_type_1 = conditional_t<std::is_signed<T>::value,$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_signed<T>::value,_py_type_0,typename std::make_unsigned<_py_type_0>::type>	access:public
type_caster::cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_signed<U>::value && (sizeof (U)<=sizeof (long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_signed<U>::value && (sizeof (U)> sizeof (long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_unsigned<U>::value && (sizeof (U)<=sizeof (unsigned long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<!std::is_floating_point<U>::value && std::is_unsigned<U>::value && (sizeof (U)> sizeof (unsigned long)),handle>::type	access:public	signature:(U src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    cast(U src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:std::enable_if<std::is_floating_point<U>::value,handle>::type	access:public	signature:(U src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    cast(const std::reference_wrapper<type> &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::reference_wrapper<type> & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/cast.h	/^    static handle cast(CharT src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(CharT src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/cast.h	/^    static handle cast(bool src, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(bool src,return_value_policy,handle)
type_caster::cast	include/pybind11/cast.h	/^    static handle cast(const CharT *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const CharT * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/cast.h	/^    static handle cast(const void *ptr, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const void * ptr,return_value_policy,handle)
type_caster::cast	include/pybind11/chrono.h	/^    static handle cast(const std::chrono::time_point<std::chrono::system_clock, Duration> &src,$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::chrono::time_point<std::chrono::system_clock,Duration> & src,return_value_policy,handle)
type_caster::cast	include/pybind11/complex.h	/^    cast(const std::complex<T> &src, return_value_policy \/* policy *\/, handle \/* parent *\/) /;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const std::complex<T> & src,return_value_policy,handle)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type && src,return_value_policy,handle parent)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &&src, return_value_policy \/* policy *\/, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type && src,return_value_policy,handle parent)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy \/* policy *\/, handle \/* parent *\//;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy,handle)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/matrix.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType && src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(MapType * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type && src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Type * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType && src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const MapType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const MapType * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &&src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type && src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type &src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type & src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/eigen/tensor.h	/^    static handle cast(const Type *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(const Type * src,return_value_policy policy,handle parent)
type_caster::cast	include/pybind11/functional.h	/^    static handle cast(Func &&f_, return_value_policy policy, handle \/* parent *\/) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(Func && f_,return_value_policy policy,handle)
type_caster::cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(PyObject *src, return_value_policy policy, handle \/*parent*\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(PyObject * src,return_value_policy policy,handle)
type_caster::cast	include/pybind11/type_caster_pyobject_ptr.h	/^    static handle cast(T &&, return_value_policy, handle \/*parent*\/) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(T &&,return_value_policy,handle)
type_caster::cast	tests/pybind11_tests.h	/^    static handle cast(RValueCaster &&, return_value_policy, handle) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(RValueCaster &&,return_value_policy,handle)
type_caster::cast	tests/pybind11_tests.h	/^    static handle cast(const RValueCaster &, return_value_policy, handle) {$/;"	f	class:type_caster	typeref:typename:handle	access:public	signature:(const RValueCaster &,return_value_policy,handle)
type_caster::cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const CopyOnlyInt & m,return_value_policy r,handle p)
type_caster::cast	tests/test_copy_move.cpp	/^    static handle cast(const CopyOnlyInt *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const CopyOnlyInt * src,return_value_policy policy,handle parent)
type_caster::cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOnlyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const MoveOnlyInt & m,return_value_policy r,handle p)
type_caster::cast	tests/test_copy_move.cpp	/^    static handle cast(const MoveOrCopyInt &m, return_value_policy r, handle p) {$/;"	f	struct:type_caster	typeref:typename:handle	file:	access:public	signature:(const MoveOrCopyInt & m,return_value_policy r,handle p)
type_caster::cast_impl	include/pybind11/eigen/matrix.h	/^    static handle cast_impl(CType *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:private	signature:(CType * src,return_value_policy policy,handle parent)
type_caster::cast_impl	include/pybind11/eigen/tensor.h	/^    static handle cast_impl(C *src, return_value_policy policy, handle parent) {$/;"	f	struct:type_caster	typeref:typename:handle	access:public	signature:(C * src,return_value_policy policy,handle parent)
type_caster::cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = pybind11::detail::cast_op_type<_T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<_T>	access:public
type_caster::cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = std::reference_wrapper<type>;$/;"	t	class:type_caster	typeref:typename:std::reference_wrapper<type>	access:public
type_caster::cast_op_type	include/pybind11/cast.h	/^    using cast_op_type = void *&;$/;"	t	class:type_caster	typeref:typename:void * &	access:public
type_caster::cast_op_type	include/pybind11/detail/init.h	/^    using cast_op_type = value_and_holder &;$/;"	t	class:type_caster	typeref:typename:value_and_holder &	access:public
type_caster::cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = Type;$/;"	t	struct:type_caster	typeref:typename:Type	access:public
type_caster::cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = movable_cast_op_type<T>;$/;"	t	struct:type_caster	typeref:typename:movable_cast_op_type<T>	access:public
type_caster::cast_op_type	include/pybind11/eigen/matrix.h	/^    using cast_op_type = pybind11::detail::cast_op_type<_T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<_T>	access:public
type_caster::cast_op_type	include/pybind11/eigen/tensor.h	/^    using cast_op_type = ::pybind11::detail::movable_cast_op_type<T_>;$/;"	t	struct:type_caster	typeref:typename:::pybind11::detail::movable_cast_op_type<T_>	access:public
type_caster::cast_op_type	include/pybind11/type_caster_pyobject_ptr.h	/^    using cast_op_type = PyObject *;$/;"	t	class:type_caster	typeref:typename:PyObject *	access:public
type_caster::cast_op_type	tests/test_builtin_casters.cpp	/^    using cast_op_type =$/;"	t	class:type_caster	file:	access:public
type_caster::cast_op_type	tests/test_copy_move.cpp	/^    using cast_op_type = pybind11::detail::cast_op_type<T>;$/;"	t	struct:type_caster	typeref:typename:pybind11::detail::cast_op_type<T>	file:	access:public
type_caster::caster_t	include/pybind11/cast.h	/^    using caster_t = make_caster<type>;$/;"	t	class:type_caster	typeref:typename:make_caster<type>	access:private
type_caster::copy_or_ref	include/pybind11/eigen/matrix.h	/^    Array copy_or_ref;$/;"	m	struct:type_caster	typeref:typename:Array	access:private
type_caster::data	include/pybind11/eigen/matrix.h	/^    Scalar *data(Array &a) {$/;"	f	struct:type_caster	typeref:typename:Scalar *	access:private	signature:(Array & a)
type_caster::data	include/pybind11/eigen/matrix.h	/^    const Scalar *data(Array &a) {$/;"	f	struct:type_caster	typeref:typename:const Scalar *	access:private	signature:(Array & a)
type_caster::function_type	include/pybind11/functional.h	/^    using function_type = Return (*)(Args...);$/;"	t	struct:type_caster	access:public
type_caster::load	include/pybind11/cast.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle h,bool)
type_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) { return subcaster.load(src, convert); }$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/chrono.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
type_caster::load	include/pybind11/complex.h	/^    bool load(handle src, bool convert) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/detail/init.h	/^    bool load(handle h, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle h,bool)
type_caster::load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/eigen/matrix.h	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
type_caster::load	include/pybind11/eigen/matrix.h	/^    bool load(handle, bool) = delete;$/;"	p	struct:type_caster	typeref:typename:bool	access:public	signature:(handle,bool)
type_caster::load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool \/*convert*\/) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
type_caster::load	include/pybind11/eigen/tensor.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/functional.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster::load	include/pybind11/type_caster_pyobject_ptr.h	/^    bool load(handle src, bool) {$/;"	f	class:type_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
type_caster::load	tests/test_builtin_casters.cpp	/^    bool load(handle, bool) { return true; }$/;"	f	class:type_caster	typeref:typename:bool	file:	access:public	signature:(handle,bool)
type_caster::load	tests/test_copy_move.cpp	/^    bool load(handle src, bool) {$/;"	f	struct:type_caster	typeref:typename:bool	file:	access:public	signature:(handle src,bool)
type_caster::load::capture::f	include/pybind11/functional.h	/^                            function_type f;$/;"	m	struct:type_caster::load::capture	typeref:typename:function_type	access:public
type_caster::load::func_handle::f	include/pybind11/functional.h	/^            function f;$/;"	m	struct:type_caster::load::func_handle	typeref:typename:function	access:public
type_caster::load::func_handle::func_handle	include/pybind11/functional.h	/^                func_handle(function &&f_) noexcept$/;"	f	struct:type_caster::load::func_handle	access:public	signature:(function && f_)
type_caster::load::func_handle::func_handle	include/pybind11/functional.h	/^            func_handle(const func_handle &f_) { operator=(f_); }$/;"	f	struct:type_caster::load::func_handle	access:public	signature:(const func_handle & f_)
type_caster::load::func_handle::operator =	include/pybind11/functional.h	/^            func_handle &operator=(const func_handle &f_) {$/;"	f	struct:type_caster::load::func_handle	typeref:typename:func_handle &	access:public	signature:(const func_handle & f_)
type_caster::load::func_handle::~func_handle	include/pybind11/functional.h	/^            ~func_handle() {$/;"	f	struct:type_caster::load::func_handle	access:public	signature:()
type_caster::load::func_wrapper::func_wrapper	include/pybind11/functional.h	/^            explicit func_wrapper(func_handle &&hf) noexcept : hfunc(std::move(hf)) {}$/;"	f	struct:type_caster::load::func_wrapper	access:public	signature:(func_handle && hf)
type_caster::load::func_wrapper::hfunc	include/pybind11/functional.h	/^            func_handle hfunc;$/;"	m	struct:type_caster::load::func_wrapper	typeref:typename:func_handle	access:public
type_caster::load::func_wrapper::operator ()	include/pybind11/functional.h	/^            Return operator()(Args... args) const {$/;"	f	struct:type_caster::load::func_wrapper	typeref:typename:Return	access:public	signature:(Args...args) const
type_caster::make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex inner) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex outer,EigenIndex inner)
type_caster::make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex outer, EigenIndex) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex outer,EigenIndex)
type_caster::make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex inner) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex,EigenIndex inner)
type_caster::make_stride	include/pybind11/eigen/matrix.h	/^    static S make_stride(EigenIndex, EigenIndex) {$/;"	f	struct:type_caster	typeref:typename:S	access:private	signature:(EigenIndex,EigenIndex)
type_caster::map	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<MapType> map;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<MapType>	access:private
type_caster::name	include/pybind11/cast.h	/^    static constexpr auto name = caster_t::name;$/;"	m	class:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name("capsule");$/;"	m	class:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/cast.h	/^    static constexpr auto name = const_name(PYBIND11_STRING_NAME);$/;"	m	struct:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/detail/init.h	/^    static constexpr auto name = const_name<value_and_holder>();$/;"	m	class:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/eigen/matrix.h	/^    static constexpr auto name = props::descriptor;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/eigen/tensor.h	/^    static constexpr auto name = get_tensor_descriptor<Type, true, needs_writeable>::value;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
type_caster::name	include/pybind11/type_caster_pyobject_ptr.h	/^    static constexpr auto name = const_name("object"); \/\/ See discussion under PR #4601.$/;"	m	class:type_caster	typeref:typename:auto	access:public
type_caster::name	tests/test_builtin_casters.cpp	/^    static constexpr auto name = const_name<ConstRefCasted>();$/;"	m	class:type_caster	typeref:typename:auto	file:	access:public
type_caster::name	tests/test_copy_move.cpp	/^    static constexpr auto name = const_name("CopyOnlyInt");$/;"	m	struct:type_caster	typeref:typename:auto	file:	access:public
type_caster::need_writeable	include/pybind11/eigen/matrix.h	/^    static constexpr bool need_writeable = is_eigen_mutable_map<Type>::value;$/;"	m	struct:type_caster	typeref:typename:bool	access:private
type_caster::needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<Type>::value;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
type_caster::needs_writeable	include/pybind11/eigen/tensor.h	/^    static constexpr bool needs_writeable = !std::is_const<typename std::remove_pointer<$/;"	m	struct:type_caster	typeref:typename:bool	access:public
type_caster::none	include/pybind11/cast.h	/^    bool none = false;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
type_caster::one_char	include/pybind11/cast.h	/^    CharT one_char = 0;$/;"	m	struct:type_caster	typeref:typename:CharT	access:public
type_caster::operator CharT&	include/pybind11/cast.h	/^    explicit operator CharT &() {$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator CharT*	include/pybind11/cast.h	/^    explicit operator CharT *() {$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator ConstRefCasted&	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &() {$/;"	f	class:type_caster	file:	access:public	signature:()
type_caster::operator ConstRefCasted&&	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted &&() {$/;"	f	class:type_caster	file:	access:public	signature:()
type_caster::operator ConstRefCasted*	tests/test_builtin_casters.cpp	/^    explicit operator ConstRefCasted *() {$/;"	f	class:type_caster	file:	access:public	signature:()
type_caster::operator CopyOnlyInt&	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt &() { return value; }$/;"	f	struct:type_caster	file:	access:public	signature:()
type_caster::operator CopyOnlyInt*	tests/test_copy_move.cpp	/^    explicit operator CopyOnlyInt *() { return &value; }$/;"	f	struct:type_caster	file:	access:public	signature:()
type_caster::operator MapType&	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &() { return *value; }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator MapType&&	include/pybind11/eigen/tensor.h	/^    explicit operator MapType &&() && { return std::move(*value); }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator MapType*	include/pybind11/eigen/tensor.h	/^    explicit operator MapType *() { return value.get(); }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator PyObject*	include/pybind11/type_caster_pyobject_ptr.h	/^    explicit operator PyObject *() { return value.ptr(); }$/;"	f	class:type_caster	access:public	signature:()
type_caster::operator Type	include/pybind11/eigen/matrix.h	/^    operator Type() = delete;$/;"	p	struct:type_caster	access:public	signature:()
type_caster::operator Type&	include/pybind11/eigen/matrix.h	/^    operator Type &() { return *ref; }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator Type&	include/pybind11/eigen/matrix.h	/^    operator Type &() { return value; }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator Type&&	include/pybind11/eigen/matrix.h	/^    operator Type &&() && { return std::move(value); }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator Type*	include/pybind11/eigen/matrix.h	/^    operator Type *() { return &value; }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator Type*	include/pybind11/eigen/matrix.h	/^    operator Type *() { return ref.get(); }$/;"	f	struct:type_caster	access:public	signature:()
type_caster::operator const ConstRefCasted&	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted &() {$/;"	f	class:type_caster	file:	access:public	signature:()
type_caster::operator const ConstRefCasted*	tests/test_builtin_casters.cpp	/^    explicit operator const ConstRefCasted *() {$/;"	f	class:type_caster	file:	access:public	signature:()
type_caster::operator std::reference_wrapper<type>	include/pybind11/cast.h	/^    explicit operator std::reference_wrapper<type>() { return cast_op<type &>(subcaster); }$/;"	f	class:type_caster	access:public	signature:()
type_caster::operator value_and_holder&	include/pybind11/detail/init.h	/^    explicit operator value_and_holder &() { return *value; }$/;"	f	class:type_caster	access:public	signature:()
type_caster::operator void*&	include/pybind11/cast.h	/^    explicit operator void *&() { return value; }$/;"	f	class:type_caster	access:public	signature:()
type_caster::props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Matrix>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Matrix>	access:protected
type_caster::props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Type>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Type>	access:private
type_caster::props	include/pybind11/eigen/matrix.h	/^    using props = EigenProps<Type>;$/;"	t	struct:type_caster	typeref:typename:EigenProps<Type>	access:public
type_caster::py_type	include/pybind11/cast.h	/^    using py_type = conditional_t<std::is_floating_point<T>::value, double, _py_type_1>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_floating_point<T>::value,double,_py_type_1>	access:public
type_caster::ref	include/pybind11/eigen/matrix.h	/^    std::unique_ptr<Type> ref;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<Type>	access:private
type_caster::reference_t	include/pybind11/cast.h	/^    using reference_t = type &;$/;"	t	class:type_caster	typeref:typename:type &	access:private
type_caster::retval_type	include/pybind11/functional.h	/^    using retval_type = conditional_t<std::is_same<Return, void>::value, void_type, Return>;$/;"	t	struct:type_caster	typeref:typename:conditional_t<std::is_same<Return,void>::value,void_type,Return>	access:public
type_caster::rowMajor	include/pybind11/eigen/matrix.h	/^    static constexpr bool rowMajor = Type::IsRowMajor;$/;"	m	struct:type_caster	typeref:typename:bool	access:public
type_caster::str_caster	include/pybind11/cast.h	/^    StringCaster str_caster;$/;"	m	struct:type_caster	typeref:typename:StringCaster	access:public
type_caster::stride_ctor_default	include/pybind11/eigen/matrix.h	/^    using stride_ctor_default = bool_constant<S::InnerStrideAtCompileTime != Eigen::Dynamic$/;"	t	struct:type_caster	typeref:typename:bool_constant<S::InnerStrideAtCompileTime!=Eigen::Dynamic && S::OuterStrideAtCompileTime!=Eigen::Dynamic && std::is_default_constructible<S>::value>	access:private
type_caster::stride_ctor_dual	include/pybind11/eigen/matrix.h	/^    using stride_ctor_dual$/;"	t	struct:type_caster	typeref:typename:bool_constant<!stride_ctor_default<S>::value && std::is_constructible<S,EigenIndex,EigenIndex>::value>	access:private
type_caster::stride_ctor_inner	include/pybind11/eigen/matrix.h	/^    using stride_ctor_inner$/;"	t	struct:type_caster	access:private
type_caster::stride_ctor_outer	include/pybind11/eigen/matrix.h	/^    using stride_ctor_outer$/;"	t	struct:type_caster	access:private
type_caster::subcaster	include/pybind11/cast.h	/^    caster_t subcaster;$/;"	m	class:type_caster	typeref:typename:caster_t	access:private
type_caster::subcaster_cast_op_type	include/pybind11/cast.h	/^    using subcaster_cast_op_type = typename caster_t::template cast_op_type<reference_t>;$/;"	t	class:type_caster	typeref:typename:caster_t::template cast_op_type<reference_t>	access:private
type_caster::temp_name	include/pybind11/eigen/tensor.h	/^    static constexpr auto temp_name = get_tensor_descriptor<Type, false>::value;$/;"	m	struct:type_caster	typeref:typename:auto	access:public
type_caster::type	include/pybind11/chrono.h	/^    using type = std::chrono::time_point<std::chrono::system_clock, Duration>;$/;"	t	class:type_caster	typeref:typename:std::chrono::time_point<std::chrono::system_clock,Duration>	access:public
type_caster::type	include/pybind11/functional.h	/^    using type = std::function<Return(Args...)>;$/;"	t	struct:type_caster	access:public
type_caster::value	include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster	typeref:typename:void *	access:private
type_caster::value	include/pybind11/detail/init.h	/^    value_and_holder *value = nullptr;$/;"	m	class:type_caster	typeref:typename:value_and_holder *	access:private
type_caster::value	include/pybind11/eigen/matrix.h	/^    Type value;$/;"	m	struct:type_caster	typeref:typename:Type	access:private
type_caster::value	include/pybind11/eigen/tensor.h	/^    std::unique_ptr<MapType> value;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<MapType>	access:protected
type_caster::value	include/pybind11/type_caster_pyobject_ptr.h	/^    object value;$/;"	m	class:type_caster	typeref:typename:object	access:private
type_caster::value	tests/test_builtin_casters.cpp	/^    ConstRefCasted value = {0};$/;"	m	class:type_caster	typeref:typename:ConstRefCasted	file:	access:private
type_caster::value	tests/test_copy_move.cpp	/^    CopyOnlyInt value;$/;"	m	struct:type_caster	typeref:typename:CopyOnlyInt	file:	access:protected
type_caster_base	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_base(const std::type_info &info) : type_caster_generic(info) {}$/;"	f	class:type_caster_base	access:public	signature:(const std::type_info & info)
type_caster_base	include/pybind11/detail/type_caster_base.h	/^    type_caster_base() : type_caster_base(typeid(type)) {}$/;"	f	class:type_caster_base	access:public	signature:()
type_caster_base	include/pybind11/detail/type_caster_base.h	/^class type_caster_base : public type_caster_generic {$/;"	c	inherits:type_caster_generic
type_caster_base::Constructor	include/pybind11/detail/type_caster_base.h	/^    using Constructor = void *(*) (const void *);$/;"	t	class:type_caster_base	access:protected
type_caster_base::cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype &src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype & src,return_value_policy policy,handle parent)
type_caster_base::cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(const itype *src, return_value_policy policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype * src,return_value_policy policy,handle parent)
type_caster_base::cast	include/pybind11/detail/type_caster_base.h	/^    static handle cast(itype &&src, return_value_policy, handle parent) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(itype && src,return_value_policy,handle parent)
type_caster_base::cast_holder	include/pybind11/detail/type_caster_base.h	/^    static handle cast_holder(const itype *src, const void *holder) {$/;"	f	class:type_caster_base	typeref:typename:handle	access:public	signature:(const itype * src,const void * holder)
type_caster_base::cast_op_type	include/pybind11/detail/type_caster_base.h	/^    using cast_op_type = detail::cast_op_type<T>;$/;"	t	class:type_caster_base	typeref:typename:detail::cast_op_type<T>	access:public
type_caster_base::itype	include/pybind11/detail/type_caster_base.h	/^    using itype = intrinsic_t<type>;$/;"	t	class:type_caster_base	typeref:typename:intrinsic_t<type>	access:private
type_caster_base::make_copy_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_copy_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor	access:protected	signature:(...)
type_caster_base::make_copy_constructor	include/pybind11/detail/type_caster_base.h	/^    static auto make_copy_constructor(const T *)$/;"	f	class:type_caster_base	typeref:typename:decltype(new T (std::declval<const T> ()),Constructor{})	access:protected	signature:(const T *)
type_caster_base::make_move_constructor	include/pybind11/detail/type_caster_base.h	/^    static Constructor make_move_constructor(...) { return nullptr; }$/;"	f	class:type_caster_base	typeref:typename:Constructor	access:protected	signature:(...)
type_caster_base::make_move_constructor	include/pybind11/detail/type_caster_base.h	/^    static auto make_move_constructor(const T *)$/;"	f	class:type_caster_base	typeref:typename:decltype(new T (std::declval<T &&> ()),Constructor{})	access:protected	signature:(const T *)
type_caster_base::name	include/pybind11/detail/type_caster_base.h	/^    static constexpr auto name = const_name<type>();$/;"	m	class:type_caster_base	typeref:typename:auto	access:public
type_caster_base::operator itype&	include/pybind11/detail/type_caster_base.h	/^    operator itype &() {$/;"	f	class:type_caster_base	access:public	signature:()
type_caster_base::operator itype*	include/pybind11/detail/type_caster_base.h	/^    operator itype *() { return (type *) value; }$/;"	f	class:type_caster_base	access:public	signature:()
type_caster_base::src_and_type	include/pybind11/detail/type_caster_base.h	/^    static std::pair<const void *, const type_info *> src_and_type(const itype *src) {$/;"	f	class:type_caster_base	typeref:typename:std::pair<const void *,const type_info * >	access:public	signature:(const itype * src)
type_caster_base::type_caster_base	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_base(const std::type_info &info) : type_caster_generic(info) {}$/;"	f	class:type_caster_base	access:public	signature:(const std::type_info & info)
type_caster_base::type_caster_base	include/pybind11/detail/type_caster_base.h	/^    type_caster_base() : type_caster_base(typeid(type)) {}$/;"	f	class:type_caster_base	access:public	signature:()
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE explicit type_caster_generic(const std::type_info &type_info)$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE	access:public	signature:(const std::type_info & type_info)
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_generic(const type_info *typeinfo)$/;"	f	class:type_caster_generic	access:public	signature:(const type_info * typeinfo)
type_caster_generic	include/pybind11/detail/type_caster_base.h	/^class type_caster_generic {$/;"	c
type_caster_generic::cast	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static handle cast(const void *_src,$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE handle	access:public	signature:(const void * _src,return_value_policy policy,handle parent,const detail::type_info * tinfo,void * (* copy_constructor)(const void *),void * (* move_constructor)(const void *),const void * existing_holder=nullptr)
type_caster_generic::check_holder_compat	include/pybind11/detail/type_caster_base.h	/^    void check_holder_compat() {}$/;"	f	class:type_caster_generic	typeref:typename:void	access:public	signature:()
type_caster_generic::cpptype	include/pybind11/detail/type_caster_base.h	/^    const std::type_info *cpptype = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:const std::type_info *	access:public
type_caster_generic::load	include/pybind11/detail/type_caster_base.h	/^    bool load(handle src, bool convert) { return load_impl<type_caster_generic>(src, convert); }$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster_generic::load_impl	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool load_impl(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE bool	access:public	signature:(handle src,bool convert)
type_caster_generic::load_value	include/pybind11/detail/type_caster_base.h	/^    void load_value(value_and_holder &&v_h) {$/;"	f	class:type_caster_generic	typeref:typename:void	access:public	signature:(value_and_holder && v_h)
type_caster_generic::local_load	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE static void *local_load(PyObject *src, const type_info *ti) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE void *	access:public	signature:(PyObject * src,const type_info * ti)
type_caster_generic::src_and_type	include/pybind11/detail/type_caster_base.h	/^    src_and_type(const void *src,$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE std::pair<const void *,const type_info * >	access:public	signature:(const void * src,const std::type_info & cast_type,const std::type_info * rtti_type=nullptr)
type_caster_generic::try_direct_conversions	include/pybind11/detail/type_caster_base.h	/^    bool try_direct_conversions(handle src) {$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src)
type_caster_generic::try_implicit_casts	include/pybind11/detail/type_caster_base.h	/^    bool try_implicit_casts(handle src, bool convert) {$/;"	f	class:type_caster_generic	typeref:typename:bool	access:public	signature:(handle src,bool convert)
type_caster_generic::try_load_foreign_module_local	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE bool try_load_foreign_module_local(handle src) {$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE bool	access:public	signature:(handle src)
type_caster_generic::type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    PYBIND11_NOINLINE explicit type_caster_generic(const std::type_info &type_info)$/;"	f	class:type_caster_generic	typeref:typename:PYBIND11_NOINLINE	access:public	signature:(const std::type_info & type_info)
type_caster_generic::type_caster_generic	include/pybind11/detail/type_caster_base.h	/^    explicit type_caster_generic(const type_info *typeinfo)$/;"	f	class:type_caster_generic	access:public	signature:(const type_info * typeinfo)
type_caster_generic::typeinfo	include/pybind11/detail/type_caster_base.h	/^    const type_info *typeinfo = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:const type_info *	access:public
type_caster_generic::value	include/pybind11/detail/type_caster_base.h	/^    void *value = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:void *	access:public
type_caster_holder	include/pybind11/cast.h	/^using type_caster_holder = conditional_t<is_copy_constructible<holder_type>::value,$/;"	t	typeref:typename:conditional_t<is_copy_constructible<holder_type>::value,copyable_holder_caster<type,holder_type>,move_only_holder_caster<type,holder_type>>
type_descr	include/pybind11/detail/descr.h	/^constexpr descr<N + 2, Ts...> type_descr(const descr<N, Ts...> &descr) {$/;"	f	typeref:typename:descr<N+2,Ts...>	signature:(const descr<N,Ts...> & descr)
type_equal_to	include/pybind11/detail/internals.h	/^struct type_equal_to {$/;"	s
type_equal_to	include/pybind11/detail/internals.h	/^using type_equal_to = std::equal_to<std::type_index>;$/;"	t	typeref:typename:std::equal_to<std::type_index>
type_equal_to::operator ()	include/pybind11/detail/internals.h	/^    bool operator()(const std::type_index &lhs, const std::type_index &rhs) const {$/;"	f	struct:type_equal_to	typeref:typename:bool	access:public	signature:(const std::type_index & lhs,const std::type_index & rhs) const
type_hash	include/pybind11/detail/internals.h	/^struct type_hash {$/;"	s
type_hash	include/pybind11/detail/internals.h	/^using type_hash = std::hash<std::type_index>;$/;"	t	typeref:typename:std::hash<std::type_index>
type_hash::operator ()	include/pybind11/detail/internals.h	/^    size_t operator()(const std::type_index &t) const {$/;"	f	struct:type_hash	typeref:typename:size_t	access:public	signature:(const std::type_index & t) const
type_incref	include/pybind11/detail/class.h	/^inline PyTypeObject *type_incref(PyTypeObject *type) {$/;"	f	typeref:typename:PyTypeObject *	signature:(PyTypeObject * type)
type_info	include/pybind11/detail/internals.h	/^struct type_info {$/;"	s
type_info::cpptype	include/pybind11/detail/internals.h	/^    const std::type_info *cpptype;$/;"	m	struct:type_info	typeref:typename:const std::type_info *	access:public
type_info::dealloc	include/pybind11/detail/internals.h	/^    void (*dealloc)(value_and_holder &v_h);$/;"	m	struct:type_info	typeref:typename:void (*)(value_and_holder & v_h)	access:public
type_info::default_holder	include/pybind11/detail/internals.h	/^    bool default_holder : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
type_info::direct_conversions	include/pybind11/detail/internals.h	/^    std::vector<bool (*)(PyObject *, void *&)> *direct_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<bool (*)(PyObject *,void * &)> *	access:public
type_info::get_buffer	include/pybind11/detail/internals.h	/^    buffer_info *(*get_buffer)(PyObject *, void *) = nullptr;$/;"	m	struct:type_info	typeref:typename:buffer_info * (*)(PyObject *,void *)	access:public
type_info::get_buffer_data	include/pybind11/detail/internals.h	/^    void *get_buffer_data = nullptr;$/;"	m	struct:type_info	typeref:typename:void *	access:public
type_info::holder_size_in_ptrs	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
type_info::implicit_casts	include/pybind11/detail/internals.h	/^    std::vector<std::pair<const std::type_info *, void *(*) (void *)>> implicit_casts;$/;"	m	struct:type_info	typeref:typename:std::vector<std::pair<const std::type_info *,void * (*)(void *)>>	access:public
type_info::implicit_conversions	include/pybind11/detail/internals.h	/^    std::vector<PyObject *(*) (PyObject *, PyTypeObject *)> implicit_conversions;$/;"	m	struct:type_info	typeref:typename:std::vector<PyObject * (*)(PyObject *,PyTypeObject *)>	access:public
type_info::init_instance	include/pybind11/detail/internals.h	/^    void (*init_instance)(instance *, const void *);$/;"	m	struct:type_info	typeref:typename:void (*)(instance *,const void *)	access:public
type_info::module_local	include/pybind11/detail/internals.h	/^    bool module_local : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
type_info::module_local_load	include/pybind11/detail/internals.h	/^    void *(*module_local_load)(PyObject *, const type_info *) = nullptr;$/;"	m	struct:type_info	typeref:typename:void * (*)(PyObject *,const type_info *)	access:public
type_info::operator_new	include/pybind11/detail/internals.h	/^    void *(*operator_new)(size_t);$/;"	m	struct:type_info	typeref:typename:void * (*)(size_t)	access:public
type_info::simple_ancestors	include/pybind11/detail/internals.h	/^    bool simple_ancestors : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
type_info::simple_type	include/pybind11/detail/internals.h	/^    bool simple_type : 1;$/;"	m	struct:type_info	typeref:typename:bool:1	access:public
type_info::type	include/pybind11/detail/internals.h	/^    PyTypeObject *type;$/;"	m	struct:type_info	typeref:typename:PyTypeObject *	access:public
type_info::type_align	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
type_info::type_size	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
type_info_description	include/pybind11/detail/type_caster_base.h	/^PYBIND11_NOINLINE std::string type_info_description(const std::type_info &ti) {$/;"	f	typeref:typename:PYBIND11_NOINLINE std::string	signature:(const std::type_info & ti)
type_list	include/pybind11/detail/common.h	/^struct type_list {};$/;"	s
type_map	include/pybind11/detail/internals.h	/^using type_map = std::unordered_map<std::type_index, value_type, type_hash, type_equal_to>;$/;"	t	typeref:typename:std::unordered_map<std::type_index,value_type,type_hash,type_equal_to>
type_num	include/pybind11/numpy.h	/^    int type_num;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:int	access:public
type_of_kind	tests/test_tagbased_polymorphic.cpp	/^    static const std::type_info *type_of_kind(Kind kind);$/;"	p	struct:Animal	typeref:typename:const std::type_info *	file:	access:public	signature:(Kind kind)
type_of_kind	tests/test_tagbased_polymorphic.cpp	/^const std::type_info *Animal::type_of_kind(Kind kind) {$/;"	f	class:Animal	typeref:typename:const std::type_info *	signature:(Kind kind)
type_record	include/pybind11/attr.h	/^    PYBIND11_NOINLINE type_record()$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
type_record	include/pybind11/attr.h	/^struct type_record {$/;"	s
type_record::add_base	include/pybind11/attr.h	/^    PYBIND11_NOINLINE void add_base(const std::type_info &base, void *(*caster)(void *) ) {$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(const std::type_info & base,void * (* caster)(void *))
type_record::bases	include/pybind11/attr.h	/^    list bases;$/;"	m	struct:type_record	typeref:typename:list	access:public
type_record::buffer_protocol	include/pybind11/attr.h	/^    bool buffer_protocol : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::custom_type_setup_callback	include/pybind11/attr.h	/^    custom_type_setup::callback custom_type_setup_callback;$/;"	m	struct:type_record	typeref:typename:custom_type_setup::callback	access:public
type_record::dealloc	include/pybind11/attr.h	/^    void (*dealloc)(detail::value_and_holder &) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(detail::value_and_holder &)	access:public
type_record::default_holder	include/pybind11/attr.h	/^    bool default_holder : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::doc	include/pybind11/attr.h	/^    const char *doc = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *	access:public
type_record::dynamic_attr	include/pybind11/attr.h	/^    bool dynamic_attr : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::holder_size	include/pybind11/attr.h	/^    size_t holder_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
type_record::init_instance	include/pybind11/attr.h	/^    void (*init_instance)(instance *, const void *) = nullptr;$/;"	m	struct:type_record	typeref:typename:void (*)(instance *,const void *)	access:public
type_record::is_final	include/pybind11/attr.h	/^    bool is_final : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::metaclass	include/pybind11/attr.h	/^    handle metaclass;$/;"	m	struct:type_record	typeref:typename:handle	access:public
type_record::module_local	include/pybind11/attr.h	/^    bool module_local : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::multiple_inheritance	include/pybind11/attr.h	/^    bool multiple_inheritance : 1;$/;"	m	struct:type_record	typeref:typename:bool:1	access:public
type_record::name	include/pybind11/attr.h	/^    const char *name = nullptr;$/;"	m	struct:type_record	typeref:typename:const char *	access:public
type_record::operator_new	include/pybind11/attr.h	/^    void *(*operator_new)(size_t) = nullptr;$/;"	m	struct:type_record	typeref:typename:void * (*)(size_t)	access:public
type_record::scope	include/pybind11/attr.h	/^    handle scope;$/;"	m	struct:type_record	typeref:typename:handle	access:public
type_record::type	include/pybind11/attr.h	/^    const std::type_info *type = nullptr;$/;"	m	struct:type_record	typeref:typename:const std::type_info *	access:public
type_record::type_align	include/pybind11/attr.h	/^    size_t type_align = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
type_record::type_record	include/pybind11/attr.h	/^    PYBIND11_NOINLINE type_record()$/;"	f	struct:type_record	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
type_record::type_size	include/pybind11/attr.h	/^    size_t type_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
type_size	include/pybind11/attr.h	/^    size_t type_size = 0;$/;"	m	struct:type_record	typeref:typename:size_t	access:public
type_size	include/pybind11/detail/internals.h	/^    size_t type_size, type_align, holder_size_in_ptrs;$/;"	m	struct:type_info	typeref:typename:size_t	access:public
type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^    using type_to_check_recursively = recursive_bottom;$/;"	t	struct:impl_recursive_container_traits	typeref:typename:recursive_bottom	access:public
type_to_check_recursively	include/pybind11/detail/type_caster_base.h	/^    using type_to_check_recursively = typename std::conditional<$/;"	t	struct:impl_recursive_container_traits	access:public
type_to_check_recursively	tests/test_stl_binders.cpp	/^    using type_to_check_recursively = recursive_bottom;$/;"	t	struct:pybind11::detail::recursive_container_traits	typeref:typename:recursive_bottom	file:	access:public
type_vec	include/pybind11/detail/type_caster_base.h	/^    using type_vec = std::vector<detail::type_info *>;$/;"	t	struct:values_and_holders	typeref:typename:std::vector<detail::type_info * >	access:private
typeinfo	include/pybind11/detail/type_caster_base.h	/^    const type_info *typeinfo = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:const type_info *	access:public
typeobj	include/pybind11/numpy.h	/^    PyObject *typeobj;$/;"	m	struct:PyArrayDescr_Proxy	typeref:typename:PyObject_HEAD PyObject *	access:public
types	include/pybind11/detail/descr.h	/^    static constexpr std::array<const std::type_info *, sizeof...(Ts) + 1> types() {$/;"	f	struct:descr	typeref:typename:std::array<const std::type_info *,sizeof...(Ts)+1>	access:public	signature:()
types	include/pybind11/detail/type_caster_base.h	/^        const type_vec *types = nullptr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:const type_vec *	access:private
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:PartialStruct	typeref:typename:uint32_t	file:	access:public
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStruct	typeref:typename:uint32_t	file:	access:public
uint_	tests/test_numpy_dtypes.cpp	/^    uint32_t uint_;$/;"	m	struct:SimpleStructReordered	typeref:typename:uint32_t	file:	access:public
unchecked	include/pybind11/numpy.h	/^    detail::unchecked_reference<T, Dims> unchecked() const & {$/;"	f	class:array	typeref:typename:detail::unchecked_reference<T,Dims>	access:public	signature:() const
unchecked	include/pybind11/numpy.h	/^    detail::unchecked_reference<T, Dims> unchecked() const & {$/;"	f	class:array_t	typeref:typename:detail::unchecked_reference<T,Dims>	access:public	signature:() const
unchecked_mutable_reference	include/pybind11/numpy.h	/^class unchecked_mutable_reference : public unchecked_reference<T, Dims> {$/;"	c	inherits:unchecked_reference<T,Dims>
unchecked_mutable_reference::ConstBase	include/pybind11/numpy.h	/^    using ConstBase = unchecked_reference<T, Dims>;$/;"	t	class:unchecked_mutable_reference	typeref:typename:unchecked_reference<T,Dims>	access:private
unchecked_mutable_reference::mutable_data	include/pybind11/numpy.h	/^    T *mutable_data(Ix... ix) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T *	access:public	signature:(Ix...ix)
unchecked_mutable_reference::operator ()	include/pybind11/numpy.h	/^    T &operator()(Ix... index) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T &	access:public	signature:(Ix...index)
unchecked_mutable_reference::operator []	include/pybind11/numpy.h	/^    T &operator[](ssize_t index) {$/;"	f	class:unchecked_mutable_reference	typeref:typename:T &	access:public	signature:(ssize_t index)
unchecked_reference	include/pybind11/numpy.h	/^    unchecked_reference(const void *data,$/;"	f	class:unchecked_reference	access:protected	signature:(const void * data,const ssize_t * shape,const ssize_t * strides,enable_if_t<!Dyn,ssize_t>)
unchecked_reference	include/pybind11/numpy.h	/^    unchecked_reference(const void *data,$/;"	f	class:unchecked_reference	access:protected	signature:(const void * data,const ssize_t * shape,const ssize_t * strides,enable_if_t<Dyn,ssize_t> dims)
unchecked_reference	include/pybind11/numpy.h	/^class unchecked_reference {$/;"	c
unchecked_reference::Dynamic	include/pybind11/numpy.h	/^    static constexpr bool Dynamic = Dims < 0;$/;"	m	class:unchecked_reference	typeref:typename:bool	access:protected
unchecked_reference::data	include/pybind11/numpy.h	/^    const T *data(Ix... ix) const {$/;"	f	class:unchecked_reference	typeref:typename:const T *	access:public	signature:(Ix...ix) const
unchecked_reference::data_	include/pybind11/numpy.h	/^    const unsigned char *data_;$/;"	m	class:unchecked_reference	typeref:typename:const unsigned char *	access:protected
unchecked_reference::dims_	include/pybind11/numpy.h	/^    const ssize_t dims_;$/;"	m	class:unchecked_reference	typeref:typename:const ssize_t	access:protected
unchecked_reference::itemsize	include/pybind11/numpy.h	/^    constexpr static ssize_t itemsize() { return sizeof(T); }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:()
unchecked_reference::nbytes	include/pybind11/numpy.h	/^    ssize_t nbytes() const { return size() * itemsize(); }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:() const
unchecked_reference::ndim	include/pybind11/numpy.h	/^    ssize_t ndim() const { return dims_; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:() const
unchecked_reference::operator ()	include/pybind11/numpy.h	/^    const T &operator()(Ix... index) const {$/;"	f	class:unchecked_reference	typeref:typename:const T &	access:public	signature:(Ix...index) const
unchecked_reference::operator []	include/pybind11/numpy.h	/^    const T &operator[](ssize_t index) const {$/;"	f	class:unchecked_reference	typeref:typename:const T &	access:public	signature:(ssize_t index) const
unchecked_reference::shape	include/pybind11/numpy.h	/^    ssize_t shape(ssize_t dim) const { return shape_[(size_t) dim]; }$/;"	f	class:unchecked_reference	typeref:typename:ssize_t	access:public	signature:(ssize_t dim) const
unchecked_reference::shape_	include/pybind11/numpy.h	/^    conditional_t<Dynamic, const ssize_t *, std::array<ssize_t, (size_t) Dims>> shape_, strides_/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>	access:protected
unchecked_reference::size	include/pybind11/numpy.h	/^    enable_if_t<!Dyn, ssize_t> size() const {$/;"	f	class:unchecked_reference	typeref:typename:enable_if_t<!Dyn,ssize_t>	access:public	signature:() const
unchecked_reference::size	include/pybind11/numpy.h	/^    enable_if_t<Dyn, ssize_t> size() const {$/;"	f	class:unchecked_reference	typeref:typename:enable_if_t<Dyn,ssize_t>	access:public	signature:() const
unchecked_reference::strides_	include/pybind11/numpy.h	/^    conditional_t<Dynamic, const ssize_t *, std::array<ssize_t, (size_t) Dims>> shape_, strides_/;"	m	class:unchecked_reference	typeref:typename:conditional_t<Dynamic,const ssize_t *,std::array<ssize_t,(size_t)Dims>>	access:protected
unchecked_reference::unchecked_reference	include/pybind11/numpy.h	/^    unchecked_reference(const void *data,$/;"	f	class:unchecked_reference	access:protected	signature:(const void * data,const ssize_t * shape,const ssize_t * strides,enable_if_t<!Dyn,ssize_t>)
unchecked_reference::unchecked_reference	include/pybind11/numpy.h	/^    unchecked_reference(const void *data,$/;"	f	class:unchecked_reference	access:protected	signature:(const void * data,const ssize_t * shape,const ssize_t * strides,enable_if_t<Dyn,ssize_t> dims)
undefined_t	include/pybind11/operators.h	/^struct undefined_t {};$/;"	s
unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::string &w) {$/;"	f	struct:path_caster	typeref:typename:PyObject *	access:private	signature:(const std::string & w)
unicode_from_fs_native	include/pybind11/stl/filesystem.h	/^    static PyObject *unicode_from_fs_native(const std::wstring &w) {$/;"	f	struct:path_caster	typeref:typename:PyObject *	access:private	signature:(const std::wstring & w)
uninstall	CMakeLists.txt	/^    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P$/;"	t
unique_function_record	include/pybind11/pybind11.h	/^    using unique_function_record$/;"	t	class:cpp_function	typeref:typename:std::unique_ptr<detail::function_record,InitializingFunctionRecordDeleter>	access:protected
unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    explicit unique_ptr_with_addressof_operator(T *p) : impl(p) {}$/;"	f	class:__anond975f9d30111::unique_ptr_with_addressof_operator	file:	access:public	signature:(T * p)
unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^    unique_ptr_with_addressof_operator() = default;$/;"	p	class:__anond975f9d30111::unique_ptr_with_addressof_operator	file:	access:public	signature:()
unique_ptr_with_addressof_operator	tests/test_smart_ptr.cpp	/^class unique_ptr_with_addressof_operator {$/;"	c	namespace:__anond975f9d30111	file:
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, B_Repeat, unlucky_number, ); }$/;"	f	class:PyB_Repeat	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, Base, unlucky_number, ); }$/;"	f	class:PyB_Tpl	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, C_Repeat, unlucky_number, ); }$/;"	f	class:PyC_Repeat	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE(int, D_Repeat, unlucky_number, ); }$/;"	f	class:PyD_Repeat	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE_PURE(int, A_Repeat, unlucky_number, ); }$/;"	f	class:PyA_Repeat	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.cpp	/^    int unlucky_number() override { PYBIND11_OVERRIDE_PURE(int, Base, unlucky_number, ); }$/;"	f	class:PyA_Tpl	typeref:typename:int	file:	access:public	signature:()
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AR	access:public	signature:(self)
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.AT	access:public	signature:(self)
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.BT	access:public	signature:(self)
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DR	access:public	signature:(self)
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT	access:public	signature:(self)
unlucky_number	tests/test_virtual_functions.py	/^        def unlucky_number(self):$/;"	m	class:test_inherited_virtuals.DT2	access:public	signature:(self)
unordered	tests/conftest.py	/^    def unordered(self):$/;"	m	class:Capture	access:public	signature:(self)
unpacking_collector	include/pybind11/cast.h	/^    explicit unpacking_collector(Ts &&...values) {$/;"	f	class:unpacking_collector	access:public	signature:(Ts &&...values)
unpacking_collector	include/pybind11/cast.h	/^class unpacking_collector {$/;"	c
unpacking_collector::args	include/pybind11/cast.h	/^    const tuple &args() const & { return m_args; }$/;"	f	class:unpacking_collector	typeref:typename:const tuple &	access:public	signature:() const
unpacking_collector::args	include/pybind11/cast.h	/^    tuple args() && { return std::move(m_args); }$/;"	f	class:unpacking_collector	typeref:typename:tuple	access:public	signature:()
unpacking_collector::call	include/pybind11/cast.h	/^    object call(PyObject *ptr) const {$/;"	f	class:unpacking_collector	typeref:typename:object	access:public	signature:(PyObject * ptr) const
unpacking_collector::kwargs	include/pybind11/cast.h	/^    const dict &kwargs() const & { return m_kwargs; }$/;"	f	class:unpacking_collector	typeref:typename:const dict &	access:public	signature:() const
unpacking_collector::kwargs	include/pybind11/cast.h	/^    dict kwargs() && { return std::move(m_kwargs); }$/;"	f	class:unpacking_collector	typeref:typename:dict	access:public	signature:()
unpacking_collector::m_args	include/pybind11/cast.h	/^    tuple m_args;$/;"	m	class:unpacking_collector	typeref:typename:tuple	access:private
unpacking_collector::m_kwargs	include/pybind11/cast.h	/^    dict m_kwargs;$/;"	m	class:unpacking_collector	typeref:typename:dict	access:private
unpacking_collector::multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error() {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:()
unpacking_collector::multiple_values_error	include/pybind11/cast.h	/^    [[noreturn]] static void multiple_values_error(const std::string &name) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(const std::string & name)
unpacking_collector::nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error() {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:()
unpacking_collector::nameless_argument_error	include/pybind11/cast.h	/^    [[noreturn]] static void nameless_argument_error(const std::string &type) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(const std::string & type)
unpacking_collector::process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, arg_v a) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list &,arg_v a)
unpacking_collector::process	include/pybind11/cast.h	/^    void process(list & \/*args_list*\/, detail::kwargs_proxy kp) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list &,detail::kwargs_proxy kp)
unpacking_collector::process	include/pybind11/cast.h	/^    void process(list &args_list, T &&x) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list & args_list,T && x)
unpacking_collector::process	include/pybind11/cast.h	/^    void process(list &args_list, detail::args_proxy ap) {$/;"	f	class:unpacking_collector	typeref:typename:void	access:private	signature:(list & args_list,detail::args_proxy ap)
unpacking_collector::unpacking_collector	include/pybind11/cast.h	/^    explicit unpacking_collector(Ts &&...values) {$/;"	f	class:unpacking_collector	access:public	signature:(Ts &&...values)
unraisable_exceptions	docs/advanced/exceptions.rst	/^.. _unraisable_exceptions:$/;"	T	chapter:Chaining exceptions ('raise from')
unused_loader_patient_stack_remove_at_v5	include/pybind11/detail/internals.h	/^    std::vector<PyObject *> unused_loader_patient_stack_remove_at_v5;$/;"	m	struct:internals	typeref:typename:std::vector<PyObject * >	access:public
upgrade-guide-2.6	docs/upgrade.rst	/^.. _upgrade-guide-2.6:$/;"	T	chapter:v2.7
upgrade-guide-2.7	docs/upgrade.rst	/^.. _upgrade-guide-2.7:$/;"	T	chapter:v2.9
upgrade-guide-2.9	docs/upgrade.rst	/^.. _upgrade-guide-2.9:$/;"	T	title:Upgrade guide
url	tools/FindCatch.cmake	/^  set(url https:\/\/github.com\/philsquared\/Catch\/releases\/download\/v${version}\/catch.hpp)$/;"	v	function:_download_catch
us_t	include/pybind11/chrono.h	/^        using us_t = duration<int, std::micro>;$/;"	t	function:duration_caster::cast	typeref:typename:duration<int,std::micro>
us_t	include/pybind11/chrono.h	/^        using us_t = duration<int, std::micro>;$/;"	t	function:type_caster::cast	typeref:typename:duration<int,std::micro>
use_multiprocessing_forkserver_on_linux	tests/conftest.py	/^def use_multiprocessing_forkserver_on_linux():$/;"	f	access:public	signature:()
utf8_remainder	include/pybind11/iostream.h	/^    size_t utf8_remainder() const {$/;"	f	class:pythonbuf	typeref:typename:size_t	access:private	signature:() const
v	include/pybind11/detail/common.h	/^    std::vector<T> v;$/;"	m	class:any_container	typeref:typename:std::vector<T>	access:private
v	tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:PYBIND11_NAMESPACE_END::MoveIssue1	typeref:typename:int	file:	access:public
v	tests/test_copy_move.cpp	/^        int v;$/;"	m	struct:PYBIND11_NAMESPACE_END::MoveIssue2	typeref:typename:int	file:	access:public
v	tests/test_embed/external_module.cpp	/^        int v;$/;"	m	class:PYBIND11_MODULE::A	typeref:typename:int	file:	access:public
v	tests/test_modules.cpp	/^        int v;$/;"	m	class:TEST_SUBMODULE::A	typeref:typename:int	file:	access:private
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B1	access:public	signature:(self)
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B2	access:public	signature:(self)
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B3	access:public	signature:(self)
v	tests/test_multiple_inheritance.py	/^        def v(self):$/;"	m	class:test_multiple_inheritance_python.B4	access:public	signature:(self)
v	tests/test_numpy_dtypes.cpp	/^        std::string v;$/;"	m	struct:TEST_SUBMODULE::NotPOD	typeref:typename:std::string	file:	access:public
v	tests/test_smart_ptr.cpp	/^    int v;$/;"	m	struct:__anond975f9d30111::ElementA	typeref:typename:int	file:	access:public
v	tests/test_virtual_functions.cpp	/^        std::string v;$/;"	m	class:TEST_SUBMODULE::OverrideTest	typeref:typename:std::string	file:	access:public
v1	tests/test_methods_and_attributes.cpp	/^    UserType v1{1};$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
v2	tests/test_methods_and_attributes.cpp	/^    UserType v2{1};$/;"	m	struct:TestPropRVP	typeref:typename:UserType	file:	access:public
v2.0	docs/upgrade.rst	/^v2.0$/;"	c	title:Upgrade guide
v2.0.0 (Jan 1, 2017)	docs/changelog.rst	/^v2.0.0 (Jan 1, 2017)$/;"	c	title:Changelog
v2.0.0-rc1 (Dec 23, 2016)	docs/changelog.rst	/^v2.0.0-rc1 (Dec 23, 2016)$/;"	c	title:Changelog
v2.0.1 (Jan 4, 2017)	docs/changelog.rst	/^v2.0.1 (Jan 4, 2017)$/;"	c	title:Changelog
v2.1	docs/upgrade.rst	/^v2.1$/;"	c	title:Upgrade guide
v2.1.0 (March 22, 2017)	docs/changelog.rst	/^v2.1.0 (March 22, 2017)$/;"	c	title:Changelog
v2.1.1 (April 7, 2017)	docs/changelog.rst	/^v2.1.1 (April 7, 2017)$/;"	c	title:Changelog
v2.2	docs/upgrade.rst	/^v2.2$/;"	c	title:Upgrade guide
v2.2.0 (August 31, 2017)	docs/changelog.rst	/^v2.2.0 (August 31, 2017)$/;"	c	title:Changelog
v2.2.1 (September 14, 2017)	docs/changelog.rst	/^v2.2.1 (September 14, 2017)$/;"	c	title:Changelog
v2.2.2 (February 7, 2018)	docs/changelog.rst	/^v2.2.2 (February 7, 2018)$/;"	c	title:Changelog
v2.2.3 (April 29, 2018)	docs/changelog.rst	/^v2.2.3 (April 29, 2018)$/;"	c	title:Changelog
v2.2.4 (September 11, 2018)	docs/changelog.rst	/^v2.2.4 (September 11, 2018)$/;"	c	title:Changelog
v2.3.0 (June 11, 2019)	docs/changelog.rst	/^v2.3.0 (June 11, 2019)$/;"	c	title:Changelog
v2.4.0 (Sep 19, 2019)	docs/changelog.rst	/^v2.4.0 (Sep 19, 2019)$/;"	c	title:Changelog
v2.4.1 (Sep 20, 2019)	docs/changelog.rst	/^v2.4.1 (Sep 20, 2019)$/;"	c	title:Changelog
v2.4.2 (Sep 21, 2019)	docs/changelog.rst	/^v2.4.2 (Sep 21, 2019)$/;"	c	title:Changelog
v2.4.3 (Oct 15, 2019)	docs/changelog.rst	/^v2.4.3 (Oct 15, 2019)$/;"	c	title:Changelog
v2.5	docs/upgrade.rst	/^v2.5$/;"	c	title:Upgrade guide
v2.5.0 (Mar 31, 2020)	docs/changelog.rst	/^v2.5.0 (Mar 31, 2020)$/;"	c	title:Changelog
v2.6	docs/upgrade.rst	/^v2.6$/;"	c	title:Upgrade guide
v2.6.0 (Oct 21, 2020)	docs/changelog.rst	/^v2.6.0 (Oct 21, 2020)$/;"	c	title:Changelog
v2.6.1 (Nov 11, 2020)	docs/changelog.rst	/^v2.6.1 (Nov 11, 2020)$/;"	c	title:Changelog
v2.6.2 (Jan 26, 2021)	docs/changelog.rst	/^v2.6.2 (Jan 26, 2021)$/;"	c	title:Changelog
v2.7	docs/upgrade.rst	/^v2.7$/;"	c	title:Upgrade guide
v2.7.0 (Jul 16, 2021)	docs/changelog.rst	/^v2.7.0 (Jul 16, 2021)$/;"	c	title:Changelog
v2.7.1 (Aug 3, 2021)	docs/changelog.rst	/^v2.7.1 (Aug 3, 2021)$/;"	c	title:Changelog
v2.8.0 (Oct 4, 2021)	docs/changelog.rst	/^v2.8.0 (Oct 4, 2021)$/;"	c	title:Changelog
v2.8.1 (Oct 27, 2021)	docs/changelog.rst	/^v2.8.1 (Oct 27, 2021)$/;"	c	title:Changelog
v2.9	docs/upgrade.rst	/^v2.9$/;"	c	title:Upgrade guide
val	tests/test_methods_and_attributes.cpp	/^    int val = -1;$/;"	m	struct:StrIssue	typeref:typename:int	file:	access:public
valid	tests/test_callbacks.cpp	/^        bool valid = true;$/;"	m	struct:TEST_SUBMODULE::MovableObject	typeref:typename:bool	file:	access:public
value	include/pybind11/attr.h	/^    callback value;$/;"	m	struct:custom_type_setup	typeref:typename:callback	access:public
value	include/pybind11/attr.h	/^    const bool value;$/;"	m	struct:module_local	typeref:typename:const bool	access:public
value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:doc	typeref:typename:const char *	access:public
value	include/pybind11/attr.h	/^    const char *value;$/;"	m	struct:name	typeref:typename:const char *	access:public
value	include/pybind11/attr.h	/^    handle value;      \/\/\/< Associated Python object$/;"	m	struct:argument_record	typeref:typename:handle	access:public
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:metaclass	typeref:typename:handle	access:public
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:scope	typeref:typename:handle	access:public
value	include/pybind11/attr.h	/^    handle value;$/;"	m	struct:sibling	typeref:typename:handle	access:public
value	include/pybind11/cast.h	/^    object value;$/;"	m	struct:arg_v	typeref:typename:object	access:public
value	include/pybind11/cast.h	/^    static constexpr bool value = Value;$/;"	m	struct:always_construct_holder	typeref:typename:bool	access:public
value	include/pybind11/cast.h	/^    void *value = nullptr;$/;"	m	class:type_caster	typeref:typename:void *	access:private
value	include/pybind11/complex.h	/^                      detail::enable_if_t<std::is_floating_point<T>::value>>::value[3];$/;"	m	class:format_descriptor<std::complex<T>, detail::enable_if_t<std::is_floating_point<T>::value>>	typeref:typename:const char[3]
value	include/pybind11/complex.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
value	include/pybind11/complex.h	/^    static constexpr const char value[3] = {'Z', c, '\\0'};$/;"	m	struct:format_descriptor	typeref:typename:const char[3]	access:public
value	include/pybind11/detail/common.h	/^    PyObject *type, *value, *trace;$/;"	m	struct:error_scope	typeref:typename:PyObject *	access:public
value	include/pybind11/detail/common.h	/^    format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>::value[2];$/;"	m	class:format_descriptor<T, detail::enable_if_t<std::is_arithmetic<T>::value>>	typeref:typename:const char[2]
value	include/pybind11/detail/common.h	/^    static constexpr bool value = false;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
value	include/pybind11/detail/common.h	/^    static constexpr bool value = true;$/;"	m	struct:is_fmt_numeric	typeref:typename:bool	access:public
value	include/pybind11/detail/common.h	/^    static constexpr const char value[2] = {c, '\\0'};$/;"	m	struct:format_descriptor	typeref:typename:const char[2]	access:public
value	include/pybind11/detail/init.h	/^    value_and_holder *value = nullptr;$/;"	m	class:type_caster	typeref:typename:value_and_holder *	access:private
value	include/pybind11/detail/type_caster_base.h	/^    void *value = nullptr;$/;"	m	class:type_caster_generic	typeref:typename:void *	access:public
value	include/pybind11/eigen/matrix.h	/^    Type value;$/;"	m	struct:type_caster	typeref:typename:Type	access:private
value	include/pybind11/eigen/tensor.h	/^        static constexpr auto value = concat(const_name(((void) Is, "?"))...);$/;"	m	struct:eigen_tensor_helper::helper	typeref:typename:auto	access:public
value	include/pybind11/eigen/tensor.h	/^    static constexpr auto value$/;"	m	struct:get_tensor_descriptor	typeref:typename:auto	access:public
value	include/pybind11/eigen/tensor.h	/^    std::unique_ptr<MapType> value;$/;"	m	struct:type_caster	typeref:typename:std::unique_ptr<MapType>	access:protected
value	include/pybind11/numpy.h	/^    static constexpr int value = npy_api::NPY_OBJECT_;$/;"	m	struct:npy_format_descriptor	typeref:typename:int	access:public
value	include/pybind11/numpy.h	/^    static constexpr int value = values[detail::is_fmt_numeric<T>::index];$/;"	m	struct:npy_format_descriptor	typeref:typename:int	access:public
value	include/pybind11/pybind11.h	/^    PYBIND11_NOINLINE void value(char const *name_, object value, const char *doc = nullptr) {$/;"	f	struct:enum_base	typeref:typename:PYBIND11_NOINLINE void	access:public	signature:(char const * name_,object value,const char * doc=nullptr)
value	include/pybind11/pybind11.h	/^    enum_ &value(char const *name, Type value, const char *doc = nullptr) {$/;"	f	class:enum_	typeref:typename:enum_ &	access:public	signature:(char const * name,Type value,const char * doc=nullptr)
value	include/pybind11/pytypes.h	/^    PyObject *key = nullptr, *value = nullptr;$/;"	m	class:dict_readonly	typeref:typename:PyObject *	access:private
value	include/pybind11/pytypes.h	/^    T value;$/;"	m	struct:arrow_proxy	typeref:typename:T	access:public
value	include/pybind11/pytypes.h	/^    const object &value() const { return m_fetched_error->m_value; }$/;"	f	class:error_already_set	typeref:typename:const object &	access:public	signature:() const
value	include/pybind11/pytypes.h	/^    object value = {};$/;"	m	class:iterator	typeref:typename:object	access:private
value	include/pybind11/stl_bind.h	/^    static constexpr const bool value = is_comparable<typename T::first_type>::value$/;"	m	struct:is_comparable	typeref:typename:const bool	access:public
value	include/pybind11/type_caster_pyobject_ptr.h	/^    object value;$/;"	m	class:type_caster	typeref:typename:object	access:private
value	tests/constructor_stats.h	/^    void value() {} \/\/ Recursion terminator$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:()
value	tests/constructor_stats.h	/^    void value(const T &v, Tmore &&...args) {$/;"	f	class:ConstructorStats	typeref:typename:void	access:public	signature:(const T & v,Tmore &&...args)
value	tests/pybind11_tests.h	/^    int value() const { return i; }$/;"	f	class:UserType	typeref:typename:int	access:public	signature:() const
value	tests/test_buffers.cpp	/^        const uint8_t value = 0;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnly	typeref:typename:const uint8_t	file:	access:public
value	tests/test_buffers.cpp	/^        int32_t value = 0;$/;"	m	struct:TEST_SUBMODULE::Buffer	typeref:typename:int32_t	file:	access:public
value	tests/test_buffers.cpp	/^        std::unique_ptr<int32_t> value;$/;"	m	class:TEST_SUBMODULE::ConstBuffer	typeref:typename:std::unique_ptr<int32_t>	file:	access:private
value	tests/test_buffers.cpp	/^        uint8_t value = 0;$/;"	m	struct:TEST_SUBMODULE::BufferReadOnlySelect	typeref:typename:uint8_t	file:	access:public
value	tests/test_builtin_casters.cpp	/^    ConstRefCasted value = {0};$/;"	m	class:type_caster	typeref:typename:ConstRefCasted	file:	access:private
value	tests/test_class.cpp	/^        int value = 42;$/;"	m	class:TEST_SUBMODULE::ProtectedA	typeref:typename:int	file:	access:private
value	tests/test_class.cpp	/^        int value = 42;$/;"	m	class:TEST_SUBMODULE::ProtectedB	typeref:typename:int	file:	access:private
value	tests/test_copy_move.cpp	/^        int value = 1;$/;"	m	struct:PYBIND11_NAMESPACE_END::PrivateOpNew	typeref:typename:int	file:	access:public
value	tests/test_copy_move.cpp	/^    CopyOnlyInt value;$/;"	m	struct:type_caster	typeref:typename:CopyOnlyInt	file:	access:protected
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:CopyOnlyInt	typeref:typename:int	file:	access:public
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOnlyInt	typeref:typename:int	file:	access:public
value	tests/test_copy_move.cpp	/^    int value;$/;"	m	class:MoveOrCopyInt	typeref:typename:int	file:	access:public
value	tests/test_custom_type_setup.cpp	/^    py::object value = py::none();$/;"	m	struct:__anon39e9e6a30111::OwnsPythonObjects	typeref:typename:py::object	file:	access:public
value	tests/test_docstring_options.cpp	/^            int value;$/;"	m	struct:TEST_SUBMODULE::DocstringTestFoo	typeref:typename:int	file:	access:public
value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory6	typeref:typename:int	file:	access:protected
value	tests/test_factory_constructors.cpp	/^    int value;$/;"	m	class:TestFactory7	typeref:typename:int	file:	access:protected
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory1	typeref:typename:std::string	file:	access:public
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory2	typeref:typename:std::string	file:	access:public
value	tests/test_factory_constructors.cpp	/^    std::string value;$/;"	m	class:TestFactory3	typeref:typename:std::string	file:	access:public
value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	class:ExampleMandA	typeref:typename:int	file:	access:public
value	tests/test_methods_and_attributes.cpp	/^    int value = 0;$/;"	m	struct:RefQualified	typeref:typename:int	file:	access:public
value	tests/test_methods_and_attributes.cpp	/^    int value = 1;$/;"	m	struct:TestProperties	typeref:typename:int	file:	access:public
value	tests/test_methods_and_attributes.cpp	/^    int value = 99;$/;"	m	struct:TestPropertiesOverride	typeref:typename:int	file:	access:public
value	tests/test_numpy_vectorize.cpp	/^        int value = 0;$/;"	m	struct:TEST_SUBMODULE::VectorizeTestClass	typeref:typename:int	file:	access:public
value	tests/test_numpy_vectorize.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::NonPODClass	typeref:typename:int	file:	access:public
value	tests/test_operator_overloading.cpp	/^        int value = -2;$/;"	m	struct:TEST_SUBMODULE::NestABase	typeref:typename:int	file:	access:public
value	tests/test_operator_overloading.cpp	/^        int value = 3;$/;"	m	struct:TEST_SUBMODULE::NestA	typeref:typename:int	file:	access:public
value	tests/test_operator_overloading.cpp	/^        int value = 4;$/;"	m	struct:TEST_SUBMODULE::NestB	typeref:typename:int	file:	access:public
value	tests/test_operator_overloading.cpp	/^        int value = 5;$/;"	m	struct:TEST_SUBMODULE::NestC	typeref:typename:int	file:	access:public
value	tests/test_operator_overloading.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::Comparable	typeref:typename:int	file:	access:public
value	tests/test_pickling.cpp	/^        const std::string &value() const { return m_value; }$/;"	f	class:TEST_SUBMODULE::Pickleable	typeref:typename:const std::string &	file:	access:public	signature:() const
value	tests/test_pickling.cpp	/^        std::string value;$/;"	m	class:TEST_SUBMODULE::PickleableWithDict	typeref:typename:std::string	file:	access:public
value	tests/test_smart_ptr.cpp	/^    A value = {};$/;"	m	struct:__anond975f9d30111::SharedPtrRef	typeref:typename:A	file:	access:public
value	tests/test_smart_ptr.cpp	/^    B value = {};$/;"	m	struct:__anond975f9d30111::SharedFromThisRef	typeref:typename:B	file:	access:public
value	tests/test_smart_ptr.cpp	/^    int value = 42;$/;"	m	struct:__anond975f9d30111::TypeForHolderWithAddressOf	typeref:typename:int	file:	access:public
value	tests/test_smart_ptr.cpp	/^    int value() const { return v; }$/;"	f	struct:__anond975f9d30111::ElementA	typeref:typename:int	file:	access:public	signature:() const
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject1	typeref:typename:int	file:	access:private
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject2	typeref:typename:int	file:	access:private
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject3	typeref:typename:int	file:	access:private
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject4	typeref:typename:int	file:	access:public
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject4a	typeref:typename:int	file:	access:public
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	class:__anond975f9d30111::MyObject5	typeref:typename:int	file:	access:public
value	tests/test_smart_ptr.cpp	/^    int value;$/;"	m	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	typeref:typename:int	file:	access:public
value	tests/test_stl.cpp	/^            int value;$/;"	m	struct:TEST_SUBMODULE::MoveOutContainer::Value	typeref:typename:int	file:	access:public
value	tests/test_stl.cpp	/^        int value;$/;"	m	struct:TEST_SUBMODULE::NoAssign	typeref:typename:int	file:	access:public
value	tests/test_stl.cpp	/^    OptionalEnumValue value;$/;"	m	class:OptionalProperties	typeref:typename:OptionalEnumValue	file:	access:private
value	tests/test_stl.cpp	/^    const T &value() const noexcept {$/;"	f	class:ReferenceSensitiveOptional	typeref:typename:const T &	file:	access:public	signature:() const
value	tests/test_stl_binders.cpp	/^    int value;$/;"	m	class:E_nc	typeref:typename:int	file:	access:public
value	tests/test_thread.cpp	/^    int value;$/;"	m	struct:__anon837ffe4f0111::IntStruct	typeref:typename:int	file:	access:public
value	tests/test_virtual_functions.cpp	/^            std::string value = "hi";$/;"	m	struct:TEST_SUBMODULE::OverrideTest::A	typeref:typename:std::string	file:	access:public
value	tests/test_virtual_functions.cpp	/^    int value;$/;"	m	class:Movable	typeref:typename:int	file:	access:private
value	tests/test_virtual_functions.cpp	/^    std::unique_ptr<int> value;$/;"	m	class:NonCopyable	typeref:typename:std::unique_ptr<int>	file:	access:private
value_	tests/test_sequences_and_iterators.cpp	/^    int value_;$/;"	m	class:NonCopyableInt	typeref:typename:int	file:	access:private
value_and_holder	include/pybind11/detail/type_caster_base.h	/^    explicit value_and_holder(size_t index) : index{index} {}$/;"	f	struct:value_and_holder	access:public	signature:(size_t index)
value_and_holder	include/pybind11/detail/type_caster_base.h	/^    value_and_holder() = default;$/;"	p	struct:value_and_holder	access:public	signature:()
value_and_holder	include/pybind11/detail/type_caster_base.h	/^    value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)$/;"	f	struct:value_and_holder	access:public	signature:(instance * i,const detail::type_info * type,size_t vpos,size_t index)
value_and_holder	include/pybind11/detail/type_caster_base.h	/^struct value_and_holder {$/;"	s
value_and_holder::holder	include/pybind11/detail/type_caster_base.h	/^    H &holder() const {$/;"	f	struct:value_and_holder	typeref:typename:H &	access:public	signature:() const
value_and_holder::holder_constructed	include/pybind11/detail/type_caster_base.h	/^    bool holder_constructed() const {$/;"	f	struct:value_and_holder	typeref:typename:bool	access:public	signature:() const
value_and_holder::index	include/pybind11/detail/type_caster_base.h	/^    size_t index = 0u;$/;"	m	struct:value_and_holder	typeref:typename:size_t	access:public
value_and_holder::inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:instance *	access:public
value_and_holder::instance_registered	include/pybind11/detail/type_caster_base.h	/^    bool instance_registered() const {$/;"	f	struct:value_and_holder	typeref:typename:bool	access:public	signature:() const
value_and_holder::operator bool	include/pybind11/detail/type_caster_base.h	/^    explicit operator bool() const { return value_ptr() != nullptr; }$/;"	f	struct:value_and_holder	access:public	signature:() const
value_and_holder::set_holder_constructed	include/pybind11/detail/type_caster_base.h	/^    void set_holder_constructed(bool v = true) {$/;"	f	struct:value_and_holder	typeref:typename:void	access:public	signature:(bool v=true)
value_and_holder::set_instance_registered	include/pybind11/detail/type_caster_base.h	/^    void set_instance_registered(bool v = true) {$/;"	f	struct:value_and_holder	typeref:typename:void	access:public	signature:(bool v=true)
value_and_holder::type	include/pybind11/detail/type_caster_base.h	/^    const detail::type_info *type = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:const detail::type_info *	access:public
value_and_holder::value_and_holder	include/pybind11/detail/type_caster_base.h	/^    explicit value_and_holder(size_t index) : index{index} {}$/;"	f	struct:value_and_holder	access:public	signature:(size_t index)
value_and_holder::value_and_holder	include/pybind11/detail/type_caster_base.h	/^    value_and_holder() = default;$/;"	p	struct:value_and_holder	access:public	signature:()
value_and_holder::value_and_holder	include/pybind11/detail/type_caster_base.h	/^    value_and_holder(instance *i, const detail::type_info *type, size_t vpos, size_t index)$/;"	f	struct:value_and_holder	access:public	signature:(instance * i,const detail::type_info * type,size_t vpos,size_t index)
value_and_holder::value_ptr	include/pybind11/detail/type_caster_base.h	/^    V *&value_ptr() const {$/;"	f	struct:value_and_holder	typeref:typename:V * &	access:public	signature:() const
value_and_holder::vh	include/pybind11/detail/type_caster_base.h	/^    void **vh = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:void **	access:public
value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:array_caster	typeref:typename:make_caster<Value>	access:public
value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:list_caster	typeref:typename:make_caster<Value>	access:public
value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:map_caster	typeref:typename:make_caster<Value>	access:public
value_conv	include/pybind11/stl.h	/^    using value_conv = make_caster<Value>;$/;"	t	struct:optional_caster	typeref:typename:make_caster<Value>	access:public
value_int	tests/test_union.cpp	/^        int value_int;$/;"	m	union:TEST_SUBMODULE::TestUnion	typeref:typename:int	file:	access:public
value_ptr	include/pybind11/detail/type_caster_base.h	/^    V *&value_ptr() const {$/;"	f	struct:value_and_holder	typeref:typename:V * &	access:public	signature:() const
value_type	include/pybind11/numpy.h	/^    using value_type = T;$/;"	t	class:array_t	typeref:typename:T	access:public
value_type	include/pybind11/numpy.h	/^    using value_type = container_type::value_type;$/;"	t	class:common_iterator	typeref:typename:container_type::value_type	access:public
value_type	include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:iterator	typeref:typename:handle	access:public
value_type	include/pybind11/pytypes.h	/^    using value_type = handle;$/;"	t	class:sequence_fast_readonly	typeref:typename:handle	access:protected
value_type	include/pybind11/pytypes.h	/^    using value_type = object;$/;"	t	class:sequence_slow_readwrite	typeref:typename:object	access:protected
value_type	include/pybind11/pytypes.h	/^    using value_type = std::pair<handle, handle>;$/;"	t	class:dict_readonly	typeref:typename:std::pair<handle,handle>	access:protected
value_type	include/pybind11/pytypes.h	/^    using value_type = typename Policy::value_type;$/;"	t	class:generic_iterator	typeref:typename:Policy::value_type	access:public
value_type	tests/test_stl.cpp	/^    using value_type = T;$/;"	t	class:ReferenceSensitiveOptional	typeref:typename:T	file:	access:public
value_uint	tests/test_union.cpp	/^        unsigned value_uint;$/;"	m	union:TEST_SUBMODULE::TestUnion	typeref:typename:unsigned	file:	access:public
values	include/pybind11/numpy.h	/^    constexpr static const int values[15] = {npy_api::NPY_BOOL_,$/;"	m	struct:npy_format_descriptor	typeref:typename:const int[15]	access:private
values	tests/constructor_stats.h	/^    py::list values() {$/;"	f	class:ConstructorStats	typeref:typename:py::list	access:public	signature:()
values	tests/test_sequences_and_iterators.cpp	/^        double values[3];$/;"	m	class:TEST_SUBMODULE::CArrayHolder	typeref:typename:double[3]	file:	access:public
values_and_holders	include/pybind11/detail/common.h	/^    void **values_and_holders;$/;"	m	struct:nonsimple_values_and_holders	typeref:typename:void **	access:public
values_and_holders	include/pybind11/detail/type_caster_base.h	/^    explicit values_and_holders(instance *inst)$/;"	f	struct:values_and_holders	access:public	signature:(instance * inst)
values_and_holders	include/pybind11/detail/type_caster_base.h	/^struct values_and_holders {$/;"	s
values_and_holders::begin	include/pybind11/detail/type_caster_base.h	/^    iterator begin() { return iterator(inst, &tinfo); }$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:()
values_and_holders::end	include/pybind11/detail/type_caster_base.h	/^    iterator end() { return iterator(tinfo.size()); }$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:()
values_and_holders::find	include/pybind11/detail/type_caster_base.h	/^    iterator find(const type_info *find_type) {$/;"	f	struct:values_and_holders	typeref:typename:iterator	access:public	signature:(const type_info * find_type)
values_and_holders::inst	include/pybind11/detail/type_caster_base.h	/^    instance *inst;$/;"	m	struct:values_and_holders	typeref:typename:instance *	access:private
values_and_holders::iterator	include/pybind11/detail/type_caster_base.h	/^    struct iterator {$/;"	s	struct:values_and_holders	access:public
values_and_holders::iterator::curr	include/pybind11/detail/type_caster_base.h	/^        value_and_holder curr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:value_and_holder	access:private
values_and_holders::iterator::inst	include/pybind11/detail/type_caster_base.h	/^        instance *inst = nullptr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:instance *	access:private
values_and_holders::iterator::iterator	include/pybind11/detail/type_caster_base.h	/^        explicit iterator(size_t end) : curr(end) {}$/;"	f	struct:values_and_holders::iterator	access:private	signature:(size_t end)
values_and_holders::iterator::iterator	include/pybind11/detail/type_caster_base.h	/^        iterator(instance *inst, const type_vec *tinfo)$/;"	f	struct:values_and_holders::iterator	access:private	signature:(instance * inst,const type_vec * tinfo)
values_and_holders::iterator::operator !=	include/pybind11/detail/type_caster_base.h	/^        bool operator!=(const iterator &other) const { return curr.index != other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool	access:public	signature:(const iterator & other) const
values_and_holders::iterator::operator *	include/pybind11/detail/type_caster_base.h	/^        value_and_holder &operator*() { return curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder &	access:public	signature:()
values_and_holders::iterator::operator ++	include/pybind11/detail/type_caster_base.h	/^        iterator &operator++() {$/;"	f	struct:values_and_holders::iterator	typeref:typename:iterator &	access:public	signature:()
values_and_holders::iterator::operator ->	include/pybind11/detail/type_caster_base.h	/^        value_and_holder *operator->() { return &curr; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:value_and_holder *	access:public	signature:()
values_and_holders::iterator::operator ==	include/pybind11/detail/type_caster_base.h	/^        bool operator==(const iterator &other) const { return curr.index == other.curr.index; }$/;"	f	struct:values_and_holders::iterator	typeref:typename:bool	access:public	signature:(const iterator & other) const
values_and_holders::iterator::types	include/pybind11/detail/type_caster_base.h	/^        const type_vec *types = nullptr;$/;"	m	struct:values_and_holders::iterator	typeref:typename:const type_vec *	access:private
values_and_holders::size	include/pybind11/detail/type_caster_base.h	/^    size_t size() { return tinfo.size(); }$/;"	f	struct:values_and_holders	typeref:typename:size_t	access:public	signature:()
values_and_holders::tinfo	include/pybind11/detail/type_caster_base.h	/^    const type_vec &tinfo;$/;"	m	struct:values_and_holders	typeref:typename:const type_vec &	access:private
values_and_holders::type_vec	include/pybind11/detail/type_caster_base.h	/^    using type_vec = std::vector<detail::type_info *>;$/;"	t	struct:values_and_holders	typeref:typename:std::vector<detail::type_info * >	access:private
values_and_holders::values_and_holders	include/pybind11/detail/type_caster_base.h	/^    explicit values_and_holders(instance *inst)$/;"	f	struct:values_and_holders	access:public	signature:(instance * inst)
values_view	include/pybind11/stl_bind.h	/^struct values_view {$/;"	s
values_view::iter	include/pybind11/stl_bind.h	/^    virtual iterator iter() = 0;$/;"	p	struct:values_view	typeref:typename:iterator	access:public	signature:()
values_view::len	include/pybind11/stl_bind.h	/^    virtual size_t len() = 0;$/;"	p	struct:values_view	typeref:typename:size_t	access:public	signature:()
values_view::~values_view	include/pybind11/stl_bind.h	/^    virtual ~values_view() = default;$/;"	p	struct:values_view	access:public	signature:()
vanilla	tests/test_multiple_inheritance.cpp	/^    std::string vanilla() { return "Vanilla"; };$/;"	f	struct:__anon9ca8d76c0111::Vanilla	typeref:typename:std::string	file:	access:public	signature:()
variant_caster	include/pybind11/stl.h	/^struct variant_caster<V<Ts...>> {$/;"	s
variant_caster::Type	include/pybind11/stl.h	/^    using Type = V<Ts...>;$/;"	t	struct:variant_caster	typeref:typename:V<Ts...>	access:public
variant_caster::cast	include/pybind11/stl.h	/^    static handle cast(Variant &&src, return_value_policy policy, handle parent) {$/;"	f	struct:variant_caster	typeref:typename:handle	access:public	signature:(Variant && src,return_value_policy policy,handle parent)
variant_caster::load	include/pybind11/stl.h	/^    bool load(handle src, bool convert) {$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert)
variant_caster::load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle src, bool convert, type_list<U, Us...>) {$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle src,bool convert,type_list<U,Us...>)
variant_caster::load_alternative	include/pybind11/stl.h	/^    bool load_alternative(handle, bool, type_list<>) { return false; }$/;"	f	struct:variant_caster	typeref:typename:bool	access:public	signature:(handle,bool,type_list<>)
variant_caster_visitor	include/pybind11/stl.h	/^struct variant_caster_visitor {$/;"	s
variant_caster_visitor::operator ()	include/pybind11/stl.h	/^    result_type operator()(T &&src) const {$/;"	f	struct:variant_caster_visitor	typeref:typename:result_type	access:public	signature:(T && src) const
variant_caster_visitor::parent	include/pybind11/stl.h	/^    handle parent;$/;"	m	struct:variant_caster_visitor	typeref:typename:handle	access:public
variant_caster_visitor::policy	include/pybind11/stl.h	/^    return_value_policy policy;$/;"	m	struct:variant_caster_visitor	typeref:typename:return_value_policy	access:public
variant_caster_visitor::result_type	include/pybind11/stl.h	/^    using result_type = handle; \/\/ required by boost::variant in C++11$/;"	t	struct:variant_caster_visitor	typeref:typename:handle	access:public
vec	tests/test_class.cpp	/^    std::vector<int> vec;$/;"	m	struct:NoBraceInitialization	typeref:typename:std::vector<int>	file:	access:public
vector	include/pybind11/eigen/matrix.h	/^                          vector$/;"	m	struct:EigenProps	typeref:typename:bool	access:public
vector_accessor	include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<!vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f	typeref:typename:void	signature:(enable_if_t<!vector_needs_copy<Vector>::value,Class_> & cl)
vector_accessor	include/pybind11/stl_bind.h	/^void vector_accessor(enable_if_t<vector_needs_copy<Vector>::value, Class_> &cl) {$/;"	f	typeref:typename:void	signature:(enable_if_t<vector_needs_copy<Vector>::value,Class_> & cl)
vector_buffer	include/pybind11/stl_bind.h	/^void vector_buffer(Class_ &cl) {$/;"	f	typeref:typename:void	signature:(Class_ & cl)
vector_buffer_impl	include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_ &, std::false_type) {}$/;"	f	typeref:typename:void	signature:(Class_ &,std::false_type)
vector_buffer_impl	include/pybind11/stl_bind.h	/^void vector_buffer_impl(Class_ &cl, std::true_type) {$/;"	f	typeref:typename:void	signature:(Class_ & cl,std::true_type)
vector_has_data_and_format	include/pybind11/stl_bind.h	/^struct vector_has_data_and_format : std::false_type {};$/;"	s	inherits:std::false_type
vector_has_data_and_format	include/pybind11/stl_bind.h	/^struct vector_has_data_and_format<$/;"	s	inherits:std::true_type
vector_if_copy_constructible	include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(const Args &...) {}$/;"	f	typeref:typename:void	signature:(const Args &...)
vector_if_copy_constructible	include/pybind11/stl_bind.h	/^void vector_if_copy_constructible(enable_if_t<is_copy_constructible<Vector>::value, Class_> &cl)/;"	f	typeref:typename:void	signature:(enable_if_t<is_copy_constructible<Vector>::value,Class_> & cl)
vector_if_equal_operator	include/pybind11/stl_bind.h	/^void vector_if_equal_operator(const Args &...) {}$/;"	f	typeref:typename:void	signature:(const Args &...)
vector_if_equal_operator	include/pybind11/stl_bind.h	/^void vector_if_equal_operator(enable_if_t<is_comparable<Vector>::value, Class_> &cl) {$/;"	f	typeref:typename:void	signature:(enable_if_t<is_comparable<Vector>::value,Class_> & cl)
vector_if_insertion_operator	include/pybind11/stl_bind.h	/^auto vector_if_insertion_operator(Class_ &cl, std::string const &name)$/;"	f	typeref:typename:decltype(std::declval<std::ostream &> ()<<std::declval<typename Vector::value_type> (),void ())	signature:(Class_ & cl,std::string const & name)
vector_if_insertion_operator	include/pybind11/stl_bind.h	/^void vector_if_insertion_operator(const Args &...) {}$/;"	f	typeref:typename:void	signature:(const Args &...)
vector_modifiers	include/pybind11/stl_bind.h	/^void vector_modifiers($/;"	f	typeref:typename:void	signature:(enable_if_t<is_copy_constructible<typename Vector::value_type>::value,Class_> & cl)
vector_modifiers	include/pybind11/stl_bind.h	/^void vector_modifiers(const Args &...) {}$/;"	f	typeref:typename:void	signature:(const Args &...)
vector_needs_copy	include/pybind11/stl_bind.h	/^using vector_needs_copy$/;"	t
vector_unique_ptr_member	tests/test_vector_unique_ptr_member.cpp	/^namespace vector_unique_ptr_member {$/;"	n	namespace:pybind11_tests	file:
vectorize	include/pybind11/numpy.h	/^    static constexpr bool vectorize$/;"	m	struct:vectorize_arg	typeref:typename:bool	access:public
vectorize	include/pybind11/numpy.h	/^Helper vectorize(Return (Class::*f)(Args...) const) {$/;"	f	typeref:typename:Helper	signature:(Return (Class::* f)(Args...)const)
vectorize	include/pybind11/numpy.h	/^Helper vectorize(Return (Class::*f)(Args...)) {$/;"	f	typeref:typename:Helper	signature:(Return (Class::* f)(Args...))
vectorize	include/pybind11/numpy.h	/^auto vectorize(Func &&f)$/;"	f	typeref:typename:decltype(detail::vectorize_extractor (std::forward<Func> (f),(detail::function_signature_t<Func> *)nullptr))	signature:(Func && f)
vectorize_arg	include/pybind11/numpy.h	/^struct vectorize_arg {$/;"	s
vectorize_arg::call_type	include/pybind11/numpy.h	/^    using call_type = remove_reference_t<T>;$/;"	t	struct:vectorize_arg	typeref:typename:remove_reference_t<T>	access:public
vectorize_arg::type	include/pybind11/numpy.h	/^    using type = conditional_t<vectorize, array_t<remove_cv_t<call_type>, array::forcecast>, T>;$/;"	t	struct:vectorize_arg	typeref:typename:conditional_t<vectorize,array_t<remove_cv_t<call_type>,array::forcecast>,T>	access:public
vectorize_arg::vectorize	include/pybind11/numpy.h	/^    static constexpr bool vectorize$/;"	m	struct:vectorize_arg	typeref:typename:bool	access:public
vectorize_extractor	include/pybind11/numpy.h	/^vectorize_helper<Func, Return, Args...> vectorize_extractor(const Func &f, Return (*)(Args...)) /;"	f	typeref:typename:vectorize_helper<Func,Return,Args...>	signature:(const Func & f,Return (*)(Args...))
vectorize_helper	include/pybind11/numpy.h	/^    explicit vectorize_helper(T &&f) : f(std::forward<T>(f)) {}$/;"	f	struct:vectorize_helper	access:public	signature:(T && f)
vectorize_helper	include/pybind11/numpy.h	/^struct vectorize_helper {$/;"	s
vectorize_helper::N	include/pybind11/numpy.h	/^    static constexpr size_t N = sizeof...(Args);$/;"	m	struct:vectorize_helper	typeref:typename:size_t	access:public
vectorize_helper::NVectorized	include/pybind11/numpy.h	/^    static constexpr size_t NVectorized = constexpr_sum(vectorize_arg<Args>::vectorize...);$/;"	m	struct:vectorize_helper	typeref:typename:size_t	access:public
vectorize_helper::apply_broadcast	include/pybind11/numpy.h	/^    void apply_broadcast(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void	access:private	signature:(std::array<buffer_info,NVectorized> & buffers,std::array<void *,N> & params,Return * out,size_t size,const std::vector<ssize_t> & output_shape,index_sequence<Index...>,index_sequence<VIndex...>,index_sequence<BIndex...>)
vectorize_helper::apply_trivial	include/pybind11/numpy.h	/^    void apply_trivial(std::array<buffer_info, NVectorized> &buffers,$/;"	f	struct:vectorize_helper	typeref:typename:void	access:private	signature:(std::array<buffer_info,NVectorized> & buffers,std::array<void *,N> & params,Return * out,size_t size,index_sequence<Index...>,index_sequence<VIndex...>,index_sequence<BIndex...>)
vectorize_helper::arg_call_types	include/pybind11/numpy.h	/^    using arg_call_types = std::tuple<typename vectorize_arg<Args>::call_type...>;$/;"	t	struct:vectorize_helper	typeref:typename:std::tuple<typename vectorize_arg<Args>::call_type...>	access:private
vectorize_helper::f	include/pybind11/numpy.h	/^    remove_reference_t<Func> f;$/;"	m	struct:vectorize_helper	typeref:typename:remove_reference_t<Func>	access:private
vectorize_helper::operator ()	include/pybind11/numpy.h	/^    object operator()(typename vectorize_arg<Args>::type... args) {$/;"	f	struct:vectorize_helper	typeref:typename:object	access:public	signature:(typename vectorize_arg<Args>::type...args)
vectorize_helper::param_n_t	include/pybind11/numpy.h	/^    using param_n_t = typename std::tuple_element<Index, arg_call_types>::type;$/;"	t	struct:vectorize_helper	typeref:typename:std::tuple_element<Index,arg_call_types>::type	access:private
vectorize_helper::returned_array	include/pybind11/numpy.h	/^    using returned_array = vectorize_returned_array<Func, Return, Args...>;$/;"	t	struct:vectorize_helper	typeref:typename:vectorize_returned_array<Func,Return,Args...>	access:private
vectorize_helper::run	include/pybind11/numpy.h	/^    object run(typename vectorize_arg<Args>::type &...args,$/;"	f	struct:vectorize_helper	typeref:typename:object	access:private	signature:(typename vectorize_arg<Args>::type &...args,index_sequence<Index...> i_seq,index_sequence<VIndex...> vi_seq,index_sequence<BIndex...> bi_seq)
vectorize_helper::vectorize_helper	include/pybind11/numpy.h	/^    explicit vectorize_helper(T &&f) : f(std::forward<T>(f)) {}$/;"	f	struct:vectorize_helper	access:public	signature:(T && f)
vectorize_returned_array	include/pybind11/numpy.h	/^struct vectorize_returned_array {$/;"	s
vectorize_returned_array	include/pybind11/numpy.h	/^struct vectorize_returned_array<Func, void, Args...> {$/;"	s
vectorize_returned_array::Type	include/pybind11/numpy.h	/^    using Type = array_t<Return>;$/;"	t	struct:vectorize_returned_array	typeref:typename:array_t<Return>	access:public
vectorize_returned_array::Type	include/pybind11/numpy.h	/^    using Type = none;$/;"	t	struct:vectorize_returned_array	typeref:typename:none	access:public
vectorize_returned_array::call	include/pybind11/numpy.h	/^    static Return call(Func &f, Args &...args) { return f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Return	access:public	signature:(Func & f,Args &...args)
vectorize_returned_array::call	include/pybind11/numpy.h	/^    static detail::void_type call(Func &f, Args &...args) {$/;"	f	struct:vectorize_returned_array	typeref:typename:detail::void_type	access:public	signature:(Func & f,Args &...args)
vectorize_returned_array::call	include/pybind11/numpy.h	/^    static void call(Return *out, size_t i, Func &f, Args &...args) { out[i] = f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:void	access:public	signature:(Return * out,size_t i,Func & f,Args &...args)
vectorize_returned_array::call	include/pybind11/numpy.h	/^    static void call(void *, size_t, Func &f, Args &...args) { f(args...); }$/;"	f	struct:vectorize_returned_array	typeref:typename:void	access:public	signature:(void *,size_t,Func & f,Args &...args)
vectorize_returned_array::create	include/pybind11/numpy.h	/^    static Type create(broadcast_trivial trivial, const std::vector<ssize_t> &shape) {$/;"	f	struct:vectorize_returned_array	typeref:typename:Type	access:public	signature:(broadcast_trivial trivial,const std::vector<ssize_t> & shape)
vectorize_returned_array::create	include/pybind11/numpy.h	/^    static Type create(broadcast_trivial, const std::vector<ssize_t> &) { return none(); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Type	access:public	signature:(broadcast_trivial,const std::vector<ssize_t> &)
vectorize_returned_array::mutable_data	include/pybind11/numpy.h	/^    static Return *mutable_data(Type &array) { return array.mutable_data(); }$/;"	f	struct:vectorize_returned_array	typeref:typename:Return *	access:public	signature:(Type & array)
vectorize_returned_array::mutable_data	include/pybind11/numpy.h	/^    static void *mutable_data(Type &) { return nullptr; }$/;"	f	struct:vectorize_returned_array	typeref:typename:void *	access:public	signature:(Type &)
version	docs/conf.py	/^version = loc["__version__"]$/;"	v	access:public
version	setup.py	/^version = loc["__version__"]$/;"	v	access:public
version_hex	setup.py	/^version_hex = matches.get("HEX", "MISSING")$/;"	v	access:public
version_info	pybind11/_version.py	/^version_info = tuple(_to_int(s) for s in __version__.split("."))$/;"	v	access:public
vh	include/pybind11/detail/type_caster_base.h	/^    void **vh = nullptr;$/;"	m	struct:value_and_holder	typeref:typename:void **	access:public
view	include/pybind11/buffer_info.h	/^    Py_buffer *&view() { return m_view; }$/;"	f	struct:buffer_info	typeref:typename:Py_buffer * &	access:public	signature:()
view	include/pybind11/buffer_info.h	/^    Py_buffer *view() const { return m_view; }$/;"	f	struct:buffer_info	typeref:typename:Py_buffer *	access:public	signature:() const
view	include/pybind11/numpy.h	/^    array view(const std::string &dtype) {$/;"	f	class:array	typeref:typename:array	access:public	signature:(const std::string & dtype)
view	tests/test_eigen_matrix.cpp	/^        const Eigen::MatrixXd &view() { return mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd &	file:	access:public	signature:()
viewPtr	tests/test_eigen_matrix.cpp	/^        const Eigen::MatrixXd *viewPtr() { return &mat; }$/;"	f	class:TEST_SUBMODULE::ReturnTester	typeref:typename:const Eigen::MatrixXd *	file:	access:public	signature:()
view_member	tests/test_eigen_tensor.inl	/^    Eigen::TensorMap<Eigen::Tensor<double, 3, Options>> view_member;$/;"	m	struct:CustomExample	typeref:typename:Eigen::TensorMap<Eigen::Tensor<double,3,Options>>	file:	access:public
virtual_and_inheritance	docs/advanced/classes.rst	/^.. _virtual_and_inheritance:$/;"	T	chapter:Overriding virtual functions in Python
virtual_func	tests/test_gil_scoped.cpp	/^    virtual void virtual_func() {}$/;"	f	class:VirtClass	typeref:typename:void	file:	access:public	signature:()
virtual_func	tests/test_gil_scoped.cpp	/^    void virtual_func() override { PYBIND11_OVERRIDE(void, VirtClass, virtual_func, ); }$/;"	f	class:PyVirtClass	typeref:typename:void	file:	access:private	signature:()
virtual_func	tests/test_gil_scoped.py	/^    def virtual_func(self):$/;"	m	class:ExtendedVirtClass	access:public	signature:(self)
visit_helper	include/pybind11/stl.h	/^struct visit_helper {$/;"	s
visit_helper	tests/test_stl.cpp	/^struct visit_helper<boost::variant> {$/;"	s	namespace:PYBIND11_NAMESPACE::detail	file:
visit_helper::call	include/pybind11/stl.h	/^    static auto call(Args &&...args) -> decltype(visit(std::forward<Args>(args)...)) {$/;"	f	struct:visit_helper	typeref:typename:decltype(visit (std::forward<Args> (args)...))	access:public	signature:(Args &&...args)
visitor	tests/test_stl.cpp	/^    struct visitor {$/;"	s	function:TEST_SUBMODULE	file:
void_caster	include/pybind11/cast.h	/^struct void_caster {$/;"	s
void_caster::cast	include/pybind11/cast.h	/^    static handle cast(T, return_value_policy \/* policy *\/, handle \/* parent *\/) {$/;"	f	struct:void_caster	typeref:typename:handle	access:public	signature:(T,return_value_policy,handle)
void_caster::load	include/pybind11/cast.h	/^    bool load(handle src, bool) {$/;"	f	struct:void_caster	typeref:typename:bool	access:public	signature:(handle src,bool)
void_foo	tests/test_class.cpp	/^        virtual void *void_foo() { return static_cast<void *>(&value); }$/;"	f	class:TEST_SUBMODULE::ProtectedB	typeref:typename:void *	file:	access:protected	signature:()
void_foo	tests/test_class.cpp	/^        void *void_foo() override { PYBIND11_OVERRIDE(void *, ProtectedB, void_foo, ); }$/;"	f	class:TEST_SUBMODULE::TrampolineB	typeref:typename:void *	file:	access:public	signature:()
void_t	include/pybind11/detail/common.h	/^using void_t = typename void_t_impl<Ts...>::type;$/;"	t	typeref:typename:void_t_impl<Ts...>::type
void_t	include/pybind11/detail/common.h	/^using void_t = void;$/;"	t	typeref:typename:void
void_t_impl	include/pybind11/detail/common.h	/^struct void_t_impl {$/;"	s
void_t_impl::type	include/pybind11/detail/common.h	/^    using type = void;$/;"	t	struct:void_t_impl	typeref:typename:void	access:public
void_type	include/pybind11/detail/common.h	/^struct void_type {};$/;"	s
vtype	include/pybind11/stl_bind.h	/^    using vtype = typename Vector::value_type;$/;"	t	function:PYBIND11_NAMESPACE_END	typeref:typename:Vector::value_type
w	tests/test_stl_binders.cpp	/^        bool w;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:bool	file:	access:public
w	tests/test_stl_binders.cpp	/^        bool w;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:bool	file:	access:public
weakref	include/pybind11/pytypes.h	/^class weakref : public object {$/;"	c	inherits:object
weakref::PYBIND11_OBJECT_CVT_DEFAULT	include/pybind11/pytypes.h	/^    PYBIND11_OBJECT_CVT_DEFAULT(weakref, object, PyWeakref_Check, raw_weakref)$/;"	f	class:weakref	access:public	signature:(weakref,object,PyWeakref_Check,raw_weakref)
weakref::raw_weakref	include/pybind11/pytypes.h	/^    static PyObject *raw_weakref(PyObject *o) { return PyWeakref_NewRef(o, nullptr); }$/;"	f	class:weakref	typeref:typename:PyObject *	access:private	signature:(PyObject * o)
weakrefs	include/pybind11/detail/common.h	/^    PyObject *weakrefs;$/;"	m	struct:instance	typeref:typename:PyObject *	access:public
what	include/pybind11/pybind11.h	/^inline const char *error_already_set::what() const noexcept {$/;"	f	class:error_already_set	typeref:typename:const char *	signature:() const
what	include/pybind11/pytypes.h	/^    const char *what() const noexcept override;$/;"	p	class:error_already_set	typeref:typename:const char *	access:public	signature:() const
what	tests/local_bindings.h	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:LocalException	typeref:typename:const char *	access:public	signature:() const
what	tests/local_bindings.h	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:LocalSimpleException	typeref:typename:const char *	access:public	signature:() const
what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException	typeref:typename:const char *	file:	access:public	signature:() const
what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException2	typeref:typename:const char *	file:	access:public	signature:() const
what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException4	typeref:typename:const char *	file:	access:public	signature:() const
what	tests/test_exceptions.cpp	/^    const char *what() const noexcept override { return message.c_str(); }$/;"	f	class:MyException6	typeref:typename:const char *	file:	access:public	signature:() const
what	tests/test_exceptions.cpp	/^    virtual const char *what() const noexcept { return message.c_str(); }$/;"	f	class:MyException3	typeref:typename:const char *	file:	access:public	signature:() const
wide_char_arg_deleter	include/pybind11/embed.h	/^struct wide_char_arg_deleter {$/;"	s
wide_char_arg_deleter::operator ()	include/pybind11/embed.h	/^    void operator()(wchar_t *ptr) const {$/;"	f	struct:wide_char_arg_deleter	typeref:typename:void	access:public	signature:(wchar_t * ptr) const
widen_chars	include/pybind11/embed.h	/^inline wchar_t *widen_chars(const char *safe_arg) {$/;"	f	typeref:typename:wchar_t *	signature:(const char * safe_arg)
wrap	tests/test_pickling.cpp	/^void wrap(py::module m) {$/;"	f	namespace:exercise_trampoline	typeref:typename:void	signature:(py::module m)
wrappers	docs/advanced/pycpp/object.rst	/^.. _wrappers:$/;"	T	title:Python types
writeable	include/pybind11/numpy.h	/^    bool writeable() const {$/;"	f	class:array	typeref:typename:bool	access:public	signature:() const
x	tests/test_numpy_dtypes.cpp	/^        bool x;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:bool	file:	access:public
x	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:	access:private
x	tests/test_stl_binders.cpp	/^        uint32_t x;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:uint32_t	file:	access:public
x	tests/test_stl_binders.cpp	/^        uint32_t x;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:uint32_t	file:	access:public
x_opt	tools/pybind11Common.cmake	/^      set(x_opt -x)$/;"	v	function:pybind11_strip
xfail_strict	tests/pytest.ini	/^xfail_strict = True$/;"	k	section:pytest
xlink	docs/pybind11_vs_boost_python1.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" width/;"	n	uri:http://www.w3.org/1999/xlink
xlink	docs/pybind11_vs_boost_python2.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" width/;"	n	uri:http://www.w3.org/1999/xlink
xml	docs/Makefile	/^xml:$/;"	t
y	tests/test_numpy_dtypes.cpp	/^        uint32_t y;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:uint32_t	file:	access:public
y	tests/test_operator_overloading.cpp	/^    float x, y;$/;"	m	class:Vector2	typeref:typename:float	file:	access:private
y	tests/test_stl_binders.cpp	/^        double y;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:double	file:	access:public
y	tests/test_stl_binders.cpp	/^        double y;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:double	file:	access:public
z	tests/test_numpy_dtypes.cpp	/^        float z;$/;"	m	struct:TEST_SUBMODULE::CompareStruct	typeref:typename:float	file:	access:public
z	tests/test_stl_binders.cpp	/^        bool z;$/;"	m	struct:TEST_SUBMODULE::VStruct	typeref:typename:bool	file:	access:public
z	tests/test_stl_binders.cpp	/^        bool z;$/;"	m	struct:TEST_SUBMODULE::VUndeclStruct	typeref:typename:bool	file:	access:public
~A	tests/test_modules.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::A	file:	access:public	signature:()
~A	tests/test_smart_ptr.cpp	/^        ~A() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::SharedPtrRef::A	file:	access:public	signature:()
~A	tests/test_virtual_functions.cpp	/^        virtual ~A() = default;$/;"	p	struct:TEST_SUBMODULE::A	file:	access:public	signature:()
~A2	tests/test_virtual_functions.cpp	/^        virtual ~A2() = default;$/;"	p	struct:TEST_SUBMODULE::A2	file:	access:public	signature:()
~A_Repeat	tests/test_virtual_functions.cpp	/^    virtual ~A_Repeat() = default;$/;"	p	class:A_Repeat	file:	access:private	signature:()
~A_Tpl	tests/test_virtual_functions.cpp	/^    virtual ~A_Tpl() = default;$/;"	p	class:A_Tpl	file:	access:private	signature:()
~AbstractBase	tests/test_callbacks.cpp	/^        virtual ~AbstractBase() {} \/\/ NOLINT(modernize-use-equals-default)$/;"	f	class:TEST_SUBMODULE::AbstractBase	file:	access:public	signature:()
~AdderBase	tests/test_virtual_functions.cpp	/^    virtual ~AdderBase() = default;$/;"	p	struct:AdderBase	file:	access:public	signature:()
~AliasedHasOpNewDelSize	tests/test_class.cpp	/^        virtual ~AliasedHasOpNewDelSize() = default;$/;"	p	struct:TEST_SUBMODULE::AliasedHasOpNewDelSize	file:	access:public	signature:()
~Animal	tests/test_tagbased_polymorphic.cpp	/^    virtual ~Animal() = default;$/;"	p	struct:Animal	file:	access:public	signature:()
~ArrayClass	tests/test_numpy_array.cpp	/^        ~ArrayClass() { py::print("~ArrayClass()"); }$/;"	f	struct:TEST_SUBMODULE::ArrayClass	file:	access:public	signature:()
~B	tests/test_modules.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::B	file:	access:public	signature:()
~B	tests/test_multiple_inheritance.cpp	/^        virtual ~B() = default;$/;"	p	struct:TEST_SUBMODULE::B	file:	access:public	signature:()
~B	tests/test_smart_ptr.cpp	/^        ~B() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::SharedFromThisRef::B	file:	access:public	signature:()
~Base	tests/test_virtual_functions.cpp	/^    virtual ~Base() = default;$/;"	p	struct:Base	file:	access:public	signature:()
~BaseClass	tests/test_class.cpp	/^        virtual ~BaseClass() = default;$/;"	p	struct:TEST_SUBMODULE::BaseClass	file:	access:public	signature:()
~BreaksBase	tests/test_class.cpp	/^    virtual ~BreaksBase() = default;$/;"	p	class:BreaksBase	file:	access:public	signature:()
~C	tests/test_smart_ptr.cpp	/^    ~C() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::C	file:	access:public	signature:()
~Child	tests/test_call_policies.cpp	/^        ~Child() { py::print("Releasing child."); }$/;"	f	class:TEST_SUBMODULE::Child	file:	access:public	signature:()
~CopyOnlyInt	tests/test_copy_move.cpp	/^    ~CopyOnlyInt() { print_destroyed(this); }$/;"	f	class:CopyOnlyInt	file:	access:public	signature:()
~CppCallable	tests/test_callbacks.cpp	/^        ~CppCallable() { track_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::CppCallable	file:	access:public	signature:()
~CustomAutoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoGIL() { PyGILState_Release(gstate); }$/;"	f	struct:__anonf105cff20111::CustomAutoGIL	file:	access:public	signature:()
~CustomAutoNoGIL	tests/cross_module_gil_utils.cpp	/^    ~CustomAutoNoGIL() { PyEval_RestoreThread(save); }$/;"	f	struct:__anonf105cff20111::CustomAutoNoGIL	file:	access:public	signature:()
~CustomGuard	tests/test_call_policies.cpp	/^    ~CustomGuard() { enabled = false; }$/;"	f	struct:CustomGuard	file:	access:public	signature:()
~DependentGuard	tests/test_call_policies.cpp	/^    ~DependentGuard() { enabled = false; }$/;"	f	struct:DependentGuard	file:	access:public	signature:()
~DestructionTester	tests/test_custom_type_casters.cpp	/^    ~DestructionTester() { print_destroyed(this); }$/;"	f	class:DestructionTester	file:	access:public	signature:()
~DynamicClass	tests/test_methods_and_attributes.cpp	/^        ~DynamicClass() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::DynamicClass	file:	access:public	signature:()
~ElementBase	tests/test_smart_ptr.cpp	/^    virtual ~ElementBase() = default; \/* Force creation of virtual table *\/$/;"	p	struct:__anond975f9d30111::ElementBase	file:	access:public	signature:()
~ExampleMandA	tests/test_methods_and_attributes.cpp	/^    ~ExampleMandA() { print_destroyed(this); }$/;"	f	class:ExampleMandA	file:	access:public	signature:()
~ExampleVirt	tests/test_virtual_functions.cpp	/^    virtual ~ExampleVirt() { print_destroyed(this); }$/;"	f	class:ExampleVirt	file:	access:public	signature:()
~I801B1	tests/test_multiple_inheritance.cpp	/^    virtual ~I801B1() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B1	file:	access:public	signature:()
~I801B2	tests/test_multiple_inheritance.cpp	/^    virtual ~I801B2() = default;$/;"	p	struct:__anon9ca8d76c0111::I801B2	file:	access:public	signature:()
~I801B3	tests/test_multiple_inheritance.cpp	/^        virtual ~I801B3() = default;$/;"	p	struct:TEST_SUBMODULE::I801B3	file:	access:public	signature:()
~IntStruct	tests/test_thread.cpp	/^    ~IntStruct() { value = -value; }$/;"	f	struct:__anon837ffe4f0111::IntStruct	file:	access:public	signature:()
~MVB	tests/test_multiple_inheritance.cpp	/^        virtual ~MVB() = default;$/;"	p	struct:TEST_SUBMODULE::MVB	file:	access:public	signature:()
~Matrix	tests/test_buffers.cpp	/^        ~Matrix() {$/;"	f	class:TEST_SUBMODULE::Matrix	file:	access:public	signature:()
~Movable	tests/test_virtual_functions.cpp	/^    ~Movable() { print_destroyed(this); }$/;"	f	class:Movable	file:	access:public	signature:()
~MoveOnlyInt	tests/test_copy_move.cpp	/^    ~MoveOnlyInt() { print_destroyed(this); }$/;"	f	class:MoveOnlyInt	file:	access:public	signature:()
~MoveOrCopyInt	tests/test_copy_move.cpp	/^    ~MoveOrCopyInt() { print_destroyed(this); }$/;"	f	class:MoveOrCopyInt	file:	access:public	signature:()
~MyException3	tests/test_exceptions.cpp	/^    virtual ~MyException3() = default;$/;"	p	class:MyException3	file:	access:public	signature:()
~MyObject1	tests/test_smart_ptr.cpp	/^    ~MyObject1() override { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject1	file:	access:protected	signature:()
~MyObject2	tests/test_smart_ptr.cpp	/^    virtual ~MyObject2() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject2	file:	access:public	signature:()
~MyObject3	tests/test_smart_ptr.cpp	/^    virtual ~MyObject3() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject3	file:	access:public	signature:()
~MyObject4	tests/test_smart_ptr.cpp	/^    ~MyObject4() {$/;"	f	class:__anond975f9d30111::MyObject4	file:	access:private	signature:()
~MyObject4a	tests/test_smart_ptr.cpp	/^    virtual ~MyObject4a() {$/;"	f	class:__anond975f9d30111::MyObject4a	file:	access:protected	signature:()
~MyObject4b	tests/test_smart_ptr.cpp	/^    ~MyObject4b() override { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject4b	file:	access:public	signature:()
~MyObject5	tests/test_smart_ptr.cpp	/^    ~MyObject5() { print_destroyed(this); }$/;"	f	class:__anond975f9d30111::MyObject5	file:	access:public	signature:()
~NCVirt	tests/test_virtual_functions.cpp	/^    virtual ~NCVirt() = default;$/;"	p	class:NCVirt	file:	access:public	signature:()
~NoConstructor	tests/test_class.cpp	/^        ~NoConstructor() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::NoConstructor	file:	access:public	signature:()
~NoConstructorNew	tests/test_class.cpp	/^        ~NoConstructorNew() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::NoConstructorNew	file:	access:public	signature:()
~NoisyAlloc	tests/test_factory_constructors.cpp	/^        ~NoisyAlloc() { py::print("~NoisyAlloc()"); }$/;"	f	struct:TEST_SUBMODULE::NoisyAlloc	file:	access:public	signature:()
~NonCopyable	tests/test_virtual_functions.cpp	/^    ~NonCopyable() { print_destroyed(this); }$/;"	f	class:NonCopyable	file:	access:public	signature:()
~NonCopyableInt	tests/test_sequences_and_iterators.cpp	/^    ~NonCopyableInt() = default;$/;"	p	class:NonCopyableInt	file:	access:public	signature:()
~Object	tests/object.h	/^    virtual ~Object() { print_destroyed(this); }$/;"	f	class:Object	access:protected	signature:()
~OptionalProperties	tests/test_stl.cpp	/^    ~OptionalProperties() {$/;"	f	class:OptionalProperties	file:	access:public	signature:()
~OverrideTest	tests/test_virtual_functions.cpp	/^        virtual ~OverrideTest() = default;$/;"	p	class:TEST_SUBMODULE::OverrideTest	file:	access:public	signature:()
~Parent	tests/test_call_policies.cpp	/^        ~Parent() { py::print("Releasing parent."); }$/;"	f	class:TEST_SUBMODULE::Parent	file:	access:public	signature:()
~Payload	tests/test_callbacks.cpp	/^        ~Payload() { print_destroyed(this); }$/;"	f	struct:TEST_SUBMODULE::Payload	file:	access:public	signature:()
~Placeholder	tests/test_stl.cpp	/^        ~Placeholder() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::Placeholder	file:	access:public	signature:()
~ProtectedB	tests/test_class.cpp	/^        virtual ~ProtectedB() = default;$/;"	p	class:TEST_SUBMODULE::ProtectedB	file:	access:public	signature:()
~PublicistB	tests/test_class.cpp	/^        ~PublicistB() override{}; \/\/ NOLINT(modernize-use-equals-default)$/;"	f	class:TEST_SUBMODULE::PublicistB	file:	access:public	signature:()
~PyA	tests/test_virtual_functions.cpp	/^        ~PyA() override { py::print("PyA.~PyA()"); }$/;"	f	struct:TEST_SUBMODULE::PyA	file:	access:public	signature:()
~PyA2	tests/test_virtual_functions.cpp	/^        ~PyA2() override { py::print("PyA2.~PyA2()"); }$/;"	f	struct:TEST_SUBMODULE::PyA2	file:	access:public	signature:()
~PyPrintDestructor	tests/test_class.cpp	/^        ~PyPrintDestructor() { py::print("Print from destructor"); }$/;"	f	struct:TEST_SUBMODULE::PyPrintDestructor	file:	access:public	signature:()
~PyTF6	tests/test_factory_constructors.cpp	/^    ~PyTF6() override { print_destroyed(this); }$/;"	f	class:PyTF6	file:	access:public	signature:()
~PyTF7	tests/test_factory_constructors.cpp	/^    ~PyTF7() override { print_destroyed(this); }$/;"	f	class:PyTF7	file:	access:public	signature:()
~PythonAlreadySetInDestructor	tests/test_exceptions.cpp	/^    ~PythonAlreadySetInDestructor() {$/;"	f	struct:PythonAlreadySetInDestructor	file:	access:public	signature:()
~PythonCallInDestructor	tests/test_exceptions.cpp	/^    ~PythonCallInDestructor() { d["good"] = true; }$/;"	f	struct:PythonCallInDestructor	file:	access:public	signature:()
~ReturnTester	tests/test_eigen_matrix.cpp	/^        ~ReturnTester() { print_destroyed(this); }$/;"	f	class:TEST_SUBMODULE::ReturnTester	file:	access:public	signature:()
~Sequence	tests/test_sequences_and_iterators.cpp	/^        ~Sequence() {$/;"	f	class:TEST_SUBMODULE::Sequence	file:	access:public	signature:()
~SharedFromThisVBase	tests/test_smart_ptr.cpp	/^    virtual ~SharedFromThisVBase() = default;$/;"	p	struct:__anond975f9d30111::SharedFromThisVBase	file:	access:public	signature:()
~SimpleBase	tests/test_pickling.cpp	/^    virtual ~SimpleBase() = default;$/;"	p	struct:exercise_trampoline::SimpleBase	file:	access:public	signature:()
~TestFactory1	tests/test_factory_constructors.cpp	/^    ~TestFactory1() { print_destroyed(this); }$/;"	f	class:TestFactory1	file:	access:public	signature:()
~TestFactory2	tests/test_factory_constructors.cpp	/^    ~TestFactory2() { print_destroyed(this); }$/;"	f	class:TestFactory2	file:	access:public	signature:()
~TestFactory3	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory3() { print_destroyed(this); }$/;"	f	class:TestFactory3	file:	access:public	signature:()
~TestFactory4	tests/test_factory_constructors.cpp	/^    ~TestFactory4() override { print_destroyed(this); }$/;"	f	class:TestFactory4	file:	access:public	signature:()
~TestFactory5	tests/test_factory_constructors.cpp	/^    ~TestFactory5() override { print_destroyed(this); }$/;"	f	class:TestFactory5	file:	access:public	signature:()
~TestFactory6	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory6() { print_destroyed(this); }$/;"	f	class:TestFactory6	file:	access:public	signature:()
~TestFactory7	tests/test_factory_constructors.cpp	/^    virtual ~TestFactory7() { print_destroyed(this); }$/;"	f	class:TestFactory7	file:	access:public	signature:()
~TestThread	tests/test_iostream.cpp	/^    ~TestThread() { delete t_; }$/;"	f	struct:TestThread	file:	access:public	signature:()
~TypeForHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::TypeForHolderWithAddressOf	file:	access:public	signature:()
~TypeForMoveOnlyHolderWithAddressOf	tests/test_smart_ptr.cpp	/^    ~TypeForMoveOnlyHolderWithAddressOf() { print_destroyed(this); }$/;"	f	struct:__anond975f9d30111::TypeForMoveOnlyHolderWithAddressOf	file:	access:public	signature:()
~Vector2	tests/test_operator_overloading.cpp	/^    ~Vector2() { print_destroyed(this); }$/;"	f	class:Vector2	file:	access:public	signature:()
~VirtClass	tests/test_gil_scoped.cpp	/^    virtual ~VirtClass() = default;$/;"	p	class:VirtClass	file:	access:public	signature:()
~Widget	tests/test_embed/test_interpreter.cpp	/^    virtual ~Widget() = default;$/;"	p	class:Widget	file:	access:public	signature:()
~buffer_info	include/pybind11/buffer_info.h	/^    ~buffer_info() {$/;"	f	struct:buffer_info	access:public	signature:()
~error_scope	include/pybind11/detail/common.h	/^    ~error_scope() { PyErr_Restore(type, value, trace); }$/;"	f	struct:error_scope	access:public	signature:()
~func_handle	include/pybind11/functional.h	/^            ~func_handle() {$/;"	f	struct:type_caster::load::func_handle	access:public	signature:()
~gil_scoped_acquire	include/pybind11/gil.h	/^    PYBIND11_NOINLINE ~gil_scoped_acquire() {$/;"	f	class:gil_scoped_acquire	typeref:typename:PYBIND11_NOINLINE	access:public	signature:()
~gil_scoped_acquire_local	include/pybind11/detail/internals.h	/^        ~gil_scoped_acquire_local() { PyGILState_Release(state); }$/;"	f	struct:get_internals::gil_scoped_acquire_local	access:public	signature:()
~gil_scoped_release	include/pybind11/gil.h	/^    ~gil_scoped_release() {$/;"	f	class:gil_scoped_release	access:public	signature:()
~internals	include/pybind11/detail/internals.h	/^    ~internals() {$/;"	f	struct:internals	access:public	signature:()
~items_view	include/pybind11/stl_bind.h	/^    virtual ~items_view() = default;$/;"	p	struct:items_view	access:public	signature:()
~keys_view	include/pybind11/stl_bind.h	/^    virtual ~keys_view() = default;$/;"	p	struct:keys_view	access:public	signature:()
~loader_life_support	include/pybind11/detail/type_caster_base.h	/^    ~loader_life_support() {$/;"	f	class:loader_life_support	access:public	signature:()
~object	include/pybind11/pytypes.h	/^    ~object() { dec_ref(); }$/;"	f	class:object	access:public	signature:()
~options	include/pybind11/options.h	/^    ~options() { global_state() = previous_state; }$/;"	f	class:options	access:public	signature:()
~pythonbuf	include/pybind11/iostream.h	/^    ~pythonbuf() override { _sync(); }$/;"	f	class:pythonbuf	access:public	signature:()
~ref	tests/object.h	/^    ~ref() {$/;"	f	class:ref	access:public	signature:()
~scope_exit	tests/test_embed/test_interpreter.cpp	/^    ~scope_exit() {$/;"	f	struct:scope_exit	file:	access:public	signature:()
~scoped_interpreter	include/pybind11/embed.h	/^    ~scoped_interpreter() {$/;"	f	class:scoped_interpreter	access:public	signature:()
~scoped_ostream_redirect	include/pybind11/iostream.h	/^    ~scoped_ostream_redirect() { costream.rdbuf(old); }$/;"	f	class:scoped_ostream_redirect	access:public	signature:()
~set_flag	include/pybind11/pybind11.h	/^        ~set_flag() { flag = false; }$/;"	f	struct:implicitly_convertible::set_flag	access:public	signature:()
~strdup_guard	include/pybind11/pybind11.h	/^        ~strdup_guard() {$/;"	f	class:cpp_function::strdup_guard	access:public	signature:()
~test_override_cache_helper	tests/test_embed/test_interpreter.cpp	/^    virtual ~test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
~test_override_cache_helper	tests/test_virtual_functions.cpp	/^    virtual ~test_override_cache_helper() = default;$/;"	p	class:test_override_cache_helper	file:	access:public	signature:()
~values_view	include/pybind11/stl_bind.h	/^    virtual ~values_view() = default;$/;"	p	struct:values_view	access:public	signature:()
